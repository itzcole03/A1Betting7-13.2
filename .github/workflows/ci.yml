name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *' # nightly run at 02:00 UTC

jobs:
  fast-tests:
    name: Fast tests (PR / push)
    runs-on: ubuntu-latest
    env:
      USE_FREE_INGESTION: 'false'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run ingestion-related unit tests
        run: |
          # Fast feedback: only run the ingestion unit tests modified/related to this feature
          python -m pytest tests/test_cache.py tests/test_scheduler_runner.py -q

  nightly-full-suite:
    name: Nightly full backend test suite
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    env:
      USE_FREE_INGESTION: 'false'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run full backend tests
        run: |
          python -m pytest -q
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      USE_FREE_INGESTION: 'false'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      - name: Run backend tests
        run: |
          cd backend
          pytest -q
      - name: Optional frontend typecheck
        run: |
          echo "Skipping frontend type-check in default CI. Run locally in frontend/ if needed."
name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Quality Checks
  frontend-quality:
    name: Frontend Quality & Tests
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Type checking
        run: npm run type-check
        
      - name: Linting
        run: npm run lint
        
      - name: Format checking
        run: npm run format:check
        
      - name: Unit tests
        run: npm run test:ci
        
      - name: Build application
        run: npm run build
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
            frontend/reports/
            
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

  # Backend Quality Checks  
  backend-quality:
    name: Backend Quality & Tests
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Code formatting check
        run: black --check .
        
      - name: Type checking
        run: mypy backend/ --ignore-missing-imports
        
      - name: Linting
        run: flake8 backend/
        
      - name: Security check
        run: bandit -r backend/ -f json -o security-report.json
        continue-on-error: true
        
      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          TESTING: true
          DEV_LEAN_MODE: true
          RATE_LIMIT_ENABLED: false
        run: |
          # Run our comprehensive backend route tests
          cd ..
          python -m pytest tests/backend/routes/ -v --tb=short --asyncio-mode=auto --disable-warnings --junitxml=test-results.xml --cov=backend/routes --cov-report=xml --cov-report=html
          
          # Also run any existing backend tests
          cd backend
          pytest --cov=backend --cov-report=xml --cov-report=html
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            htmlcov/
            coverage.xml
            security-report.json

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: integration_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          
      - name: Start backend server
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/integration_test_db
          REDIS_URL: redis://localhost:6379
        run: |
          cd backend
          python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          
      - name: Run integration tests
        run: |
          cd frontend
          npx playwright test --config=playwright.config.ts
          
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            frontend/playwright-report/
            frontend/test-results/

  # Security Scans
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance Tests
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [frontend-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          
      - name: Install lighthouse
        run: npm install -g @lhci/cli@0.12.x
        
      - name: Run Lighthouse CI
        run: |
          cd frontend
          npm run preview &
          sleep 10
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality, integration-tests, security]
    if: always()
    
    steps:
      - name: Check quality gate
        run: |
          if [[ "${{ needs.frontend-quality.result }}" != "success" ]]; then
            echo "Frontend quality checks failed"
            exit 1
          fi
          if [[ "${{ needs.backend-quality.result }}" != "success" ]]; then
            echo "Backend quality checks failed"  
            exit 1
          fi
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "Integration tests failed"
            exit 1
          fi
          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "Security scans failed"
            exit 1
          fi
          echo "All quality checks passed!"

  # Deployment preparation (only on main branch)
  prepare-deployment:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          
      - name: Create deployment package
        run: |
          tar -czf deployment-package.tar.gz \
            frontend/dist/ \
            backend/ \
            docker-compose.yml \
            Dockerfile*
            
      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment-package.tar.gz
          retention-days: 30
