c10bec83985a761b74b9e4f0e786be6a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildWebSocketUrl = buildWebSocketUrl;
exports.getOrPersistClientId = getOrPersistClientId;
exports.resolveWebSocketBase = resolveWebSocketBase;
exports.validateWebSocketUrl = validateWebSocketUrl;
/**
 * Canonical WebSocket URL Builder
 * Single source of truth for WebSocket URL construction
 */

// Client ID persistence utility
function getOrPersistClientId(storageKey = 'ws_client_id', passedClientId) {
  let clientId = passedClientId;

  // Try to get from storage first
  const storedClientId = window.localStorage.getItem(storageKey);
  const initialFromStorage = !!storedClientId;
  if (!clientId && storedClientId) {
    clientId = storedClientId;
  }

  // Generate new one if none available
  if (!clientId) {
    clientId = `client_${Math.random().toString(36).substr(2, 9)}`;
  }

  // Always persist to storage
  window.localStorage.setItem(storageKey, clientId);

  // Dev-only diagnostic log
  const _import_meta_env = globalThis.importMeta?.env || global.importMeta?.env || (typeof window !== 'undefined' ? window.import?.meta?.env : undefined) || {};
  if (_import_meta_env.DEV) {
    // eslint-disable-next-line no-console
    console.log('[ClientIdDiag]', {
      initialFromStorage,
      passedIn: !!passedClientId,
      finalClientId: clientId
    });
  }
  return clientId;
}

// Environment resolution helper
function resolveWebSocketBase() {
  const _import_meta_env2 = globalThis.importMeta?.env || global.importMeta?.env || (typeof window !== 'undefined' ? window.import?.meta?.env : undefined) || {};
  let baseUrl = _import_meta_env2.VITE_WS_URL;

  // Check for legacy path in environment and sanitize
  if (baseUrl && baseUrl.includes('client_/ws')) {
    // eslint-disable-next-line no-console
    console.warn('[EnvDiag][LegacyInEnv] Legacy WebSocket path detected in environment, sanitizing:', baseUrl);
    baseUrl = baseUrl.replace(/\/client_\/ws.*$/, '');
  }

  // Default fallback
  if (!baseUrl) {
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const host = window.location.hostname;
    const port = host === 'localhost' ? '8000' : window.location.port;
    baseUrl = `${protocol}//${host}${port ? `:${port}` : ''}`;
  }
  return baseUrl;
}

/**
 * Canonical WebSocket URL Builder
 * MUST be used for all WebSocket URL construction
 */
function buildWebSocketUrl(options = {}) {
  const {
    clientId: providedClientId,
    role = 'frontend',
    version = 1,
    baseUrl: providedBaseUrl
  } = options;

  // Resolve base URL
  const baseUrl = providedBaseUrl || resolveWebSocketBase();

  // Runtime-safe import.meta.env accessor for DEV checks inside this function
  const _import_meta_env2 = globalThis.importMeta?.env || global.importMeta?.env || (typeof window !== 'undefined' ? window.import?.meta?.env : undefined) || {};

  // Get or generate client ID
  const clientId = getOrPersistClientId('ws_client_id', providedClientId);
  try {
    // Use URL constructor for robust path building
    const url = new URL('/ws/client', baseUrl);
    url.searchParams.set('client_id', clientId);
    url.searchParams.set('version', String(version));
    url.searchParams.set('role', role);
    const result = url.toString();

    // Defensive assertion - dev only
    if (_import_meta_env2.DEV) {
      if (result.includes('client_/ws')) {
        // eslint-disable-next-line no-console
        console.error('[WSBuildDiag][LegacyDetected]', {
          url: result,
          stack: new Error().stack
        });
        throw new Error('Legacy websocket path constructed after migration');
      }

      // eslint-disable-next-line no-console
      console.log('[WSBuildDiag] Built canonical WebSocket URL:', result);
    }
    return result;
  } catch (error) {
    // Fallback with defensive assertion
    const params = new URLSearchParams();
    params.set('client_id', clientId);
    params.set('version', String(version));
    params.set('role', role);
    const fallbackUrl = `${baseUrl}/ws/client?${params.toString()}`;

    // Defensive assertion on fallback too
    if (_import_meta_env2.DEV && fallbackUrl.includes('client_/ws')) {
      // eslint-disable-next-line no-console
      console.error('[WSBuildDiag][LegacyDetected] Even fallback created legacy path!', {
        url: fallbackUrl,
        error,
        stack: new Error().stack
      });
      throw new Error('Legacy websocket path constructed in fallback after migration');
    }
    if (_import_meta_env2.DEV) {
      // eslint-disable-next-line no-console
      console.warn('[WSBuildDiag] URL constructor failed, using fallback:', fallbackUrl, error);
    }
    return fallbackUrl;
  }
}

// Validate that a URL doesn't contain legacy patterns
function validateWebSocketUrl(url) {
  return !url.includes('client_/ws');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,