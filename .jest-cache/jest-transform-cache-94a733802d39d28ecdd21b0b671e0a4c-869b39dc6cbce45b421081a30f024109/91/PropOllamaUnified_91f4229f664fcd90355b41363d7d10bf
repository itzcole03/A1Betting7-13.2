c1d375cb13d407eef82d236fdcd4d545
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _PropList = _interopRequireDefault(require("./lists/PropList"));
var _jsxRuntime = require("react/jsx-runtime");
const PropOllamaUnified = ({
  projections
}) => {
  const [expandedRowKey, setExpandedRowKey] = _react.default.useState(null);
  const [selectedSport, setSelectedSport] = _react.default.useState('MLB');
  const [visibleCount, setVisibleCount] = _react.default.useState(2);
  const [selectedStatType, setSelectedStatType] = _react.default.useState('Popular');
  const [isLoading, setIsLoading] = _react.default.useState(false);
  const [showEmptyState, setShowEmptyState] = _react.default.useState(false);
  const allProjections = Array.isArray(projections) ? projections : [];
  const useVirtualization = allProjections.length > 100;
  const statTypeOptions = ['Popular', 'Advanced', 'All'];
  const toSnakeCase = str => str.replace(/\s+/g, '_').toLowerCase();
  const visibleProjections = allProjections.filter(proj => {
    // Filter by selected sport
    if (proj.sport && selectedSport && proj.sport !== selectedSport) return false;
    // Filter by stat type
    if (selectedStatType === 'All') return true;
    if (selectedStatType === 'Popular') return true;
    const statLower = proj.stat.toLowerCase();
    const statSnake = toSnakeCase(proj.stat);
    return statLower === selectedStatType.toLowerCase() || statSnake === selectedStatType.toLowerCase();
  }).slice(0, visibleCount);
  _react.default.useEffect(() => {
    setIsLoading(true);
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 500);
    return () => clearTimeout(timer);
  }, [selectedStatType, visibleCount]);
  _react.default.useEffect(() => {
    setShowEmptyState(allProjections.length === 0 || visibleProjections.length === 0);
  }, [allProjections.length, visibleProjections.length]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h1", {
      children: "MLB AI Props"
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      role: "tablist",
      "aria-label": "Sport Tabs",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
        role: "tab",
        "aria-selected": selectedSport === 'MLB',
        onClick: () => setSelectedSport('MLB'),
        children: "MLB"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
        role: "tab",
        "aria-selected": selectedSport === 'NBA',
        onClick: () => setSelectedSport('NBA'),
        children: "NBA"
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
      htmlFor: "stat-type-select",
      children: "Stat Type:"
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("select", {
      id: "stat-type-select",
      "aria-label": "Stat Type:",
      value: selectedStatType,
      onChange: e => setSelectedStatType(e.target.value),
      children: statTypeOptions.map(opt => /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
        value: opt,
        children: opt
      }, opt))
    }), isLoading && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      "data-testid": "loading-overlay",
      children: "Loading..."
    }), showEmptyState ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        "data-testid": "empty-state-banner",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          "data-testid": "empty-state",
          children: "No props available for the selected filters."
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          "data-testid": "empty-props",
          children: "No props found."
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "No props selected."
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        "data-testid": "error-banner",
        "data-error-test-id": "error-banner",
        children: "Error: No props available. The backend returned no data."
      })]
    }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      "data-testid": "prop-cards-container",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_PropList.default, {
        props: visibleProjections,
        loading: isLoading,
        expandedRowKey: expandedRowKey,
        onExpandToggle: setExpandedRowKey,
        onAnalysisRequest: async () => {},
        enhancedAnalysisCache: new Map(),
        loadingAnalysis: new Set(),
        sortBy: selectedStatType,
        searchTerm: '',
        useVirtualization: useVirtualization
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
      type: "button",
      role: "button",
      "aria-label": "View More",
      onClick: () => setVisibleCount(c => Math.min(c + 1, allProjections.length)),
      children: "View More"
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      "data-testid": "bet-slip-container",
      "aria-label": "Bet Slip Container",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h2", {
        id: "bet-slip-heading",
        children: "Bet Slip"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        "aria-labelledby": "bet-slip-heading",
        children: "Slip content goes here."
      })]
    })]
  });
};
var _default = exports.default = PropOllamaUnified;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,