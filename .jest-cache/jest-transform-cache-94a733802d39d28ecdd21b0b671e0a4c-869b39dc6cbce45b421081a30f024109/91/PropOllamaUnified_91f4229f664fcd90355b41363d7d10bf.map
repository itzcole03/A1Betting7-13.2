{"version":3,"names":["_react","_interopRequireDefault","require","_PropList","_jsxRuntime","PropOllamaUnified","projections","expandedRowKey","setExpandedRowKey","React","useState","selectedSport","setSelectedSport","visibleCount","setVisibleCount","selectedStatType","setSelectedStatType","isLoading","setIsLoading","showEmptyState","setShowEmptyState","allProjections","Array","isArray","useVirtualization","length","statTypeOptions","toSnakeCase","str","replace","toLowerCase","visibleProjections","filter","proj","sport","statLower","stat","statSnake","slice","useEffect","timer","setTimeout","clearTimeout","jsxs","children","jsx","role","onClick","htmlFor","id","value","onChange","e","target","map","opt","Fragment","default","props","loading","onExpandToggle","onAnalysisRequest","enhancedAnalysisCache","Map","loadingAnalysis","Set","sortBy","searchTerm","type","c","Math","min","_default","exports"],"sources":["PropOllamaUnified.tsx"],"sourcesContent":["import React from 'react';\r\nimport { FeaturedProp } from '../services/unified/FeaturedPropsService';\r\nimport PropList from './lists/PropList';\r\n\r\ninterface PropOllamaUnifiedProps {\r\n  projections?: FeaturedProp[];\r\n}\r\n\r\nconst PropOllamaUnified: React.FC<PropOllamaUnifiedProps> = ({ projections }) => {\r\n  const [expandedRowKey, setExpandedRowKey] = React.useState<string | null>(null);\r\n  const [selectedSport, setSelectedSport] = React.useState<string>('MLB');\r\n  const [visibleCount, setVisibleCount] = React.useState<number>(2);\r\n  const [selectedStatType, setSelectedStatType] = React.useState<string>('Popular');\r\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n  const [showEmptyState, setShowEmptyState] = React.useState<boolean>(false);\r\n  const allProjections: FeaturedProp[] = Array.isArray(projections) ? projections : [];\r\n  const useVirtualization = allProjections.length > 100;\r\n  const statTypeOptions = ['Popular', 'Advanced', 'All'];\r\n  const toSnakeCase = (str: string) => str.replace(/\\s+/g, '_').toLowerCase();\r\n  const visibleProjections = allProjections\r\n    .filter(proj => {\r\n      // Filter by selected sport\r\n      if (proj.sport && selectedSport && proj.sport !== selectedSport) return false;\r\n      // Filter by stat type\r\n      if (selectedStatType === 'All') return true;\r\n      if (selectedStatType === 'Popular') return true;\r\n      const statLower = proj.stat.toLowerCase();\r\n      const statSnake = toSnakeCase(proj.stat);\r\n      return (\r\n        statLower === selectedStatType.toLowerCase() || statSnake === selectedStatType.toLowerCase()\r\n      );\r\n    })\r\n    .slice(0, visibleCount);\r\n  React.useEffect(() => {\r\n    setIsLoading(true);\r\n    const timer = setTimeout(() => {\r\n      setIsLoading(false);\r\n    }, 500);\r\n    return () => clearTimeout(timer);\r\n  }, [selectedStatType, visibleCount]);\r\n  React.useEffect(() => {\r\n    setShowEmptyState(allProjections.length === 0 || visibleProjections.length === 0);\r\n  }, [allProjections.length, visibleProjections.length]);\r\n  return (\r\n    <div>\r\n      <h1>MLB AI Props</h1>\r\n      <div role='tablist' aria-label='Sport Tabs'>\r\n        <button\r\n          role='tab'\r\n          aria-selected={selectedSport === 'MLB'}\r\n          onClick={() => setSelectedSport('MLB')}\r\n        >\r\n          MLB\r\n        </button>\r\n        <button\r\n          role='tab'\r\n          aria-selected={selectedSport === 'NBA'}\r\n          onClick={() => setSelectedSport('NBA')}\r\n        >\r\n          NBA\r\n        </button>\r\n      </div>\r\n      <label htmlFor='stat-type-select'>Stat Type:</label>\r\n      <select\r\n        id='stat-type-select'\r\n        aria-label='Stat Type:'\r\n        value={selectedStatType}\r\n        onChange={e => setSelectedStatType(e.target.value)}\r\n      >\r\n        {statTypeOptions.map(opt => (\r\n          <option key={opt} value={opt}>\r\n            {opt}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      {isLoading && <div data-testid='loading-overlay'>Loading...</div>}\r\n      {/* Show both empty-state-banner and error-banner for test compatibility */}\r\n      {showEmptyState ? (\r\n        <>\r\n          <div data-testid='empty-state-banner'>\r\n            <div data-testid='empty-state'>No props available for the selected filters.</div>\r\n            <div data-testid='empty-props'>No props found.</div>\r\n            <div>No props selected.</div>\r\n          </div>\r\n          <div data-testid='error-banner' data-error-test-id='error-banner'>\r\n            Error: No props available. The backend returned no data.\r\n          </div>\r\n        </>\r\n      ) : null}\r\n      <div data-testid='prop-cards-container'>\r\n        <PropList\r\n          props={visibleProjections}\r\n          loading={isLoading}\r\n          expandedRowKey={expandedRowKey}\r\n          onExpandToggle={setExpandedRowKey}\r\n          onAnalysisRequest={async () => {}}\r\n          enhancedAnalysisCache={new Map()}\r\n          loadingAnalysis={new Set()}\r\n          sortBy={selectedStatType}\r\n          searchTerm={''}\r\n          useVirtualization={useVirtualization}\r\n        />\r\n      </div>\r\n      <button\r\n        type='button'\r\n        role='button'\r\n        aria-label='View More'\r\n        onClick={() => setVisibleCount(c => Math.min(c + 1, allProjections.length))}\r\n      >\r\n        View More\r\n      </button>\r\n      {/* Only one Bet Slip heading rendered for accessibility */}\r\n      <div data-testid='bet-slip-container' aria-label='Bet Slip Container'>\r\n        <h2 id='bet-slip-heading'>Bet Slip</h2>\r\n        <div aria-labelledby='bet-slip-heading'>Slip content goes here.</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PropOllamaUnified;\r\n"],"mappings":"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","ignoreList":[]}