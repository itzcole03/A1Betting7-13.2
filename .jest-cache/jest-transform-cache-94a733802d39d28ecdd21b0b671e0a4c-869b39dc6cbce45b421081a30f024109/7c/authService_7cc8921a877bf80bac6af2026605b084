9429a5555e5e3698dc0fe3ac6f8f924e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._authService = void 0;
var _axios = _interopRequireDefault(require("axios"));
// frontend/src/services/AuthService.ts

const _API_URL = 'http://localhost:8000/api/auth';
class AuthService {
  constructor() {
    this.user = null;
    this.token = null;
    this.requiresPasswordChangeFlag = false;
    this.loadFromLocalStorage();
  }
  loadFromLocalStorage() {
    const _token = localStorage.getItem('token');
    const _user = localStorage.getItem('user');
    if (_token && _user) {
      this.token = _token;
      this.user = JSON.parse(_user);
      _axios.default.defaults.headers.common['Authorization'] = `Bearer ${this.token}`;
    }
  }
  saveToLocalStorage(token, user) {
    this.token = token;
    this.user = user;
    localStorage.setItem('token', token);
    localStorage.setItem('user', JSON.stringify(user));
    _axios.default.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  }
  clearLocalStorage() {
    this.token = null;
    this.user = null;
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    delete _axios.default.defaults.headers.common['Authorization'];
  }
  isAuthenticated() {
    return !!this.token;
  }
  getUser() {
    return this.user;
  }
  isAdmin() {
    return this.user?.role === 'admin';
  }
  requiresPasswordChange() {
    return this.requiresPasswordChangeFlag;
  }
  async login(email, password) {
    try {
      const _response = await _axios.default.post(`${_API_URL}/login`, {
        email,
        password
      }, {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      if (_response.data.access_token) {
        const _user = {
          id: '1',
          email,
          role: 'admin'
        };
        this.saveToLocalStorage(_response.data.access_token, _user);
        return {
          success: true,
          user: _user,
          requiresPasswordChange: false
        };
      }
      return {
        success: false,
        message: 'Invalid credentials'
      };
    } catch (error) {
      console.error('Login API error:', error);
      return {
        success: false,
        message: error.message || 'Login failed due to API error'
      };
    }
  }
  async logout() {
    this.clearLocalStorage();
    return Promise.resolve();
  }
  async changePassword(data) {
    try {
      console.log(`Changing password for user ${data.userId}`);
      this.requiresPasswordChangeFlag = false;
      return {
        success: true
      };
    } catch (error) {
      console.error('Change password API error:', error);
      return {
        success: false,
        message: error.message || 'Password change failed due to API error'
      };
    }
  }
}
const _authService = exports._authService = new AuthService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,