50839c23013648261fb78bf506e61863
"use strict";

// Mock getEnvVar to prevent ReferenceError in OllamaService

// Always mock backendDiscovery properly
_getJestObj().mock('../../utils/getEnvVar', () => ({
  getEnvVar: jest.fn(() => 'http://localhost:8000')
}));
_getJestObj().mock('axios', () => {
  const mock = {
    post: jest.fn((url, body, ...args) => {
      if (url.includes('/api/propollama/chat')) {
        return Promise.resolve({
          data: {
            response: 'AI response',
            confidence: 0.85,
            suggestions: ['Suggestion 1', 'Suggestion 2'],
            model_used: 'llama2',
            response_time: 1500,
            analysis_type: 'general'
          }
        });
      }
      return Promise.reject(new Error('Unknown endpoint: ' + url));
    }),
    get: jest.fn((url, ...args) => {
      if (url.includes('/api/propollama/models')) {
        return Promise.resolve({
          data: {
            models: ['llama2', 'mistral', 'gpt4all']
          }
        });
      }
      if (url.includes('/api/propollama/health')) {
        return Promise.resolve({
          data: {
            status: 'healthy',
            message: 'All systems operational'
          }
        });
      }
      if (url.includes('/api/propollama/model_health')) {
        return Promise.resolve({
          data: {
            model_health: {
              status: 'ready',
              last_update: '2025-07-26T07:00:00Z'
            }
          }
        });
      }
      if (url.endsWith('/health')) {
        // For getSystemStatus
        return Promise.resolve({
          data: {
            status: 'healthy',
            model_status: 'ready',
            uptime: 3600
          }
        });
      }
      return Promise.reject(new Error('Unknown endpoint: ' + url));
    }),
    isAxiosError: err => !!err && typeof err === 'object' && 'isAxiosError' in err
  };
  return mock;
});
_getJestObj().mock('../backendDiscovery', () => ({
  discoverBackend: jest.fn().mockResolvedValue('http://localhost:8000')
}));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _axios = _interopRequireDefault(require("axios"));
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('propOllamaService', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    jest.resetModules();
  });
  const propOllamaService = require('../propOllamaService').default;
  test('sendChatMessage sends request to correct endpoint', async () => {
    // Mock axios response
    _axios.default.post.mockResolvedValue({
      data: {
        response: 'AI response',
        confidence: 0.85,
        suggestions: ['Suggestion 1', 'Suggestion 2'],
        model_used: 'llama2',
        response_time: 1500,
        analysis_type: 'general'
      }
    });

    // Call sendChatMessage
    const result = await propOllamaService.sendChatMessage({
      message: 'Hello',
      analysisType: 'general'
    });

    // Verify axios was called correctly
    expect(_axios.default.post).toHaveBeenCalledWith('http://localhost:8000/api/propollama/chat', {
      message: 'Hello',
      analysisType: 'general'
    }, expect.any(Object));

    // Verify result
    expect(result).toHaveProperty('content', 'AI response');
    expect(result).toHaveProperty('confidence', 0.85);
    expect(result).toHaveProperty('suggestions', ['Suggestion 1', 'Suggestion 2']);
  });
  test('getPropOllamaHealth sends request to correct endpoint', async () => {
    // Mock axios response
    _axios.default.get.mockResolvedValue({
      data: {
        status: 'healthy',
        message: 'All systems operational'
      }
    });

    // Call getPropOllamaHealth
    const result = await propOllamaService.getPropOllamaHealth();

    // Verify axios was called correctly
    expect(_axios.default.get).toHaveBeenCalledWith('http://localhost:8000/api/propollama/health');

    // Verify result
    expect(result).toHaveProperty('status', 'healthy');
    expect(result).toHaveProperty('message', 'All systems operational');
  });
  test('getAvailableModels sends request to correct endpoint', async () => {
    // Mock axios response
    _axios.default.get.mockResolvedValue({
      data: {
        models: ['llama2', 'mistral', 'gpt4all']
      }
    });

    // Call getAvailableModels
    const result = await propOllamaService.getAvailableModels();

    // Verify axios was called correctly
    expect(_axios.default.get).toHaveBeenCalledWith('http://localhost:8000/api/propollama/models');

    // Verify result
    expect(result).toEqual(['llama2', 'mistral', 'gpt4all']);
  });
  test('getModelHealth sends request to correct endpoint', async () => {
    // Mock axios response
    _axios.default.get.mockResolvedValue({
      data: {
        model_health: {
          status: 'ready',
          last_update: '2025-07-26T07:00:00Z'
        }
      }
    });

    // Call getModelHealth
    const result = await propOllamaService.getModelHealth('llama2');

    // Verify axios was called correctly
    expect(_axios.default.get).toHaveBeenCalledWith('http://localhost:8000/api/propollama/model_health', {
      params: {
        model_name: 'llama2'
      }
    });

    // Verify result
    expect(result).toHaveProperty('status', 'ready');
    expect(result).toHaveProperty('last_update', '2025-07-26T07:00:00Z');
  });
  test('handles network errors gracefully', async () => {
    // Mock axios to throw error
    _axios.default.post.mockRejectedValue(new Error('Network Error'));

    // Call sendChatMessage and expect it to throw
    await expect(propOllamaService.sendChatMessage({
      message: 'Hello'
    })).rejects.toThrow('Network Error');
  });
  test('handles HTTP errors with details', async () => {
    // Mock axios to throw error with response
    _axios.default.post.mockRejectedValue({
      isAxiosError: true,
      response: {
        status: 500,
        data: {
          detail: 'Internal Server Error'
        }
      }
    });

    // Call sendChatMessage and expect it to throw
    await expect(propOllamaService.sendChatMessage({
      message: 'Hello'
    })).rejects.toThrow('HTTP 500: Internal Server Error');
  });
  test('getConversationStarters returns array of suggestions', () => {
    const starters = propOllamaService.getConversationStarters();
    expect(Array.isArray(starters)).toBe(true);
    expect(starters.length).toBeGreaterThan(0);
    expect(typeof starters[0]).toBe('string');
  });
  test('getChatHistory returns chat history array', () => {
    const history = propOllamaService.getChatHistory();
    expect(Array.isArray(history)).toBe(true);
  });
  test('clearChatHistory clears the chat history', () => {
    // Add a message to history
    const propOllamaService = require('../propOllamaService').default;
    propOllamaService.sendChatMessage({
      message: 'Test message'
    }).catch(() => {});

    // Clear history
    propOllamaService.clearChatHistory();

    // Verify history is empty
    const history = propOllamaService.getChatHistory();
    expect(history.length).toBe(0);
  });
  test('getSystemStatus returns system status', async () => {
    // Mock axios response
    _axios.default.get.mockResolvedValue({
      data: {
        status: 'healthy',
        model_status: 'ready',
        uptime: 3600
      }
    });

    // Call getSystemStatus
    const result = await propOllamaService.getSystemStatus();

    // Verify axios was called correctly
    expect(_axios.default.get).toHaveBeenCalledWith('http://localhost:8000/health');

    // Verify result
    expect(result).toHaveProperty('status', 'healthy');
    expect(result).toHaveProperty('model_ready', true);
    expect(result).toHaveProperty('response_time_avg', 3600);
    expect(result).toHaveProperty('accuracy', 0.964);
  });
  test('formatShapExplanation formats SHAP values correctly', () => {
    const shapValues = {
      player_height: 0.25,
      team_pace: -0.15,
      opponent_defense: 0.02
    };
    const formatted = propOllamaService.formatShapExplanation(shapValues);
    expect(formatted).toHaveLength(3);
    expect(formatted[0]).toEqual({
      feature: 'Player Height',
      importance: 0.25,
      impact: 'positive'
    });
    expect(formatted[1]).toEqual({
      feature: 'Team Pace',
      importance: 0.15,
      impact: 'negative'
    });
    expect(formatted[2]).toEqual({
      feature: 'Opponent Defense',
      importance: 0.02,
      impact: 'neutral'
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRFbnZWYXIiLCJqZXN0IiwiZm4iLCJwb3N0IiwidXJsIiwiYm9keSIsImFyZ3MiLCJpbmNsdWRlcyIsIlByb21pc2UiLCJyZXNvbHZlIiwiZGF0YSIsInJlc3BvbnNlIiwiY29uZmlkZW5jZSIsInN1Z2dlc3Rpb25zIiwibW9kZWxfdXNlZCIsInJlc3BvbnNlX3RpbWUiLCJhbmFseXNpc190eXBlIiwicmVqZWN0IiwiRXJyb3IiLCJnZXQiLCJtb2RlbHMiLCJzdGF0dXMiLCJtZXNzYWdlIiwibW9kZWxfaGVhbHRoIiwibGFzdF91cGRhdGUiLCJlbmRzV2l0aCIsIm1vZGVsX3N0YXR1cyIsInVwdGltZSIsImlzQXhpb3NFcnJvciIsImVyciIsImRpc2NvdmVyQmFja2VuZCIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXhpb3MiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwicmVzZXRNb2R1bGVzIiwicHJvcE9sbGFtYVNlcnZpY2UiLCJkZWZhdWx0IiwidGVzdCIsImF4aW9zIiwicmVzdWx0Iiwic2VuZENoYXRNZXNzYWdlIiwiYW5hbHlzaXNUeXBlIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJhbnkiLCJPYmplY3QiLCJ0b0hhdmVQcm9wZXJ0eSIsImdldFByb3BPbGxhbWFIZWFsdGgiLCJnZXRBdmFpbGFibGVNb2RlbHMiLCJ0b0VxdWFsIiwiZ2V0TW9kZWxIZWFsdGgiLCJwYXJhbXMiLCJtb2RlbF9uYW1lIiwibW9ja1JlamVjdGVkVmFsdWUiLCJyZWplY3RzIiwidG9UaHJvdyIsImRldGFpbCIsInN0YXJ0ZXJzIiwiZ2V0Q29udmVyc2F0aW9uU3RhcnRlcnMiLCJBcnJheSIsImlzQXJyYXkiLCJ0b0JlIiwibGVuZ3RoIiwidG9CZUdyZWF0ZXJUaGFuIiwiaGlzdG9yeSIsImdldENoYXRIaXN0b3J5IiwiY2F0Y2giLCJjbGVhckNoYXRIaXN0b3J5IiwiZ2V0U3lzdGVtU3RhdHVzIiwic2hhcFZhbHVlcyIsInBsYXllcl9oZWlnaHQiLCJ0ZWFtX3BhY2UiLCJvcHBvbmVudF9kZWZlbnNlIiwiZm9ybWF0dGVkIiwiZm9ybWF0U2hhcEV4cGxhbmF0aW9uIiwidG9IYXZlTGVuZ3RoIiwiZmVhdHVyZSIsImltcG9ydGFuY2UiLCJpbXBhY3QiXSwic291cmNlcyI6WyJwcm9wT2xsYW1hU2VydmljZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIE1vY2sgZ2V0RW52VmFyIHRvIHByZXZlbnQgUmVmZXJlbmNlRXJyb3IgaW4gT2xsYW1hU2VydmljZVxyXG5qZXN0Lm1vY2soJy4uLy4uL3V0aWxzL2dldEVudlZhcicsICgpID0+ICh7XHJcbiAgZ2V0RW52VmFyOiBqZXN0LmZuKCgpID0+ICdodHRwOi8vbG9jYWxob3N0OjgwMDAnKSxcclxufSkpO1xyXG5cclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuXHJcbmplc3QubW9jaygnYXhpb3MnLCAoKSA9PiB7XHJcbiAgY29uc3QgbW9jayA9IHtcclxuICAgIHBvc3Q6IGplc3QuZm4oKHVybCwgYm9keSwgLi4uYXJncykgPT4ge1xyXG4gICAgICBpZiAodXJsLmluY2x1ZGVzKCcvYXBpL3Byb3BvbGxhbWEvY2hhdCcpKSB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlOiAnQUkgcmVzcG9uc2UnLFxyXG4gICAgICAgICAgICBjb25maWRlbmNlOiAwLjg1LFxyXG4gICAgICAgICAgICBzdWdnZXN0aW9uczogWydTdWdnZXN0aW9uIDEnLCAnU3VnZ2VzdGlvbiAyJ10sXHJcbiAgICAgICAgICAgIG1vZGVsX3VzZWQ6ICdsbGFtYTInLFxyXG4gICAgICAgICAgICByZXNwb25zZV90aW1lOiAxNTAwLFxyXG4gICAgICAgICAgICBhbmFseXNpc190eXBlOiAnZ2VuZXJhbCcsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1Vua25vd24gZW5kcG9pbnQ6ICcgKyB1cmwpKTtcclxuICAgIH0pLFxyXG4gICAgZ2V0OiBqZXN0LmZuKCh1cmwsIC4uLmFyZ3MpID0+IHtcclxuICAgICAgaWYgKHVybC5pbmNsdWRlcygnL2FwaS9wcm9wb2xsYW1hL21vZGVscycpKSB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IGRhdGE6IHsgbW9kZWxzOiBbJ2xsYW1hMicsICdtaXN0cmFsJywgJ2dwdDRhbGwnXSB9IH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh1cmwuaW5jbHVkZXMoJy9hcGkvcHJvcG9sbGFtYS9oZWFsdGgnKSkge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiB7IHN0YXR1czogJ2hlYWx0aHknLCBtZXNzYWdlOiAnQWxsIHN5c3RlbXMgb3BlcmF0aW9uYWwnIH0gfSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHVybC5pbmNsdWRlcygnL2FwaS9wcm9wb2xsYW1hL21vZGVsX2hlYWx0aCcpKSB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICAgICAgICBkYXRhOiB7IG1vZGVsX2hlYWx0aDogeyBzdGF0dXM6ICdyZWFkeScsIGxhc3RfdXBkYXRlOiAnMjAyNS0wNy0yNlQwNzowMDowMFonIH0gfSxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodXJsLmVuZHNXaXRoKCcvaGVhbHRoJykpIHtcclxuICAgICAgICAvLyBGb3IgZ2V0U3lzdGVtU3RhdHVzXHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICAgICAgICBkYXRhOiB7IHN0YXR1czogJ2hlYWx0aHknLCBtb2RlbF9zdGF0dXM6ICdyZWFkeScsIHVwdGltZTogMzYwMCB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1Vua25vd24gZW5kcG9pbnQ6ICcgKyB1cmwpKTtcclxuICAgIH0pLFxyXG4gICAgaXNBeGlvc0Vycm9yOiAoZXJyOiBhbnkpID0+ICEhZXJyICYmIHR5cGVvZiBlcnIgPT09ICdvYmplY3QnICYmICdpc0F4aW9zRXJyb3InIGluIGVycixcclxuICB9O1xyXG4gIHJldHVybiBtb2NrO1xyXG59KTtcclxuXHJcbi8vIEFsd2F5cyBtb2NrIGJhY2tlbmREaXNjb3ZlcnkgcHJvcGVybHlcclxuamVzdC5tb2NrKCcuLi9iYWNrZW5kRGlzY292ZXJ5JywgKCkgPT4gKHtcclxuICBkaXNjb3ZlckJhY2tlbmQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgnaHR0cDovL2xvY2FsaG9zdDo4MDAwJyksXHJcbn0pKTtcclxuXHJcbmRlc2NyaWJlKCdwcm9wT2xsYW1hU2VydmljZScsICgpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xyXG4gICAgamVzdC5yZXNldE1vZHVsZXMoKTtcclxuICB9KTtcclxuICBjb25zdCBwcm9wT2xsYW1hU2VydmljZSA9IHJlcXVpcmUoJy4uL3Byb3BPbGxhbWFTZXJ2aWNlJykuZGVmYXVsdDtcclxuXHJcbiAgdGVzdCgnc2VuZENoYXRNZXNzYWdlIHNlbmRzIHJlcXVlc3QgdG8gY29ycmVjdCBlbmRwb2ludCcsIGFzeW5jICgpID0+IHtcclxuICAgIC8vIE1vY2sgYXhpb3MgcmVzcG9uc2VcclxuICAgIChheGlvcy5wb3N0IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgcmVzcG9uc2U6ICdBSSByZXNwb25zZScsXHJcbiAgICAgICAgY29uZmlkZW5jZTogMC44NSxcclxuICAgICAgICBzdWdnZXN0aW9uczogWydTdWdnZXN0aW9uIDEnLCAnU3VnZ2VzdGlvbiAyJ10sXHJcbiAgICAgICAgbW9kZWxfdXNlZDogJ2xsYW1hMicsXHJcbiAgICAgICAgcmVzcG9uc2VfdGltZTogMTUwMCxcclxuICAgICAgICBhbmFseXNpc190eXBlOiAnZ2VuZXJhbCcsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDYWxsIHNlbmRDaGF0TWVzc2FnZVxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvcE9sbGFtYVNlcnZpY2Uuc2VuZENoYXRNZXNzYWdlKHtcclxuICAgICAgbWVzc2FnZTogJ0hlbGxvJyxcclxuICAgICAgYW5hbHlzaXNUeXBlOiAnZ2VuZXJhbCcsXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBWZXJpZnkgYXhpb3Mgd2FzIGNhbGxlZCBjb3JyZWN0bHlcclxuICAgIGV4cGVjdChheGlvcy5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9hcGkvcHJvcG9sbGFtYS9jaGF0JyxcclxuICAgICAge1xyXG4gICAgICAgIG1lc3NhZ2U6ICdIZWxsbycsXHJcbiAgICAgICAgYW5hbHlzaXNUeXBlOiAnZ2VuZXJhbCcsXHJcbiAgICAgIH0sXHJcbiAgICAgIGV4cGVjdC5hbnkoT2JqZWN0KVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBWZXJpZnkgcmVzdWx0XHJcbiAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgnY29udGVudCcsICdBSSByZXNwb25zZScpO1xyXG4gICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ2NvbmZpZGVuY2UnLCAwLjg1KTtcclxuICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCdzdWdnZXN0aW9ucycsIFsnU3VnZ2VzdGlvbiAxJywgJ1N1Z2dlc3Rpb24gMiddKTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgnZ2V0UHJvcE9sbGFtYUhlYWx0aCBzZW5kcyByZXF1ZXN0IHRvIGNvcnJlY3QgZW5kcG9pbnQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyBNb2NrIGF4aW9zIHJlc3BvbnNlXHJcbiAgICAoYXhpb3MuZ2V0IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgc3RhdHVzOiAnaGVhbHRoeScsXHJcbiAgICAgICAgbWVzc2FnZTogJ0FsbCBzeXN0ZW1zIG9wZXJhdGlvbmFsJyxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENhbGwgZ2V0UHJvcE9sbGFtYUhlYWx0aFxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvcE9sbGFtYVNlcnZpY2UuZ2V0UHJvcE9sbGFtYUhlYWx0aCgpO1xyXG5cclxuICAgIC8vIFZlcmlmeSBheGlvcyB3YXMgY2FsbGVkIGNvcnJlY3RseVxyXG4gICAgZXhwZWN0KGF4aW9zLmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9hcGkvcHJvcG9sbGFtYS9oZWFsdGgnKTtcclxuXHJcbiAgICAvLyBWZXJpZnkgcmVzdWx0XHJcbiAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgnc3RhdHVzJywgJ2hlYWx0aHknKTtcclxuICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCdtZXNzYWdlJywgJ0FsbCBzeXN0ZW1zIG9wZXJhdGlvbmFsJyk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ2dldEF2YWlsYWJsZU1vZGVscyBzZW5kcyByZXF1ZXN0IHRvIGNvcnJlY3QgZW5kcG9pbnQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyBNb2NrIGF4aW9zIHJlc3BvbnNlXHJcbiAgICAoYXhpb3MuZ2V0IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgbW9kZWxzOiBbJ2xsYW1hMicsICdtaXN0cmFsJywgJ2dwdDRhbGwnXSxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENhbGwgZ2V0QXZhaWxhYmxlTW9kZWxzXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm9wT2xsYW1hU2VydmljZS5nZXRBdmFpbGFibGVNb2RlbHMoKTtcclxuXHJcbiAgICAvLyBWZXJpZnkgYXhpb3Mgd2FzIGNhbGxlZCBjb3JyZWN0bHlcclxuICAgIGV4cGVjdChheGlvcy5nZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdodHRwOi8vbG9jYWxob3N0OjgwMDAvYXBpL3Byb3BvbGxhbWEvbW9kZWxzJyk7XHJcblxyXG4gICAgLy8gVmVyaWZ5IHJlc3VsdFxyXG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChbJ2xsYW1hMicsICdtaXN0cmFsJywgJ2dwdDRhbGwnXSk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ2dldE1vZGVsSGVhbHRoIHNlbmRzIHJlcXVlc3QgdG8gY29ycmVjdCBlbmRwb2ludCcsIGFzeW5jICgpID0+IHtcclxuICAgIC8vIE1vY2sgYXhpb3MgcmVzcG9uc2VcclxuICAgIChheGlvcy5nZXQgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XHJcbiAgICAgIGRhdGE6IHtcclxuICAgICAgICBtb2RlbF9oZWFsdGg6IHtcclxuICAgICAgICAgIHN0YXR1czogJ3JlYWR5JyxcclxuICAgICAgICAgIGxhc3RfdXBkYXRlOiAnMjAyNS0wNy0yNlQwNzowMDowMFonLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDYWxsIGdldE1vZGVsSGVhbHRoXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm9wT2xsYW1hU2VydmljZS5nZXRNb2RlbEhlYWx0aCgnbGxhbWEyJyk7XHJcblxyXG4gICAgLy8gVmVyaWZ5IGF4aW9zIHdhcyBjYWxsZWQgY29ycmVjdGx5XHJcbiAgICBleHBlY3QoYXhpb3MuZ2V0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnaHR0cDovL2xvY2FsaG9zdDo4MDAwL2FwaS9wcm9wb2xsYW1hL21vZGVsX2hlYWx0aCcsIHtcclxuICAgICAgcGFyYW1zOiB7IG1vZGVsX25hbWU6ICdsbGFtYTInIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBWZXJpZnkgcmVzdWx0XHJcbiAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgnc3RhdHVzJywgJ3JlYWR5Jyk7XHJcbiAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgnbGFzdF91cGRhdGUnLCAnMjAyNS0wNy0yNlQwNzowMDowMFonKTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgnaGFuZGxlcyBuZXR3b3JrIGVycm9ycyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gTW9jayBheGlvcyB0byB0aHJvdyBlcnJvclxyXG4gICAgKGF4aW9zLnBvc3QgYXMgamVzdC5Nb2NrKS5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ05ldHdvcmsgRXJyb3InKSk7XHJcblxyXG4gICAgLy8gQ2FsbCBzZW5kQ2hhdE1lc3NhZ2UgYW5kIGV4cGVjdCBpdCB0byB0aHJvd1xyXG4gICAgYXdhaXQgZXhwZWN0KFxyXG4gICAgICBwcm9wT2xsYW1hU2VydmljZS5zZW5kQ2hhdE1lc3NhZ2Uoe1xyXG4gICAgICAgIG1lc3NhZ2U6ICdIZWxsbycsXHJcbiAgICAgIH0pXHJcbiAgICApLnJlamVjdHMudG9UaHJvdygnTmV0d29yayBFcnJvcicpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdoYW5kbGVzIEhUVFAgZXJyb3JzIHdpdGggZGV0YWlscycsIGFzeW5jICgpID0+IHtcclxuICAgIC8vIE1vY2sgYXhpb3MgdG8gdGhyb3cgZXJyb3Igd2l0aCByZXNwb25zZVxyXG4gICAgKGF4aW9zLnBvc3QgYXMgamVzdC5Nb2NrKS5tb2NrUmVqZWN0ZWRWYWx1ZSh7XHJcbiAgICAgIGlzQXhpb3NFcnJvcjogdHJ1ZSxcclxuICAgICAgcmVzcG9uc2U6IHtcclxuICAgICAgICBzdGF0dXM6IDUwMCxcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICBkZXRhaWw6ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDYWxsIHNlbmRDaGF0TWVzc2FnZSBhbmQgZXhwZWN0IGl0IHRvIHRocm93XHJcbiAgICBhd2FpdCBleHBlY3QoXHJcbiAgICAgIHByb3BPbGxhbWFTZXJ2aWNlLnNlbmRDaGF0TWVzc2FnZSh7XHJcbiAgICAgICAgbWVzc2FnZTogJ0hlbGxvJyxcclxuICAgICAgfSlcclxuICAgICkucmVqZWN0cy50b1Rocm93KCdIVFRQIDUwMDogSW50ZXJuYWwgU2VydmVyIEVycm9yJyk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ2dldENvbnZlcnNhdGlvblN0YXJ0ZXJzIHJldHVybnMgYXJyYXkgb2Ygc3VnZ2VzdGlvbnMnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBzdGFydGVycyA9IHByb3BPbGxhbWFTZXJ2aWNlLmdldENvbnZlcnNhdGlvblN0YXJ0ZXJzKCk7XHJcbiAgICBleHBlY3QoQXJyYXkuaXNBcnJheShzdGFydGVycykpLnRvQmUodHJ1ZSk7XHJcbiAgICBleHBlY3Qoc3RhcnRlcnMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XHJcbiAgICBleHBlY3QodHlwZW9mIHN0YXJ0ZXJzWzBdKS50b0JlKCdzdHJpbmcnKTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgnZ2V0Q2hhdEhpc3RvcnkgcmV0dXJucyBjaGF0IGhpc3RvcnkgYXJyYXknLCAoKSA9PiB7XHJcbiAgICBjb25zdCBoaXN0b3J5ID0gcHJvcE9sbGFtYVNlcnZpY2UuZ2V0Q2hhdEhpc3RvcnkoKTtcclxuICAgIGV4cGVjdChBcnJheS5pc0FycmF5KGhpc3RvcnkpKS50b0JlKHRydWUpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdjbGVhckNoYXRIaXN0b3J5IGNsZWFycyB0aGUgY2hhdCBoaXN0b3J5JywgKCkgPT4ge1xyXG4gICAgLy8gQWRkIGEgbWVzc2FnZSB0byBoaXN0b3J5XHJcbiAgICBjb25zdCBwcm9wT2xsYW1hU2VydmljZSA9IHJlcXVpcmUoJy4uL3Byb3BPbGxhbWFTZXJ2aWNlJykuZGVmYXVsdDtcclxuICAgIHByb3BPbGxhbWFTZXJ2aWNlXHJcbiAgICAgIC5zZW5kQ2hhdE1lc3NhZ2Uoe1xyXG4gICAgICAgIG1lc3NhZ2U6ICdUZXN0IG1lc3NhZ2UnLFxyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKCkgPT4ge30pO1xyXG5cclxuICAgIC8vIENsZWFyIGhpc3RvcnlcclxuICAgIHByb3BPbGxhbWFTZXJ2aWNlLmNsZWFyQ2hhdEhpc3RvcnkoKTtcclxuXHJcbiAgICAvLyBWZXJpZnkgaGlzdG9yeSBpcyBlbXB0eVxyXG4gICAgY29uc3QgaGlzdG9yeSA9IHByb3BPbGxhbWFTZXJ2aWNlLmdldENoYXRIaXN0b3J5KCk7XHJcbiAgICBleHBlY3QoaGlzdG9yeS5sZW5ndGgpLnRvQmUoMCk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ2dldFN5c3RlbVN0YXR1cyByZXR1cm5zIHN5c3RlbSBzdGF0dXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyBNb2NrIGF4aW9zIHJlc3BvbnNlXHJcbiAgICAoYXhpb3MuZ2V0IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgc3RhdHVzOiAnaGVhbHRoeScsXHJcbiAgICAgICAgbW9kZWxfc3RhdHVzOiAncmVhZHknLFxyXG4gICAgICAgIHVwdGltZTogMzYwMCxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENhbGwgZ2V0U3lzdGVtU3RhdHVzXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm9wT2xsYW1hU2VydmljZS5nZXRTeXN0ZW1TdGF0dXMoKTtcclxuXHJcbiAgICAvLyBWZXJpZnkgYXhpb3Mgd2FzIGNhbGxlZCBjb3JyZWN0bHlcclxuICAgIGV4cGVjdChheGlvcy5nZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdodHRwOi8vbG9jYWxob3N0OjgwMDAvaGVhbHRoJyk7XHJcblxyXG4gICAgLy8gVmVyaWZ5IHJlc3VsdFxyXG4gICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ3N0YXR1cycsICdoZWFsdGh5Jyk7XHJcbiAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgnbW9kZWxfcmVhZHknLCB0cnVlKTtcclxuICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCdyZXNwb25zZV90aW1lX2F2ZycsIDM2MDApO1xyXG4gICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ2FjY3VyYWN5JywgMC45NjQpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdmb3JtYXRTaGFwRXhwbGFuYXRpb24gZm9ybWF0cyBTSEFQIHZhbHVlcyBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICBjb25zdCBzaGFwVmFsdWVzID0ge1xyXG4gICAgICBwbGF5ZXJfaGVpZ2h0OiAwLjI1LFxyXG4gICAgICB0ZWFtX3BhY2U6IC0wLjE1LFxyXG4gICAgICBvcHBvbmVudF9kZWZlbnNlOiAwLjAyLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBmb3JtYXR0ZWQgPSBwcm9wT2xsYW1hU2VydmljZS5mb3JtYXRTaGFwRXhwbGFuYXRpb24oc2hhcFZhbHVlcyk7XHJcblxyXG4gICAgZXhwZWN0KGZvcm1hdHRlZCkudG9IYXZlTGVuZ3RoKDMpO1xyXG4gICAgZXhwZWN0KGZvcm1hdHRlZFswXSkudG9FcXVhbCh7XHJcbiAgICAgIGZlYXR1cmU6ICdQbGF5ZXIgSGVpZ2h0JyxcclxuICAgICAgaW1wb3J0YW5jZTogMC4yNSxcclxuICAgICAgaW1wYWN0OiAncG9zaXRpdmUnLFxyXG4gICAgfSk7XHJcbiAgICBleHBlY3QoZm9ybWF0dGVkWzFdKS50b0VxdWFsKHtcclxuICAgICAgZmVhdHVyZTogJ1RlYW0gUGFjZScsXHJcbiAgICAgIGltcG9ydGFuY2U6IDAuMTUsXHJcbiAgICAgIGltcGFjdDogJ25lZ2F0aXZlJyxcclxuICAgIH0pO1xyXG4gICAgZXhwZWN0KGZvcm1hdHRlZFsyXSkudG9FcXVhbCh7XHJcbiAgICAgIGZlYXR1cmU6ICdPcHBvbmVudCBEZWZlbnNlJyxcclxuICAgICAgaW1wb3J0YW5jZTogMC4wMixcclxuICAgICAgaW1wYWN0OiAnbmV1dHJhbCcsXHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFpREE7QUFoREFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHVCQUF1QixFQUFFLE9BQU87RUFDeENDLFNBQVMsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsTUFBTSx1QkFBdUI7QUFDbEQsQ0FBQyxDQUFDLENBQUM7QUFJSEosV0FBQSxHQUFLQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU07RUFDdkIsTUFBTUEsSUFBSSxHQUFHO0lBQ1hJLElBQUksRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQ0UsR0FBRyxFQUFFQyxJQUFJLEVBQUUsR0FBR0MsSUFBSSxLQUFLO01BQ3BDLElBQUlGLEdBQUcsQ0FBQ0csUUFBUSxDQUFDLHNCQUFzQixDQUFDLEVBQUU7UUFDeEMsT0FBT0MsT0FBTyxDQUFDQyxPQUFPLENBQUM7VUFDckJDLElBQUksRUFBRTtZQUNKQyxRQUFRLEVBQUUsYUFBYTtZQUN2QkMsVUFBVSxFQUFFLElBQUk7WUFDaEJDLFdBQVcsRUFBRSxDQUFDLGNBQWMsRUFBRSxjQUFjLENBQUM7WUFDN0NDLFVBQVUsRUFBRSxRQUFRO1lBQ3BCQyxhQUFhLEVBQUUsSUFBSTtZQUNuQkMsYUFBYSxFQUFFO1VBQ2pCO1FBQ0YsQ0FBQyxDQUFDO01BQ0o7TUFDQSxPQUFPUixPQUFPLENBQUNTLE1BQU0sQ0FBQyxJQUFJQyxLQUFLLENBQUMsb0JBQW9CLEdBQUdkLEdBQUcsQ0FBQyxDQUFDO0lBQzlELENBQUMsQ0FBQztJQUNGZSxHQUFHLEVBQUVsQixJQUFJLENBQUNDLEVBQUUs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SUFDQTFCLE1BQU0sQ0FBQ0osY0FBSyxDQUFDdkIsR0FBRyxDQUFDLENBQUM0QixvQkFBb0IsQ0FBQyw4QkFBOEIsQ0FBQzs7SUFFdEU7SUFDQUQsTUFBTSxDQUFDSCxNQUFNLENBQUMsQ0FBQ08sY0FBYyxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7SUFDbERKLE1BQU0sQ0FBQ0gsTUFBTSxDQUFDLENBQUNPLGNBQWMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDO0lBQ2xESixNQUFNLENBQUNILE1BQU0sQ0FBQyxDQUFDTyxjQUFjLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDO0lBQ3hESixNQUFNLENBQUNILE1BQU0sQ0FBQyxDQUFDTyxjQUFjLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQztFQUNsRCxDQUFDLENBQUM7RUFFRlQsSUFBSSxDQUFDLHFEQUFxRCxFQUFFLE1BQU07SUFDaEUsTUFBTWdDLFVBQVUsR0FBRztNQUNqQkMsYUFBYSxFQUFFLElBQUk7TUFDbkJDLFNBQVMsRUFBRSxDQUFDLElBQUk7TUFDaEJDLGdCQUFnQixFQUFFO0lBQ3BCLENBQUM7SUFFRCxNQUFNQyxTQUFTLEdBQUd0QyxpQkFBaUIsQ0FBQ3VDLHFCQUFxQixDQUFDTCxVQUFVLENBQUM7SUFFckUzQixNQUFNLENBQUMrQixTQUFTLENBQUMsQ0FBQ0UsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNqQ2pDLE1BQU0sQ0FBQytCLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDeEIsT0FBTyxDQUFDO01BQzNCMkIsT0FBTyxFQUFFLGVBQWU7TUFDeEJDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUU7SUFDVixDQUFDLENBQUM7SUFDRnBDLE1BQU0sQ0FBQytCLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDeEIsT0FBTyxDQUFDO01BQzNCMkIsT0FBTyxFQUFFLFdBQVc7TUFDcEJDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUU7SUFDVixDQUFDLENBQUM7SUFDRnBDLE1BQU0sQ0FBQytCLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDeEIsT0FBTyxDQUFDO01BQzNCMkIsT0FBTyxFQUFFLGtCQUFrQjtNQUMzQkMsVUFBVSxFQUFFLElBQUk7TUFDaEJDLE1BQU0sRUFBRTtJQUNWLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==