69573f434087f4b714ce17776b498966
"use strict";

// Mock the robust API calls
_getJestObj().mock('../../utils/robustApi', () => ({
  fetchHealthData: jest.fn(),
  fetchPerformanceStats: jest.fn()
}));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _PerformanceMonitoringDashboard = _interopRequireDefault(require("../PerformanceMonitoringDashboard"));
var _robustApi = require("../../utils/robustApi");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * @jest-environment jsdom
 */
const mockFetchHealthData = _robustApi.fetchHealthData;
const mockFetchPerformanceStats = _robustApi.fetchPerformanceStats;
describe('PerformanceMonitoringDashboard metrics regression tests', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    // Mock successful health data
    mockFetchHealthData.mockResolvedValue({
      status: 'healthy',
      services: {
        api: 'operational',
        cache: 'operational',
        database: 'operational'
      },
      performance: {
        cache_hit_rate: 85.5,
        cache_type: 'memory'
      },
      uptime_seconds: 3600
    });
  });
  afterEach(() => {
    jest.restoreAllMocks();
  });
  it('should render safe defaults when metrics is null without crashes', async () => {
    mockFetchPerformanceStats.mockResolvedValue({
      data: null
    });
    const {
      container
    } = (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceMonitoringDashboard.default, {}));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Performance Monitoring')).toBeInTheDocument();
    });

    // Should not crash and should render 0 values
    expect(container.querySelector('[data-testid="total-requests"]')?.textContent || '0').toMatch(/0/);
    expect(container.querySelector('[data-testid="cache-hits"]')?.textContent || '0').toMatch(/0/);
  });
  it('should handle legacy cache_performance shape correctly', async () => {
    const legacyMetrics = {
      data: {
        cache_performance: {
          total_requests: 379,
          hits: 312,
          misses: 67,
          errors: 3,
          hit_rate: 82.3,
          cache_type: 'memory'
        },
        api_performance: {
          '/health': {
            avg_time_ms: 45.2,
            total_calls: 247,
            errors: 2
          }
        },
        system_info: {
          optimization_level: 'Phase 4 Enhanced',
          caching_strategy: 'Memory Fallback',
          monitoring: 'Real-time Performance Tracking'
        }
      }
    };
    mockFetchPerformanceStats.mockResolvedValue(legacyMetrics);
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceMonitoringDashboard.default, {}));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Total Requests')).toBeInTheDocument();
    });

    // Should render the legacy values correctly through accessors
    expect(await _react2.screen.findByTestId('total-requests')).toHaveTextContent('379');
    expect(await _react2.screen.findByTestId('cache-hits')).toHaveTextContent('312');
    expect(await _react2.screen.findByTestId('cache-misses')).toHaveTextContent('67');
  });
  it('should handle canonical metrics shape', async () => {
    const canonicalMetrics = {
      data: {
        cache: {
          total_requests: 500,
          hits: 450,
          misses: 50,
          errors: 2,
          hit_rate: 90.0
        },
        api: {
          total_requests: 1000,
          success_requests: 950,
          error_requests: 50,
          avg_latency_ms: 125.5
        },
        timestamps: {
          updated_at: '2024-08-16T12:00:00.000Z'
        }
      }
    };
    mockFetchPerformanceStats.mockResolvedValue(canonicalMetrics);
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceMonitoringDashboard.default, {}));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Total Requests')).toBeInTheDocument();
    });

    // Should render canonical values
    expect(await _react2.screen.findByTestId('total-requests')).toHaveTextContent('500');
    expect(await _react2.screen.findByTestId('cache-hits')).toHaveTextContent('450');
    expect(await _react2.screen.findByTestId('cache-misses')).toHaveTextContent('50');
  });
  it('should handle partial metrics data without crashes', async () => {
    const partialMetrics = {
      data: {
        cache_performance: {
          hits: 100
          // missing: total_requests, misses, errors
        }
        // missing: api_performance
      }
    };
    mockFetchPerformanceStats.mockResolvedValue(partialMetrics);
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceMonitoringDashboard.default, {}));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Performance Monitoring')).toBeInTheDocument();
    });

    // Should render available data and defaults for missing fields
    expect(await _react2.screen.findByTestId('cache-hits')).toHaveTextContent('100'); // hits (available)
    // total_requests should show 0 (default)
    // misses should show 0 (default)
  });
  it('should handle mixed canonical and legacy data with canonical winning', async () => {
    const mixedMetrics = {
      data: {
        cache: {
          hits: 600,
          // canonical - should win
          total_requests: 700
        },
        cache_performance: {
          hits: 300,
          // legacy - should be ignored
          misses: 100,
          // legacy - should be used (no canonical equivalent)
          errors: 5
        }
      }
    };
    mockFetchPerformanceStats.mockResolvedValue(mixedMetrics);
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceMonitoringDashboard.default, {}));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Performance Monitoring')).toBeInTheDocument();
    });

    // Canonical values should win, legacy should fill gaps
    expect(await _react2.screen.findByTestId('cache-hits')).toHaveTextContent('600'); // canonical hits
    expect(await _react2.screen.findByTestId('total-requests')).toHaveTextContent('700'); // canonical total_requests
    expect(await _react2.screen.findByTestId('cache-misses')).toHaveTextContent('100'); // legacy misses
  });
  it('should render error state gracefully when API fails', async () => {
    mockFetchPerformanceStats.mockRejectedValue(new Error('API failed'));
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceMonitoringDashboard.default, {}));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Performance Monitoring')).toBeInTheDocument();
    });

    // Should fall back to mock data and not crash
    expect(_react2.screen.getByText(/using.*demo.*data/i)).toBeInTheDocument();
  });
  it('should validate metrics diagnostic output in development', async () => {
    const originalEnv = process.env.NODE_ENV;
    process.env.NODE_ENV = 'development';
    const consoleSpy = jest.spyOn(console, 'log').mockImplementation(() => {});
    const metricsData = {
      data: {
        cache_performance: {
          total_requests: 200,
          hits: 150,
          misses: 50,
          errors: 1
        },
        originFlags: {
          mappedLegacy: true
        }
      }
    };
    mockFetchPerformanceStats.mockResolvedValue(metricsData);
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceMonitoringDashboard.default, {}));
    await (0, _react2.waitFor)(() => {
      expect(consoleSpy).toHaveBeenCalledWith('[MetricsDiag]', {
        total: 200,
        hits: 150,
        misses: 50,
        errors: 1,
        mappedLegacy: true
      });
    });
    consoleSpy.mockRestore();
    process.env.NODE_ENV = originalEnv;
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,