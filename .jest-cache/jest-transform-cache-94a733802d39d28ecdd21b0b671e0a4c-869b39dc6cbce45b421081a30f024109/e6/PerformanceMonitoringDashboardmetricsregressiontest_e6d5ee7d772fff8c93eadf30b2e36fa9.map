{"version":3,"names":["_getJestObj","mock","fetchHealthData","jest","fn","fetchPerformanceStats","_interopRequireDefault","require","_react","_react2","_PerformanceMonitoringDashboard","_robustApi","_jsxRuntime","mockFetchHealthData","mockFetchPerformanceStats","describe","beforeEach","clearAllMocks","mockResolvedValue","status","services","api","cache","database","performance","cache_hit_rate","cache_type","uptime_seconds","afterEach","restoreAllMocks","it","data","container","render","jsx","default","waitFor","expect","screen","getByText","toBeInTheDocument","querySelector","textContent","toMatch","legacyMetrics","cache_performance","total_requests","hits","misses","errors","hit_rate","api_performance","avg_time_ms","total_calls","system_info","optimization_level","caching_strategy","monitoring","findByTestId","toHaveTextContent","canonicalMetrics","success_requests","error_requests","avg_latency_ms","timestamps","updated_at","partialMetrics","mixedMetrics","mockRejectedValue","Error","originalEnv","process","env","NODE_ENV","consoleSpy","spyOn","console","mockImplementation","metricsData","originFlags","mappedLegacy","toHaveBeenCalledWith","total","mockRestore"],"sources":["PerformanceMonitoringDashboard.metrics.regression.test.tsx"],"sourcesContent":["/**\r\n * @jest-environment jsdom\r\n */\r\n\r\nimport React from 'react';\r\nimport { render, screen, waitFor } from '@testing-library/react';\r\nimport PerformanceMonitoringDashboard from '../PerformanceMonitoringDashboard';\r\n\r\n// Mock the robust API calls\r\njest.mock('../../utils/robustApi', () => ({\r\n  fetchHealthData: jest.fn(),\r\n  fetchPerformanceStats: jest.fn(),\r\n}));\r\n\r\nimport { fetchHealthData, fetchPerformanceStats } from '../../utils/robustApi';\r\n\r\nconst mockFetchHealthData = fetchHealthData as jest.MockedFunction<typeof fetchHealthData>;\r\nconst mockFetchPerformanceStats = fetchPerformanceStats as jest.MockedFunction<typeof fetchPerformanceStats>;\r\n\r\ndescribe('PerformanceMonitoringDashboard metrics regression tests', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    // Mock successful health data\r\n    mockFetchHealthData.mockResolvedValue({\r\n      status: 'healthy',\r\n      services: { api: 'operational', cache: 'operational', database: 'operational' },\r\n      performance: { cache_hit_rate: 85.5, cache_type: 'memory' },\r\n      uptime_seconds: 3600,\r\n    });\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.restoreAllMocks();\r\n  });\r\n\r\n  it('should render safe defaults when metrics is null without crashes', async () => {\r\n    mockFetchPerformanceStats.mockResolvedValue({ data: null } as any);\r\n\r\n    const { container } = render(<PerformanceMonitoringDashboard />);\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText('Performance Monitoring')).toBeInTheDocument();\r\n    });\r\n\r\n    // Should not crash and should render 0 values\r\n    expect(container.querySelector('[data-testid=\"total-requests\"]')?.textContent || '0').toMatch(/0/);\r\n    expect(container.querySelector('[data-testid=\"cache-hits\"]')?.textContent || '0').toMatch(/0/);\r\n  });\r\n\r\n  it('should handle legacy cache_performance shape correctly', async () => {\r\n    const legacyMetrics = {\r\n      data: {\r\n        cache_performance: {\r\n          total_requests: 379,\r\n          hits: 312,\r\n          misses: 67,\r\n          errors: 3,\r\n          hit_rate: 82.3,\r\n          cache_type: 'memory',\r\n        },\r\n        api_performance: {\r\n          '/health': {\r\n            avg_time_ms: 45.2,\r\n            total_calls: 247,\r\n            errors: 2,\r\n          },\r\n        },\r\n        system_info: {\r\n          optimization_level: 'Phase 4 Enhanced',\r\n          caching_strategy: 'Memory Fallback',\r\n          monitoring: 'Real-time Performance Tracking',\r\n        },\r\n      },\r\n    };\r\n\r\n    mockFetchPerformanceStats.mockResolvedValue(legacyMetrics as any);\r\n\r\n    render(<PerformanceMonitoringDashboard />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Total Requests')).toBeInTheDocument();\r\n    });\r\n\r\n  // Should render the legacy values correctly through accessors\r\n  expect(await screen.findByTestId('total-requests')).toHaveTextContent('379');\r\n  expect(await screen.findByTestId('cache-hits')).toHaveTextContent('312');\r\n  expect(await screen.findByTestId('cache-misses')).toHaveTextContent('67');\r\n  });\r\n\r\n  it('should handle canonical metrics shape', async () => {\r\n    const canonicalMetrics = {\r\n      data: {\r\n        cache: {\r\n          total_requests: 500,\r\n          hits: 450,\r\n          misses: 50,\r\n          errors: 2,\r\n          hit_rate: 90.0,\r\n        },\r\n        api: {\r\n          total_requests: 1000,\r\n          success_requests: 950,\r\n          error_requests: 50,\r\n          avg_latency_ms: 125.5,\r\n        },\r\n        timestamps: {\r\n          updated_at: '2024-08-16T12:00:00.000Z',\r\n        },\r\n      },\r\n    };\r\n\r\n    mockFetchPerformanceStats.mockResolvedValue(canonicalMetrics);\r\n\r\n    render(<PerformanceMonitoringDashboard />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Total Requests')).toBeInTheDocument();\r\n    });\r\n\r\n  // Should render canonical values\r\n  expect(await screen.findByTestId('total-requests')).toHaveTextContent('500');\r\n  expect(await screen.findByTestId('cache-hits')).toHaveTextContent('450');\r\n  expect(await screen.findByTestId('cache-misses')).toHaveTextContent('50');\r\n  });\r\n\r\n  it('should handle partial metrics data without crashes', async () => {\r\n    const partialMetrics = {\r\n      data: {\r\n        cache_performance: {\r\n          hits: 100,\r\n          // missing: total_requests, misses, errors\r\n        },\r\n        // missing: api_performance\r\n      },\r\n    };\r\n\r\n    mockFetchPerformanceStats.mockResolvedValue(partialMetrics as any);\r\n\r\n    render(<PerformanceMonitoringDashboard />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Performance Monitoring')).toBeInTheDocument();\r\n    });\r\n\r\n  // Should render available data and defaults for missing fields\r\n  expect(await screen.findByTestId('cache-hits')).toHaveTextContent('100'); // hits (available)\r\n    // total_requests should show 0 (default)\r\n    // misses should show 0 (default)\r\n  });\r\n\r\n  it('should handle mixed canonical and legacy data with canonical winning', async () => {\r\n    const mixedMetrics = {\r\n      data: {\r\n        cache: {\r\n          hits: 600, // canonical - should win\r\n          total_requests: 700,\r\n        },\r\n        cache_performance: {\r\n          hits: 300, // legacy - should be ignored\r\n          misses: 100, // legacy - should be used (no canonical equivalent)\r\n          errors: 5,\r\n        },\r\n      },\r\n    };\r\n\r\n    mockFetchPerformanceStats.mockResolvedValue(mixedMetrics as any);\r\n\r\n    render(<PerformanceMonitoringDashboard />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Performance Monitoring')).toBeInTheDocument();\r\n    });\r\n\r\n  // Canonical values should win, legacy should fill gaps\r\n  expect(await screen.findByTestId('cache-hits')).toHaveTextContent('600'); // canonical hits\r\n  expect(await screen.findByTestId('total-requests')).toHaveTextContent('700'); // canonical total_requests\r\n  expect(await screen.findByTestId('cache-misses')).toHaveTextContent('100'); // legacy misses\r\n  });\r\n\r\n  it('should render error state gracefully when API fails', async () => {\r\n    mockFetchPerformanceStats.mockRejectedValue(new Error('API failed'));\r\n\r\n    render(<PerformanceMonitoringDashboard />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Performance Monitoring')).toBeInTheDocument();\r\n    });\r\n\r\n    // Should fall back to mock data and not crash\r\n    expect(screen.getByText(/using.*demo.*data/i)).toBeInTheDocument();\r\n  });\r\n\r\n  it('should validate metrics diagnostic output in development', async () => {\r\n    const originalEnv = process.env.NODE_ENV;\r\n    process.env.NODE_ENV = 'development';\r\n\r\n    const consoleSpy = jest.spyOn(console, 'log').mockImplementation(() => {});\r\n\r\n    const metricsData = {\r\n      data: {\r\n        cache_performance: {\r\n          total_requests: 200,\r\n          hits: 150,\r\n          misses: 50,\r\n          errors: 1,\r\n        },\r\n        originFlags: { mappedLegacy: true },\r\n      },\r\n    };\r\n\r\n    mockFetchPerformanceStats.mockResolvedValue(metricsData as any);\r\n\r\n    render(<PerformanceMonitoringDashboard />);\r\n\r\n    await waitFor(() => {\r\n      expect(consoleSpy).toHaveBeenCalledWith('[MetricsDiag]', {\r\n        total: 200,\r\n        hits: 150,\r\n        misses: 50,\r\n        errors: 1,\r\n        mappedLegacy: true,\r\n      });\r\n    });\r\n\r\n    consoleSpy.mockRestore();\r\n    process.env.NODE_ENV = originalEnv;\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}