887d939897ca7f2e375e88d4f7c5d38b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.axios = void 0;
// Enhanced Axios Mock for Testing
const mockAxios = {
    get: jest.fn(() => Promise.resolve({ data: {}, status: 200, statusText: 'OK' })),
    post: jest.fn(() => Promise.resolve({ data: {}, status: 201, statusText: 'Created' })),
    put: jest.fn(() => Promise.resolve({ data: {}, status: 200, statusText: 'OK' })),
    patch: jest.fn(() => Promise.resolve({ data: {}, status: 200, statusText: 'OK' })),
    delete: jest.fn(() => Promise.resolve({ data: {}, status: 204, statusText: 'No Content' })),
    head: jest.fn(() => Promise.resolve({ status: 200, statusText: 'OK' })),
    options: jest.fn(() => Promise.resolve({ status: 200, statusText: 'OK' })),
    request: jest.fn(() => Promise.resolve({ data: {}, status: 200, statusText: 'OK' })),
    // Instance methods
    create: jest.fn(() => mockAxios),
    // Interceptors
    interceptors: {
        request: {
            use: jest.fn(),
            eject: jest.fn(),
        },
        response: {
            use: jest.fn(),
            eject: jest.fn(),
        },
    },
    // Default config
    defaults: {
        headers: {
            common: {},
            delete: {},
            get: {},
            head: {},
            post: {},
            put: {},
            patch: {},
        },
        timeout: 0,
        baseURL: '',
        transformRequest: [],
        transformResponse: [],
        paramsSerializer: null,
        withCredentials: false,
    },
    // Cancel token
    CancelToken: {
        source: jest.fn(() => ({
            token: {},
            cancel: jest.fn(),
        })),
    },
    Cancel: jest.fn(),
    isCancel: jest.fn(() => false),
    // Error simulation helpers
    mockResolvedValue: (data) => {
        mockAxios.get.mockResolvedValue({ data, status: 200, statusText: 'OK' });
        mockAxios.post.mockResolvedValue({ data, status: 201, statusText: 'Created' });
        mockAxios.put.mockResolvedValue({ data, status: 200, statusText: 'OK' });
        mockAxios.patch.mockResolvedValue({ data, status: 200, statusText: 'OK' });
        mockAxios.delete.mockResolvedValue({ data, status: 204, statusText: 'No Content' });
    },
    mockRejectedValue: (error) => {
        mockAxios.get.mockRejectedValue(error);
        mockAxios.post.mockRejectedValue(error);
        mockAxios.put.mockRejectedValue(error);
        mockAxios.patch.mockRejectedValue(error);
        mockAxios.delete.mockRejectedValue(error);
    },
    mockReset: () => {
        Object.keys(mockAxios).forEach(key => {
            if (typeof mockAxios[key] === 'function') {
                mockAxios[key].mockReset();
            }
        });
    },
    // Response simulation
    mockResponse: (data, status = 200, statusText = 'OK') => ({
        data,
        status,
        statusText,
        headers: {},
        config: {},
    }),
    // Error simulation
    mockError: (message, code, status) => ({
        message,
        code,
        response: status ? {
            status,
            statusText: status >= 400 ? 'Error' : 'OK',
            data: { error: message },
        } : undefined,
        request: {},
        config: {},
        isAxiosError: true,
    }),
};
// Setup default mock behaviors
mockAxios.get.mockImplementation((url) => {
    // Simulate different responses based on URL patterns
    if (url.includes('/api/health')) {
        return Promise.resolve(mockAxios.mockResponse({ status: 'healthy' }));
    }
    if (url.includes('/api/predictions')) {
        return Promise.resolve(mockAxios.mockResponse({ predictions: [] }));
    }
    if (url.includes('/api/players')) {
        return Promise.resolve(mockAxios.mockResponse({ players: [] }));
    }
    if (url.includes('/api/odds')) {
        return Promise.resolve(mockAxios.mockResponse({ odds: [] }));
    }
    return Promise.resolve(mockAxios.mockResponse({}));
});
mockAxios.post.mockImplementation((url, data) => {
    if (url.includes('/api/auth/login')) {
        return Promise.resolve(mockAxios.mockResponse({
            token: 'mock-jwt-token',
            user: { id: 1, username: 'testuser' }
        }));
    }
    if (url.includes('/api/predictions')) {
        return Promise.resolve(mockAxios.mockResponse({
            id: 1,
            ...data,
            created_at: new Date().toISOString()
        }, 201));
    }
    return Promise.resolve(mockAxios.mockResponse({ id: 1, ...data }, 201));
});
exports.default = mockAxios;
exports.axios = mockAxios;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxiY21hZFxcRG93bmxvYWRzXFxBMUJldHRpbmc3LTEzLjJcXGZyb250ZW5kXFxzcmNcXF9fbW9ja3NfX1xcYXhpb3MudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsa0NBQWtDO0FBQ2xDLE1BQU0sU0FBUyxHQUFHO0lBQ2hCLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDaEYsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUN0RixHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2hGLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDbEYsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUMzRixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUs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TyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNyRCxDQUFDLENBQUMsQ0FBQztBQUVILFNBQVMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxHQUFXLEVBQUUsSUFBUyxFQUFFLEVBQUU7SUFDM0QsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztRQUNwQyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztZQUM1QyxLQUFLLEVBQUUsZ0JBQWdCO1lBQ3ZCLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRTtTQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7SUFDRCxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDO1FBQ3JDLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO1lBQzVDLEVBQUUsRUFBRSxDQUFDO1lBQ0wsR0FBRyxJQUFJO1lBQ1AsVUFBVSxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO1NBQ3JDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUM7SUFFRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFJLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzFFLENBQUMsQ0FBQyxDQUFDO0FBRUgsa0JBQWUsU0FBUyxDQUFDO0FBQ1osUUFBQSxLQUFLLEdBQUcsU0FBUyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcYmNtYWRcXERvd25sb2Fkc1xcQTFCZXR0aW5nNy0xMy4yXFxmcm9udGVuZFxcc3JjXFxfX21vY2tzX19cXGF4aW9zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEVuaGFuY2VkIEF4aW9zIE1vY2sgZm9yIFRlc3RpbmdcclxuY29uc3QgbW9ja0F4aW9zID0ge1xyXG4gIGdldDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiB7fSwgc3RhdHVzOiAyMDAsIHN0YXR1c1RleHQ6ICdPSycgfSkpLFxyXG4gIHBvc3Q6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHsgZGF0YToge30sIHN0YXR1czogMjAxLCBzdGF0dXNUZXh0OiAnQ3JlYXRlZCcgfSkpLFxyXG4gIHB1dDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiB7fSwgc3RhdHVzOiAyMDAsIHN0YXR1c1RleHQ6ICdPSycgfSkpLFxyXG4gIHBhdGNoOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7IGRhdGE6IHt9LCBzdGF0dXM6IDIwMCwgc3RhdHVzVGV4dDogJ09LJyB9KSksXHJcbiAgZGVsZXRlOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7IGRhdGE6IHt9LCBzdGF0dXM6IDIwNCwgc3RhdHVzVGV4dDogJ05vIENvbnRlbnQnIH0pKSxcclxuICBoZWFkOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7IHN0YXR1czogMjAwLCBzdGF0dXNUZXh0OiAnT0snIH0pKSxcclxuICBvcHRpb25zOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7IHN0YXR1czogMjAwLCBzdGF0dXNUZXh0OiAnT0snIH0pKSxcclxuICByZXF1ZXN0OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7IGRhdGE6IHt9LCBzdGF0dXM6IDIwMCwgc3RhdHVzVGV4dDogJ09LJyB9KSksXHJcbiAgXHJcbiAgLy8gSW5zdGFuY2UgbWV0aG9kc1xyXG4gIGNyZWF0ZTogamVzdC5mbigoKSA9PiBtb2NrQXhpb3MpLFxyXG4gIFxyXG4gIC8vIEludGVyY2VwdG9yc1xyXG4gIGludGVyY2VwdG9yczoge1xyXG4gICAgcmVxdWVzdDoge1xyXG4gICAgICB1c2U6IGplc3QuZm4oKSxcclxuICAgICAgZWplY3Q6IGplc3QuZm4oKSxcclxuICAgIH0sXHJcbiAgICByZXNwb25zZToge1xyXG4gICAgICB1c2U6IGplc3QuZm4oKSxcclxuICAgICAgZWplY3Q6IGplc3QuZm4oKSxcclxuICAgIH0sXHJcbiAgfSxcclxuICBcclxuICAvLyBEZWZhdWx0IGNvbmZpZ1xyXG4gIGRlZmF1bHRzOiB7XHJcbiAgICBoZWFkZXJzOiB7XHJcbiAgICAgIGNvbW1vbjoge30sXHJcbiAgICAgIGRlbGV0ZToge30sXHJcbiAgICAgIGdldDoge30sXHJcbiAgICAgIGhlYWQ6IHt9LFxyXG4gICAgICBwb3N0OiB7fSxcclxuICAgICAgcHV0OiB7fSxcclxuICAgICAgcGF0Y2g6IHt9LFxyXG4gICAgfSxcclxuICAgIHRpbWVvdXQ6IDAsXHJcbiAgICBiYXNlVVJMOiAnJyxcclxuICAgIHRyYW5zZm9ybVJlcXVlc3Q6IFtdLFxyXG4gICAgdHJhbnNmb3JtUmVzcG9uc2U6IFtdLFxyXG4gICAgcGFyYW1zU2VyaWFsaXplcjogbnVsbCxcclxuICAgIHdpdGhDcmVkZW50aWFsczogZmFsc2UsXHJcbiAgfSxcclxuICBcclxuICAvLyBDYW5jZWwgdG9rZW5cclxuICBDYW5jZWxUb2tlbjoge1xyXG4gICAgc291cmNlOiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICAgIHRva2VuOiB7fSxcclxuICAgICAgY2FuY2VsOiBqZXN0LmZuKCksXHJcbiAgICB9KSksXHJcbiAgfSxcclxuICBcclxuICBDYW5jZWw6IGplc3QuZm4oKSxcclxuICBpc0NhbmNlbDogamVzdC5mbigoKSA9PiBmYWxzZSksXHJcbiAgXHJcbiAgLy8gRXJyb3Igc2ltdWxhdGlvbiBoZWxwZXJzXHJcbiAgbW9ja1Jlc29sdmVkVmFsdWU6IChkYXRhOiBhbnkpID0+IHtcclxuICAgIG1vY2tBeGlvcy5nZXQubW9ja1Jlc29sdmVkVmFsdWUoeyBkYXRhLCBzdGF0dXM6IDIwMCwgc3RhdHVzVGV4dDogJ09LJyB9KTtcclxuICAgIG1vY2tBeGlvcy5wb3N0Lm1vY2tSZXNvbHZlZFZhbHVlKHsgZGF0YSwgc3RhdHVzOiAyMDEsIHN0YXR1c1RleHQ6ICdDcmVhdGVkJyB9KTtcclxuICAgIG1vY2tBeGlvcy5wdXQubW9ja1Jlc29sdmVkVmFsdWUoeyBkYXRhLCBzdGF0dXM6IDIwMCwgc3RhdHVzVGV4dDogJ09LJyB9KTtcclxuICAgIG1vY2tBeGlvcy5wYXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGEsIHN0YXR1czogMjAwLCBzdGF0dXNUZXh0OiAnT0snIH0pO1xyXG4gICAgbW9ja0F4aW9zLmRlbGV0ZS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGEsIHN0YXR1czogMjA0LCBzdGF0dXNUZXh0OiAnTm8gQ29udGVudCcgfSk7XHJcbiAgfSxcclxuICBcclxuICBtb2NrUmVqZWN0ZWRWYWx1ZTogKGVycm9yOiBhbnkpID0+IHtcclxuICAgIG1vY2tBeGlvcy5nZXQubW9ja1JlamVjdGVkVmFsdWUoZXJyb3IpO1xyXG4gICAgbW9ja0F4aW9zLnBvc3QubW9ja1JlamVjdGVkVmFsdWUoZXJyb3IpO1xyXG4gICAgbW9ja0F4aW9zLnB1dC5tb2NrUmVqZWN0ZWRWYWx1ZShlcnJvcik7XHJcbiAgICBtb2NrQXhpb3MucGF0Y2gubW9ja1JlamVjdGVkVmFsdWUoZXJyb3IpO1xyXG4gICAgbW9ja0F4aW9zLmRlbGV0ZS5tb2NrUmVqZWN0ZWRWYWx1ZShlcnJvcik7XHJcbiAgfSxcclxuICBcclxuICBtb2NrUmVzZXQ6ICgpID0+IHtcclxuICAgIE9iamVjdC5rZXlzKG1vY2tBeGlvcykuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICBpZiAodHlwZW9mIG1vY2tBeGlvc1trZXkgYXMga2V5b2YgdHlwZW9mIG1vY2tBeGlvc10gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAobW9ja0F4aW9zW2tleSBhcyBrZXlvZiB0eXBlb2YgbW9ja0F4aW9zXSBhcyBqZXN0Lk1vY2spLm1vY2tSZXNldCgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIFxyXG4gIC8vIFJlc3BvbnNlIHNpbXVsYXRpb25cclxuICBtb2NrUmVzcG9uc2U6IChkYXRhOiBhbnksIHN0YXR1cyA9IDIwMCwgc3RhdHVzVGV4dCA9ICdPSycpID0+ICh7XHJcbiAgICBkYXRhLFxyXG4gICAgc3RhdHVzLFxyXG4gICAgc3RhdHVzVGV4dCxcclxuICAgIGhlYWRlcnM6IHt9LFxyXG4gICAgY29uZmlnOiB7fSxcclxuICB9KSxcclxuICBcclxuICAvLyBFcnJvciBzaW11bGF0aW9uXHJcbiAgbW9ja0Vycm9yOiAobWVzc2FnZTogc3RyaW5nLCBjb2RlPzogc3RyaW5nLCBzdGF0dXM/OiBudW1iZXIpID0+ICh7XHJcbiAgICBtZXNzYWdlLFxyXG4gICAgY29kZSxcclxuICAgIHJlc3BvbnNlOiBzdGF0dXMgPyB7XHJcbiAgICAgIHN0YXR1cyxcclxuICAgICAgc3RhdHVzVGV4dDogc3RhdHVzID49IDQwMCA/ICdFcnJvcicgOiAnT0snLFxyXG4gICAgICBkYXRhOiB7IGVycm9yOiBtZXNzYWdlIH0sXHJcbiAgICB9IDogdW5kZWZpbmVkLFxyXG4gICAgcmVxdWVzdDoge30sXHJcbiAgICBjb25maWc6IHt9LFxyXG4gICAgaXNBeGlvc0Vycm9yOiB0cnVlLFxyXG4gIH0pLFxyXG59O1xyXG5cclxuLy8gU2V0dXAgZGVmYXVsdCBtb2NrIGJlaGF2aW9yc1xyXG5tb2NrQXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigodXJsOiBzdHJpbmcpID0+IHtcclxuICAvLyBTaW11bGF0ZSBkaWZmZXJlbnQgcmVzcG9uc2VzIGJhc2VkIG9uIFVSTCBwYXR0ZXJuc1xyXG4gIGlmICh1cmwuaW5jbHVkZXMoJy9hcGkvaGVhbHRoJykpIHtcclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobW9ja0F4aW9zLm1vY2tSZXNwb25zZSh7IHN0YXR1czogJ2hlYWx0aHknIH0pKTtcclxuICB9XHJcbiAgaWYgKHVybC5pbmNsdWRlcygnL2FwaS9wcmVkaWN0aW9ucycpKSB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1vY2tBeGlvcy5tb2NrUmVzcG9uc2UoeyBwcmVkaWN0aW9uczogW10gfSkpO1xyXG4gIH1cclxuICBpZiAodXJsLmluY2x1ZGVzKCcvYXBpL3BsYXllcnMnKSkge1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtb2NrQXhpb3MubW9ja1Jlc3BvbnNlKHsgcGxheWVyczogW10gfSkpO1xyXG4gIH1cclxuICBpZiAodXJsLmluY2x1ZGVzKCcvYXBpL29kZHMnKSkge1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtb2NrQXhpb3MubW9ja1Jlc3BvbnNlKHsgb2RkczogW10gfSkpO1xyXG4gIH1cclxuICBcclxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1vY2tBeGlvcy5tb2NrUmVzcG9uc2Uoe30pKTtcclxufSk7XHJcblxyXG5tb2NrQXhpb3MucG9zdC5tb2NrSW1wbGVtZW50YXRpb24oKHVybDogc3RyaW5nLCBkYXRhOiBhbnkpID0+IHtcclxuICBpZiAodXJsLmluY2x1ZGVzKCcvYXBpL2F1dGgvbG9naW4nKSkge1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtb2NrQXhpb3MubW9ja1Jlc3BvbnNlKHsgXHJcbiAgICAgIHRva2VuOiAnbW9jay1qd3QtdG9rZW4nLFxyXG4gICAgICB1c2VyOiB7IGlkOiAxLCB1c2VybmFtZTogJ3Rlc3R1c2VyJyB9XHJcbiAgICB9KSk7XHJcbiAgfVxyXG4gIGlmICh1cmwuaW5jbHVkZXMoJy9hcGkvcHJlZGljdGlvbnMnKSkge1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtb2NrQXhpb3MubW9ja1Jlc3BvbnNlKHsgXHJcbiAgICAgIGlkOiAxLFxyXG4gICAgICAuLi5kYXRhLFxyXG4gICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcclxuICAgIH0sIDIwMSkpO1xyXG4gIH1cclxuICBcclxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1vY2tBeGlvcy5tb2NrUmVzcG9uc2UoeyBpZDogMSwgLi4uZGF0YSB9LCAyMDEpKTtcclxufSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBtb2NrQXhpb3M7XHJcbmV4cG9ydCBjb25zdCBheGlvcyA9IG1vY2tBeGlvcztcclxuIl0sInZlcnNpb24iOjN9