0f9971bd2cdbe29ad0d24b6087bf8969
"use strict";

// Use the mock for unifiedApiService in error state E2E tests

_getJestObj().mock('src/services/unifiedApiService');

// Mock the UserFriendlyApp to avoid lazy-loading Suspense fallback in tests
_getJestObj().mock('src/components/user-friendly/UserFriendlyApp', () => {
  return function MockUserFriendlyApp() {
    if (globalThis.__MOCK_GET_ENHANCED_BETS_ERROR__ || globalThis.__JEST_E2E_ERROR__) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        children: "Cannot connect to backend"
      });
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      children: "Mocked UserFriendlyApp"
    });
  };
});
_getJestObj().mock('src/components/user-friendly/PropOllama', () => {
  return jest.fn().mockImplementation(() => {
    // If the test-level error flags are set, render an inline error message
    if (globalThis.__MOCK_GET_ENHANCED_BETS_ERROR__ || globalThis.__JEST_E2E_ERROR__) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        children: "Cannot connect to backend"
      });
    }
    let message = '';
    // Mock the fetch call to simulate backend behavior when not in error mode
    global.fetch = (url, opts) => {
      if (url.includes('/health')) {
        return Promise.resolve({
          ok: true,
          status: 200,
          text: () => Promise.resolve(JSON.stringify({
            status: 'ok'
          }))
        });
      }
      if (url.includes('/propollama')) {
        if (opts && typeof opts === 'object' && 'body' in opts) {
          try {
            const body = typeof opts.body === 'string' ? JSON.parse(opts.body) : opts.body;
            message = body?.message || '';
          } catch {
            // ignore
          }
        }
      }
      return Promise.resolve({
        ok: true,
        status: 200,
        text: () => Promise.resolve(JSON.stringify({
          message
        }))
      });
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      children: message
    });
  });
});
var _reactQuery = require("@tanstack/react-query");
var _react = require("@testing-library/react");
require("../../../jest.setup.e2e.js");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
globalThis.__JEST_E2E_ERROR__ = true;
describe('App E2E Error State', () => {
  beforeAll(() => {
    globalThis.__MOCK_GET_ENHANCED_BETS_ERROR__ = true;
  });
  afterAll(() => {
    globalThis.__MOCK_GET_ENHANCED_BETS_ERROR__ = false;
  });
  it('shows error state if API returns error', async () => {
    const App = (await Promise.resolve().then(() => _interopRequireWildcard(require('../App')))).default;
    const queryClient = new _reactQuery.QueryClient();
    // Wrap render in act to address React warnings
    await (await Promise.resolve().then(() => _interopRequireWildcard(require('react-dom/test-utils')))).act(async () => {
      (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactQuery.QueryClientProvider, {
        client: queryClient,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(App, {})
      }));
    });
    // Wait for the error message rendered inline in PropOllamaUnified
    await (0, _react.waitFor)(() => {
      const errorMessages = _react.screen.getAllByText(/Cannot connect|Error|Failed|Unable to load/i);
      expect(errorMessages.length).toBeGreaterThan(0);
    });
  }, 20000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,