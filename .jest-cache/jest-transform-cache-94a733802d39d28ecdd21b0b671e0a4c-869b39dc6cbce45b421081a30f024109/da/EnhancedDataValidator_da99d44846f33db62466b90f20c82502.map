{"version":3,"names":["_DataValidation","require","EnhancedDataValidator","constructor","logger","normalizationConfigs","Map","console","log","initializeNormalizationConfigs","validateSportsProp","rawData","sport","context","startTime","Date","now","errors","warnings","transformations","fallbacksUsed","config","getNormalizationConfig","validatedData","validateAndNormalizeField","dataSource","source","validatedAt","toISOString","_originalData","_validationMeta","processingTime","qualityMetrics","calculateDataQuality","qualityScore","calculateOverallQualityScore","criticalErrors","filter","e","severity","isValid","length","hasRequiredFields","completeness","push","toFixed","accuracy","logValidationResult","data","undefined","error","validationError","field","message","Error","String","code","suggestedFix","timestamp","level","component","operation","metadata","duration","errorsCount","name","stack","validateBatch","rawDataArray","validatedProps","allErrors","allWarnings","totalQualityScore","i","result","avgQualityScore","dataQuality","fieldName","mappings","fieldMappings","rawValue","sourceField","mapping","id","normalizeId","player","normalizePlayer","matchup","normalizeMatchup","stat","normalizeStat","line","normalizeLine","normalizeOdds","confidence","normalizeConfidence","normalizeSport","gameTime","normalizeGameTime","pickType","normalizePickType","value","trim","fallbackId","player_name","stat_type","normalized","toLowerCase","fallback","event_name","numValue","parseFloat","isNaN","MIN_CONFIDENCE_SCORE","MAX_CONFIDENCE_SCORE","Math","max","min","configSport","toUpperCase","SPORT_VALUES","includes","join","date","getTime","PICK_TYPE_VALUES","requiredFieldsPresent","REQUIRED_PROP_FIELDS","errorCount","warningCount","consistencyScore","dataAge","timeliness","consistency","metrics","round","every","set","overOdds","underOdds","validationRules","fallbackValues","requiredFields","optionalFields","forEach","get","exports","dataValidator"],"sources":["EnhancedDataValidator.ts"],"sourcesContent":["/**\r\n * Enhanced Data Validation Service\r\n * Provides comprehensive data validation, normalization, and quality assessment\r\n */\r\n\r\nimport {\r\n  DataNormalizationConfig,\r\n  DataQualityMetrics,\r\n  MAX_CONFIDENCE_SCORE,\r\n  MIN_CONFIDENCE_SCORE,\r\n  PICK_TYPE_VALUES,\r\n  RawSportsData,\r\n  REQUIRED_PROP_FIELDS,\r\n  SPORT_VALUES,\r\n  StructuredLogEntry,\r\n  ValidatedSportsProp,\r\n  ValidationError,\r\n  ValidationResult,\r\n} from '../types/DataValidation';\r\n\r\nexport class EnhancedDataValidator {\r\n  private logger: (entry: StructuredLogEntry) => void;\r\n  private normalizationConfigs: Map<string, DataNormalizationConfig> = new Map();\r\n\r\n  constructor(logger?: (entry: StructuredLogEntry) => void) {\r\n    this.logger = logger || console.log;\r\n    this.initializeNormalizationConfigs();\r\n  }\r\n\r\n  /**\r\n   * Validate and normalize raw sports data\r\n   */\r\n  validateSportsProp(\r\n    rawData: RawSportsData,\r\n    sport?: string,\r\n    context: { source?: string; timestamp?: number } = {}\r\n  ): ValidationResult<ValidatedSportsProp> {\r\n    const startTime = Date.now();\r\n    const errors: ValidationError[] = [];\r\n    const warnings: string[] = [];\r\n    const transformations: string[] = [];\r\n    const fallbacksUsed: string[] = [];\r\n\r\n    try {\r\n      // Get normalization config for the sport\r\n      const config = this.getNormalizationConfig(sport || rawData.sport || 'Unknown');\r\n\r\n      // Start with empty validated data\r\n      const validatedData: Partial<ValidatedSportsProp> = {};\r\n\r\n      // Normalize and validate each field\r\n      this.validateAndNormalizeField(\r\n        'id',\r\n        rawData,\r\n        validatedData,\r\n        config,\r\n        errors,\r\n        transformations,\r\n        fallbacksUsed\r\n      );\r\n      this.validateAndNormalizeField(\r\n        'player',\r\n        rawData,\r\n        validatedData,\r\n        config,\r\n        errors,\r\n        transformations,\r\n        fallbacksUsed\r\n      );\r\n      this.validateAndNormalizeField(\r\n        'matchup',\r\n        rawData,\r\n        validatedData,\r\n        config,\r\n        errors,\r\n        transformations,\r\n        fallbacksUsed\r\n      );\r\n      this.validateAndNormalizeField(\r\n        'stat',\r\n        rawData,\r\n        validatedData,\r\n        config,\r\n        errors,\r\n        transformations,\r\n        fallbacksUsed\r\n      );\r\n      this.validateAndNormalizeField(\r\n        'line',\r\n        rawData,\r\n        validatedData,\r\n        config,\r\n        errors,\r\n        transformations,\r\n        fallbacksUsed\r\n      );\r\n      this.validateAndNormalizeField(\r\n        'overOdds',\r\n        rawData,\r\n        validatedData,\r\n        config,\r\n        errors,\r\n        transformations,\r\n        fallbacksUsed\r\n      );\r\n      this.validateAndNormalizeField(\r\n        'underOdds',\r\n        rawData,\r\n        validatedData,\r\n        config,\r\n        errors,\r\n        transformations,\r\n        fallbacksUsed\r\n      );\r\n      this.validateAndNormalizeField(\r\n        'confidence',\r\n        rawData,\r\n        validatedData,\r\n        config,\r\n        errors,\r\n        transformations,\r\n        fallbacksUsed\r\n      );\r\n      this.validateAndNormalizeField(\r\n        'sport',\r\n        rawData,\r\n        validatedData,\r\n        config,\r\n        errors,\r\n        transformations,\r\n        fallbacksUsed\r\n      );\r\n      this.validateAndNormalizeField(\r\n        'gameTime',\r\n        rawData,\r\n        validatedData,\r\n        config,\r\n        errors,\r\n        transformations,\r\n        fallbacksUsed\r\n      );\r\n      this.validateAndNormalizeField(\r\n        'pickType',\r\n        rawData,\r\n        validatedData,\r\n        config,\r\n        errors,\r\n        transformations,\r\n        fallbacksUsed\r\n      );\r\n\r\n      // Add metadata\r\n      validatedData.dataSource = context.source || 'unknown';\r\n      validatedData.validatedAt = new Date().toISOString();\r\n      validatedData._originalData = rawData;\r\n      validatedData._validationMeta = {\r\n        processingTime: Date.now() - startTime,\r\n        transformations,\r\n        fallbacksUsed,\r\n      };\r\n\r\n      // Calculate quality score\r\n      const qualityMetrics = this.calculateDataQuality(\r\n        validatedData as ValidatedSportsProp,\r\n        rawData,\r\n        errors\r\n      );\r\n      validatedData.qualityScore = this.calculateOverallQualityScore(qualityMetrics);\r\n\r\n      // Check if validation passed\r\n      const criticalErrors = errors.filter(e => e.severity === 'error');\r\n      const isValid = criticalErrors.length === 0 && this.hasRequiredFields(validatedData);\r\n\r\n      // Add warnings for data quality issues\r\n      if (qualityMetrics.completeness < 80) {\r\n        warnings.push(`Low data completeness: ${qualityMetrics.completeness.toFixed(1)}%`);\r\n      }\r\n      if (qualityMetrics.accuracy < 90) {\r\n        warnings.push(`Low data accuracy: ${qualityMetrics.accuracy.toFixed(1)}%`);\r\n      }\r\n\r\n      // Log validation result\r\n      this.logValidationResult(isValid, errors, warnings, validatedData, startTime);\r\n\r\n      return {\r\n        isValid,\r\n        data: isValid ? (validatedData as ValidatedSportsProp) : undefined,\r\n        errors,\r\n        warnings,\r\n        qualityScore: validatedData.qualityScore || 0,\r\n      };\r\n    } catch (error) {\r\n      const validationError: ValidationError = {\r\n        field: 'validation',\r\n        message: `Validation process failed: ${\r\n          error instanceof Error ? error.message : String(error)\r\n        }`,\r\n        code: 'VALIDATION_SYSTEM_ERROR',\r\n        severity: 'error',\r\n        suggestedFix: 'Check data format and validation configuration',\r\n      };\r\n\r\n      this.logger({\r\n        timestamp: new Date().toISOString(),\r\n        level: 'error',\r\n        component: 'DataValidator',\r\n        operation: 'validateSportsProp',\r\n        metadata: {\r\n          sport: sport || rawData.sport,\r\n          duration: Date.now() - startTime,\r\n          errorsCount: 1,\r\n        },\r\n        message: 'Validation system error',\r\n        error: {\r\n          name: error instanceof Error ? error.name : 'UnknownError',\r\n          message: error instanceof Error ? error.message : String(error),\r\n          stack: error instanceof Error ? error.stack : undefined,\r\n        },\r\n      });\r\n\r\n      return {\r\n        isValid: false,\r\n        errors: [validationError],\r\n        warnings: [],\r\n        qualityScore: 0,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate multiple props in batch with performance optimization\r\n   */\r\n  validateBatch(\r\n    rawDataArray: RawSportsData[],\r\n    sport?: string,\r\n    context: { source?: string; timestamp?: number } = {}\r\n  ): ValidationResult<ValidatedSportsProp[]> {\r\n    const startTime = Date.now();\r\n    const validatedProps: ValidatedSportsProp[] = [];\r\n    const allErrors: ValidationError[] = [];\r\n    const allWarnings: string[] = [];\r\n    let totalQualityScore = 0;\r\n\r\n    for (let i = 0; i < rawDataArray.length; i++) {\r\n      const result = this.validateSportsProp(rawDataArray[i], sport, {\r\n        ...context,\r\n        source: `${context.source || 'batch'}[${i}]`,\r\n      });\r\n\r\n      if (result.isValid && result.data) {\r\n        validatedProps.push(result.data);\r\n        totalQualityScore += result.qualityScore;\r\n      }\r\n\r\n      allErrors.push(...result.errors);\r\n      allWarnings.push(...result.warnings);\r\n    }\r\n\r\n    const avgQualityScore =\r\n      validatedProps.length > 0 ? totalQualityScore / validatedProps.length : 0;\r\n    const isValid =\r\n      validatedProps.length > 0 && allErrors.filter(e => e.severity === 'error').length === 0;\r\n\r\n    this.logger({\r\n      timestamp: new Date().toISOString(),\r\n      level: 'info',\r\n      component: 'DataValidator',\r\n      operation: 'validateBatch',\r\n      metadata: {\r\n        sport,\r\n        duration: Date.now() - startTime,\r\n        dataQuality: avgQualityScore,\r\n        errorsCount: allErrors.length,\r\n      },\r\n      message: `Batch validation completed: ${validatedProps.length}/${rawDataArray.length} props validated`,\r\n    });\r\n\r\n    return {\r\n      isValid,\r\n      data: isValid ? validatedProps : undefined,\r\n      errors: allErrors,\r\n      warnings: allWarnings,\r\n      qualityScore: avgQualityScore,\r\n    };\r\n  }\r\n\r\n  private validateAndNormalizeField(\r\n    fieldName: keyof ValidatedSportsProp,\r\n    rawData: RawSportsData,\r\n    validatedData: Partial<ValidatedSportsProp>,\r\n    config: DataNormalizationConfig,\r\n    errors: ValidationError[],\r\n    transformations: string[],\r\n    fallbacksUsed: string[]\r\n  ): void {\r\n    const mappings = config.fieldMappings[fieldName] || [fieldName];\r\n    let rawValue: any = undefined;\r\n    let sourceField: string | undefined;\r\n\r\n    // Find the first available value from mapped fields\r\n    for (const mapping of mappings) {\r\n      if (rawData[mapping] !== undefined && rawData[mapping] !== null && rawData[mapping] !== '') {\r\n        rawValue = rawData[mapping];\r\n        sourceField = mapping;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Apply field-specific validation and normalization\r\n    try {\r\n      switch (fieldName) {\r\n        case 'id':\r\n          validatedData.id = this.normalizeId(rawValue, rawData, fallbacksUsed);\r\n          break;\r\n        case 'player':\r\n          validatedData.player = this.normalizePlayer(rawValue, rawData, fallbacksUsed);\r\n          break;\r\n        case 'matchup':\r\n          validatedData.matchup = this.normalizeMatchup(rawValue, rawData, fallbacksUsed);\r\n          break;\r\n        case 'stat':\r\n          validatedData.stat = this.normalizeStat(rawValue, fallbacksUsed);\r\n          break;\r\n        case 'line':\r\n          validatedData.line = this.normalizeLine(rawValue, errors, fieldName);\r\n          break;\r\n        case 'overOdds':\r\n        case 'underOdds':\r\n          (validatedData as any)[fieldName] = this.normalizeOdds(rawValue, errors, fieldName);\r\n          break;\r\n        case 'confidence':\r\n          validatedData.confidence = this.normalizeConfidence(rawValue, errors, fieldName);\r\n          break;\r\n        case 'sport':\r\n          validatedData.sport = this.normalizeSport(rawValue, config.sport, errors, fallbacksUsed);\r\n          break;\r\n        case 'gameTime':\r\n          validatedData.gameTime = this.normalizeGameTime(rawValue, fallbacksUsed);\r\n          break;\r\n        case 'pickType':\r\n          validatedData.pickType = this.normalizePickType(rawValue, fallbacksUsed);\r\n          break;\r\n      }\r\n\r\n      // Track transformation if source field was different\r\n      if (sourceField && sourceField !== fieldName) {\r\n        transformations.push(`${fieldName}:${sourceField}`);\r\n      }\r\n    } catch (error) {\r\n      errors.push({\r\n        field: fieldName,\r\n        message: `Failed to normalize field: ${\r\n          error instanceof Error ? error.message : String(error)\r\n        }`,\r\n        code: 'NORMALIZATION_ERROR',\r\n        severity: 'error',\r\n        suggestedFix: `Check the source data format for field ${fieldName}`,\r\n      });\r\n    }\r\n  }\r\n\r\n  private normalizeId(value: any, rawData: RawSportsData, fallbacksUsed: string[]): string {\r\n    if (value && typeof value === 'string' && value.trim()) {\r\n      return value.trim();\r\n    }\r\n\r\n    // Generate fallback ID\r\n    const fallbackId = `${rawData.player_name || rawData.player || 'unknown'}-${\r\n      rawData.stat_type || rawData.stat || 'unknown'\r\n    }-${Date.now()}`;\r\n    fallbacksUsed.push('id:generated');\r\n    return fallbackId;\r\n  }\r\n\r\n  private normalizePlayer(value: any, rawData: RawSportsData, fallbacksUsed: string[]): string {\r\n    if (value && typeof value === 'string' && value.trim()) {\r\n      const normalized = value.trim();\r\n      // Don't allow \"Over\" or \"Under\" as player names\r\n      if (normalized.toLowerCase() === 'over' || normalized.toLowerCase() === 'under') {\r\n        const fallback = rawData.event_name || 'Unknown Team';\r\n        fallbacksUsed.push('player:event_name');\r\n        return fallback;\r\n      }\r\n      return normalized;\r\n    }\r\n\r\n    const fallback = rawData.event_name || 'Unknown';\r\n    fallbacksUsed.push('player:event_name');\r\n    return fallback;\r\n  }\r\n\r\n  private normalizeMatchup(value: any, rawData: RawSportsData, fallbacksUsed: string[]): string {\r\n    if (value && typeof value === 'string' && value.trim()) {\r\n      return value.trim();\r\n    }\r\n\r\n    const fallback = rawData.event_name || 'Unknown vs Unknown';\r\n    fallbacksUsed.push('matchup:event_name');\r\n    return fallback;\r\n  }\r\n\r\n  private normalizeStat(value: any, fallbacksUsed: string[]): string {\r\n    if (value && typeof value === 'string' && value.trim()) {\r\n      return value.trim();\r\n    }\r\n\r\n    fallbacksUsed.push('stat:unknown');\r\n    return 'Unknown';\r\n  }\r\n\r\n  private normalizeLine(value: any, errors: ValidationError[], fieldName: string): number {\r\n    if (value === null || value === undefined || value === '') {\r\n      return 0;\r\n    }\r\n\r\n    const numValue = typeof value === 'number' ? value : parseFloat(String(value));\r\n\r\n    if (isNaN(numValue)) {\r\n      errors.push({\r\n        field: fieldName,\r\n        message: `Invalid line value: ${value}`,\r\n        code: 'INVALID_NUMBER',\r\n        severity: 'warning',\r\n        suggestedFix: 'Provide a valid numeric line value',\r\n      });\r\n      return 0;\r\n    }\r\n\r\n    return numValue;\r\n  }\r\n\r\n  private normalizeOdds(value: any, errors: ValidationError[], fieldName: string): number {\r\n    if (value === null || value === undefined || value === '') {\r\n      return 0;\r\n    }\r\n\r\n    const numValue = typeof value === 'number' ? value : parseFloat(String(value));\r\n\r\n    if (isNaN(numValue)) {\r\n      errors.push({\r\n        field: fieldName,\r\n        message: `Invalid odds value: ${value}`,\r\n        code: 'INVALID_ODDS',\r\n        severity: 'warning',\r\n        suggestedFix: 'Provide a valid numeric odds value',\r\n      });\r\n      return 0;\r\n    }\r\n\r\n    return numValue;\r\n  }\r\n\r\n  private normalizeConfidence(value: any, errors: ValidationError[], fieldName: string): number {\r\n    if (value === null || value === undefined || value === '') {\r\n      return 0;\r\n    }\r\n\r\n    const numValue = typeof value === 'number' ? value : parseFloat(String(value));\r\n\r\n    if (isNaN(numValue)) {\r\n      errors.push({\r\n        field: fieldName,\r\n        message: `Invalid confidence value: ${value}`,\r\n        code: 'INVALID_CONFIDENCE',\r\n        severity: 'error',\r\n        suggestedFix: 'Provide a valid numeric confidence value between 0-100',\r\n      });\r\n      return 0;\r\n    }\r\n\r\n    if (numValue < MIN_CONFIDENCE_SCORE || numValue > MAX_CONFIDENCE_SCORE) {\r\n      errors.push({\r\n        field: fieldName,\r\n        message: `Confidence value out of range: ${numValue} (expected 0-100)`,\r\n        code: 'CONFIDENCE_OUT_OF_RANGE',\r\n        severity: 'warning',\r\n        suggestedFix: `Provide a confidence value between ${MIN_CONFIDENCE_SCORE}-${MAX_CONFIDENCE_SCORE}`,\r\n      });\r\n      return Math.max(MIN_CONFIDENCE_SCORE, Math.min(MAX_CONFIDENCE_SCORE, numValue));\r\n    }\r\n\r\n    return numValue;\r\n  }\r\n\r\n  private normalizeSport(\r\n    value: any,\r\n    configSport: string,\r\n    errors: ValidationError[],\r\n    fallbacksUsed: string[]\r\n  ): string {\r\n    if (value && typeof value === 'string' && value.trim()) {\r\n      const normalized = value.trim().toUpperCase();\r\n      if (SPORT_VALUES.includes(normalized as any)) {\r\n        return normalized;\r\n      }\r\n    }\r\n\r\n    // Use config sport as fallback\r\n    if (configSport && configSport !== 'Unknown') {\r\n      fallbacksUsed.push('sport:config');\r\n      return configSport;\r\n    }\r\n\r\n    errors.push({\r\n      field: 'sport',\r\n      message: `Invalid or missing sport value: ${value}`,\r\n      code: 'INVALID_SPORT',\r\n      severity: 'error',\r\n      suggestedFix: `Provide a valid sport value: ${SPORT_VALUES.join(', ')}`,\r\n    });\r\n\r\n    fallbacksUsed.push('sport:unknown');\r\n    return 'Unknown';\r\n  }\r\n\r\n  private normalizeGameTime(value: any, fallbacksUsed: string[]): string {\r\n    if (value && typeof value === 'string' && value.trim()) {\r\n      try {\r\n        // Try to parse as ISO string\r\n        const date = new Date(value);\r\n        if (!isNaN(date.getTime())) {\r\n          return date.toISOString();\r\n        }\r\n      } catch (error) {\r\n        // Fall through to fallback\r\n      }\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n      try {\r\n        const date = new Date(value);\r\n        if (!isNaN(date.getTime())) {\r\n          return date.toISOString();\r\n        }\r\n      } catch (error) {\r\n        // Fall through to fallback\r\n      }\r\n    }\r\n\r\n    fallbacksUsed.push('gameTime:current');\r\n    return new Date().toISOString();\r\n  }\r\n\r\n  private normalizePickType(\r\n    value: any,\r\n    fallbacksUsed: string[]\r\n  ): 'prop' | 'spread' | 'total' | 'moneyline' {\r\n    if (value && typeof value === 'string' && value.trim()) {\r\n      const normalized = value.trim().toLowerCase() as 'prop' | 'spread' | 'total' | 'moneyline';\r\n      if (PICK_TYPE_VALUES.includes(normalized)) {\r\n        return normalized;\r\n      }\r\n    }\r\n\r\n    fallbacksUsed.push('pickType:prop');\r\n    return 'prop';\r\n  }\r\n\r\n  private calculateDataQuality(\r\n    validatedData: ValidatedSportsProp,\r\n    rawData: RawSportsData,\r\n    errors: ValidationError[]\r\n  ): DataQualityMetrics {\r\n    const requiredFieldsPresent = REQUIRED_PROP_FIELDS.filter(\r\n      field =>\r\n        validatedData[field] !== undefined &&\r\n        validatedData[field] !== null &&\r\n        validatedData[field] !== ''\r\n    ).length;\r\n\r\n    const completeness = (requiredFieldsPresent / REQUIRED_PROP_FIELDS.length) * 100;\r\n\r\n    const errorCount = errors.filter(e => e.severity === 'error').length;\r\n    const warningCount = errors.filter(e => e.severity === 'warning').length;\r\n    const accuracy = Math.max(0, 100 - errorCount * 20 - warningCount * 5);\r\n\r\n    // Check consistency (proper data types, reasonable values)\r\n    let consistencyScore = 100;\r\n    if (typeof validatedData.line !== 'number' || isNaN(validatedData.line)) consistencyScore -= 10;\r\n    if (typeof validatedData.confidence !== 'number' || isNaN(validatedData.confidence))\r\n      consistencyScore -= 15;\r\n    if (!SPORT_VALUES.includes(validatedData.sport as any) && validatedData.sport !== 'Unknown')\r\n      consistencyScore -= 20;\r\n\r\n    // Timeliness based on data freshness\r\n    const dataAge =\r\n      Date.now() - (rawData.timestamp ? new Date(rawData.timestamp).getTime() : Date.now());\r\n    const timeliness = Math.max(0, 100 - (dataAge / (1000 * 60 * 60)) * 2); // Reduce by 2 points per hour\r\n\r\n    return {\r\n      completeness,\r\n      accuracy,\r\n      consistency: Math.max(0, consistencyScore),\r\n      timeliness,\r\n    };\r\n  }\r\n\r\n  private calculateOverallQualityScore(metrics: DataQualityMetrics): number {\r\n    // Weighted average: completeness and accuracy are most important\r\n    return Math.round(\r\n      metrics.completeness * 0.3 +\r\n        metrics.accuracy * 0.4 +\r\n        metrics.consistency * 0.2 +\r\n        metrics.timeliness * 0.1\r\n    );\r\n  }\r\n\r\n  private hasRequiredFields(data: Partial<ValidatedSportsProp>): boolean {\r\n    return REQUIRED_PROP_FIELDS.every(\r\n      field => data[field] !== undefined && data[field] !== null && data[field] !== ''\r\n    );\r\n  }\r\n\r\n  private logValidationResult(\r\n    isValid: boolean,\r\n    errors: ValidationError[],\r\n    warnings: string[],\r\n    data: Partial<ValidatedSportsProp>,\r\n    startTime: number\r\n  ): void {\r\n    this.logger({\r\n      timestamp: new Date().toISOString(),\r\n      level: isValid ? 'info' : 'warn',\r\n      component: 'DataValidator',\r\n      operation: 'validateSportsProp',\r\n      metadata: {\r\n        sport: data.sport,\r\n        duration: Date.now() - startTime,\r\n        dataQuality: data.qualityScore,\r\n        errorsCount: errors.length,\r\n        fallbacksUsed: data._validationMeta?.fallbacksUsed,\r\n      },\r\n      message: `Validation ${isValid ? 'passed' : 'failed'}: ${errors.length} errors, ${\r\n        warnings.length\r\n      } warnings`,\r\n    });\r\n  }\r\n\r\n  private initializeNormalizationConfigs(): void {\r\n    // MLB configuration\r\n    this.normalizationConfigs.set('MLB', {\r\n      sport: 'MLB',\r\n      fieldMappings: {\r\n        id: ['id', 'event_id', 'prop_id'],\r\n        player: ['player', 'player_name'],\r\n        matchup: ['matchup', 'event_name'],\r\n        stat: ['stat', 'stat_type'],\r\n        line: ['line', 'line_score'],\r\n        overOdds: ['overOdds', 'over_odds'],\r\n        underOdds: ['underOdds', 'under_odds'],\r\n        confidence: ['confidence'],\r\n        sport: ['sport'],\r\n        gameTime: ['gameTime', 'start_time'],\r\n        pickType: ['pickType'],\r\n      },\r\n      validationRules: [], // Will be populated as needed\r\n      fallbackValues: {\r\n        sport: 'MLB',\r\n        pickType: 'prop',\r\n        confidence: 0,\r\n      },\r\n      requiredFields: [...REQUIRED_PROP_FIELDS],\r\n      optionalFields: ['overOdds', 'underOdds', 'gameTime', 'pickType'],\r\n    });\r\n\r\n    // Add configurations for other sports as needed\r\n    ['NBA', 'NFL', 'NHL', 'Soccer'].forEach(sport => {\r\n      this.normalizationConfigs.set(sport, {\r\n        ...this.normalizationConfigs.get('MLB')!,\r\n        sport,\r\n        fallbackValues: {\r\n          ...this.normalizationConfigs.get('MLB')!.fallbackValues,\r\n          sport,\r\n        },\r\n      });\r\n    });\r\n  }\r\n\r\n  private getNormalizationConfig(sport: string): DataNormalizationConfig {\r\n    return this.normalizationConfigs.get(sport) || this.normalizationConfigs.get('MLB')!;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const dataValidator = new EnhancedDataValidator();\r\n"],"mappings":"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","ignoreList":[]}