4e0c49e4746f49345834c648c8b0f313
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOptimizedDataFetching = useOptimizedDataFetching;
var _react = require("react");
// Custom debounce implementation since lodash might not be available
function debounce(func, delay) {
  let timeoutId = null;
  const debouncedFunction = (...args) => {
    if (timeoutId) {
      clearTimeout(timeoutId);
    }
    timeoutId = setTimeout(() => func(...args), delay);
  };
  debouncedFunction.cancel = () => {
    if (timeoutId) {
      clearTimeout(timeoutId);
      timeoutId = null;
    }
  };
  return debouncedFunction;
}
/**
 * Optimized data fetching hook with debouncing, caching, and proper cleanup
 * to prevent unnecessary re-renders and improve performance.
 */
function useOptimizedDataFetching(fetchFunction, dependencies, options = {}) {
  const {
    debounceDelay = 300,
    cacheTime = 5 * 60 * 1000,
    // 5 minutes
    autoRefresh = false,
    refreshInterval = 30000,
    // 30 seconds
    maxRetries = 3
  } = options;
  const [data, setData] = (0, _react.useState)(null);
  const [loading, setLoading] = (0, _react.useState)(false);
  const [error, setError] = (0, _react.useState)(null);
  const cacheRef = (0, _react.useRef)(new Map());
  const abortControllerRef = (0, _react.useRef)(null);
  const intervalRef = (0, _react.useRef)(null);
  const retryCountRef = (0, _react.useRef)(0);

  // Create cache key from dependencies
  const cacheKey = JSON.stringify(dependencies);

  // Check cache for existing data
  const getCachedData = (0, _react.useCallback)(() => {
    const cached = cacheRef.current.get(cacheKey);
    if (cached && Date.now() < cached.expires) {
      return cached.data;
    }
    return null;
  }, [cacheKey]);

  // Store data in cache
  const setCachedData = (0, _react.useCallback)(newData => {
    cacheRef.current.set(cacheKey, {
      data: newData,
      timestamp: Date.now(),
      expires: Date.now() + cacheTime
    });
  }, [cacheKey, cacheTime]);

  // Fetch data with proper error handling and retries
  const fetchData = (0, _react.useCallback)(async (isRetry = false) => {
    // Check cache first
    const cachedData = getCachedData();
    if (cachedData && !isRetry) {
      setData(cachedData);
      setError(null);
      return;
    }

    // Cancel any ongoing request
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }
    abortControllerRef.current = new AbortController();
    setLoading(true);
    setError(null);
    try {
      const result = await fetchFunction();

      // Check if request was aborted
      if (abortControllerRef.current?.signal.aborted) {
        return;
      }
      setData(result);
      setCachedData(result);
      retryCountRef.current = 0;
    } catch (err) {
      // Check if request was aborted
      if (abortControllerRef.current?.signal.aborted) {
        return;
      }
      const errorMessage = err instanceof Error ? err.message : 'Unknown error';

      // Retry logic
      if (retryCountRef.current < maxRetries) {
        retryCountRef.current++;
        console.warn(`Data fetch failed, retrying (${retryCountRef.current}/${maxRetries}):`, errorMessage);
        setTimeout(() => fetchData(true), 1000 * retryCountRef.current);
        return;
      }
      setError(errorMessage);
      console.error('Data fetch failed after all retries:', err);
    } finally {
      setLoading(false);
    }
  }, [fetchFunction, getCachedData, setCachedData, maxRetries]);

  // Debounced fetch function
  const debouncedFetch = (0, _react.useCallback)(debounce(() => fetchData(), debounceDelay), [fetchData, debounceDelay]);

  // Effect to trigger data fetching when dependencies change
  (0, _react.useEffect)(() => {
    debouncedFetch();

    // Cleanup debounced function on dependency change
    return () => {
      debouncedFetch.cancel();
    };
  }, [debouncedFetch, ...dependencies]);

  // Auto-refresh effect
  (0, _react.useEffect)(() => {
    if (!autoRefresh) return;
    intervalRef.current = setInterval(() => {
      fetchData();
    }, refreshInterval);
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [autoRefresh, refreshInterval, fetchData]);

  // Cleanup on unmount
  (0, _react.useEffect)(() => {
    return () => {
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
      debouncedFetch.cancel();
    };
  }, []);

  // Manual refresh function
  const refresh = (0, _react.useCallback)(() => {
    // Clear cache for this key
    cacheRef.current.delete(cacheKey);
    fetchData();
  }, [cacheKey, fetchData]);
  return {
    data,
    loading,
    error,
    refresh,
    isStale: data ? Date.now() - (cacheRef.current.get(cacheKey)?.timestamp || 0) > cacheTime : false
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,