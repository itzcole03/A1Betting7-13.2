2f4665c1f29ba8e847d786b53bd957a5
"use strict";

function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
// Jest setup for enhanced config â€” plain JS to avoid TypeScript parsing issues
/* eslint-disable no-undef */
// Provide import.meta.env shim for components that read it
if (typeof global.importMeta === 'undefined') {
  global.importMeta = {
    env: {}
  };
}
if (typeof global.import === 'undefined') {
  global.import = global.import || function () {};
}
// Ensure modules can read import.meta.env
if (typeof global.import !== 'undefined' && typeof global.import.meta === 'undefined') {
  global.import.meta = {
    env: {
      MODE: 'test',
      DEV: false,
      PROD: false,
      VITE_API_URL: 'http://localhost:8000'
    }
  };
}
// Also set window.import.meta for browser code
if (typeof window !== 'undefined' && typeof window.import === 'undefined') {
  window.import = window.import || {};
  window.import.meta = window.import.meta || {
    env: {
      MODE: 'test',
      DEV: false,
      PROD: false
    }
  };
}

// Stub URL.createObjectURL used by components
if (typeof window !== 'undefined' && !window.URL.createObjectURL) {
  window.URL.createObjectURL = function () {
    return 'blob:mock';
  };
}

// No-op for navigation methods that jsdom doesn't implement
if (typeof window !== 'undefined') {
  try {
    const loc = window.location || {};
    if (loc && typeof loc.assign !== 'function') {
      Object.defineProperty(window.location, 'assign', {
        configurable: true,
        writable: true,
        value: () => {}
      });
    }
    if (loc && typeof loc.reload !== 'function') {
      Object.defineProperty(window.location, 'reload', {
        configurable: true,
        writable: true,
        value: () => {}
      });
    }
  } catch (e) {
    // Some environments lock window.location; ignore if we cannot redefine
  }

  // Polyfill BroadcastChannel for msw/node or other libraries that expect it
  if (typeof global.BroadcastChannel === 'undefined') {
    class MockBroadcastChannel {
      constructor(name) {
        this.name = name;
        this.onmessage = null;
      }
      postMessage(msg) {
        // no-op
      }
      close() {
        // no-op
      }
      addEventListener() {
        // no-op
      }
      removeEventListener() {
        // no-op
      }
    }
    global.BroadcastChannel = MockBroadcastChannel;
  }

  // Hoist manual mocks so modules see them before being imported in tests
  try {
    // Mock unifiedApiService so components that import it get the manual mock
    if (typeof jest !== 'undefined' && jest && typeof jest.mock === 'function') {
      _getJestObj().mock('src/services/unifiedApiService');
      _getJestObj().mock('axios');
    }
  } catch (err) {
    // If jest isn't available in this environment, ignore
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnbG9iYWwiLCJpbXBvcnRNZXRhIiwiZW52IiwiaW1wb3J0IiwibWV0YSIsIk1PREUiLCJERVYiLCJQUk9EIiwiVklURV9BUElfVVJMIiwid2luZG93IiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwibG9jIiwibG9jYXRpb24iLCJhc3NpZ24iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJyZWxvYWQiLCJlIiwiQnJvYWRjYXN0Q2hhbm5lbCIsIk1vY2tCcm9hZGNhc3RDaGFubmVsIiwiY29uc3RydWN0b3IiLCJuYW1lIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJtc2ciLCJjbG9zZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiamVzdCIsIm1vY2siLCJfZ2V0SmVzdE9iaiIsImVyciJdLCJzb3VyY2VzIjpbImplc3Quc2V0dXAuZW5oYW5jZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSmVzdCBzZXR1cCBmb3IgZW5oYW5jZWQgY29uZmlnIOKAlCBwbGFpbiBKUyB0byBhdm9pZCBUeXBlU2NyaXB0IHBhcnNpbmcgaXNzdWVzXHJcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXHJcbi8vIFByb3ZpZGUgaW1wb3J0Lm1ldGEuZW52IHNoaW0gZm9yIGNvbXBvbmVudHMgdGhhdCByZWFkIGl0XHJcbmlmICh0eXBlb2YgZ2xvYmFsLmltcG9ydE1ldGEgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgZ2xvYmFsLmltcG9ydE1ldGEgPSB7IGVudjoge30gfTtcclxufVxyXG5pZiAodHlwZW9mIGdsb2JhbC5pbXBvcnQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgZ2xvYmFsLmltcG9ydCA9IGdsb2JhbC5pbXBvcnQgfHwgZnVuY3Rpb24gKCkge307XHJcbn1cclxuLy8gRW5zdXJlIG1vZHVsZXMgY2FuIHJlYWQgaW1wb3J0Lm1ldGEuZW52XHJcbmlmICh0eXBlb2YgZ2xvYmFsLmltcG9ydCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGdsb2JhbC5pbXBvcnQubWV0YSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICBnbG9iYWwuaW1wb3J0Lm1ldGEgPSB7IGVudjogeyBNT0RFOiAndGVzdCcsIERFVjogZmFsc2UsIFBST0Q6IGZhbHNlLCBWSVRFX0FQSV9VUkw6ICdodHRwOi8vbG9jYWxob3N0OjgwMDAnIH0gfTtcclxufVxyXG4vLyBBbHNvIHNldCB3aW5kb3cuaW1wb3J0Lm1ldGEgZm9yIGJyb3dzZXIgY29kZVxyXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5pbXBvcnQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgd2luZG93LmltcG9ydCA9IHdpbmRvdy5pbXBvcnQgfHwge307XHJcbiAgd2luZG93LmltcG9ydC5tZXRhID0gd2luZG93LmltcG9ydC5tZXRhIHx8IHsgZW52OiB7IE1PREU6ICd0ZXN0JywgREVWOiBmYWxzZSwgUFJPRDogZmFsc2UgfSB9O1xyXG59XHJcblxyXG4vLyBTdHViIFVSTC5jcmVhdGVPYmplY3RVUkwgdXNlZCBieSBjb21wb25lbnRzXHJcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAhd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwpIHtcclxuICB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdibG9iOm1vY2snOyB9O1xyXG59XHJcblxyXG4vLyBOby1vcCBmb3IgbmF2aWdhdGlvbiBtZXRob2RzIHRoYXQganNkb20gZG9lc24ndCBpbXBsZW1lbnRcclxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGxvYyA9IHdpbmRvdy5sb2NhdGlvbiB8fCB7fTtcclxuICAgIGlmIChsb2MgJiYgdHlwZW9mIGxvYy5hc3NpZ24gIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5sb2NhdGlvbiwgJ2Fzc2lnbicsIHtcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICAgICAgdmFsdWU6ICgpID0+IHt9LFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChsb2MgJiYgdHlwZW9mIGxvYy5yZWxvYWQgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5sb2NhdGlvbiwgJ3JlbG9hZCcsIHtcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICAgICAgdmFsdWU6ICgpID0+IHt9LFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICAvLyBTb21lIGVudmlyb25tZW50cyBsb2NrIHdpbmRvdy5sb2NhdGlvbjsgaWdub3JlIGlmIHdlIGNhbm5vdCByZWRlZmluZVxyXG4gIH1cclxuXHJcbiAgLy8gUG9seWZpbGwgQnJvYWRjYXN0Q2hhbm5lbCBmb3IgbXN3L25vZGUgb3Igb3RoZXIgbGlicmFyaWVzIHRoYXQgZXhwZWN0IGl0XHJcbiAgaWYgKHR5cGVvZiBnbG9iYWwuQnJvYWRjYXN0Q2hhbm5lbCA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIGNsYXNzIE1vY2tCcm9hZGNhc3RDaGFubmVsIHtcclxuICAgICAgY29uc3RydWN0b3IobmFtZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5vbm1lc3NhZ2UgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICAgIHBvc3RNZXNzYWdlKG1zZykge1xyXG4gICAgICAgIC8vIG5vLW9wXHJcbiAgICAgIH1cclxuICAgICAgY2xvc2UoKSB7XHJcbiAgICAgICAgLy8gbm8tb3BcclxuICAgICAgfVxyXG4gICAgICBhZGRFdmVudExpc3RlbmVyKCkge1xyXG4gICAgICAgIC8vIG5vLW9wXHJcbiAgICAgIH1cclxuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHtcclxuICAgICAgICAvLyBuby1vcFxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBnbG9iYWwuQnJvYWRjYXN0Q2hhbm5lbCA9IE1vY2tCcm9hZGNhc3RDaGFubmVsO1xyXG4gIH1cclxuXHJcbiAgLy8gSG9pc3QgbWFudWFsIG1vY2tzIHNvIG1vZHVsZXMgc2VlIHRoZW0gYmVmb3JlIGJlaW5nIGltcG9ydGVkIGluIHRlc3RzXHJcbiAgdHJ5IHtcclxuICAgIC8vIE1vY2sgdW5pZmllZEFwaVNlcnZpY2Ugc28gY29tcG9uZW50cyB0aGF0IGltcG9ydCBpdCBnZXQgdGhlIG1hbnVhbCBtb2NrXHJcbiAgICBpZiAodHlwZW9mIGplc3QgIT09ICd1bmRlZmluZWQnICYmIGplc3QgJiYgdHlwZW9mIGplc3QubW9jayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBqZXN0Lm1vY2soJ3NyYy9zZXJ2aWNlcy91bmlmaWVkQXBpU2VydmljZScpO1xyXG4gICAgICBqZXN0Lm1vY2soJ2F4aW9zJyk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAvLyBJZiBqZXN0IGlzbid0IGF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50LCBpZ25vcmVcclxuICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLE9BQU9BLE1BQU0sQ0FBQ0MsVUFBVSxLQUFLLFdBQVcsRUFBRTtFQUM1Q0QsTUFBTSxDQUFDQyxVQUFVLEdBQUc7SUFBRUMsR0FBRyxFQUFFLENBQUM7RUFBRSxDQUFDO0FBQ2pDO0FBQ0EsSUFBSSxPQUFPRixNQUFNLENBQUNHLE1BQU0sS0FBSyxXQUFXLEVBQUU7RUFDeENILE1BQU0sQ0FBQ0csTUFBTSxHQUFHSCxNQUFNLENBQUNHLE1BQU0sSUFBSSxZQUFZLENBQUMsQ0FBQztBQUNq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