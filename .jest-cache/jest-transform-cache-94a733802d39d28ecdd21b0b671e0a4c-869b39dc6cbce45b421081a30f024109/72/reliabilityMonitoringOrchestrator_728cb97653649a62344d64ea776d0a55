083423a061eae65bffe76a2f21fd6683
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reliabilityMonitoringOrchestrator = exports.default = void 0;
var _logger = require("../utils/logger");
var _leanMode = require("../utils/leanMode");
var _dataPipelineStabilityMonitor = _interopRequireDefault(require("./dataPipelineStabilityMonitor"));
var _liveDemoPerformanceMonitor = _interopRequireDefault(require("./liveDemoPerformanceMonitor"));
var _ReliabilityMonitoringOrchestrator;
/**
 * Reliability Monitoring Orchestrator
 * Coordinates all monitoring systems and implements iterative improvements
 * Based on A1Betting_App_Issues_Report(4).md recommendations
 */
class ReliabilityMonitoringOrchestrator {
  /**
   * Compatibility: initialize monitoring (alias for startMonitoring)
   */
  async initialize() {
    return this.startMonitoring();
  }

  /**
   * Compatibility: cleanup monitoring (alias for stopMonitoring)
   */
  cleanup() {
    this.stopMonitoring();
  }
  constructor() {
    this.isActive = false;
    this.config = void 0;
    this.reports = [];
    this.lastReport = null;
    // Monitoring Components
    this.performanceMonitor = void 0;
    this.pipelineMonitor = void 0;
    // Monitoring Intervals
    this.performanceInterval = null;
    this.pipelineInterval = null;
    this.reportInterval = null;
    this.performanceMonitor = _liveDemoPerformanceMonitor.default.getInstance();
    this.pipelineMonitor = _dataPipelineStabilityMonitor.default.getInstance();

    // Default configuration optimized for transparency and reliability
    this.config = {
      performanceMonitoringInterval: 30000,
      // 30 seconds
      dataPipelineCheckInterval: 60000,
      // 1 minute
      reliabilityReportInterval: 300000,
      // 5 minutes
      alertThresholds: {
        performanceScore: 80,
        // Alert if below 80
        errorRate: 0.05,
        // Alert if above 5%
        responseTime: 3000,
        // Alert if above 3 seconds
        serviceDowntime: 30000 // Alert if service down for 30 seconds
      },
      autoRecovery: true,
      continuousImprovement: true
    };
  }
  static getInstance() {
    if (!ReliabilityMonitoringOrchestrator.instance) {
      ReliabilityMonitoringOrchestrator.instance = new ReliabilityMonitoringOrchestrator();
    }
    return ReliabilityMonitoringOrchestrator.instance;
  }

  /**
   * Start comprehensive monitoring as recommended in Issues Report
   */
  async startMonitoring() {
    // Stabilization: Check for lean mode to prevent heavy monitoring in development
    if ((0, _leanMode.isLeanMode)()) {
      _logger.logger.info('Lean mode enabled - skipping heavy monitoring', undefined, 'ReliabilityOrchestrator');
      return;
    }
    if (this.isActive) {
      _logger.logger.warn('Reliability monitoring already active', undefined, 'ReliabilityOrchestrator');
      return;
    }
    this.isActive = true;
    _logger.logger.info('Starting comprehensive reliability monitoring...', {
      config: this.config,
      timestamp: new Date().toISOString()
    }, 'ReliabilityOrchestrator');
    try {
      // Initialize performance monitoring
      await this.performanceMonitor.startMonitoring(this.config.performanceMonitoringInterval);

      // Initialize data pipeline monitoring
      await this.pipelineMonitor.startMonitoring(this.config.dataPipelineCheckInterval);

      // Set up periodic reliability reports
      this.reportInterval = setInterval(() => {
        this.generateReliabilityReport().catch(error => {
          _logger.logger.error('Failed to generate reliability report', {
            error
          }, 'ReliabilityOrchestrator');
        });
      }, this.config.reliabilityReportInterval);

      // Generate initial report
      await this.generateReliabilityReport();
      _logger.logger.info('Comprehensive reliability monitoring started successfully', undefined, 'ReliabilityOrchestrator');
    } catch (error) {
      this.isActive = false;
      _logger.logger.error('Failed to start reliability monitoring', {
        error
      }, 'ReliabilityOrchestrator');
      throw error;
    }
  }

  /**
   * Stop monitoring
   */
  stopMonitoring() {
    if (!this.isActive) return;
    this.isActive = false;

    // Stop component monitors
    this.performanceMonitor.stopMonitoring();
    this.pipelineMonitor.stopMonitoring();

    // Clear intervals
    if (this.reportInterval) {
      clearInterval(this.reportInterval);
      this.reportInterval = null;
    }
    _logger.logger.info('Reliability monitoring stopped', undefined, 'ReliabilityOrchestrator');
  }

  /**
   * Generate comprehensive reliability report
   */
  async generateReliabilityReport() {
    const timestamp = new Date();
    try {
      // Get performance health report
      const demoHealth = this.performanceMonitor.generateHealthReport();
      const pipelineHealth = this.pipelineMonitor.getHealthReport();

      // Calculate overall health metrics
      const performanceScore = demoHealth.overallScore;
      const pipelineScore = this.calculatePipelineScore(pipelineHealth);
      const overallScore = (performanceScore + pipelineScore) / 2;

      // Determine overall health status
      const overallHealth = this.determineOverallHealth(overallScore);
      const performanceGrade = this.calculatePerformanceGrade(overallScore);

      // Analyze trends
      const trends = this.analyzeTrends();

      // Generate improvement recommendations
      const improvements = this.generateImprovementRecommendations(demoHealth, pipelineHealth);
      const report = {
        timestamp,
        overallHealth,
        performanceGrade,
        demoPerformance: {
          score: performanceScore,
          grade: demoHealth.performanceGrade,
          issues: demoHealth.criticalIssues,
          recommendations: demoHealth.recommendations
        },
        dataPipeline: {
          score: pipelineScore,
          servicesHealthy: this.countHealthyServices(pipelineHealth),
          totalServices: Object.keys(pipelineHealth).length,
          criticalIssues: this.extractCriticalIssues(pipelineHealth),
          degradedServices: this.extractDegradedServices(pipelineHealth)
        },
        reliability: {
          uptime: this.calculateUptime(),
          errorRate: this.calculateErrorRate(demoHealth.metrics),
          recoveryTime: this.calculateRecoveryTime(),
          userExperience: this.calculateUserExperienceScore(demoHealth.metrics)
        },
        improvements,
        trends
      };

      // Store report
      this.reports.push(report);
      this.lastReport = report;

      // Keep only last 100 reports for memory efficiency
      if (this.reports.length > 100) {
        this.reports = this.reports.slice(-100);
      }

      // Check for alerts
      await this.checkAlertsAndAutoRecover(report);

      // Log report summary
      _logger.logger.info('Reliability report generated', {
        overallHealth,
        performanceGrade,
        overallScore,
        timestamp: timestamp.toISOString()
      }, 'ReliabilityOrchestrator');
      return report;
    } catch (error) {
      _logger.logger.error('Failed to generate reliability report', {
        error
      }, 'ReliabilityOrchestrator');
      throw error;
    }
  }

  /**
   * Calculate pipeline health score
   */
  calculatePipelineScore(healthReport) {
    const services = Object.values(healthReport);
    if (services.length === 0) return 0;
    let totalScore = 0;
    services.forEach(service => {
      if (service.status === 'healthy') totalScore += 100;else if (service.status === 'degraded') totalScore += 60;else totalScore += 0;
    });
    return totalScore / services.length;
  }

  /**
   * Determine overall health status
   */
  determineOverallHealth(score) {
    if (score >= 95) return 'excellent';
    if (score >= 85) return 'good';
    if (score >= 70) return 'fair';
    if (score >= 50) return 'poor';
    return 'critical';
  }

  /**
   * Calculate performance grade
   */
  calculatePerformanceGrade(score) {
    if (score >= 97) return 'A+';
    if (score >= 93) return 'A';
    if (score >= 85) return 'B';
    if (score >= 75) return 'C';
    if (score >= 65) return 'D';
    return 'F';
  }

  /**
   * Analyze trends for continuous improvement
   */
  analyzeTrends() {
    if (this.reports.length < 3) {
      return {
        performance: 'stable',
        reliability: 'stable',
        userSatisfaction: 'stable'
      };
    }
    const recent = this.reports.slice(-3);
    const older = this.reports.slice(-6, -3);
    if (older.length === 0) {
      return {
        performance: 'stable',
        reliability: 'stable',
        userSatisfaction: 'stable'
      };
    }
    const recentAvgPerf = recent.reduce((sum, r) => sum + r.demoPerformance.score, 0) / recent.length;
    const olderAvgPerf = older.reduce((sum, r) => sum + r.demoPerformance.score, 0) / older.length;
    const perfTrend = recentAvgPerf > olderAvgPerf + 2 ? 'improving' : recentAvgPerf < olderAvgPerf - 2 ? 'declining' : 'stable';
    return {
      performance: perfTrend,
      reliability: perfTrend,
      // Simplified for now
      userSatisfaction: perfTrend // Simplified for now
    };
  }

  /**
   * Generate improvement recommendations based on current state
   */
  generateImprovementRecommendations(demoHealth, pipelineHealth) {
    const immediate = [];
    const shortTerm = [];
    const longTerm = [];
    const automation = [];

    // Performance-based recommendations
    if (demoHealth.overallScore < 80) {
      immediate.push('Investigate performance degradation immediately');
      immediate.push('Check for memory leaks and optimize critical rendering paths');
    }
    if (demoHealth.metrics.pageLoadTime > 3000) {
      shortTerm.push('Implement code splitting and lazy loading');
      shortTerm.push('Optimize bundle size and reduce JavaScript payload');
    }

    // Pipeline-based recommendations
    const unhealthyServices = Object.values(pipelineHealth).filter(s => s.status !== 'healthy');
    if (unhealthyServices.length > 0) {
      immediate.push(`Address ${unhealthyServices.length} unhealthy service(s)`);
      automation.push('Implement automated service recovery mechanisms');
    }

    // Proactive improvements
    longTerm.push('Implement predictive analytics for proactive issue detection');
    longTerm.push('Enhance error recovery mechanisms with circuit breakers');
    longTerm.push('Develop automated performance optimization');
    automation.push('Set up automated alerting for critical thresholds');
    automation.push('Implement self-healing infrastructure components');
    return {
      immediate,
      shortTerm,
      longTerm,
      automation
    };
  }

  /**
   * Check alerts and implement auto-recovery
   */
  async checkAlertsAndAutoRecover(report) {
    const alerts = [];

    // Performance alerts
    if (report.demoPerformance.score < this.config.alertThresholds.performanceScore) {
      alerts.push(`Performance score below threshold: ${report.demoPerformance.score}`);
    }

    // Error rate alerts
    if (report.reliability.errorRate > this.config.alertThresholds.errorRate) {
      alerts.push(`Error rate above threshold: ${(report.reliability.errorRate * 100).toFixed(2)}%`);
    }

    // Service health alerts
    if (report.dataPipeline.criticalIssues.length > 0) {
      alerts.push(`Critical data pipeline issues: ${report.dataPipeline.criticalIssues.join(', ')}`);
    }

    // Log alerts
    if (alerts.length > 0) {
      _logger.logger.warn('Reliability alerts triggered', {
        alerts,
        report: {
          overallHealth: report.overallHealth,
          performanceGrade: report.performanceGrade,
          timestamp: report.timestamp
        }
      }, 'ReliabilityOrchestrator');

      // Auto-recovery if enabled
      if (this.config.autoRecovery) {
        await this.attemptAutoRecovery(report, alerts);
      }
    }
  }

  /**
   * Attempt automatic recovery for common issues
   */
  async attemptAutoRecovery(report, alerts) {
    _logger.logger.info('Attempting automatic recovery', {
      alerts
    }, 'ReliabilityOrchestrator');

    // Clear browser cache if performance is degraded
    if (report.demoPerformance.score < 70) {
      try {
        if ('serviceWorker' in navigator) {
          const registrations = await navigator.serviceWorker.getRegistrations();
          for (const registration of registrations) {
            await registration.unregister();
          }
        }
        _logger.logger.info('Cleared service worker cache for performance recovery', undefined, 'ReliabilityOrchestrator');
      } catch (error) {
        _logger.logger.warn('Failed to clear service worker cache', {
          error
        }, 'ReliabilityOrchestrator');
      }
    }

    // Restart monitoring components if they're degraded
    if (report.dataPipeline.degradedServices.length > 0) {
      try {
        this.pipelineMonitor.stopMonitoring();
        await new Promise(resolve => setTimeout(resolve, 2000));
        await this.pipelineMonitor.startMonitoring(this.config.dataPipelineCheckInterval);
        _logger.logger.info('Restarted pipeline monitoring for recovery', undefined, 'ReliabilityOrchestrator');
      } catch (error) {
        _logger.logger.error('Failed to restart pipeline monitoring', {
          error
        }, 'ReliabilityOrchestrator');
      }
    }
  }

  // Helper methods
  countHealthyServices(healthReport) {
    return Object.values(healthReport).filter(s => s.status === 'healthy').length;
  }
  extractCriticalIssues(healthReport) {
    const issues = [];
    Object.entries(healthReport).forEach(([service, health]) => {
      if (health.status === 'unhealthy') {
        issues.push(`${service}: ${health.errors?.join(', ') || 'Service unhealthy'}`);
      }
    });
    return issues;
  }
  extractDegradedServices(healthReport) {
    return Object.entries(healthReport).filter(([_, health]) => health.status === 'degraded').map(([service, _]) => service);
  }
  calculateUptime() {
    // Simplified uptime calculation - in production would track actual downtime
    if (this.reports.length === 0) return 100;
    const healthyReports = this.reports.filter(r => r.overallHealth !== 'critical').length;
    return healthyReports / this.reports.length * 100;
  }
  calculateErrorRate(metrics) {
    const totalInteractions = Math.max(metrics.userInteractions, 1);
    return metrics.errorCount / totalInteractions;
  }
  calculateRecoveryTime() {
    // Simplified - would track actual recovery times in production
    return 30; // Average 30 seconds recovery time
  }
  calculateUserExperienceScore(metrics) {
    let score = 100;

    // Penalize based on performance metrics
    if (metrics.pageLoadTime > 3000) score -= 20;
    if (metrics.firstContentfulPaint > 1800) score -= 15;
    if (metrics.cumulativeLayoutShift > 0.1) score -= 25;
    if (metrics.errorCount > 0) score -= metrics.errorCount * 10;
    return Math.max(0, score);
  }

  // Public API
  getLatestReport() {
    return this.lastReport;
  }
  getReportsHistory() {
    return [...this.reports];
  }
  isMonitoringActive() {
    return this.isActive;
  }
  updateConfiguration(newConfig) {
    this.config = {
      ...this.config,
      ...newConfig
    };
    _logger.logger.info('Reliability monitoring configuration updated', {
      config: this.config
    }, 'ReliabilityOrchestrator');
  }
}

// Export singleton instance for easy importing
_ReliabilityMonitoringOrchestrator = ReliabilityMonitoringOrchestrator;
ReliabilityMonitoringOrchestrator.instance = void 0;
const reliabilityMonitoringOrchestrator = exports.reliabilityMonitoringOrchestrator = ReliabilityMonitoringOrchestrator.getInstance();
var _default = exports.default = ReliabilityMonitoringOrchestrator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,