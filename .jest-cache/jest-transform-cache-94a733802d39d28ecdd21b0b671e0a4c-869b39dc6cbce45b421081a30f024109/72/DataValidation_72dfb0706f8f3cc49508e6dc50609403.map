{"version":3,"names":["SPORT_VALUES","exports","PICK_TYPE_VALUES","MIN_CONFIDENCE_SCORE","MAX_CONFIDENCE_SCORE","MIN_QUALITY_SCORE","MAX_QUALITY_SCORE","REQUIRED_PROP_FIELDS","OPTIONAL_PROP_FIELDS"],"sources":["DataValidation.ts"],"sourcesContent":["/**\r\n * Enhanced Data Validation and Normalization Types\r\n * Provides comprehensive type safety and data quality assurance\r\n */\r\n\r\nexport interface ValidationResult<T> {\r\n  isValid: boolean;\r\n  data?: T;\r\n  errors: ValidationError[];\r\n  warnings: string[];\r\n  qualityScore: number; // 0-100, quality rating of the data\r\n}\r\n\r\nexport interface ValidationError {\r\n  field: string;\r\n  message: string;\r\n  code: string;\r\n  severity: 'error' | 'warning' | 'info';\r\n  suggestedFix?: string;\r\n}\r\n\r\nexport interface DataQualityMetrics {\r\n  completeness: number; // % of required fields present\r\n  accuracy: number; // % of fields with valid values\r\n  consistency: number; // % of fields matching expected patterns\r\n  timeliness: number; // how recent/fresh the data is\r\n}\r\n\r\n// Enhanced interfaces for sports data\r\nexport interface ValidatedSportsProp {\r\n  id: string;\r\n  player: string;\r\n  matchup: string;\r\n  stat: string;\r\n  line: number;\r\n  overOdds: number;\r\n  underOdds: number;\r\n  confidence: number;\r\n  sport: 'MLB' | 'NBA' | 'NFL' | 'NHL' | 'Soccer' | string;\r\n  gameTime: string; // ISO string\r\n  pickType: 'prop' | 'spread' | 'total' | 'moneyline';\r\n  espnPlayerId?: string; // For player headshots\r\n\r\n  // Data quality tracking\r\n  dataSource: string;\r\n  validatedAt: string;\r\n  qualityScore: number;\r\n\r\n  // Original data preservation\r\n  _originalData?: any;\r\n  _validationMeta?: {\r\n    processingTime: number;\r\n    transformations: string[];\r\n    fallbacksUsed: string[];\r\n  };\r\n}\r\n\r\nexport interface RawSportsData {\r\n  // Common API fields with various naming conventions\r\n  id?: string;\r\n  event_id?: string;\r\n  player?: string;\r\n  player_name?: string;\r\n  event_name?: string;\r\n  matchup?: string;\r\n  stat?: string;\r\n  stat_type?: string;\r\n  line?: string | number;\r\n  line_score?: string | number;\r\n  overOdds?: string | number;\r\n  over_odds?: string | number;\r\n  underOdds?: string | number;\r\n  under_odds?: string | number;\r\n  value?: string | number;\r\n  confidence?: string | number;\r\n  sport?: string;\r\n  gameTime?: string;\r\n  start_time?: string;\r\n  pickType?: string;\r\n\r\n  // Meta fields\r\n  source?: string;\r\n  timestamp?: string | number;\r\n  [key: string]: any; // Allow additional fields\r\n}\r\n\r\nexport interface DataNormalizationConfig {\r\n  sport: string;\r\n  fieldMappings: Record<string, string[]>; // target field -> possible source fields\r\n  validationRules: ValidationRule[];\r\n  fallbackValues: Partial<ValidatedSportsProp>;\r\n  requiredFields: string[];\r\n  optionalFields: string[];\r\n}\r\n\r\nexport interface ValidationRule {\r\n  field: string;\r\n  type: 'string' | 'number' | 'boolean' | 'date' | 'enum' | 'pattern';\r\n  required: boolean;\r\n  validator?: (value: any) => boolean;\r\n  normalizer?: (value: any) => any;\r\n  errorMessage?: string;\r\n  enumValues?: string[];\r\n  pattern?: RegExp;\r\n  min?: number;\r\n  max?: number;\r\n}\r\n\r\nexport interface CacheInvalidationEvent {\r\n  type: 'sport_update' | 'prop_update' | 'game_update' | 'manual' | 'time_based';\r\n  sport?: string;\r\n  gameId?: string;\r\n  propId?: string;\r\n  timestamp: number;\r\n  reason: string;\r\n  affectedKeys: string[];\r\n}\r\n\r\nexport interface EnhancedRequestMetrics {\r\n  // Basic metrics\r\n  totalRequests: number;\r\n  cacheHits: number;\r\n  cacheMisses: number;\r\n  errors: number;\r\n  avgResponseTime: number;\r\n\r\n  // Enhanced metrics\r\n  dataQualityScore: number;\r\n  validationErrors: number;\r\n  fallbacksUsed: number;\r\n  transformationErrors: number;\r\n\r\n  // Performance tracking\r\n  slowQueries: Array<{\r\n    endpoint: string;\r\n    duration: number;\r\n    timestamp: number;\r\n  }>;\r\n\r\n  // Error categorization\r\n  errorsByType: Record<string, number>;\r\n  errorsByEndpoint: Record<string, number>;\r\n\r\n  lastUpdate: number;\r\n}\r\n\r\nexport interface StructuredLogEntry {\r\n  timestamp: string;\r\n  level: 'debug' | 'info' | 'warn' | 'error';\r\n  component: string;\r\n  operation: string;\r\n  metadata: {\r\n    endpoint?: string;\r\n    params?: Record<string, any>;\r\n    duration?: number;\r\n    cacheKey?: string;\r\n    sport?: string;\r\n    dataQuality?: number;\r\n    errorsCount?: number;\r\n    fallbacksUsed?: string[];\r\n  };\r\n  message: string;\r\n  error?: {\r\n    name: string;\r\n    message: string;\r\n    stack?: string;\r\n    code?: string;\r\n  };\r\n}\r\n\r\n// Export validation constants\r\nexport const SPORT_VALUES = ['MLB', 'NBA', 'NFL', 'NHL', 'Soccer'] as const;\r\nexport const PICK_TYPE_VALUES = ['prop', 'spread', 'total', 'moneyline'] as const;\r\n\r\nexport const MIN_CONFIDENCE_SCORE = 0;\r\nexport const MAX_CONFIDENCE_SCORE = 100;\r\nexport const MIN_QUALITY_SCORE = 0;\r\nexport const MAX_QUALITY_SCORE = 100;\r\n\r\nexport const REQUIRED_PROP_FIELDS = [\r\n  'id',\r\n  'player',\r\n  'matchup',\r\n  'stat',\r\n  'line',\r\n  'confidence',\r\n  'sport',\r\n] as const;\r\n\r\nexport const OPTIONAL_PROP_FIELDS = [\r\n  'overOdds',\r\n  'underOdds',\r\n  'gameTime',\r\n  'pickType',\r\n  'dataSource',\r\n] as const;\r\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;;AAyBA;;AA8IA;AACO,MAAMA,YAAY,GAAAC,OAAA,CAAAD,YAAA,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAU;AACpE,MAAME,gBAAgB,GAAAD,OAAA,CAAAC,gBAAA,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,CAAU;AAE1E,MAAMC,oBAAoB,GAAAF,OAAA,CAAAE,oBAAA,GAAG,CAAC;AAC9B,MAAMC,oBAAoB,GAAAH,OAAA,CAAAG,oBAAA,GAAG,GAAG;AAChC,MAAMC,iBAAiB,GAAAJ,OAAA,CAAAI,iBAAA,GAAG,CAAC;AAC3B,MAAMC,iBAAiB,GAAAL,OAAA,CAAAK,iBAAA,GAAG,GAAG;AAE7B,MAAMC,oBAAoB,GAAAN,OAAA,CAAAM,oBAAA,GAAG,CAClC,IAAI,EACJ,QAAQ,EACR,SAAS,EACT,MAAM,EACN,MAAM,EACN,YAAY,EACZ,OAAO,CACC;AAEH,MAAMC,oBAAoB,GAAAP,OAAA,CAAAO,oBAAA,GAAG,CAClC,UAAU,EACV,WAAW,EACX,UAAU,EACV,UAAU,EACV,YAAY,CACJ","ignoreList":[]}