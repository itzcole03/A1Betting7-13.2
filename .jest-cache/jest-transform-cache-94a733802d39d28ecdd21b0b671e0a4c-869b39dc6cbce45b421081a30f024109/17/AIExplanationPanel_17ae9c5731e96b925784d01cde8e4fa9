5f1e79ff432a0c11f8facb240b4aa5fe
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AIExplanationPanel = void 0;
var _react = _interopRequireWildcard(require("react"));
var _lucideReact = require("lucide-react");
var _OllamaService = _interopRequireDefault(require("../../services/ai/OllamaService"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * AI Explanation Panel - Ollama-powered explanations for player analysis
 * Provides streaming AI insights with stop/start controls
 */

const AIExplanationPanel = ({
  context,
  question = "Please analyze this player's performance and provide insights for prop research",
  playerIds,
  sport = 'MLB',
  className = ''
}) => {
  const [isGenerating, setIsGenerating] = (0, _react.useState)(false);
  const [explanation, setExplanation] = (0, _react.useState)('');
  const [error, setError] = (0, _react.useState)(null);
  const [aiStatus, setAiStatus] = (0, _react.useState)('unknown');
  const [savedExplanations, setSavedExplanations] = (0, _react.useState)([]);
  const abortControllerRef = (0, _react.useRef)(null);
  const explanationRef = (0, _react.useRef)(null);

  // Check AI service status on mount
  (0, _react.useEffect)(() => {
    checkAIStatus();
  }, []);

  // Auto-scroll explanation to bottom as it streams
  (0, _react.useEffect)(() => {
    if (explanationRef.current && isGenerating) {
      explanationRef.current.scrollTop = explanationRef.current.scrollHeight;
    }
  }, [explanation, isGenerating]);
  const checkAIStatus = async () => {
    try {
      const status = await _OllamaService.default.checkHealth();
      setAiStatus(status.ollamaAvailable ? 'available' : 'unavailable');
    } catch (error) {
      setAiStatus('unavailable');
    }
  };
  const generateExplanation = (0, _react.useCallback)(async () => {
    if (isGenerating) return;
    setIsGenerating(true);
    setError(null);
    setExplanation('');

    // Create abort controller for stopping generation
    abortControllerRef.current = new AbortController();
    try {
      // Small runtime casts to satisfy branded types expected by ExplainRequest
      const castPlayerIds = (playerIds || []).map(id => id);
      const castSport = sport;
      const request = {
        context,
        question,
        playerIds: castPlayerIds,
        sport: castSport,
        includeTrends: true,
        includeMatchups: true
      };
      let currentExplanation = '';
      for await (const response of _OllamaService.default.streamExplanation(request)) {
        // Check if generation was aborted
        if (abortControllerRef.current?.signal.aborted) {
          break;
        }
        if (response.type === 'chunk') {
          currentExplanation += response.content;
          setExplanation(currentExplanation);
        } else if (response.type === 'complete') {
          const finalContent = response.fullContent || currentExplanation;
          setExplanation(finalContent);

          // Save to local storage (keep last 5)
          const saved = JSON.parse(localStorage.getItem('ai-explanations') || '[]');
          const updated = [finalContent, ...saved.slice(0, 4)];
          localStorage.setItem('ai-explanations', JSON.stringify(updated));
          setSavedExplanations(updated);
          break;
        } else if (response.type === 'error') {
          setError(response.content);
          break;
        }
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error occurred');
    } finally {
      setIsGenerating(false);
      abortControllerRef.current = null;
    }
  }, [context, question, playerIds, sport, isGenerating]);
  const stopGeneration = (0, _react.useCallback)(() => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
      setIsGenerating(false);
    }
  }, []);
  const loadSavedExplanations = (0, _react.useCallback)(() => {
    const saved = JSON.parse(localStorage.getItem('ai-explanations') || '[]');
    setSavedExplanations(saved);
  }, []);
  (0, _react.useEffect)(() => {
    loadSavedExplanations();
  }, [loadSavedExplanations]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: `bg-slate-800/50 backdrop-blur rounded-lg border border-slate-700 ${className}`,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "p-4 border-b border-slate-700",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "flex items-center justify-between",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex items-center gap-3",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Brain, {
            className: "w-5 h-5 text-blue-400"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
            className: "text-lg font-semibold text-white",
            children: "AI Analysis"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: `w-2 h-2 rounded-full ${aiStatus === 'available' ? 'bg-green-400' : aiStatus === 'unavailable' ? 'bg-red-400' : 'bg-yellow-400'}`,
            title: `AI Status: ${aiStatus}`
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "flex items-center gap-2",
          children: isGenerating ? /*#__PURE__*/(0, _jsxRuntime.jsxs)("button", {
            onClick: stopGeneration,
            className: "flex items-center gap-2 px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-md transition-colors",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Square, {
              className: "w-4 h-4"
            }), "Stop"]
          }) : /*#__PURE__*/(0, _jsxRuntime.jsxs)("button", {
            onClick: generateExplanation,
            disabled: aiStatus === 'unavailable',
            className: "flex items-center gap-2 px-3 py-1 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-md transition-colors",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Play, {
              className: "w-4 h-4"
            }), "Analyze"]
          })
        })]
      }), aiStatus === 'unavailable' && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "mt-2 flex items-center gap-2 text-sm text-orange-400",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.AlertCircle, {
          className: "w-4 h-4"
        }), "AI service unavailable - check if Ollama is running"]
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "p-4",
      children: [error && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "mb-4 p-3 bg-red-900/50 border border-red-700 rounded-md",
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex items-center gap-2 text-red-300",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.AlertCircle, {
            className: "w-4 h-4"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            className: "text-sm",
            children: error
          })]
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        ref: explanationRef,
        className: "min-h-[200px] max-h-[400px] overflow-y-auto bg-slate-900/50 rounded-md p-4 border border-slate-600",
        children: [isGenerating && !explanation && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex items-center gap-2 text-slate-400",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "w-2 h-2 bg-blue-400 rounded-full animate-pulse"
          }), "Generating analysis..."]
        }), explanation ? /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-slate-200 whitespace-pre-wrap leading-relaxed",
          children: [explanation, isGenerating && /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            className: "inline-block w-2 h-4 bg-blue-400 ml-1 animate-pulse"
          })]
        }) : !isGenerating && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-slate-400 text-center py-8",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Lightbulb, {
            className: "w-8 h-8 mx-auto mb-2 opacity-50"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
            children: "Click \"Analyze\" to generate AI-powered insights"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
            className: "text-sm mt-1",
            children: "Get explanations for player performance, trends, and prop opportunities"
          })]
        })]
      }), savedExplanations.length > 0 && /*#__PURE__*/(0, _jsxRuntime.jsxs)("details", {
        className: "mt-4",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("summary", {
          className: "text-sm text-slate-400 cursor-pointer hover:text-slate-300 flex items-center gap-2",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.TrendingUp, {
            className: "w-4 h-4"
          }), "Recent Analysis History (", savedExplanations.length, ")"]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "mt-2 space-y-2 max-h-32 overflow-y-auto",
          children: savedExplanations.slice(0, 3).map((saved, index) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("button", {
            onClick: () => setExplanation(saved),
            className: "w-full text-left p-2 bg-slate-700/50 hover:bg-slate-700 rounded text-sm text-slate-300 truncate transition-colors",
            children: [saved.slice(0, 100), "..."]
          }, index))
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "mt-4 text-xs text-slate-500 border-t border-slate-700 pt-3",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          children: "\u26A0\uFE0F AI-generated analysis is for research purposes only (18+/21+)"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          children: "Always verify insights with multiple sources \u2022 Never bet more than you can afford to lose"
        })]
      })]
    })]
  });
};
exports.AIExplanationPanel = AIExplanationPanel;
var _default = exports.default = AIExplanationPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,