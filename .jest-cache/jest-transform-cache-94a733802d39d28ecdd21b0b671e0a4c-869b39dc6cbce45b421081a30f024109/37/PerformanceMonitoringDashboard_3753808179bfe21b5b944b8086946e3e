9afce1550ff2596f9fb4b0dba4d015af
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _framerMotion = require("framer-motion");
var _lucideReact = require("lucide-react");
var _react = _interopRequireWildcard(require("react"));
var _enhancedLogger = require("../../utils/enhancedLogger");
var _robustApi = require("../../utils/robustApi");
var _healthAccessors = require("../../utils/healthAccessors");
var _metricsAccessors = require("../../utils/metricsAccessors");
var _modelMetricsAccessors = require("../../utils/modelMetricsAccessors");
var _StatusIndicator = _interopRequireDefault(require("./StatusIndicator"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// TEMPORARY: Runtime error diagnostics (remove after fix confirmed)  
// import { guardObject, wrapKeys, wrapEntries } from '../../debug/objectGuardDiagnostics';

// NOTE: Direct raw access to health.performance.cache_hit_rate must remain guarded via ensureHealthShape; see ensureHealthShape.ts

// Mock data functions for fallback
const getMockMetrics = () => ({
  api_performance: {
    '/health': {
      avg_time_ms: 45.2,
      min_time_ms: 23.1,
      max_time_ms: 156.8,
      total_calls: 247,
      cache_hits: 89,
      errors: 2
    },
    '/mlb/games': {
      avg_time_ms: 127.3,
      min_time_ms: 45.2,
      max_time_ms: 342.1,
      total_calls: 156,
      cache_hits: 134,
      errors: 1
    },
    '/ml/predict': {
      avg_time_ms: 234.7,
      min_time_ms: 156.3,
      max_time_ms: 567.2,
      total_calls: 89,
      cache_hits: 76,
      errors: 0
    }
  },
  cache_performance: {
    cache_type: 'memory',
    hits: 312,
    misses: 67,
    errors: 3,
    hit_rate: 82.3,
    total_requests: 379
  },
  system_info: {
    optimization_level: 'Phase 4 Enhanced',
    caching_strategy: 'Memory Fallback (Demo Mode)',
    monitoring: 'Real-time Performance Tracking'
  }
});
const _getMockHealth = () => ({
  status: 'healthy',
  services: {
    api: 'operational',
    cache: 'operational',
    database: 'operational'
  },
  performance: {
    cache_hit_rate: 82.3,
    cache_type: 'memory'
  },
  uptime_seconds: 3657 // ~1 hour
});
const PerformanceMonitoringDashboard = () => {
  const [metrics, setMetrics] = (0, _react.useState)(null);
  const [health, setHealth] = (0, _react.useState)(null);

  // Development diagnostics - log health.performance keys on first mount
  const hasLoggedHealthKeys = (0, _react.useRef)(false);
  (0, _react.useEffect)(() => {
    if (health?.performance && !hasLoggedHealthKeys.current && process.env.NODE_ENV === 'development') {
      // PERMANENT FIX: Safe object access pattern prevents race conditions
      const safePerformance = health.performance ?? {};
      try {
        _enhancedLogger.enhancedLogger.debug('PerformanceMonitoringDashboard', 'healthKeys', 'Health performance keys', {
          keys: Object.keys(safePerformance)
        });
        (0, _healthAccessors.debugHealthStructure)(health, 'PerformanceMonitoringDashboard');
      } catch (error) {
        _enhancedLogger.enhancedLogger.error('PerformanceMonitoringDashboard', 'healthKeys', '[CRITICAL] Object.keys error despite safe pattern', undefined, error);
      }
      hasLoggedHealthKeys.current = true;
    }
  }, [health]);
  const [loading, setLoading] = (0, _react.useState)(true);
  const [error, setError] = (0, _react.useState)(null);
  const [isUsingMockData, setIsUsingMockData] = (0, _react.useState)(false);
  const [isCloudEnvironment, setIsCloudEnvironment] = (0, _react.useState)(false);
  const fetchData = async () => {
    try {
      setLoading(true);
      setError(null);
      const hostname = window.location.hostname;
      const isCloud = hostname.includes('.fly.dev') || hostname.includes('.vercel.app') || hostname.includes('.netlify.app') || hostname.includes('.herokuapp.com') || !hostname.includes('localhost');
      setIsCloudEnvironment(isCloud);
      const [healthData, perfDataRaw] = await Promise.all([(0, _robustApi.fetchHealthData)(), (0, _robustApi.fetchPerformanceStats)()]);
      let perfData = null;
      if (perfDataRaw && typeof perfDataRaw === 'object' && 'data' in perfDataRaw) {
        perfData = perfDataRaw['data'];
      } else if (perfDataRaw && typeof perfDataRaw === 'object') {
        perfData = perfDataRaw;
      } else {
        // fallback to mock metrics if server does not supply
        perfData = getMockMetrics();
      }

      // Ensure cache_performance exists
      if (!perfData.cache_performance) {
        perfData.cache_performance = {
          cache_type: 'Unknown',
          hits: 0,
          misses: 0,
          errors: 0,
          hit_rate: 0,
          total_requests: 0
        };
      }

      // Prefer health-derived hit rate for the health display only; do not overwrite
      // perfData.cache_performance.hit_rate so metrics view shows original metric values.
      const derivedHitRate = (0, _healthAccessors.getCacheHitRate)(healthData) ?? perfData.cache_performance.hit_rate ?? 0;
      setMetrics(perfData);
      setHealth(healthData);

      // Compute displayedHealthHitRate here so derivedHitRate is used in scope
      // (avoids mutating perfData and keeps a stable string for render)
      const computedHealthHitRate = derivedHitRate;
      // eslint-disable-next-line no-console
      console.debug('[PerfMon] computedHealthHitRate=', computedHealthHitRate);
      if (process.env.NODE_ENV === 'development' && perfData) {
        const perfRecord = perfData;
        const metricsDiag = {
          total: (0, _metricsAccessors.getTotalRequests)(perfData),
          optLevel: (0, _modelMetricsAccessors.getOptimizationLevel)(perfData),
          hits: (0, _metricsAccessors.getCacheHits)(perfData),
          misses: (0, _metricsAccessors.getCacheMisses)(perfData),
          errors: (0, _metricsAccessors.getCacheErrors)(perfData),
          mappedLegacy: perfRecord['originFlags']?.['mappedLegacy'] || false
        };
        _enhancedLogger.enhancedLogger.debug('PerformanceMonitoringDashboard', 'metricsDiag', 'MetricsDiag', metricsDiag);
        // Also emit a console.log for legacy tests that spy on console output
        // eslint-disable-next-line no-console
        console.log('[MetricsDiag]', metricsDiag);
      }
      setIsUsingMockData(isCloud || !!healthData && typeof healthData['status'] === 'string' && healthData['status'] === 'healthy' && typeof healthData['services']?.['cache'] === 'string' && healthData['services']['cache'] === 'operational' && typeof perfData.system_info?.caching_strategy === 'string' && (perfData.system_info.caching_strategy.includes('Demo Mode') || perfData.system_info.caching_strategy.includes('Cloud Demo')));
    } catch (err) {
      // eslint-disable-next-line no-console
      console.error('[PerfMon] fetchData caught error:', err);
      _enhancedLogger.enhancedLogger.error('PerformanceMonitoringDashboard', 'fetchData', 'Failed to fetch performance data', undefined, err);
      const safePerf = {
        api_performance: {},
        cache_performance: {
          cache_type: 'Unknown',
          hits: 0,
          misses: 0,
          errors: 0,
          hit_rate: 0,
          total_requests: 0
        },
        system_info: {
          optimization_level: 'Unknown',
          caching_strategy: '',
          monitoring: 'Unknown'
        }
      };
      setMetrics(safePerf);
      setHealth(null);
      setIsUsingMockData(false);
    } finally {
      setLoading(false);
    }
  };
  (0, _react.useEffect)(() => {
    fetchData();

    // Auto-refresh every 30 seconds
    const interval = setInterval(fetchData, 30000);
    return () => clearInterval(interval);
  }, []);
  const getStatusColor = status => {
    switch (status.toLowerCase()) {
      case 'operational':
      case 'healthy':
        return 'text-green-400';
      case 'degraded':
        return 'text-yellow-400';
      case 'unhealthy':
      case 'error':
        return 'text-red-400';
      default:
        return 'text-gray-400';
    }
  };
  const getStatusIcon = status => {
    switch (status.toLowerCase()) {
      case 'operational':
      case 'healthy':
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.CheckCircle, {
          className: "w-4 h-4"
        });
      case 'degraded':
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.AlertTriangle, {
          className: "w-4 h-4"
        });
      case 'unhealthy':
      case 'error':
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.XCircle, {
          className: "w-4 h-4"
        });
      default:
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Activity, {
          className: "w-4 h-4"
        });
    }
  };
  const formatUptime = seconds => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor(seconds % 3600 / 60);
    return `${hours}h ${minutes}m`;
  };
  const formatPercent = n => {
    if (!Number.isFinite(n)) return '0.0%';
    return `${Number(n).toFixed(1)}%`;
  };

  // Precompute displayed hit-rate strings to avoid inline evaluation surprises in tests
  const displayedHealthHitRate = formatPercent((0, _healthAccessors.getCacheHitRate)(health ?? undefined));
  const displayedMetricsHitRate = formatPercent((0, _healthAccessors.getCacheHitRate)(metrics ?? undefined));

  // Debug output removed — triage complete.

  if (loading) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "bg-gray-900 p-6 rounded-lg border border-gray-700",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "flex items-center space-x-2 mb-4",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Gauge, {
          className: "w-6 h-6 text-blue-400"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
          className: "text-xl font-bold text-white",
          children: "Performance Monitoring"
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "flex justify-center items-center h-64",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "animate-spin rounded-full h-12 w-12 border-b-2 border-blue-400"
        })
      })]
    });
  }
  if (error) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "bg-gray-900 p-6 rounded-lg border border-gray-700",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "flex items-center space-x-2 mb-4",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Gauge, {
          className: "w-6 h-6 text-blue-400"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
          className: "text-xl font-bold text-white",
          children: "Performance Monitoring"
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "bg-red-900/20 border border-red-700 rounded-lg p-4",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          className: "text-red-400",
          children: error
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
          onClick: fetchData,
          className: "mt-2 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg text-sm transition-colors",
          children: "Retry"
        })]
      })]
    });
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_framerMotion.motion.div, {
    initial: {
      opacity: 0,
      y: 20
    },
    animate: {
      opacity: 1,
      y: 0
    },
    className: "bg-gray-900 p-6 rounded-lg border border-gray-700",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "flex items-center justify-between mb-6",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "flex items-center space-x-3",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Gauge, {
          className: "w-6 h-6 text-blue-400"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
          className: "text-xl font-bold text-white",
          children: "Performance Monitoring"
        }), isCloudEnvironment ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_StatusIndicator.default, {
          status: "warning",
          message: "Cloud Demo Mode",
          size: "sm"
        }) : isUsingMockData ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_StatusIndicator.default, {
          status: "warning",
          message: "Demo Mode - Mock Data",
          size: "sm"
        }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_StatusIndicator.default, {
          status: "healthy",
          message: "Live Data",
          size: "sm"
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "flex items-center space-x-2",
        children: [isCloudEnvironment ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Cloud, {
          className: "w-4 h-4 text-blue-400"
        }) : isUsingMockData ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.WifiOff, {
          className: "w-4 h-4 text-yellow-400"
        }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Wifi, {
          className: "w-4 h-4 text-green-400"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.motion.button, {
          whileHover: {
            scale: 1.05
          },
          whileTap: {
            scale: 0.95
          },
          onClick: fetchData,
          className: "px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors",
          children: "Refresh"
        })]
      })]
    }), health && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "grid grid-cols-1 md:grid-cols-3 gap-4 mb-6",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "bg-gray-800 p-4 rounded-lg border border-gray-600",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex items-center space-x-2 mb-2",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Activity, {
            className: "w-5 h-5 text-green-400"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h4", {
            className: "font-semibold text-white",
            children: "System Status"
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          className: `text-lg font-bold ${getStatusColor(health.status)}`,
          children: health.status.toUpperCase()
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
          className: "text-gray-400 text-sm",
          children: ["Uptime: ", formatUptime(health.uptime_seconds)]
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "bg-gray-800 p-4 rounded-lg border border-gray-600",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex items-center space-x-2 mb-2",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Database, {
            className: "w-5 h-5 text-blue-400"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h4", {
            className: "font-semibold text-white",
            children: "Cache Performance"
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          className: "text-gray-400 text-sm",
          children: "Cache Hit Rate"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          className: "text-lg font-bold text-blue-400",
          children: displayedHealthHitRate
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
          className: "text-gray-400 text-sm",
          children: ["Type: ", (0, _healthAccessors.getCacheType)(health)]
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "bg-gray-800 p-4 rounded-lg border border-gray-600",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex items-center space-x-2 mb-2",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Cpu, {
            className: "w-5 h-5 text-purple-400"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h4", {
            className: "font-semibold text-white",
            children: "Services"
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "space-y-1",
          children: Object.entries(health.services ?? {}).map(([service, status]) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "flex items-center space-x-2",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              className: getStatusColor(String(status)),
              children: getStatusIcon(String(status))
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              className: "text-gray-300 text-sm capitalize",
              children: service
            })]
          }, service))
        })]
      })]
    }), metrics && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "space-y-6",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("h4", {
          className: "text-lg font-semibold text-white mb-3 flex items-center space-x-2",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.BarChart3, {
            className: "w-5 h-5 text-green-400"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            children: "API Performance"
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "bg-gray-800 rounded-lg border border-gray-600 overflow-hidden",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "overflow-x-auto",
            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("table", {
              className: "w-full text-sm",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("thead", {
                className: "bg-gray-700",
                children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("tr", {
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("th", {
                    className: "px-4 py-3 text-left text-gray-300",
                    children: "Endpoint"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("th", {
                    className: "px-4 py-3 text-right text-gray-300",
                    children: "Avg Time"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("th", {
                    className: "px-4 py-3 text-right text-gray-300",
                    children: "Calls"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("th", {
                    className: "px-4 py-3 text-right text-gray-300",
                    children: "Cache Hits"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("th", {
                    className: "px-4 py-3 text-right text-gray-300",
                    children: "Errors"
                  })]
                })
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("tbody", {
                children: Object.entries(metrics.api_performance ?? {}).map(([endpoint, stats]) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("tr", {
                  className: "border-t border-gray-600",
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("td", {
                    className: "px-4 py-3 text-gray-300 font-mono",
                    children: endpoint
                  }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("td", {
                    className: "px-4 py-3 text-right text-gray-300",
                    children: [typeof stats.avg_time_ms === 'number' ? stats.avg_time_ms.toFixed(1) : 'N/A', "ms"]
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("td", {
                    className: "px-4 py-3 text-right text-gray-300",
                    children: stats.total_calls
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("td", {
                    className: "px-4 py-3 text-right text-green-400",
                    children: stats.cache_hits
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("td", {
                    className: "px-4 py-3 text-right text-red-400",
                    children: stats.errors
                  })]
                }, endpoint))
              })]
            })
          })
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("h4", {
          className: "text-lg font-semibold text-white mb-3 flex items-center space-x-2",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Database, {
            className: "w-5 h-5 text-blue-400"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            children: "Cache Statistics"
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "grid grid-cols-2 md:grid-cols-4 gap-4",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "bg-gray-800 p-4 rounded-lg border border-gray-600",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              className: "text-gray-400 text-sm",
              children: "Hit Rate"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              "data-testid": "metrics-hit-rate",
              className: "text-xl font-bold text-green-400",
              children: displayedMetricsHitRate
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "bg-gray-800 p-4 rounded-lg border border-gray-600",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              className: "text-gray-400 text-sm",
              children: "Total Requests"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              "data-testid": "total-requests",
              className: "text-xl font-bold text-blue-400",
              children: (0, _metricsAccessors.getTotalRequests)(metrics)
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "bg-gray-800 p-4 rounded-lg border border-gray-600",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              className: "text-gray-400 text-sm",
              children: "Cache Hits"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              "data-testid": "cache-hits",
              className: "text-xl font-bold text-green-400",
              children: (0, _metricsAccessors.getCacheHits)(metrics)
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "bg-gray-800 p-4 rounded-lg border border-gray-600",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              className: "text-gray-400 text-sm",
              children: "Cache Misses"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              "data-testid": "cache-misses",
              className: "text-xl font-bold text-yellow-400",
              children: (0, _metricsAccessors.getCacheMisses)(metrics)
            })]
          })]
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("h4", {
          className: "text-lg font-semibold text-white mb-3 flex items-center space-x-2",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Clock, {
            className: "w-5 h-5 text-purple-400"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            children: "System Information"
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "bg-gray-800 p-4 rounded-lg border border-gray-600",
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "grid grid-cols-1 md:grid-cols-3 gap-4",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                className: "text-gray-400 text-sm",
                children: "Optimization Level"
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                className: "text-white font-semibold",
                children: (0, _modelMetricsAccessors.getOptimizationLevel)(metrics)
              })]
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                className: "text-gray-400 text-sm",
                children: "Caching Strategy"
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                className: "text-white font-semibold",
                children: metrics.system_info.caching_strategy
              })]
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                className: "text-gray-400 text-sm",
                children: "Monitoring"
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                className: "text-white font-semibold",
                children: metrics.system_info.monitoring
              })]
            })]
          })
        })]
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "mt-6 flex justify-between items-center",
      children: [(isUsingMockData || isCloudEnvironment) && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "bg-blue-600/20 border border-blue-500 rounded-lg px-3 py-2",
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex items-center space-x-2",
          children: [isCloudEnvironment ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Cloud, {
            className: "w-4 h-4 text-blue-400"
          }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.WifiOff, {
            className: "w-4 h-4 text-yellow-400"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            className: "text-blue-400 text-sm",
            children: isCloudEnvironment ? 'Cloud Demo Mode: Running in production with realistic mock data' : 'Demo Mode: Backend API not available, showing realistic mock data'
          })]
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "bg-blue-600/20 border border-blue-500 rounded-lg px-3 py-1",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
          className: "text-blue-400 text-sm font-semibold",
          children: "Phase 4 Enhanced"
        })
      })]
    })]
  });
};
var _default = exports.default = PerformanceMonitoringDashboard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,