{"version":3,"names":["_coreFunctionalityValidator","require","navReadySignal","_interopRequireWildcard","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","mockQuerySelectorAll","jest","fn","mockConsoleLog","mockConsoleWarn","describe","validator","beforeEach","clearAllMocks","document","value","writable","spyOn","console","mockImplementation","process","env","VITE_VALIDATOR_NAV_MAX_ATTEMPTS","VITE_VALIDATOR_NAV_INTERVAL_MS","NODE_ENV","mockReturnValue","CoreFunctionalityValidator","afterEach","stopValidation","restoreAllMocks","it","mocked","isNavReady","result","validateNavigation","expect","toBe","toHaveBeenCalledWith","mockNavElements","tagName","getAttribute","createElement","maxAttempts","startValidation","navValidationState","navValidationAttempts"],"sources":["navigationValidatorSimple.test.ts"],"sourcesContent":["/**\r\n * Navigation Validator Tests\r\n * Tests for the refactored navigation validation system\r\n */\r\n\r\nimport { CoreFunctionalityValidator } from '../services/coreFunctionalityValidator';\r\nimport * as navReadySignal from '../navigation/navReadySignal';\r\n\r\n// Mock DOM methods\r\nconst mockQuerySelectorAll = jest.fn();\r\nconst mockConsoleLog = jest.fn();\r\nconst mockConsoleWarn = jest.fn();\r\n\r\ndescribe('NavigationValidator', () => {\r\n  let validator: CoreFunctionalityValidator;\r\n\r\n  beforeEach(() => {\r\n    // Reset mocks\r\n    jest.clearAllMocks();\r\n    \r\n    // Mock DOM\r\n    Object.defineProperty(document, 'querySelectorAll', {\r\n      value: mockQuerySelectorAll,\r\n      writable: true\r\n    });\r\n\r\n    // Mock console methods\r\n    jest.spyOn(console, 'log').mockImplementation(mockConsoleLog);\r\n    jest.spyOn(console, 'warn').mockImplementation(mockConsoleWarn);\r\n\r\n    // Mock environment using process.env\r\n    process.env.VITE_VALIDATOR_NAV_MAX_ATTEMPTS = '12';\r\n    process.env.VITE_VALIDATOR_NAV_INTERVAL_MS = '250';\r\n    process.env.NODE_ENV = 'development';\r\n\r\n    // Mock navReadySignal functions\r\n    jest.spyOn(navReadySignal, 'isNavReady').mockReturnValue(false);\r\n    jest.spyOn(navReadySignal, 'onNavReady').mockImplementation(() => {\r\n      return () => {}; // Return unsubscribe function\r\n    });\r\n\r\n    validator = new CoreFunctionalityValidator();\r\n  });\r\n\r\n  afterEach(() => {\r\n    validator.stopValidation();\r\n    jest.restoreAllMocks();\r\n  });\r\n\r\n  describe('Success Scenarios', () => {\r\n    it('should validate navigation when navReady signal is already true', async () => {\r\n      // Setup: Navigation is already ready\r\n      jest.mocked(navReadySignal.isNavReady).mockReturnValue(true);\r\n\r\n      // Act\r\n      const result = await (validator as any).validateNavigation();\r\n\r\n      // Assert\r\n      expect(result).toBe(true);\r\n      expect(mockConsoleLog).toHaveBeenCalledWith('[NavDiag] Navigation already ready');\r\n    });\r\n\r\n    it('should validate navigation when nav elements are found', async () => {\r\n      // Setup: Mock finding navigation elements\r\n      const mockNavElements = [\r\n        { tagName: 'NAV', getAttribute: jest.fn().mockReturnValue('primary-nav') }\r\n      ];\r\n      mockQuerySelectorAll.mockReturnValue(mockNavElements);\r\n\r\n      // Act\r\n      const result = await (validator as any).validateNavigation();\r\n\r\n      // Assert\r\n      expect(result).toBe(true);\r\n      expect(mockQuerySelectorAll).toHaveBeenCalledWith(\r\n        '[data-testid=\"primary-nav\"], [role=\"navigation\"], nav'\r\n      );\r\n      expect(mockConsoleLog).toHaveBeenCalledWith(\r\n        '[NavDiag] Navigation validation successful - found elements:',\r\n        1\r\n      );\r\n    });\r\n\r\n    it('should use hardened selectors for navigation detection', async () => {\r\n      // Setup\r\n      mockQuerySelectorAll.mockReturnValue([document.createElement('nav')]);\r\n\r\n      // Act\r\n      await (validator as any).validateNavigation();\r\n\r\n      // Assert\r\n      expect(mockQuerySelectorAll).toHaveBeenCalledWith(\r\n        '[data-testid=\"primary-nav\"], [role=\"navigation\"], nav'\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Degraded Timeout Scenarios', () => {\r\n    it('should timeout after max attempts reached', async () => {\r\n      // Setup: No navigation elements and max attempts\r\n      mockQuerySelectorAll.mockReturnValue([]);\r\n      const maxAttempts = 12; // Default value\r\n\r\n      // Act: Call validation multiple times to reach max attempts\r\n      let result = false;\r\n      for (let i = 0; i < maxAttempts + 1; i++) {\r\n        result = await (validator as any).validateNavigation();\r\n      }\r\n\r\n      // Assert\r\n      expect(result).toBe(false);\r\n      expect(mockConsoleWarn).toHaveBeenCalledWith(\r\n        '[NavDiag] Navigation validation degraded - no nav elements found after',\r\n        maxAttempts,\r\n        'attempts'\r\n      );\r\n    });\r\n\r\n    it('should increment attempts counter correctly', async () => {\r\n      // Setup\r\n      mockQuerySelectorAll.mockReturnValue([]);\r\n\r\n      // Act: Make multiple validation calls\r\n      await (validator as any).validateNavigation(); // Attempt 1\r\n      await (validator as any).validateNavigation(); // Attempt 2\r\n\r\n      // Assert: Should log diagnostic only on first attempt\r\n      expect(mockConsoleLog).toHaveBeenCalledWith('[NavDiag] Starting navigation validation...');\r\n    });\r\n  });\r\n\r\n  describe('Cleanup and Resource Management', () => {\r\n    it('should cleanup navigation validation on stopValidation', () => {\r\n      // Setup: Start validation to initialize resources\r\n      validator.startValidation();\r\n\r\n      // Act\r\n      validator.stopValidation();\r\n\r\n      // Assert: Should have cleaned up nav validation resources\r\n      expect((validator as any).navValidationState).toBe('idle');\r\n      expect((validator as any).navValidationAttempts).toBe(0);\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}