5d99be3021971197fa5900daa1ddfdae
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ErrorBoundaryVersion = void 0;
var _react = _interopRequireDefault(require("react"));
var _runtimeEventBuffer = require("../debug/runtimeEventBuffer");
var _jsxRuntime = require("react/jsx-runtime");
// Global correlation ID counter
let errorCorrelationCounter = 0;

/**
 * Enhanced Error boundary for API version-related failures and runtime errors.
 * Displays a user-friendly message and logs the error with correlation to diagnostic events.
 */
class ErrorBoundaryVersion extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      hasError: false,
      error: null,
      correlationId: 0
    };
  }
  static getDerivedStateFromError(error) {
    errorCorrelationCounter++;
    return {
      hasError: true,
      error,
      correlationId: errorCorrelationCounter
    };
  }
  componentDidCatch(error, info) {
    const {
      correlationId
    } = this.state;
    const firstStackLine = error.stack?.split('\n')[1]?.trim() || 'No stack';
    const errorTrace = {
      id: correlationId,
      message: error.message,
      name: error.name,
      firstStackLine,
      componentStackPresent: !!info.componentStack,
      timeISO: new Date().toISOString()
    };

    // eslint-disable-next-line no-console
    console.error(`[RuntimeErrorTrace] ${JSON.stringify(errorTrace)}`);

    // Check for the specific "Cannot convert undefined or null to object" error
    if (error.message.includes('Cannot convert undefined or null to object')) {
      const nullAccessEvents = (0, _runtimeEventBuffer.getRecent)('NullObjectAccess', 5);
      if (nullAccessEvents.length > 0) {
        // eslint-disable-next-line no-console
        console.error('[NullObjectCorrelation] Recent null access events:', nullAccessEvents);
      }
    }

    // eslint-disable-next-line no-console
    console.error('[ErrorBoundaryVersion] Version-related error:', error, info);
  }
  render() {
    if (this.state.hasError) {
      return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        style: {
          padding: 24,
          color: '#b91c1c',
          background: '#fef2f2',
          borderRadius: 8
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("h2", {
          children: ["Runtime Error Detected (ID: ", this.state.correlationId, ")"]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          children: this.state.error?.message || 'A runtime error occurred. Please refresh or contact support.'
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("details", {
          style: {
            marginTop: 16,
            fontSize: '0.9em',
            opacity: 0.8
          },
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("summary", {
            children: "Technical Details"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("pre", {
            style: {
              marginTop: 8,
              fontSize: '0.8em',
              overflow: 'auto'
            },
            children: this.state.error?.stack || 'No stack trace available'
          })]
        })]
      });
    }
    return this.props.children;
  }
}
exports.ErrorBoundaryVersion = ErrorBoundaryVersion;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,