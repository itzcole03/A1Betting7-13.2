29d0b593278b5143748ac7638914d2d9
"use strict";

// Mock useSimplePropOllamaData to provide all required actions

// Mock FeaturedPropsService to return empty array for all fetches
_getJestObj().mock('../components/hooks/useSimplePropOllamaData', () => ({
  __esModule: true,
  useSimplePropOllamaData: ({
    state,
    actions
  }) => ({
    fetchData: jest.fn(),
    // Removed invalid import inside object
    // actions object with all required functions
    actions: {
      setIsLoading: jest.fn(),
      setError: jest.fn(),
      setLoadingMessage: jest.fn(),
      setProjections: jest.fn()
    }
  })
}));
_getJestObj().mock('../services/unified/FeaturedPropsService', () => ({
  __esModule: true,
  fetchFeaturedProps: jest.fn(async () => []),
  fetchBatchPredictions: jest.fn(async () => []),
  mockProps: []
}));
_getJestObj().mock('../components/hooks/usePropOllamaState', () => ({
  __esModule: true,
  usePropOllamaState: () => [{
    projections: [],
    isLoading: false,
    filters: {
      searchTerm: '',
      selectedSport: 'MLB'
    },
    sorting: {
      sortBy: 'default'
    },
    displayOptions: {
      expandedRowKey: null,
      useVirtualization: false
    },
    selectedProps: [],
    entryAmount: 0,
    enhancedAnalysisCache: new Map(),
    loadingAnalysis: new Set(),
    connectionHealth: {
      isHealthy: true,
      latency: 0,
      lastChecked: Date.now()
    },
    loadingStage: {
      stage: 'complete'
    },
    loadingMessage: '',
    upcomingGames: [],
    selectedGame: null
  }, {
    updateFilters: jest.fn(),
    updateSorting: jest.fn(),
    setSelectedGame: jest.fn(),
    updateDisplayOptions: jest.fn(),
    removeSelectedProp: jest.fn(),
    setEntryAmount: jest.fn(),
    setSelectedProps: jest.fn(),
    actions: {
      setIsLoading: jest.fn(),
      setError: jest.fn(),
      setLoadingMessage: jest.fn(),
      setProjections: jest.fn()
    }
  }]
}));
var _react = require("@testing-library/react");
require("../../../jest.setup.e2e.js");
var backendDiscoveryModule = _interopRequireWildcard(require("../services/backendDiscovery"));
var getBackendUrlModule = _interopRequireWildcard(require("../utils/getBackendUrl"));
var _backend = require("./mocks/backend");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('App E2E - Empty State', () => {
  beforeEach(() => {
    jest.clearAllMocks();

    // Setup backend mocks
    (0, _backend.setupBackendMocks)();

    // Mock getBackendUrl to return a consistent URL
    jest.spyOn(getBackendUrlModule, 'getBackendUrl').mockReturnValue('http://localhost:8000');
    // Mock discoverBackend to resolve to null by default
    if (!Object.getOwnPropertyDescriptor(backendDiscoveryModule, 'discoverBackend')?.get) {
      jest.spyOn(backendDiscoveryModule, 'discoverBackend').mockResolvedValue(null);
    }

    // Mock localStorage.getItem using Object.defineProperty for Jest compatibility
    Object.defineProperty(window.localStorage, 'getItem', {
      configurable: true,
      value: key => {
        if (key === 'onboardingComplete') return 'true';
        if (key === 'user') return JSON.stringify({
          id: 'test',
          email: 'test@example.com',
          role: 'user'
        });
        if (key === 'token') return 'test-token';
        return null;
      }
    });
  });
  it('shows empty state if no enhanced bets are returned', async () => {
    jest.useFakeTimers();
    try {
      const App = (await Promise.resolve().then(() => _interopRequireWildcard(require('../App')))).default;
      await (await Promise.resolve().then(() => _interopRequireWildcard(require('react-dom/test-utils')))).act(async () => {
        (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(App, {}));
        jest.runAllTimers();
      });
      // Prefer a data-testid if present, otherwise fallback to text match
      let emptyState = null;
      try {
        emptyState = await _react.screen.findByTestId('empty-props', {}, {
          timeout: 2000
        });
      } catch (err) {
        // Try alternate testid used by some components
        try {
          emptyState = await _react.screen.findByTestId('empty-state', {}, {
            timeout: 2000
          });
        } catch {
          // fallback to text matcher used historically
          emptyState = await _react.screen.findByText(/No props found|No enhanced props|No results/i, {}, {
            timeout: 5000
          });
        }
      }
      expect(emptyState).toBeInTheDocument();
    } finally {
      jest.useRealTimers();
    }
  }, 10000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,