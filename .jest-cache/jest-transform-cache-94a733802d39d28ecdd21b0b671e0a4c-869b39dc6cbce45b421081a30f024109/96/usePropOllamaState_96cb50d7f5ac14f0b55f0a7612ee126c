928431daa63f69d4e6d02a04c8a09374
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePropOllamaState = usePropOllamaState;
var _react = _interopRequireWildcard(require("react"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * PropOllama State Management Hook
 *
 * Consolidates all state management for the PropOllama components.
 * This reduces the complexity of the main component by extracting
 * state logic into a reusable hook.
 */

function usePropOllamaState() {
  // Connection and health
  const [connectionHealth, setConnectionHealth] = (0, _react.useState)({
    isHealthy: false,
    latency: 0,
    lastChecked: 0
  });

  // Data state
  const [projections, setProjections] = (0, _react.useState)([]);
  const [unifiedResponse, setUnifiedResponse] = (0, _react.useState)(null);
  const [upcomingGames, setUpcomingGames] = (0, _react.useState)([]);
  const [selectedGame, setSelectedGame] = (0, _react.useState)(null);

  // Filter state
  const [filters, setFilters] = (0, _react.useState)({
    selectedSport: 'MLB',
    propType: 'player',
    selectedStatType: 'Popular',
    selectedDate: '',
    searchTerm: '',
    showUpcomingGames: false
  });

  // Sorting state
  const [sorting, setSorting] = (0, _react.useState)({
    sortBy: 'confidence',
    sortOrder: 'desc'
  });

  // Display options state
  const [displayOptions, setDisplayOptions] = (0, _react.useState)({
    visiblePropsCount: 6,
    useVirtualization: false,
    expandedRowKey: null
  });

  // Loading and error state
  const [isLoading, setIsLoading] = (0, _react.useState)(false);
  const [error, setError] = (0, _react.useState)(null);
  const [renderError, setRenderError] = (0, _react.useState)(null);
  const [loadingStage, setLoadingStage] = (0, _react.useState)(null);
  const [loadingMessage, setLoadingMessage] = (0, _react.useState)('');

  // Analysis state
  const [enhancedAnalysisCache, setEnhancedAnalysisCache] = (0, _react.useState)({});
  const [loadingAnalysis, setLoadingAnalysis] = (0, _react.useState)(new Set());
  const [analyzingPropId, setAnalyzingPropId] = (0, _react.useState)(null);
  const [propAnalystResponses, setPropAnalystResponses] = (0, _react.useState)({});

  // Bet slip state
  const [selectedProps, setSelectedProps] = (0, _react.useState)([]);
  const [entryAmount, setEntryAmount] = (0, _react.useState)(10);

  // Performance state
  const [initialLoadingComplete, setInitialLoadingComplete] = (0, _react.useState)(false);
  const [clicksEnabled, setClicksEnabled] = (0, _react.useState)(false);
  const [propLoadingProgress, setPropLoadingProgress] = (0, _react.useState)(0);
  const [sportActivationStatus, setSportActivationStatus] = (0, _react.useState)({});

  // Ensemble state
  const [ensembleLoading, setEnsembleLoading] = (0, _react.useState)(false);
  const [ensembleError, setEnsembleError] = (0, _react.useState)(null);
  const [ensembleResult, setEnsembleResult] = (0, _react.useState)(null);

  // Action creators
  const updateFilters = (0, _react.useCallback)(newFilters => {
    setFilters(prev => ({
      ...prev,
      ...newFilters
    }));
  }, []);
  const updateSorting = (0, _react.useCallback)(newSorting => {
    setSorting(prev => ({
      ...prev,
      ...newSorting
    }));
  }, []);
  const updateDisplayOptions = (0, _react.useCallback)(newOptions => {
    setDisplayOptions(prev => ({
      ...prev,
      ...newOptions
    }));
  }, []);
  const updateEnhancedAnalysisCache = (0, _react.useCallback)((propId, analysis) => {
    setEnhancedAnalysisCache(prev => ({
      ...prev,
      [propId]: analysis
    }));
  }, []);
  const updatePropAnalystResponse = (0, _react.useCallback)((propId, response) => {
    setPropAnalystResponses(prev => ({
      ...prev,
      [propId]: response
    }));
  }, []);
  const addSelectedProp = (0, _react.useCallback)(prop => {
    setSelectedProps(prev => {
      if (prev.find(p => p.id === prop.id)) {
        return prev; // Already selected
      }
      return [...prev, prop];
    });
  }, []);
  const removeSelectedProp = (0, _react.useCallback)(propId => {
    setSelectedProps(prev => prev.filter(p => p.id !== propId));
  }, []);
  const updateSportActivationStatus = (0, _react.useCallback)((sport, status) => {
    setSportActivationStatus(prev => ({
      ...prev,
      [sport]: {
        ...prev[sport],
        ...status
      }
    }));
  }, []);

  // Combine state
  const state = {
    connectionHealth,
    projections,
    unifiedResponse,
    upcomingGames,
    selectedGame,
    filters,
    sorting,
    displayOptions,
    isLoading,
    error,
    renderError,
    loadingStage,
    loadingMessage,
    enhancedAnalysisCache,
    loadingAnalysis,
    analyzingPropId,
    propAnalystResponses,
    selectedProps,
    entryAmount,
    initialLoadingComplete,
    clicksEnabled,
    propLoadingProgress,
    sportActivationStatus,
    ensembleLoading,
    ensembleError,
    ensembleResult
  };

  // Memoize actions to prevent unnecessary re-renders and effect loops
  const actions = _react.default.useMemo(() => ({
    setConnectionHealth,
    setProjections,
    setUnifiedResponse,
    setUpcomingGames,
    setSelectedGame,
    updateFilters,
    updateSorting,
    updateDisplayOptions,
    setIsLoading,
    setError,
    setRenderError,
    setLoadingStage,
    setLoadingMessage,
    updateEnhancedAnalysisCache,
    setLoadingAnalysis,
    setAnalyzingPropId,
    updatePropAnalystResponse,
    setSelectedProps,
    addSelectedProp,
    removeSelectedProp,
    setEntryAmount,
    setInitialLoadingComplete,
    setClicksEnabled,
    setPropLoadingProgress,
    updateSportActivationStatus,
    setEnsembleLoading,
    setEnsembleError,
    setEnsembleResult
  }), [setConnectionHealth, setProjections, setUnifiedResponse, setUpcomingGames, setSelectedGame, updateFilters, updateSorting, updateDisplayOptions, setIsLoading, setError, setRenderError, setLoadingStage, setLoadingMessage, updateEnhancedAnalysisCache, setLoadingAnalysis, setAnalyzingPropId, updatePropAnalystResponse, setSelectedProps, addSelectedProp, removeSelectedProp, setEntryAmount, setInitialLoadingComplete, setClicksEnabled, setPropLoadingProgress, updateSportActivationStatus, setEnsembleLoading, setEnsembleError, setEnsembleResult]);
  return [state, actions];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,