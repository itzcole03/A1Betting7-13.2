{"version":3,"names":["_logger","require","_leanMode","_dataPipelineStabilityMonitor","_interopRequireDefault","_liveDemoPerformanceMonitor","_ReliabilityMonitoringOrchestrator","ReliabilityMonitoringOrchestrator","initialize","startMonitoring","cleanup","stopMonitoring","constructor","isActive","config","reports","lastReport","performanceMonitor","pipelineMonitor","performanceInterval","pipelineInterval","reportInterval","LiveDemoPerformanceMonitor","getInstance","DataPipelineStabilityMonitor","performanceMonitoringInterval","dataPipelineCheckInterval","reliabilityReportInterval","alertThresholds","performanceScore","errorRate","responseTime","serviceDowntime","autoRecovery","continuousImprovement","instance","isLeanMode","logger","info","undefined","warn","timestamp","Date","toISOString","setInterval","generateReliabilityReport","catch","error","clearInterval","demoHealth","generateHealthReport","pipelineHealth","getHealthReport","overallScore","pipelineScore","calculatePipelineScore","overallHealth","determineOverallHealth","performanceGrade","calculatePerformanceGrade","trends","analyzeTrends","improvements","generateImprovementRecommendations","report","demoPerformance","score","grade","issues","criticalIssues","recommendations","dataPipeline","servicesHealthy","countHealthyServices","totalServices","Object","keys","length","extractCriticalIssues","degradedServices","extractDegradedServices","reliability","uptime","calculateUptime","calculateErrorRate","metrics","recoveryTime","calculateRecoveryTime","userExperience","calculateUserExperienceScore","push","slice","checkAlertsAndAutoRecover","healthReport","services","values","totalScore","forEach","service","status","performance","userSatisfaction","recent","older","recentAvgPerf","reduce","sum","r","olderAvgPerf","perfTrend","immediate","shortTerm","longTerm","automation","pageLoadTime","unhealthyServices","filter","s","alerts","toFixed","join","attemptAutoRecovery","navigator","registrations","serviceWorker","getRegistrations","registration","unregister","Promise","resolve","setTimeout","entries","health","errors","_","map","healthyReports","totalInteractions","Math","max","userInteractions","errorCount","firstContentfulPaint","cumulativeLayoutShift","getLatestReport","getReportsHistory","isMonitoringActive","updateConfiguration","newConfig","reliabilityMonitoringOrchestrator","exports","_default","default"],"sources":["reliabilityMonitoringOrchestrator.ts"],"sourcesContent":["/**\r\n * Reliability Monitoring Orchestrator\r\n * Coordinates all monitoring systems and implements iterative improvements\r\n * Based on A1Betting_App_Issues_Report(4).md recommendations\r\n */\r\n\r\nimport { logger } from '../utils/logger';\r\nimport { isLeanMode } from '../utils/leanMode';\r\nimport DataPipelineStabilityMonitor from './dataPipelineStabilityMonitor';\r\nimport LiveDemoPerformanceMonitor, {\r\n  DemoHealthReport,\r\n  PerformanceMetrics,\r\n} from './liveDemoPerformanceMonitor';\r\n\r\ninterface ReliabilityReport {\r\n  timestamp: Date;\r\n  overallHealth: 'excellent' | 'good' | 'fair' | 'poor' | 'critical';\r\n  performanceGrade: 'A+' | 'A' | 'B' | 'C' | 'D' | 'F';\r\n\r\n  // Component Health Scores\r\n  demoPerformance: {\r\n    score: number;\r\n    grade: string;\r\n    issues: string[];\r\n    recommendations: string[];\r\n  };\r\n\r\n  dataPipeline: {\r\n    score: number;\r\n    servicesHealthy: number;\r\n    totalServices: number;\r\n    criticalIssues: string[];\r\n    degradedServices: string[];\r\n  };\r\n\r\n  // Reliability Metrics\r\n  reliability: {\r\n    uptime: number;\r\n    errorRate: number;\r\n    recoveryTime: number;\r\n    userExperience: number;\r\n  };\r\n\r\n  // Continuous Improvement Insights\r\n  improvements: {\r\n    immediate: string[];\r\n    shortTerm: string[];\r\n    longTerm: string[];\r\n    automation: string[];\r\n  };\r\n\r\n  // Trend Analysis\r\n  trends: {\r\n    performance: 'improving' | 'stable' | 'declining';\r\n    reliability: 'improving' | 'stable' | 'declining';\r\n    userSatisfaction: 'improving' | 'stable' | 'declining';\r\n  };\r\n}\r\n\r\ninterface MonitoringConfiguration {\r\n  performanceMonitoringInterval: number;\r\n  dataPipelineCheckInterval: number;\r\n  reliabilityReportInterval: number;\r\n  alertThresholds: {\r\n    performanceScore: number;\r\n    errorRate: number;\r\n    responseTime: number;\r\n    serviceDowntime: number;\r\n  };\r\n  autoRecovery: boolean;\r\n  continuousImprovement: boolean;\r\n  leanMode?: boolean; // Stabilization: disable heavy monitoring in dev\r\n}\r\n\r\nclass ReliabilityMonitoringOrchestrator {\r\n  /**\r\n   * Compatibility: initialize monitoring (alias for startMonitoring)\r\n   */\r\n  async initialize(): Promise<void> {\r\n    return this.startMonitoring();\r\n  }\r\n\r\n  /**\r\n   * Compatibility: cleanup monitoring (alias for stopMonitoring)\r\n   */\r\n  cleanup(): void {\r\n    this.stopMonitoring();\r\n  }\r\n  private static instance: ReliabilityMonitoringOrchestrator;\r\n  private isActive = false;\r\n  private config: MonitoringConfiguration;\r\n  private reports: ReliabilityReport[] = [];\r\n  private lastReport: ReliabilityReport | null = null;\r\n\r\n  // Monitoring Components\r\n  private performanceMonitor: LiveDemoPerformanceMonitor;\r\n  private pipelineMonitor: DataPipelineStabilityMonitor;\r\n\r\n  // Monitoring Intervals\r\n  private performanceInterval: NodeJS.Timeout | null = null;\r\n  private pipelineInterval: NodeJS.Timeout | null = null;\r\n  private reportInterval: NodeJS.Timeout | null = null;\r\n\r\n  private constructor() {\r\n    this.performanceMonitor = LiveDemoPerformanceMonitor.getInstance();\r\n    this.pipelineMonitor = DataPipelineStabilityMonitor.getInstance();\r\n\r\n    // Default configuration optimized for transparency and reliability\r\n    this.config = {\r\n      performanceMonitoringInterval: 30000, // 30 seconds\r\n      dataPipelineCheckInterval: 60000, // 1 minute\r\n      reliabilityReportInterval: 300000, // 5 minutes\r\n      alertThresholds: {\r\n        performanceScore: 80, // Alert if below 80\r\n        errorRate: 0.05, // Alert if above 5%\r\n        responseTime: 3000, // Alert if above 3 seconds\r\n        serviceDowntime: 30000, // Alert if service down for 30 seconds\r\n      },\r\n      autoRecovery: true,\r\n      continuousImprovement: true,\r\n    };\r\n  }\r\n\r\n  static getInstance(): ReliabilityMonitoringOrchestrator {\r\n    if (!ReliabilityMonitoringOrchestrator.instance) {\r\n      ReliabilityMonitoringOrchestrator.instance = new ReliabilityMonitoringOrchestrator();\r\n    }\r\n    return ReliabilityMonitoringOrchestrator.instance;\r\n  }\r\n\r\n  /**\r\n   * Start comprehensive monitoring as recommended in Issues Report\r\n   */\r\n  async startMonitoring(): Promise<void> {\r\n    // Stabilization: Check for lean mode to prevent heavy monitoring in development\r\n    if (isLeanMode()) {\r\n      logger.info('Lean mode enabled - skipping heavy monitoring', undefined, 'ReliabilityOrchestrator');\r\n      return;\r\n    }\r\n\r\n    if (this.isActive) {\r\n      logger.warn('Reliability monitoring already active', undefined, 'ReliabilityOrchestrator');\r\n      return;\r\n    }\r\n\r\n    this.isActive = true;\r\n    logger.info(\r\n      'Starting comprehensive reliability monitoring...',\r\n      {\r\n        config: this.config,\r\n        timestamp: new Date().toISOString(),\r\n      },\r\n      'ReliabilityOrchestrator'\r\n    );\r\n\r\n    try {\r\n      // Initialize performance monitoring\r\n      await this.performanceMonitor.startMonitoring(this.config.performanceMonitoringInterval);\r\n\r\n      // Initialize data pipeline monitoring\r\n      await this.pipelineMonitor.startMonitoring(this.config.dataPipelineCheckInterval);\r\n\r\n      // Set up periodic reliability reports\r\n      this.reportInterval = setInterval(() => {\r\n        this.generateReliabilityReport().catch(error => {\r\n          logger.error(\r\n            'Failed to generate reliability report',\r\n            { error },\r\n            'ReliabilityOrchestrator'\r\n          );\r\n        });\r\n      }, this.config.reliabilityReportInterval);\r\n\r\n      // Generate initial report\r\n      await this.generateReliabilityReport();\r\n\r\n      logger.info(\r\n        'Comprehensive reliability monitoring started successfully',\r\n        undefined,\r\n        'ReliabilityOrchestrator'\r\n      );\r\n    } catch (error) {\r\n      this.isActive = false;\r\n      logger.error('Failed to start reliability monitoring', { error }, 'ReliabilityOrchestrator');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop monitoring\r\n   */\r\n  stopMonitoring(): void {\r\n    if (!this.isActive) return;\r\n\r\n    this.isActive = false;\r\n\r\n    // Stop component monitors\r\n    this.performanceMonitor.stopMonitoring();\r\n    this.pipelineMonitor.stopMonitoring();\r\n\r\n    // Clear intervals\r\n    if (this.reportInterval) {\r\n      clearInterval(this.reportInterval);\r\n      this.reportInterval = null;\r\n    }\r\n\r\n    logger.info('Reliability monitoring stopped', undefined, 'ReliabilityOrchestrator');\r\n  }\r\n\r\n  /**\r\n   * Generate comprehensive reliability report\r\n   */\r\n  private async generateReliabilityReport(): Promise<ReliabilityReport> {\r\n    const timestamp = new Date();\r\n\r\n    try {\r\n      // Get performance health report\r\n      const demoHealth = this.performanceMonitor.generateHealthReport();\r\n      const pipelineHealth = this.pipelineMonitor.getHealthReport();\r\n\r\n      // Calculate overall health metrics\r\n      const performanceScore = demoHealth.overallScore;\r\n      const pipelineScore = this.calculatePipelineScore(pipelineHealth);\r\n      const overallScore = (performanceScore + pipelineScore) / 2;\r\n\r\n      // Determine overall health status\r\n      const overallHealth = this.determineOverallHealth(overallScore);\r\n      const performanceGrade = this.calculatePerformanceGrade(overallScore);\r\n\r\n      // Analyze trends\r\n      const trends = this.analyzeTrends();\r\n\r\n      // Generate improvement recommendations\r\n      const improvements = this.generateImprovementRecommendations(demoHealth, pipelineHealth);\r\n\r\n      const report: ReliabilityReport = {\r\n        timestamp,\r\n        overallHealth,\r\n        performanceGrade,\r\n\r\n        demoPerformance: {\r\n          score: performanceScore,\r\n          grade: demoHealth.performanceGrade,\r\n          issues: demoHealth.criticalIssues,\r\n          recommendations: demoHealth.recommendations,\r\n        },\r\n\r\n        dataPipeline: {\r\n          score: pipelineScore,\r\n          servicesHealthy: this.countHealthyServices(pipelineHealth),\r\n          totalServices: Object.keys(pipelineHealth).length,\r\n          criticalIssues: this.extractCriticalIssues(pipelineHealth),\r\n          degradedServices: this.extractDegradedServices(pipelineHealth),\r\n        },\r\n\r\n        reliability: {\r\n          uptime: this.calculateUptime(),\r\n          errorRate: this.calculateErrorRate(demoHealth.metrics),\r\n          recoveryTime: this.calculateRecoveryTime(),\r\n          userExperience: this.calculateUserExperienceScore(demoHealth.metrics),\r\n        },\r\n\r\n        improvements,\r\n        trends,\r\n      };\r\n\r\n      // Store report\r\n      this.reports.push(report);\r\n      this.lastReport = report;\r\n\r\n      // Keep only last 100 reports for memory efficiency\r\n      if (this.reports.length > 100) {\r\n        this.reports = this.reports.slice(-100);\r\n      }\r\n\r\n      // Check for alerts\r\n      await this.checkAlertsAndAutoRecover(report);\r\n\r\n      // Log report summary\r\n      logger.info(\r\n        'Reliability report generated',\r\n        {\r\n          overallHealth,\r\n          performanceGrade,\r\n          overallScore,\r\n          timestamp: timestamp.toISOString(),\r\n        },\r\n        'ReliabilityOrchestrator'\r\n      );\r\n\r\n      return report;\r\n    } catch (error) {\r\n      logger.error('Failed to generate reliability report', { error }, 'ReliabilityOrchestrator');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate pipeline health score\r\n   */\r\n  private calculatePipelineScore(healthReport: Record<string, any>): number {\r\n    const services = Object.values(healthReport);\r\n    if (services.length === 0) return 0;\r\n\r\n    let totalScore = 0;\r\n    services.forEach((service: any) => {\r\n      if (service.status === 'healthy') totalScore += 100;\r\n      else if (service.status === 'degraded') totalScore += 60;\r\n      else totalScore += 0;\r\n    });\r\n\r\n    return totalScore / services.length;\r\n  }\r\n\r\n  /**\r\n   * Determine overall health status\r\n   */\r\n  private determineOverallHealth(\r\n    score: number\r\n  ): 'excellent' | 'good' | 'fair' | 'poor' | 'critical' {\r\n    if (score >= 95) return 'excellent';\r\n    if (score >= 85) return 'good';\r\n    if (score >= 70) return 'fair';\r\n    if (score >= 50) return 'poor';\r\n    return 'critical';\r\n  }\r\n\r\n  /**\r\n   * Calculate performance grade\r\n   */\r\n  private calculatePerformanceGrade(score: number): 'A+' | 'A' | 'B' | 'C' | 'D' | 'F' {\r\n    if (score >= 97) return 'A+';\r\n    if (score >= 93) return 'A';\r\n    if (score >= 85) return 'B';\r\n    if (score >= 75) return 'C';\r\n    if (score >= 65) return 'D';\r\n    return 'F';\r\n  }\r\n\r\n  /**\r\n   * Analyze trends for continuous improvement\r\n   */\r\n  private analyzeTrends(): ReliabilityReport['trends'] {\r\n    if (this.reports.length < 3) {\r\n      return {\r\n        performance: 'stable',\r\n        reliability: 'stable',\r\n        userSatisfaction: 'stable',\r\n      };\r\n    }\r\n\r\n    const recent = this.reports.slice(-3);\r\n    const older = this.reports.slice(-6, -3);\r\n\r\n    if (older.length === 0) {\r\n      return {\r\n        performance: 'stable',\r\n        reliability: 'stable',\r\n        userSatisfaction: 'stable',\r\n      };\r\n    }\r\n\r\n    const recentAvgPerf =\r\n      recent.reduce((sum, r) => sum + r.demoPerformance.score, 0) / recent.length;\r\n    const olderAvgPerf = older.reduce((sum, r) => sum + r.demoPerformance.score, 0) / older.length;\r\n\r\n    const perfTrend =\r\n      recentAvgPerf > olderAvgPerf + 2\r\n        ? 'improving'\r\n        : recentAvgPerf < olderAvgPerf - 2\r\n        ? 'declining'\r\n        : 'stable';\r\n\r\n    return {\r\n      performance: perfTrend,\r\n      reliability: perfTrend, // Simplified for now\r\n      userSatisfaction: perfTrend, // Simplified for now\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate improvement recommendations based on current state\r\n   */\r\n  private generateImprovementRecommendations(\r\n    demoHealth: DemoHealthReport,\r\n    pipelineHealth: Record<string, any>\r\n  ): ReliabilityReport['improvements'] {\r\n    const immediate: string[] = [];\r\n    const shortTerm: string[] = [];\r\n    const longTerm: string[] = [];\r\n    const automation: string[] = [];\r\n\r\n    // Performance-based recommendations\r\n    if (demoHealth.overallScore < 80) {\r\n      immediate.push('Investigate performance degradation immediately');\r\n      immediate.push('Check for memory leaks and optimize critical rendering paths');\r\n    }\r\n\r\n    if (demoHealth.metrics.pageLoadTime > 3000) {\r\n      shortTerm.push('Implement code splitting and lazy loading');\r\n      shortTerm.push('Optimize bundle size and reduce JavaScript payload');\r\n    }\r\n\r\n    // Pipeline-based recommendations\r\n    const unhealthyServices = Object.values(pipelineHealth).filter(\r\n      (s: any) => s.status !== 'healthy'\r\n    );\r\n    if (unhealthyServices.length > 0) {\r\n      immediate.push(`Address ${unhealthyServices.length} unhealthy service(s)`);\r\n      automation.push('Implement automated service recovery mechanisms');\r\n    }\r\n\r\n    // Proactive improvements\r\n    longTerm.push('Implement predictive analytics for proactive issue detection');\r\n    longTerm.push('Enhance error recovery mechanisms with circuit breakers');\r\n    longTerm.push('Develop automated performance optimization');\r\n\r\n    automation.push('Set up automated alerting for critical thresholds');\r\n    automation.push('Implement self-healing infrastructure components');\r\n\r\n    return { immediate, shortTerm, longTerm, automation };\r\n  }\r\n\r\n  /**\r\n   * Check alerts and implement auto-recovery\r\n   */\r\n  private async checkAlertsAndAutoRecover(report: ReliabilityReport): Promise<void> {\r\n    const alerts: string[] = [];\r\n\r\n    // Performance alerts\r\n    if (report.demoPerformance.score < this.config.alertThresholds.performanceScore) {\r\n      alerts.push(`Performance score below threshold: ${report.demoPerformance.score}`);\r\n    }\r\n\r\n    // Error rate alerts\r\n    if (report.reliability.errorRate > this.config.alertThresholds.errorRate) {\r\n      alerts.push(\r\n        `Error rate above threshold: ${(report.reliability.errorRate * 100).toFixed(2)}%`\r\n      );\r\n    }\r\n\r\n    // Service health alerts\r\n    if (report.dataPipeline.criticalIssues.length > 0) {\r\n      alerts.push(\r\n        `Critical data pipeline issues: ${report.dataPipeline.criticalIssues.join(', ')}`\r\n      );\r\n    }\r\n\r\n    // Log alerts\r\n    if (alerts.length > 0) {\r\n      logger.warn(\r\n        'Reliability alerts triggered',\r\n        {\r\n          alerts,\r\n          report: {\r\n            overallHealth: report.overallHealth,\r\n            performanceGrade: report.performanceGrade,\r\n            timestamp: report.timestamp,\r\n          },\r\n        },\r\n        'ReliabilityOrchestrator'\r\n      );\r\n\r\n      // Auto-recovery if enabled\r\n      if (this.config.autoRecovery) {\r\n        await this.attemptAutoRecovery(report, alerts);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempt automatic recovery for common issues\r\n   */\r\n  private async attemptAutoRecovery(report: ReliabilityReport, alerts: string[]): Promise<void> {\r\n    logger.info('Attempting automatic recovery', { alerts }, 'ReliabilityOrchestrator');\r\n\r\n    // Clear browser cache if performance is degraded\r\n    if (report.demoPerformance.score < 70) {\r\n      try {\r\n        if ('serviceWorker' in navigator) {\r\n          const registrations = await navigator.serviceWorker.getRegistrations();\r\n          for (const registration of registrations) {\r\n            await registration.unregister();\r\n          }\r\n        }\r\n        logger.info(\r\n          'Cleared service worker cache for performance recovery',\r\n          undefined,\r\n          'ReliabilityOrchestrator'\r\n        );\r\n      } catch (error) {\r\n        logger.warn('Failed to clear service worker cache', { error }, 'ReliabilityOrchestrator');\r\n      }\r\n    }\r\n\r\n    // Restart monitoring components if they're degraded\r\n    if (report.dataPipeline.degradedServices.length > 0) {\r\n      try {\r\n        this.pipelineMonitor.stopMonitoring();\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        await this.pipelineMonitor.startMonitoring(this.config.dataPipelineCheckInterval);\r\n        logger.info(\r\n          'Restarted pipeline monitoring for recovery',\r\n          undefined,\r\n          'ReliabilityOrchestrator'\r\n        );\r\n      } catch (error) {\r\n        logger.error('Failed to restart pipeline monitoring', { error }, 'ReliabilityOrchestrator');\r\n      }\r\n    }\r\n  }\r\n\r\n  // Helper methods\r\n  private countHealthyServices(healthReport: Record<string, any>): number {\r\n    return Object.values(healthReport).filter((s: any) => s.status === 'healthy').length;\r\n  }\r\n\r\n  private extractCriticalIssues(healthReport: Record<string, any>): string[] {\r\n    const issues: string[] = [];\r\n    Object.entries(healthReport).forEach(([service, health]: [string, any]) => {\r\n      if (health.status === 'unhealthy') {\r\n        issues.push(`${service}: ${health.errors?.join(', ') || 'Service unhealthy'}`);\r\n      }\r\n    });\r\n    return issues;\r\n  }\r\n\r\n  private extractDegradedServices(healthReport: Record<string, any>): string[] {\r\n    return Object.entries(healthReport)\r\n      .filter(([_, health]: [string, any]) => health.status === 'degraded')\r\n      .map(([service, _]) => service);\r\n  }\r\n\r\n  private calculateUptime(): number {\r\n    // Simplified uptime calculation - in production would track actual downtime\r\n    if (this.reports.length === 0) return 100;\r\n\r\n    const healthyReports = this.reports.filter(r => r.overallHealth !== 'critical').length;\r\n    return (healthyReports / this.reports.length) * 100;\r\n  }\r\n\r\n  private calculateErrorRate(metrics: PerformanceMetrics): number {\r\n    const totalInteractions = Math.max(metrics.userInteractions, 1);\r\n    return metrics.errorCount / totalInteractions;\r\n  }\r\n\r\n  private calculateRecoveryTime(): number {\r\n    // Simplified - would track actual recovery times in production\r\n    return 30; // Average 30 seconds recovery time\r\n  }\r\n\r\n  private calculateUserExperienceScore(metrics: PerformanceMetrics): number {\r\n    let score = 100;\r\n\r\n    // Penalize based on performance metrics\r\n    if (metrics.pageLoadTime > 3000) score -= 20;\r\n    if (metrics.firstContentfulPaint > 1800) score -= 15;\r\n    if (metrics.cumulativeLayoutShift > 0.1) score -= 25;\r\n    if (metrics.errorCount > 0) score -= metrics.errorCount * 10;\r\n\r\n    return Math.max(0, score);\r\n  }\r\n\r\n  // Public API\r\n  getLatestReport(): ReliabilityReport | null {\r\n    return this.lastReport;\r\n  }\r\n\r\n  getReportsHistory(): ReliabilityReport[] {\r\n    return [...this.reports];\r\n  }\r\n\r\n  isMonitoringActive(): boolean {\r\n    return this.isActive;\r\n  }\r\n\r\n  updateConfiguration(newConfig: Partial<MonitoringConfiguration>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n    logger.info(\r\n      'Reliability monitoring configuration updated',\r\n      { config: this.config },\r\n      'ReliabilityOrchestrator'\r\n    );\r\n  }\r\n}\r\n\r\n// Export singleton instance for easy importing\r\nexport const reliabilityMonitoringOrchestrator = ReliabilityMonitoringOrchestrator.getInstance();\r\n\r\nexport default ReliabilityMonitoringOrchestrator;\r\nexport type { MonitoringConfiguration, ReliabilityReport };\r\n"],"mappings":";;;;;;;AAMA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,SAAA,GAAAD,OAAA;AACA,IAAAE,6BAAA,GAAAC,sBAAA,CAAAH,OAAA;AACA,IAAAI,2BAAA,GAAAD,sBAAA,CAAAH,OAAA;AAGsC,IAAAK,kCAAA;AAZtC;AACA;AACA;AACA;AACA;AAsEA,MAAMC,iCAAiC,CAAC;EACtC;AACF;AACA;EACE,MAAMC,UAAUA,CAAA,EAAkB;IAChC,OAAO,IAAI,CAACC,eAAe,CAAC,CAAC;EAC/B;;EAEA;AACF;AACA;EACEC,OAAOA,CAAA,EAAS;IACd,IAAI,CAACC,cAAc,CAAC,CAAC;EACvB;EAgBQC,WAAWA,CAAA,EAAG;IAAA,KAddC,QAAQ,GAAG,KAAK;IAAA,KAChBC,MAAM;IAAA,KACNC,OAAO,GAAwB,EAAE;IAAA,KACjCC,UAAU,GAA6B,IAAI;IAEnD;IAAA,KACQC,kBAAkB;IAAA,KAClBC,eAAe;IAEvB;IAAA,KACQC,mBAAmB,GAA0B,IAAI;IAAA,KACjDC,gBAAgB,GAA0B,IAAI;IAAA,KAC9CC,cAAc,GAA0B,IAAI;IAGlD,IAAI,CAACJ,kBAAkB,GAAGK,mCAA0B,CAACC,WAAW,CAAC,CAAC;IAClE,IAAI,CAACL,eAAe,GAAGM,qCAA4B,CAACD,WAAW,CAAC,CAAC;;IAEjE;IACA,IAAI,CAACT,MAAM,GAAG;MACZW,6BAA6B,EAAE,KAAK;MAAE;MACtCC,yBAAyB,EAAE,KAAK;MAAE;MAClCC,yBAAyB,EAAE,MAAM;MAAE;MACnCC,eAAe,EAAE;QACfC,gBAAgB,EAAE,EAAE;QAAE;QACtBC,SAAS,EAAE,IAAI;QAAE;QACjBC,YAAY,EAAE,IAAI;QAAE;QACpBC,eAAe,EAAE,KAAK,CAAE;MAC1B,CAAC;MACDC,YAAY,EAAE,IAAI;MAClBC,qBAAqB,EAAE;IACzB,CAAC;EACH;EAEA,OAAOX,WAAWA,CAAA,EAAsC;IACtD,IAAI,CAAChB,iCAAiC,CAAC4B,QAAQ,EAAE;MAC/C5B,iCAAiC,CAAC4B,QAAQ,GAAG,IAAI5B,iCAAiC,CAAC,CAAC;IACtF;IACA,OAAOA,iCAAiC,CAAC4B,QAAQ;EACnD;;EAEA;AACF;AACA;EACE,MAAM1B,eAAeA,CAAA,EAAkB;IACrC;IACA,IAAI,IAAA2B,oBAAU,EAAC,CAAC,EAAE;MAChBC,cAAM,CAACC,IAAI,CAAC,+CAA+C,EAAEC,SAAS,EAAE,yBAAyB,CAAC;MAClG;IACF;IAEA,IAAI,IAAI,CAAC1B,QAAQ,EAAE;MACjBwB,cAAM,CAACG,IAAI,CAAC,uCAAuC,EAAED,SAAS,EAAE,yBAAyB,CAAC;MAC1F;IACF;IAEA,IAAI,CAAC1B,QAAQ,GAAG,IAAI;IACpBwB,cAAM,CAACC,IAAI,CACT,kDAAkD,EAClD;MACExB,MAAM,EAAE,IAAI,CAACA,MAAM;MACnB2B,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,EACD,yBACF,CAAC;IAED,IAAI;MACF;MACA,MAAM,IAAI,CAAC1B,kBAAkB,CAACR,eAAe,CAAC,IAAI,CAACK,MAAM,CAACW,6BAA6B,CAAC;;MAExF;MACA,MAAM,IAAI,CAACP,eAAe,CAACT,eAAe,CAAC,IAAI,CAACK,MAAM,CAACY,yBAAyB,CAAC;;MAEjF;MACA,IAAI,CAACL,cAAc,GAAGuB,WAAW,CAAC,MAAM;QACtC,IAAI,CAACC,yBAAyB,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;UAC9CV,cAAM,CAACU,KAAK,CACV,uCAAuC,EACvC;YAAEA;UAAM,CAAC,EACT,yBACF,CAAC;QACH,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAACjC,MAAM,CAACa,yBAAyB,CAAC;;MAEzC;MACA,MAAM,IAAI,CAACkB,yBAAyB,CAAC,CAAC;MAEtCR,cAAM,CAACC,IAAI,CACT,2DAA2D,EAC3DC,SAAS,EACT,yBACF,CAAC;IACH,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACd,IAAI,CAAClC,QAAQ,GAAG,KAAK;MACrBwB,cAAM,CAACU,KAAK,CAAC,wCAAwC,EAAE;QAAEA;MAAM,CAAC,EAAE,yBAAyB,CAAC;MAC5F,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;EACEpC,cAAcA,CAAA,EAAS;IACrB,IAAI,CAAC,IAAI,CAACE,QAAQ,EAAE;IAEpB,IAAI,CAACA,QAAQ,GAAG,KAAK;;IAErB;IACA,IAAI,CAACI,kBAAkB,CAACN,cAAc,CAAC,CAAC;IACxC,IAAI,CAACO,eAAe,CAACP,cAAc,CAAC,CAAC;;IAErC;IACA,IAAI,IAAI,CAACU,cAAc,EAAE;MACvB2B,aAAa,CAAC,IAAI,CAAC3B,cAAc,CAAC;MAClC,IAAI,CAACA,cAAc,GAAG,IAAI;IAC5B;IAEAgB,cAAM,CAACC,IAAI,CAAC,gCAAgC,EAAEC,SAAS,EAAE,yBAAyB,CAAC;EACrF;;EAEA;AACF;AACA;EACE,MAAcM,yBAAyBA,CAAA,EAA+B;IACpE,MAAMJ,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;IAE5B,IAAI;MACF;MACA,MAAMO,UAAU,GAAG,IAAI,CAAChC,kBAAkB,CAACiC,oBAAoB,CAAC,CAAC;MACjE,MAAMC,cAAc,GAAG,IAAI,CAACjC,eAAe,CAACkC,eAAe,CAAC,CAAC;;MAE7D;MACA,MAAMvB,gBAAgB,GAAGoB,UAAU,CAACI,YAAY;MAChD,MAAMC,aAAa,GAAG,IAAI,CAACC,sBAAsB,CAACJ,cAAc,CAAC;MACjE,MAAME,YAAY,GAAG,CAACxB,gBAAgB,GAAGyB,aAAa,IAAI,CAAC;;MAE3D;MACA,MAAME,aAAa,GAAG,IAAI,CAACC,sBAAsB,CAACJ,YAAY,CAAC;MAC/D,MAAMK,gBAAgB,GAAG,IAAI,CAACC,yBAAyB,CAACN,YAAY,CAAC;;MAErE;MACA,MAAMO,MAAM,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC;;MAEnC;MACA,MAAMC,YAAY,GAAG,IAAI,CAACC,kCAAkC,CAACd,UAAU,EAAEE,cAAc,CAAC;MAExF,MAAMa,MAAyB,GAAG;QAChCvB,SAAS;QACTe,aAAa;QACbE,gBAAgB;QAEhBO,eAAe,EAAE;UACfC,KAAK,EAAErC,gBAAgB;UACvBsC,KAAK,EAAElB,UAAU,CAACS,gBAAgB;UAClCU,MAAM,EAAEnB,UAAU,CAACoB,cAAc;UACjCC,eAAe,EAAErB,UAAU,CAACqB;QAC9B,CAAC;QAEDC,YAAY,EAAE;UACZL,KAAK,EAAEZ,aAAa;UACpBkB,eAAe,EAAE,IAAI,CAACC,oBAAoB,CAACtB,cAAc,CAAC;UAC1DuB,aAAa,EAAEC,MAAM,CAACC,IAAI,CAACzB,cAAc,CAAC,CAAC0B,MAAM;UACjDR,cAAc,EAAE,IAAI,CAACS,qBAAqB,CAAC3B,cAAc,CAAC;UAC1D4B,gBAAgB,EAAE,IAAI,CAACC,uBAAuB,CAAC7B,cAAc;QAC/D,CAAC;QAED8B,WAAW,EAAE;UACXC,MAAM,EAAE,IAAI,CAACC,eAAe,CAAC,CAAC;UAC9BrD,SAAS,EAAE,IAAI,CAACsD,kBAAkB,CAACnC,UAAU,CAACoC,OAAO,CAAC;UACtDC,YAAY,EAAE,IAAI,CAACC,qBAAqB,CAAC,CAAC;UAC1CC,cAAc,EAAE,IAAI,CAACC,4BAA4B,CAACxC,UAAU,CAACoC,OAAO;QACtE,CAAC;QAEDvB,YAAY;QACZF;MACF,CAAC;;MAED;MACA,IAAI,CAAC7C,OAAO,CAAC2E,IAAI,CAAC1B,MAAM,CAAC;MACzB,IAAI,CAAChD,UAAU,GAAGgD,MAAM;;MAExB;MACA,IAAI,IAAI,CAACjD,OAAO,CAAC8D,MAAM,GAAG,GAAG,EAAE;QAC7B,IAAI,CAAC9D,OAAO,GAAG,IAAI,CAACA,OAAO,CAAC4E,KAAK,CAAC,CAAC,GAAG,CAAC;MACzC;;MAEA;MACA,MAAM,IAAI,CAACC,yBAAyB,CAAC5B,MAAM,CAAC;;MAE5C;MACA3B,cAAM,CAACC,IAAI,CACT,8BAA8B,EAC9B;QACEkB,aAAa;QACbE,gBAAgB;QAChBL,YAAY;QACZZ,SAAS,EAAEA,SAAS,CAACE,WAAW,CAAC;MACnC,CAAC,EACD,yBACF,CAAC;MAED,OAAOqB,MAAM;IACf,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACdV,cAAM,CAACU,KAAK,CAAC,uCAAuC,EAAE;QAAEA;MAAM,CAAC,EAAE,yBAAyB,CAAC;MAC3F,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;EACUQ,sBAAsBA,CAACsC,YAAiC,EAAU;IACxE,MAAMC,QAAQ,GAAGnB,MAAM,CAACoB,MAAM,CAACF,YAAY,CAAC;IAC5C,IAAIC,QAAQ,CAACjB,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;IAEnC,IAAImB,UAAU,GAAG,CAAC;IAClBF,QAAQ,CAACG,OAAO,CAAEC,OAAY,IAAK;MACjC,IAAIA,OAAO,CAACC,MAAM,KAAK,SAAS,EAAEH,UAAU,IAAI,GAAG,CAAC,KAC/C,IAAIE,OAAO,CAACC,MAAM,KAAK,UAAU,EAAEH,UAAU,IAAI,EAAE,CAAC,KACpDA,UAAU,IAAI,CAAC;IACtB,CAAC,CAAC;IAEF,OAAOA,UAAU,GAAGF,QAAQ,CAACjB,MAAM;EACrC;;EAEA;AACF;AACA;EACUpB,sBAAsBA,CAC5BS,KAAa,EACwC;IACrD,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,WAAW;IACnC,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,MAAM;IAC9B,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,MAAM;IAC9B,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,MAAM;IAC9B,OAAO,UAAU;EACnB;;EAEA;AACF;AACA;EACUP,yBAAyBA,CAACO,KAAa,EAAsC;IACnF,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,IAAI;IAC5B,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,GAAG;IAC3B,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,GAAG;IAC3B,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,GAAG;IAC3B,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,GAAG;IAC3B,OAAO,GAAG;EACZ;;EAEA;AACF;AACA;EACUL,aAAaA,CAAA,EAAgC;IACnD,IAAI,IAAI,CAAC9C,OAAO,CAAC8D,MAAM,GAAG,CAAC,EAAE;MAC3B,OAAO;QACLuB,WAAW,EAAE,QAAQ;QACrBnB,WAAW,EAAE,QAAQ;QACrBoB,gBAAgB,EAAE;MACpB,CAAC;IACH;IAEA,MAAMC,MAAM,GAAG,IAAI,CAACvF,OAAO,CAAC4E,KAAK,CAAC,CAAC,CAAC,CAAC;IACrC,MAAMY,KAAK,GAAG,IAAI,CAACxF,OAAO,CAAC4E,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAExC,IAAIY,KAAK,CAAC1B,MAAM,KAAK,CAAC,EAAE;MACtB,OAAO;QACLuB,WAAW,EAAE,QAAQ;QACrBnB,WAAW,EAAE,QAAQ;QACrBoB,gBAAgB,EAAE;MACpB,CAAC;IACH;IAEA,MAAMG,aAAa,GACjBF,MAAM,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAKD,GAAG,GAAGC,CAAC,CAAC1C,eAAe,CAACC,KAAK,EAAE,CAAC,CAAC,GAAGoC,MAAM,CAACzB,MAAM;IAC7E,MAAM+B,YAAY,GAAGL,KAAK,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAKD,GAAG,GAAGC,CAAC,CAAC1C,eAAe,CAACC,KAAK,EAAE,CAAC,CAAC,GAAGqC,KAAK,CAAC1B,MAAM;IAE9F,MAAMgC,SAAS,GACbL,aAAa,GAAGI,YAAY,GAAG,CAAC,GAC5B,WAAW,GACXJ,aAAa,GAAGI,YAAY,GAAG,CAAC,GAChC,WAAW,GACX,QAAQ;IAEd,OAAO;MACLR,WAAW,EAAES,SAAS;MACtB5B,WAAW,EAAE4B,SAAS;MAAE;MACxBR,gBAAgB,EAAEQ,SAAS,CAAE;IAC/B,CAAC;EACH;;EAEA;AACF;AACA;EACU9C,kCAAkCA,CACxCd,UAA4B,EAC5BE,cAAmC,EACA;IACnC,MAAM2D,SAAmB,GAAG,EAAE;IAC9B,MAAMC,SAAmB,GAAG,EAAE;IAC9B,MAAMC,QAAkB,GAAG,EAAE;IAC7B,MAAMC,UAAoB,GAAG,EAAE;;IAE/B;IACA,IAAIhE,UAAU,CAACI,YAAY,GAAG,EAAE,EAAE;MAChCyD,SAAS,CAACpB,IAAI,CAAC,iDAAiD,CAAC;MACjEoB,SAAS,CAACpB,IAAI,CAAC,8DAA8D,CAAC;IAChF;IAEA,IAAIzC,UAAU,CAACoC,OAAO,CAAC6B,YAAY,GAAG,IAAI,EAAE;MAC1CH,SAAS,CAACrB,IAAI,CAAC,2CAA2C,CAAC;MAC3DqB,SAAS,CAACrB,IAAI,CAAC,oDAAoD,CAAC;IACtE;;IAEA;IACA,MAAMyB,iBAAiB,GAAGxC,MAAM,CAACoB,MAAM,CAAC5C,cAAc,CAAC,CAACiE,MAAM,CAC3DC,CAAM,IAAKA,CAAC,CAAClB,MAAM,KAAK,SAC3B,CAAC;IACD,IAAIgB,iBAAiB,CAACtC,MAAM,GAAG,CAAC,EAAE;MAChCiC,SAAS,CAACpB,IAAI,CAAC,WAAWyB,iBAAiB,CAACtC,MAAM,uBAAuB,CAAC;MAC1EoC,UAAU,CAACvB,IAAI,CAAC,iDAAiD,CAAC;IACpE;;IAEA;IACAsB,QAAQ,CAACtB,IAAI,CAAC,8DAA8D,CAAC;IAC7EsB,QAAQ,CAACtB,IAAI,CAAC,yDAAyD,CAAC;IACxEsB,QAAQ,CAACtB,IAAI,CAAC,4CAA4C,CAAC;IAE3DuB,UAAU,CAACvB,IAAI,CAAC,mDAAmD,CAAC;IACpEuB,UAAU,CAACvB,IAAI,CAAC,kDAAkD,CAAC;IAEnE,OAAO;MAAEoB,SAAS;MAAEC,SAAS;MAAEC,QAAQ;MAAEC;IAAW,CAAC;EACvD;;EAEA;AACF;AACA;EACE,MAAcrB,yBAAyBA,CAAC5B,MAAyB,EAAiB;IAChF,MAAMsD,MAAgB,GAAG,EAAE;;IAE3B;IACA,IAAItD,MAAM,CAACC,eAAe,CAACC,KAAK,GAAG,IAAI,CAACpD,MAAM,CAACc,eAAe,CAACC,gBAAgB,EAAE;MAC/EyF,MAAM,CAAC5B,IAAI,CAAC,sCAAsC1B,MAAM,CAACC,eAAe,CAACC,KAAK,EAAE,CAAC;IACnF;;IAEA;IACA,IAAIF,MAAM,CAACiB,WAAW,CAACnD,SAAS,GAAG,IAAI,CAAChB,MAAM,CAACc,eAAe,CAACE,SAAS,EAAE;MACxEwF,MAAM,CAAC5B,IAAI,CACT,+BAA+B,CAAC1B,MAAM,CAACiB,WAAW,CAACnD,SAAS,GAAG,GAAG,EAAEyF,OAAO,CAAC,CAAC,CAAC,GAChF,CAAC;IACH;;IAEA;IACA,IAAIvD,MAAM,CAACO,YAAY,CAACF,cAAc,CAACQ,MAAM,GAAG,CAAC,EAAE;MACjDyC,MAAM,CAAC5B,IAAI,CACT,kCAAkC1B,MAAM,CAACO,YAAY,CAACF,cAAc,CAACmD,IAAI,CAAC,IAAI,CAAC,EACjF,CAAC;IACH;;IAEA;IACA,IAAIF,MAAM,CAACzC,MAAM,GAAG,CAAC,EAAE;MACrBxC,cAAM,CAACG,IAAI,CACT,8BAA8B,EAC9B;QACE8E,MAAM;QACNtD,MAAM,EAAE;UACNR,aAAa,EAAEQ,MAAM,CAACR,aAAa;UACnCE,gBAAgB,EAAEM,MAAM,CAACN,gBAAgB;UACzCjB,SAAS,EAAEuB,MAAM,CAACvB;QACpB;MACF,CAAC,EACD,yBACF,CAAC;;MAED;MACA,IAAI,IAAI,CAAC3B,MAAM,CAACmB,YAAY,EAAE;QAC5B,MAAM,IAAI,CAACwF,mBAAmB,CAACzD,MAAM,EAAEsD,MAAM,CAAC;MAChD;IACF;EACF;;EAEA;AACF;AACA;EACE,MAAcG,mBAAmBA,CAACzD,MAAyB,EAAEsD,MAAgB,EAAiB;IAC5FjF,cAAM,CAACC,IAAI,CAAC,+BAA+B,EAAE;MAAEgF;IAAO,CAAC,EAAE,yBAAyB,CAAC;;IAEnF;IACA,IAAItD,MAAM,CAACC,eAAe,CAACC,KAAK,GAAG,EAAE,EAAE;MACrC,IAAI;QACF,IAAI,eAAe,IAAIwD,SAAS,EAAE;UAChC,MAAMC,aAAa,GAAG,MAAMD,SAAS,CAACE,aAAa,CAACC,gBAAgB,CAAC,CAAC;UACtE,KAAK,MAAMC,YAAY,IAAIH,aAAa,EAAE;YACxC,MAAMG,YAAY,CAACC,UAAU,CAAC,CAAC;UACjC;QACF;QACA1F,cAAM,CAACC,IAAI,CACT,uDAAuD,EACvDC,SAAS,EACT,yBACF,CAAC;MACH,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdV,cAAM,CAACG,IAAI,CAAC,sCAAsC,EAAE;UAAEO;QAAM,CAAC,EAAE,yBAAyB,CAAC;MAC3F;IACF;;IAEA;IACA,IAAIiB,MAAM,CAACO,YAAY,CAACQ,gBAAgB,CAACF,MAAM,GAAG,CAAC,EAAE;MACnD,IAAI;QACF,IAAI,CAAC3D,eAAe,CAACP,cAAc,CAAC,CAAC;QACrC,MAAM,IAAIqH,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;QACvD,MAAM,IAAI,CAAC/G,eAAe,CAACT,eAAe,CAAC,IAAI,CAACK,MAAM,CAACY,yBAAyB,CAAC;QACjFW,cAAM,CAACC,IAAI,CACT,4CAA4C,EAC5CC,SAAS,EACT,yBACF,CAAC;MACH,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdV,cAAM,CAACU,KAAK,CAAC,uCAAuC,EAAE;UAAEA;QAAM,CAAC,EAAE,yBAAyB,CAAC;MAC7F;IACF;EACF;;EAEA;EACQ0B,oBAAoBA,CAACoB,YAAiC,EAAU;IACtE,OAAOlB,MAAM,CAACoB,MAAM,CAACF,YAAY,CAAC,CAACuB,MAAM,CAAEC,CAAM,IAAKA,CAAC,CAAClB,MAAM,KAAK,SAAS,CAAC,CAACtB,MAAM;EACtF;EAEQC,qBAAqBA,CAACe,YAAiC,EAAY;IACzE,MAAMzB,MAAgB,GAAG,EAAE;IAC3BO,MAAM,CAACwD,OAAO,CAACtC,YAAY,CAAC,CAACI,OAAO,CAAC,CAAC,CAACC,OAAO,EAAEkC,MAAM,CAAgB,KAAK;MACzE,IAAIA,MAAM,CAACjC,MAAM,KAAK,WAAW,EAAE;QACjC/B,MAAM,CAACsB,IAAI,CAAC,GAAGQ,OAAO,KAAKkC,MAAM,CAACC,MAAM,EAAEb,IAAI,CAAC,IAAI,CAAC,IAAI,mBAAmB,EAAE,CAAC;MAChF;IACF,CAAC,CAAC;IACF,OAAOpD,MAAM;EACf;EAEQY,uBAAuBA,CAACa,YAAiC,EAAY;IAC3E,OAAOlB,MAAM,CAACwD,OAAO,CAACtC,YAAY,CAAC,CAChCuB,MAAM,CAAC,CAAC,CAACkB,CAAC,EAAEF,MAAM,CAAgB,KAAKA,MAAM,CAACjC,MAAM,KAAK,UAAU,CAAC,CACpEoC,GAAG,CAAC,CAAC,CAACrC,OAAO,EAAEoC,CAAC,CAAC,KAAKpC,OAAO,CAAC;EACnC;EAEQf,eAAeA,CAAA,EAAW;IAChC;IACA,IAAI,IAAI,CAACpE,OAAO,CAAC8D,MAAM,KAAK,CAAC,EAAE,OAAO,GAAG;IAEzC,MAAM2D,cAAc,GAAG,IAAI,CAACzH,OAAO,CAACqG,MAAM,CAACT,CAAC,IAAIA,CAAC,CAACnD,aAAa,KAAK,UAAU,CAAC,CAACqB,MAAM;IACtF,OAAQ2D,cAAc,GAAG,IAAI,CAACzH,OAAO,CAAC8D,MAAM,GAAI,GAAG;EACrD;EAEQO,kBAAkBA,CAACC,OAA2B,EAAU;IAC9D,MAAMoD,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAACtD,OAAO,CAACuD,gBAAgB,EAAE,CAAC,CAAC;IAC/D,OAAOvD,OAAO,CAACwD,UAAU,GAAGJ,iBAAiB;EAC/C;EAEQlD,qBAAqBA,CAAA,EAAW;IACtC;IACA,OAAO,EAAE,CAAC,CAAC;EACb;EAEQE,4BAA4BA,CAACJ,OAA2B,EAAU;IACxE,IAAInB,KAAK,GAAG,GAAG;;IAEf;IACA,IAAImB,OAAO,CAAC6B,YAAY,GAAG,IAAI,EAAEhD,KAAK,IAAI,EAAE;IAC5C,IAAImB,OAAO,CAACyD,oBAAoB,GAAG,IAAI,EAAE5E,KAAK,IAAI,EAAE;IACpD,IAAImB,OAAO,CAAC0D,qBAAqB,GAAG,GAAG,EAAE7E,KAAK,IAAI,EAAE;IACpD,IAAImB,OAAO,CAACwD,UAAU,GAAG,CAAC,EAAE3E,KAAK,IAAImB,OAAO,CAACwD,UAAU,GAAG,EAAE;IAE5D,OAAOH,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEzE,KAAK,CAAC;EAC3B;;EAEA;EACA8E,eAAeA,CAAA,EAA6B;IAC1C,OAAO,IAAI,CAAChI,UAAU;EACxB;EAEAiI,iBAAiBA,CAAA,EAAwB;IACvC,OAAO,CAAC,GAAG,IAAI,CAAClI,OAAO,CAAC;EAC1B;EAEAmI,kBAAkBA,CAAA,EAAY;IAC5B,OAAO,IAAI,CAACrI,QAAQ;EACtB;EAEAsI,mBAAmBA,CAACC,SAA2C,EAAQ;IACrE,IAAI,CAACtI,MAAM,GAAG;MAAE,GAAG,IAAI,CAACA,MAAM;MAAE,GAAGsI;IAAU,CAAC;IAC9C/G,cAAM,CAACC,IAAI,CACT,8CAA8C,EAC9C;MAAExB,MAAM,EAAE,IAAI,CAACA;IAAO,CAAC,EACvB,yBACF,CAAC;EACH;AACF;;AAEA;AAAAR,kCAAA,GAhgBMC,iCAAiC;AAAjCA,iCAAiC,CActB4B,QAAQ;AAmflB,MAAMkH,iCAAiC,GAAAC,OAAA,CAAAD,iCAAA,GAAG9I,iCAAiC,CAACgB,WAAW,CAAC,CAAC;AAAC,IAAAgI,QAAA,GAAAD,OAAA,CAAAE,OAAA,GAElFjJ,iCAAiC","ignoreList":[]}