cb22de285369e84fa4fa7ed4e803c6ba
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _SportsService = require("../../services/SportsService");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Direct PropOllama Data Fetching Test
 * This component bypasses all the complex hooks and data managers
 * to directly test the API endpoints that PropOllama should be using
 */

const DirectDataFetchTest = () => {
  const [results, setResults] = (0, _react.useState)([]);
  const [isRunning, setIsRunning] = (0, _react.useState)(false);
  const tests = [{
    name: 'Backend Health Check',
    endpoint: 'http://localhost:8000/health',
    method: 'GET'
  }, {
    name: 'V2 API Health Check',
    endpoint: 'http://localhost:8000/api/v2/health',
    method: 'GET'
  }, {
    name: "Today's MLB Games",
    endpoint: 'http://localhost:8000/mlb/todays-games',
    method: 'GET'
  }, {
    name: 'MLB Player Props (Direct)',
    endpoint: 'http://localhost:8000/mlb/odds-comparison/?market_type=playerprops&limit=10',
    method: 'GET'
  }, {
    name: 'Sport Activation - MLB (v2)',
    endpoint: '/api/v2/sports/activate',
    method: 'POST',
    useV2: true
  }, {
    name: 'Frontend Health (via proxy)',
    endpoint: '/api/health',
    method: 'GET'
  }];
  const runDirectTests = async () => {
    setIsRunning(true);
    setResults([]);
    console.log('[DirectDataFetchTest] Starting direct API tests...');
    for (const test of tests) {
      const startTime = Date.now();
      try {
        console.log(`[DirectDataFetchTest] Testing: ${test.name} - ${test.endpoint}`);
        let data;
        let dataCount = 0;
        let ok = false;
        let status = 0;
        if (test.useV2) {
          // Use new versioned service with fallback and logging
          data = await (0, _SportsService.activateSport)('MLB');
          ok = data?.success;
          dataCount = 1;
          status = 200;
        } else {
          const fetchOptions = {
            method: test.method,
            headers: {
              'Content-Type': 'application/json'
            }
          };
          const response = await fetch(test.endpoint, fetchOptions);
          status = response.status;
          try {
            data = await response.json();
            dataCount = Array.isArray(data) ? data.length : data?.games?.length || 0;
            ok = response.ok;
          } catch (err) {
            data = null;
          }
        }
        const duration = Date.now() - startTime;
        setResults(prev => [...prev, {
          endpoint: test.endpoint,
          method: test.method,
          success: ok,
          dataCount,
          data: Array.isArray(data) ? `Array(${data.length})` : data,
          duration,
          timestamp: new Date().toISOString(),
          versionUsed: data?.version_used
        }]);
        console.log(`[DirectDataFetchTest] ✅ ${test.name}: ${status} (${duration}ms)`, data);
      } catch (error) {
        const duration = Date.now() - startTime;
        setResults(prev => [...prev, {
          endpoint: test.endpoint,
          method: test.method,
          success: false,
          dataCount: 0,
          error: error instanceof Error ? error.message : String(error),
          duration,
          timestamp: new Date().toISOString()
        }]);
      }
    }
    setIsRunning(false);
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "p-6",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
      className: "bg-blue-700 hover:bg-blue-800 text-white px-4 py-2 rounded mb-6 font-bold shadow",
      onClick: runDirectTests,
      disabled: isRunning,
      children: isRunning ? '🔄 Running Tests...' : '▶️ Run Direct API Tests'
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "grid gap-4",
      children: results.map((result, index) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: `p-4 rounded border-l-4 ${result.success ? 'bg-green-900/20 border-green-500 text-green-100' : 'bg-red-900/20 border-red-500 text-red-100'}`,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex items-center justify-between mb-2",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
            className: "font-medium flex items-center gap-2",
            children: [result.success ? '✅' : '❌', /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              className: "text-sm opacity-75",
              children: result.method
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "text-xs opacity-75 flex gap-4",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
              children: [result.duration, "ms"]
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              children: result.timestamp.split('T')[1].split('.')[0]
            })]
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "text-sm mb-2 font-mono break-all opacity-90",
          children: result.endpoint
        }), result.success && result.dataCount > 0 && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-xs bg-green-900/30 p-2 rounded mb-2",
          children: ["\uD83D\uDCCA Data received: ", result.dataCount, " items", result.versionUsed && /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
            className: "ml-2 text-yellow-300",
            children: ["[API version: ", result.versionUsed, "]"]
          })]
        }), result.error && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-xs bg-red-900/30 p-2 rounded mb-2",
          children: ["\u26A0\uFE0F Error: ", result.error]
        }), result.data && typeof result.data === 'object' && /*#__PURE__*/(0, _jsxRuntime.jsxs)("details", {
          className: "text-xs",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("summary", {
            className: "cursor-pointer opacity-75 hover:opacity-100",
            children: "View Response Data"
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("pre", {
            className: "bg-slate-800/50 p-2 rounded mt-2 overflow-x-auto",
            children: [JSON.stringify(result.data, null, 2).substring(0, 1000), JSON.stringify(result.data).length > 1000 && '\n...truncated']
          })]
        })]
      }, index))
    }), results.length === 0 && !isRunning && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "text-gray-400 text-center py-8",
      children: "No tests run yet - click the button above to start"
    }), isRunning && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "text-yellow-400 text-center py-4 flex items-center justify-center gap-2",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "animate-spin w-4 h-4 border-2 border-yellow-400 border-t-transparent rounded-full"
      }), "Running API tests..."]
    })]
  });
};
var _default = exports.default = DirectDataFetchTest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,