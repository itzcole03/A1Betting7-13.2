{"version":3,"names":["_react","_interopRequireWildcard","require","_enhancedLogger","_HttpClient","_BetSlipComponent","_EnhancedErrorBoundary","_interopRequireDefault","_PropFilters","_usePropOllamaState","_PropList","_LoadingOverlay","_PerformancePanel","_PropSorting","_GameStatsPanel","_useOptimizedDataFetching","_jsxRuntime","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","OptimizedPropOllamaContainer","memo","state","actions","usePropOllamaState","data","healthData","loading","healthLoading","error","healthError","useOptimizedDataFetching","httpFetch","then","res","json","debounceDelay","cacheTime","autoRefresh","React","useEffect","enhancedLogger","info","undefined","memoizedHandlers","useMemo","handleFiltersChange","filters","updateFilters","handleSortingChange","sorting","updateSorting","handleGameSelect","game","setSelectedGame","handleStatsGameSelect","gameId","upcomingGames","find","g","game_id","home","away","connectionHealthData","status","connectionHealth","isHealthy","latency","lastCheck","Date","lastChecked","performanceMetrics","betSlipItems","selectedProps","map","sp","opportunityId","id","String","playerId","key","opportunity","stake","entryAmount","potentialPayout","addedAt","now","normalizedLoadingStage","stage","loadingStage","s","jsx","children","jsxs","className","HeaderSection","ControlPanel","handlers","MainContent","BetSlipSection","onEntryAmountChange","setEntryAmount","onRemoveProp","removeSelectedProp","onClearSlip","setSelectedProps","onPlaceBet","isVisible","isLoading","message","loadingMessage","progress","propLoadingProgress","displayName","PerformancePanel","PropFilters","onFiltersChange","sports","statTypes","selectedGame","onGameSelect","PropSorting","onSortingChange","GameStatsPanel","games","selectedGameId","renderError","PropList","props","projections","expandedRowKey","onExpandToggle","_key","onAnalysisRequest","_prop","Promise","resolve","enhancedAnalysisCache","Map","loadingAnalysis","Set","sortBy","searchTerm","useVirtualization","Array","isArray","length","BetSlipComponent","_default","exports"],"sources":["OptimizedPropOllamaContainer.tsx"],"sourcesContent":["import React, { memo, useCallback, useMemo } from 'react';\r\nimport { enhancedLogger } from '../../utils/enhancedLogger';\r\nimport { httpFetch } from '../../services/HttpClient';\r\nimport { BetSlipComponent } from '../betting/BetSlipComponent';\r\nimport EnhancedErrorBoundary from '../EnhancedErrorBoundary';\r\nimport { PropFilters } from '../filters/PropFilters';\r\nimport { usePropOllamaState } from '../hooks/usePropOllamaState';\r\nimport { PropList } from '../lists/PropList';\r\nimport LoadingOverlay from '../LoadingOverlay';\r\nimport { PerformancePanel } from '../performance/PerformancePanel';\r\nimport { PropSorting } from '../sorting/PropSorting';\r\nimport { GameStatsPanel } from '../stats/GameStatsPanel';\r\nimport { useOptimizedDataFetching } from '../../hooks/useOptimizedDataFetching';\r\n\r\n/**\r\n * Optimized PropOllama Container with performance improvements:\r\n * - Memoized components to prevent unnecessary re-renders\r\n * - Debounced data fetching to reduce API calls\r\n * - Optimized state management\r\n * - Proper React.memo usage for child components\r\n */\r\nconst OptimizedPropOllamaContainer: React.FC = memo(() => {\r\n  // State and actions hooks\r\n  const [state, actions] = usePropOllamaState();\r\n\r\n  // Optimized data fetching with debouncing and caching\r\n  const { data: healthData, loading: healthLoading, error: healthError } = useOptimizedDataFetching(\r\n    () => httpFetch('/api/v2/health').then(res => res.json()),\r\n    [], // No dependencies - only fetch once\r\n    {\r\n      debounceDelay: 500,\r\n      cacheTime: 60000, // Cache for 1 minute\r\n      autoRefresh: false, // Disable auto-refresh for health check\r\n    }\r\n  );\r\n\r\n  // Log health data for debugging but don't cause re-renders\r\n  React.useEffect(() => {\r\n    if (healthData) {\r\n      enhancedLogger.info('OptimizedPropOllamaContainer', 'healthCheck', 'Health check success', { healthData });\r\n    }\r\n    if (healthError) {\r\n      enhancedLogger.error('OptimizedPropOllamaContainer', 'healthCheck', 'Health check failed', undefined, healthError as unknown as Error);\r\n    }\r\n  }, [healthData, healthError]);\r\n\r\n  // Memoized handlers to prevent unnecessary re-renders of child components\r\n  const memoizedHandlers = useMemo(() => ({\r\n    handleFiltersChange: (filters: any) => actions.updateFilters(filters),\r\n    handleSortingChange: (sorting: any) => actions.updateSorting(sorting),\r\n    handleGameSelect: (game: any) => {\r\n      if (game) actions.setSelectedGame(game);\r\n    },\r\n    handleStatsGameSelect: (gameId: number) => {\r\n      const game = state.upcomingGames.find((g: any) => g.game_id === gameId);\r\n      if (game) {\r\n        actions.setSelectedGame({\r\n          game_id: gameId,\r\n          home: game.home,\r\n          away: game.away,\r\n        });\r\n      }\r\n    },\r\n  }), [actions, state.upcomingGames]);\r\n\r\n  // Memoized connection health data to prevent unnecessary re-renders\r\n  const connectionHealthData = useMemo(() => ({\r\n    status: state.connectionHealth.isHealthy ? 'healthy' as const : 'error' as const,\r\n    latency: state.connectionHealth.latency,\r\n    lastCheck: new Date(state.connectionHealth.lastChecked),\r\n  }), [state.connectionHealth.isHealthy, state.connectionHealth.latency, state.connectionHealth.lastChecked]);\r\n\r\n  // Memoized performance metrics to prevent unnecessary re-renders\r\n  const performanceMetrics = useMemo(() => ({} as unknown as object), []);\r\n\r\n  // Derive BetSlipItem[] from selectedProps to satisfy BetSlipComponent\r\n  const betSlipItems = React.useMemo(() => {\r\n    try {\r\n      return (state.selectedProps || []).map((sp: any) => ({\r\n        opportunityId: sp.id ?? sp.opportunityId ?? String(sp?.playerId ?? sp?.key ?? ''),\r\n        opportunity: sp as any,\r\n        stake: typeof sp.stake === 'number' ? sp.stake : state.entryAmount || 0,\r\n        potentialPayout: typeof sp.potentialPayout === 'number' ? sp.potentialPayout : 0,\r\n        addedAt: sp.addedAt ?? Date.now(),\r\n      }));\r\n    } catch (e) {\r\n      return [] as any[];\r\n    }\r\n  }, [state.selectedProps, state.entryAmount]);\r\n\r\n  // Normalize loadingStage to expected union for LoadingOverlay\r\n  const normalizedLoadingStage = React.useMemo(() => {\r\n    const stage = state.loadingStage;\r\n    if (!stage) return 'fetching' as const;\r\n    const s = typeof stage === 'string' ? stage : (stage?.stage as string | undefined);\r\n    if (s === 'activating' || s === 'fetching' || s === 'processing') return s as 'activating' | 'fetching' | 'processing';\r\n    // Map other internal stages to 'processing' as a safe default\r\n    return 'processing' as const;\r\n  }, [state.loadingStage]);\r\n\r\n  return (\r\n    <EnhancedErrorBoundary>\r\n      <div className='prop-ollama-container text-white'>\r\n        {/* Header Section */}\r\n        <HeaderSection \r\n          connectionHealth={connectionHealthData}\r\n          performanceMetrics={performanceMetrics}\r\n          healthLoading={healthLoading}\r\n        />\r\n\r\n        {/* Control Panel */}\r\n        <ControlPanel\r\n          state={state}\r\n          handlers={{\r\n            handleFiltersChange: memoizedHandlers.handleFiltersChange,\r\n            handleSortingChange: memoizedHandlers.handleSortingChange,\r\n            handleStatsGameSelect: memoizedHandlers.handleStatsGameSelect,\r\n          }}\r\n        />\r\n\r\n        {/* Main Content */}\r\n        <MainContent\r\n          state={state}\r\n        />\r\n\r\n        {/* Bet Slip */}\r\n        <BetSlipSection\r\n          selectedProps={betSlipItems}\r\n          entryAmount={state.entryAmount}\r\n          onEntryAmountChange={actions.setEntryAmount}\r\n          onRemoveProp={(id: string) => actions.removeSelectedProp(id)}\r\n          onClearSlip={() => actions.setSelectedProps([])}\r\n          onPlaceBet={async () => { enhancedLogger.info('OptimizedPropOllamaContainer', 'onPlaceBet', 'Place bet not implemented in optimized container'); }}\r\n        />\r\n\r\n        {/* Loading Overlay */}\r\n        <LoadingOverlay\r\n          isVisible={!!state.isLoading}\r\n          stage={normalizedLoadingStage}\r\n          message={state.loadingMessage}\r\n          progress={state.propLoadingProgress}\r\n        />\r\n      </div>\r\n    </EnhancedErrorBoundary>\r\n  );\r\n});\r\n\r\nOptimizedPropOllamaContainer.displayName = 'OptimizedPropOllamaContainer';\r\n\r\n// Memoized sub-components to prevent unnecessary re-renders\r\n\r\nconst HeaderSection = memo<{\r\n  connectionHealth: { status: 'healthy' | 'error'; latency: number; lastCheck: Date };\r\n  performanceMetrics: {};\r\n  healthLoading: boolean;\r\n}>(({ connectionHealth, performanceMetrics, healthLoading }) => (\r\n  <div className='header-section'>\r\n    <h1 className='text-3xl font-bold mb-6 text-center text-white'>\r\n      AI Sports Analytics & Prop Generation\r\n    </h1>\r\n\r\n    {/* Performance Monitor */}\r\n    <PerformancePanel\r\n      connectionHealth={connectionHealth}\r\n      performanceMetrics={performanceMetrics}\r\n    />\r\n    \r\n    {healthLoading && (\r\n      <div className='text-center text-cyan-400 text-sm'>\r\n        Checking backend health...\r\n      </div>\r\n    )}\r\n  </div>\r\n));\r\n\r\nHeaderSection.displayName = 'HeaderSection';\r\n\r\nconst ControlPanel = memo<{\r\n  state: any;\r\n  handlers: any;\r\n}>(({ state, handlers }) => (\r\n  <div className='control-panel grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8'>\r\n    {/* Filters */}\r\n    <div className='bg-slate-800/50 p-6 rounded-lg border border-slate-700'>\r\n      <PropFilters\r\n        filters={state.filters}\r\n        onFiltersChange={handlers.handleFiltersChange}\r\n        sports={['All', 'NBA', 'NFL', 'NHL', 'MLB']}\r\n        statTypes={['All', 'Points', 'Rebounds', 'Assists', 'Home Runs', 'RBIs', 'Hits']}\r\n        upcomingGames={state.upcomingGames}\r\n        selectedGame={state.selectedGame}\r\n        onGameSelect={handlers.handleGameSelect}\r\n      />\r\n    </div>\r\n\r\n    {/* Sorting */}\r\n    <div className='bg-slate-800/50 p-6 rounded-lg border border-slate-700'>\r\n      <PropSorting\r\n        sorting={state.sorting}\r\n        onSortingChange={handlers.handleSortingChange}\r\n      />\r\n    </div>\r\n\r\n    {/* Game Stats */}\r\n    <div className='bg-slate-800/50 p-6 rounded-lg border border-slate-700'>\r\n      <GameStatsPanel\r\n        games={state.upcomingGames}\r\n        selectedGameId={state.selectedGame?.game_id || null}\r\n        onGameSelect={handlers.handleStatsGameSelect}\r\n        loading={state.isLoading}\r\n      />\r\n    </div>\r\n  </div>\r\n));\r\n\r\nControlPanel.displayName = 'ControlPanel';\r\n\r\nconst MainContent = memo<{\r\n  state: any;\r\n  handlers?: any;\r\n}>(({ state, handlers }) => (\r\n  <div className='main-content'>\r\n    {/* Error Display */}\r\n    {state.error && (\r\n      <div className='bg-red-900/50 border border-red-500 text-red-200 p-4 rounded-lg mb-6'>\r\n        <h3 className='font-semibold mb-2'>Error</h3>\r\n        <p>{state.error}</p>\r\n      </div>\r\n    )}\r\n\r\n    {/* Render Error Display */}\r\n    {state.renderError && (\r\n      <div className='bg-yellow-900/50 border border-yellow-500 text-yellow-200 p-4 rounded-lg mb-6'>\r\n        <h3 className='font-semibold mb-2'>Render Error</h3>\r\n        <p>{state.renderError}</p>\r\n      </div>\r\n    )}\r\n\r\n    {/* Props List */}\r\n      <div className='bg-slate-800/30 rounded-lg border border-slate-700'>\r\n      <PropList\r\n        props={state.projections || []}\r\n        loading={!!state.isLoading}\r\n        expandedRowKey={state.expandedRowKey ?? null}\r\n  onExpandToggle={(_key: string) => { /* noop for now */ }}\r\n  onAnalysisRequest={async (_prop: any) => { return Promise.resolve(null); }}\r\n        enhancedAnalysisCache={state.enhancedAnalysisCache || new Map()}\r\n        loadingAnalysis={state.loadingAnalysis || new Set()}\r\n        sortBy={state.sorting?.sortBy || ''}\r\n        searchTerm={state.filters?.searchTerm || ''}\r\n        useVirtualization={Array.isArray(state.projections) ? state.projections.length > 100 : false}\r\n      />\r\n      </div>\r\n  </div>\r\n));\r\n\r\nMainContent.displayName = 'MainContent';\r\n\r\nconst BetSlipSection = memo<{\r\n  selectedProps: any[];\r\n  entryAmount: number;\r\n  onEntryAmountChange: (amount: number) => void;\r\n  onRemoveProp?: (opportunityId: string) => void;\r\n  onClearSlip?: () => void;\r\n  onPlaceBet?: () => Promise<void>;\r\n}>(({ selectedProps, entryAmount, onEntryAmountChange, onRemoveProp, onClearSlip, onPlaceBet }) => (\r\n  <div className='bet-slip-section mt-8'>\r\n    <BetSlipComponent\r\n      selectedProps={selectedProps}\r\n      entryAmount={entryAmount}\r\n      onEntryAmountChange={onEntryAmountChange}\r\n      onRemoveProp={onRemoveProp ?? (() => {})}\r\n      onClearSlip={onClearSlip ?? (() => {})}\r\n      onPlaceBet={onPlaceBet ? (() => { void onPlaceBet(); }) : (() => {})}\r\n    />\r\n  </div>\r\n));\r\n\r\nBetSlipSection.displayName = 'BetSlipSection';\r\n\r\nexport default OptimizedPropOllamaContainer;\r\n"],"mappings":"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","ignoreList":[]}