be1707a5b820d665cffb1b8b5257adce
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _enhancedLogger = require("../../utils/enhancedLogger");
var _HttpClient = require("../../services/HttpClient");
var _BetSlipComponent = require("../betting/BetSlipComponent");
var _EnhancedErrorBoundary = _interopRequireDefault(require("../EnhancedErrorBoundary"));
var _PropFilters = require("../filters/PropFilters");
var _usePropOllamaState = require("../hooks/usePropOllamaState");
var _PropList = require("../lists/PropList");
var _LoadingOverlay = _interopRequireDefault(require("../LoadingOverlay"));
var _PerformancePanel = require("../performance/PerformancePanel");
var _PropSorting = require("../sorting/PropSorting");
var _GameStatsPanel = require("../stats/GameStatsPanel");
var _useOptimizedDataFetching = require("../../hooks/useOptimizedDataFetching");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Optimized PropOllama Container with performance improvements:
 * - Memoized components to prevent unnecessary re-renders
 * - Debounced data fetching to reduce API calls
 * - Optimized state management
 * - Proper React.memo usage for child components
 */const OptimizedPropOllamaContainer = /*#__PURE__*/(0, _react.memo)(() => {
  // State and actions hooks
  const [state, actions] = (0, _usePropOllamaState.usePropOllamaState)();

  // Optimized data fetching with debouncing and caching
  const {
    data: healthData,
    loading: healthLoading,
    error: healthError
  } = (0, _useOptimizedDataFetching.useOptimizedDataFetching)(() => (0, _HttpClient.httpFetch)('/api/v2/health').then(res => res.json()), [],
  // No dependencies - only fetch once
  {
    debounceDelay: 500,
    cacheTime: 60000,
    // Cache for 1 minute
    autoRefresh: false // Disable auto-refresh for health check
  });

  // Log health data for debugging but don't cause re-renders
  _react.default.useEffect(() => {
    if (healthData) {
      _enhancedLogger.enhancedLogger.info('OptimizedPropOllamaContainer', 'healthCheck', 'Health check success', {
        healthData
      });
    }
    if (healthError) {
      _enhancedLogger.enhancedLogger.error('OptimizedPropOllamaContainer', 'healthCheck', 'Health check failed', undefined, healthError);
    }
  }, [healthData, healthError]);

  // Memoized handlers to prevent unnecessary re-renders of child components
  const memoizedHandlers = (0, _react.useMemo)(() => ({
    handleFiltersChange: filters => actions.updateFilters(filters),
    handleSortingChange: sorting => actions.updateSorting(sorting),
    handleGameSelect: game => {
      if (game) actions.setSelectedGame(game);
    },
    handleStatsGameSelect: gameId => {
      const game = state.upcomingGames.find(g => g.game_id === gameId);
      if (game) {
        actions.setSelectedGame({
          game_id: gameId,
          home: game.home,
          away: game.away
        });
      }
    }
  }), [actions, state.upcomingGames]);

  // Memoized connection health data to prevent unnecessary re-renders
  const connectionHealthData = (0, _react.useMemo)(() => ({
    status: state.connectionHealth.isHealthy ? 'healthy' : 'error',
    latency: state.connectionHealth.latency,
    lastCheck: new Date(state.connectionHealth.lastChecked)
  }), [state.connectionHealth.isHealthy, state.connectionHealth.latency, state.connectionHealth.lastChecked]);

  // Memoized performance metrics to prevent unnecessary re-renders
  const performanceMetrics = (0, _react.useMemo)(() => ({}), []);

  // Derive BetSlipItem[] from selectedProps to satisfy BetSlipComponent
  const betSlipItems = _react.default.useMemo(() => {
    try {
      return (state.selectedProps || []).map(sp => ({
        opportunityId: sp.id ?? sp.opportunityId ?? String(sp?.playerId ?? sp?.key ?? ''),
        opportunity: sp,
        stake: typeof sp.stake === 'number' ? sp.stake : state.entryAmount || 0,
        potentialPayout: typeof sp.potentialPayout === 'number' ? sp.potentialPayout : 0,
        addedAt: sp.addedAt ?? Date.now()
      }));
    } catch (e) {
      return [];
    }
  }, [state.selectedProps, state.entryAmount]);

  // Normalize loadingStage to expected union for LoadingOverlay
  const normalizedLoadingStage = _react.default.useMemo(() => {
    const stage = state.loadingStage;
    if (!stage) return 'fetching';
    const s = typeof stage === 'string' ? stage : stage?.stage;
    if (s === 'activating' || s === 'fetching' || s === 'processing') return s;
    // Map other internal stages to 'processing' as a safe default
    return 'processing';
  }, [state.loadingStage]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_EnhancedErrorBoundary.default, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "prop-ollama-container text-white",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(HeaderSection, {
        connectionHealth: connectionHealthData,
        performanceMetrics: performanceMetrics,
        healthLoading: healthLoading
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(ControlPanel, {
        state: state,
        handlers: {
          handleFiltersChange: memoizedHandlers.handleFiltersChange,
          handleSortingChange: memoizedHandlers.handleSortingChange,
          handleStatsGameSelect: memoizedHandlers.handleStatsGameSelect
        }
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(MainContent, {
        state: state
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(BetSlipSection, {
        selectedProps: betSlipItems,
        entryAmount: state.entryAmount,
        onEntryAmountChange: actions.setEntryAmount,
        onRemoveProp: id => actions.removeSelectedProp(id),
        onClearSlip: () => actions.setSelectedProps([]),
        onPlaceBet: async () => {
          _enhancedLogger.enhancedLogger.info('OptimizedPropOllamaContainer', 'onPlaceBet', 'Place bet not implemented in optimized container');
        }
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoadingOverlay.default, {
        isVisible: !!state.isLoading,
        stage: normalizedLoadingStage,
        message: state.loadingMessage,
        progress: state.propLoadingProgress
      })]
    })
  });
});
OptimizedPropOllamaContainer.displayName = 'OptimizedPropOllamaContainer';

// Memoized sub-components to prevent unnecessary re-renders

const HeaderSection = /*#__PURE__*/(0, _react.memo)(({
  connectionHealth,
  performanceMetrics,
  healthLoading
}) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
  className: "header-section",
  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h1", {
    className: "text-3xl font-bold mb-6 text-center text-white",
    children: "AI Sports Analytics & Prop Generation"
  }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformancePanel.PerformancePanel, {
    connectionHealth: connectionHealth,
    performanceMetrics: performanceMetrics
  }), healthLoading && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: "text-center text-cyan-400 text-sm",
    children: "Checking backend health..."
  })]
}));
HeaderSection.displayName = 'HeaderSection';
const ControlPanel = /*#__PURE__*/(0, _react.memo)(({
  state,
  handlers
}) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
  className: "control-panel grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8",
  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: "bg-slate-800/50 p-6 rounded-lg border border-slate-700",
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_PropFilters.PropFilters, {
      filters: state.filters,
      onFiltersChange: handlers.handleFiltersChange,
      sports: ['All', 'NBA', 'NFL', 'NHL', 'MLB'],
      statTypes: ['All', 'Points', 'Rebounds', 'Assists', 'Home Runs', 'RBIs', 'Hits'],
      upcomingGames: state.upcomingGames,
      selectedGame: state.selectedGame,
      onGameSelect: handlers.handleGameSelect
    })
  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: "bg-slate-800/50 p-6 rounded-lg border border-slate-700",
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_PropSorting.PropSorting, {
      sorting: state.sorting,
      onSortingChange: handlers.handleSortingChange
    })
  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: "bg-slate-800/50 p-6 rounded-lg border border-slate-700",
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_GameStatsPanel.GameStatsPanel, {
      games: state.upcomingGames,
      selectedGameId: state.selectedGame?.game_id || null,
      onGameSelect: handlers.handleStatsGameSelect,
      loading: state.isLoading
    })
  })]
}));
ControlPanel.displayName = 'ControlPanel';
const MainContent = /*#__PURE__*/(0, _react.memo)(({
  state,
  handlers
}) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
  className: "main-content",
  children: [state.error && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "bg-red-900/50 border border-red-500 text-red-200 p-4 rounded-lg mb-6",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
      className: "font-semibold mb-2",
      children: "Error"
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
      children: state.error
    })]
  }), state.renderError && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "bg-yellow-900/50 border border-yellow-500 text-yellow-200 p-4 rounded-lg mb-6",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
      className: "font-semibold mb-2",
      children: "Render Error"
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
      children: state.renderError
    })]
  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: "bg-slate-800/30 rounded-lg border border-slate-700",
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_PropList.PropList, {
      props: state.projections || [],
      loading: !!state.isLoading,
      expandedRowKey: state.expandedRowKey ?? null,
      onExpandToggle: _key => {/* noop for now */},
      onAnalysisRequest: async _prop => {
        return Promise.resolve(null);
      },
      enhancedAnalysisCache: state.enhancedAnalysisCache || new Map(),
      loadingAnalysis: state.loadingAnalysis || new Set(),
      sortBy: state.sorting?.sortBy || '',
      searchTerm: state.filters?.searchTerm || '',
      useVirtualization: Array.isArray(state.projections) ? state.projections.length > 100 : false
    })
  })]
}));
MainContent.displayName = 'MainContent';
const BetSlipSection = /*#__PURE__*/(0, _react.memo)(({
  selectedProps,
  entryAmount,
  onEntryAmountChange,
  onRemoveProp,
  onClearSlip,
  onPlaceBet
}) => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
  className: "bet-slip-section mt-8",
  children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_BetSlipComponent.BetSlipComponent, {
    selectedProps: selectedProps,
    entryAmount: entryAmount,
    onEntryAmountChange: onEntryAmountChange,
    onRemoveProp: onRemoveProp ?? (() => {}),
    onClearSlip: onClearSlip ?? (() => {}),
    onPlaceBet: onPlaceBet ? () => {
      void onPlaceBet();
    } : () => {}
  })
}));
BetSlipSection.displayName = 'BetSlipSection';
var _default = exports.default = OptimizedPropOllamaContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZW5oYW5jZWRMb2dnZXIiLCJfSHR0cENsaWVudCIsIl9CZXRTbGlwQ29tcG9uZW50IiwiX0VuaGFuY2VkRXJyb3JCb3VuZGFyeSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfUHJvcEZpbHRlcnMiLCJfdXNlUHJvcE9sbGFtYVN0YXRlIiwiX1Byb3BMaXN0IiwiX0xvYWRpbmdPdmVybGF5IiwiX1BlcmZvcm1hbmNlUGFuZWwiLCJfUHJvcFNvcnRpbmciLCJfR2FtZVN0YXRzUGFuZWwiLCJfdXNlT3B0aW1pemVkRGF0YUZldGNoaW5nIiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJPcHRpbWl6ZWRQcm9wT2xsYW1hQ29udGFpbmVyIiwibWVtbyIsInN0YXRlIiwiYWN0aW9ucyIsInVzZVByb3BPbGxhbWFTdGF0ZSIsImRhdGEiLCJoZWFsdGhEYXRhIiwibG9hZGluZyIsImhlYWx0aExvYWRpbmciLCJlcnJvciIsImhlYWx0aEVycm9yIiwidXNlT3B0aW1pemVkRGF0YUZldGNoaW5nIiwiaHR0cEZldGNoIiwidGhlbiIsInJlcyIsImpzb24iLCJkZWJvdW5jZURlbGF5IiwiY2FjaGVUaW1lIiwiYXV0b1JlZnJlc2giLCJSZWFjdCIsInVzZUVmZmVjdCIsImVuaGFuY2VkTG9nZ2VyIiwiaW5mbyIsInVuZGVmaW5lZCIsIm1lbW9pemVkSGFuZGxlcnMiLCJ1c2VNZW1vIiwiaGFuZGxlRmlsdGVyc0NoYW5nZSIsImZpbHRlcnMiLCJ1cGRhdGVGaWx0ZXJzIiwiaGFuZGxlU29ydGluZ0NoYW5nZSIsInNvcnRpbmciLCJ1cGRhdGVTb3J0aW5nIiwiaGFuZGxlR2FtZVNlbGVjdCIsImdhbWUiLCJzZXRTZWxlY3RlZEdhbWUiLCJoYW5kbGVTdGF0c0dhbWVTZWxlY3QiLCJnYW1lSWQiLCJ1cGNvbWluZ0dhbWVzIiwiZmluZCIsImciLCJnYW1lX2lkIiwiaG9tZSIsImF3YXkiLCJjb25uZWN0aW9uSGVhbHRoRGF0YSIsInN0YXR1cyIsImNvbm5lY3Rpb25IZWFsdGgiLCJpc0hlYWx0aHkiLCJsYXRlbmN5IiwibGFzdENoZWNrIiwiRGF0ZSIsImxhc3RDaGVja2VkIiwicGVyZm9ybWFuY2VNZXRyaWNzIiwiYmV0U2xpcEl0ZW1zIiwic2VsZWN0ZWRQcm9wcyIsIm1hcCIsInNwIiwib3Bwb3J0dW5pdHlJZCIsImlkIiwiU3RyaW5nIiwicGxheWVySWQiLCJrZXkiLCJvcHBvcnR1bml0eSIsInN0YWtlIiwiZW50cnlBbW91bnQiLCJwb3RlbnRpYWxQYXlvdXQiLCJhZGRlZEF0Iiwibm93Iiwibm9ybWFsaXplZExvYWRpbmdTdGFnZSIsInN0YWdlIiwibG9hZGluZ1N0YWdlIiwicyIsImpzeCIsImNoaWxkcmVuIiwianN4cyIsImNsYXNzTmFtZSIsIkhlYWRlclNlY3Rpb24iLCJDb250cm9sUGFuZWwiLCJoYW5kbGVycyIsIk1haW5Db250ZW50IiwiQmV0U2xpcFNlY3Rpb24iLCJvbkVudHJ5QW1vdW50Q2hhbmdlIiwic2V0RW50cnlBbW91bnQiLCJvblJlbW92ZVByb3AiLCJyZW1vdmVTZWxlY3RlZFByb3AiLCJvbkNsZWFyU2xpcCIsInNldFNlbGVjdGVkUHJvcHMiLCJvblBsYWNlQmV0IiwiaXNWaXNpYmxlIiwiaXNMb2FkaW5nIiwibWVzc2FnZSIsImxvYWRpbmdNZXNzYWdlIiwicHJvZ3Jlc3MiLCJwcm9wTG9hZGluZ1Byb2dyZXNzIiwiZGlzcGxheU5hbWUiLCJQZXJmb3JtYW5jZVBhbmVsIiwiUHJvcEZpbHRlcnMiLCJvbkZpbHRlcnNDaGFuZ2UiLCJzcG9ydHMiLCJzdGF0VHlwZXMiLCJzZWxlY3RlZEdhbWUiLCJvbkdhbWVTZWxlY3QiLCJQcm9wU29ydGluZyIsIm9uU29ydGluZ0NoYW5nZSIsIkdhbWVTdGF0c1BhbmVsIiwiZ2FtZXMiLCJzZWxlY3RlZEdhbWVJZCIsInJlbmRlckVycm9yIiwiUHJvcExpc3QiLCJwcm9wcyIsInByb2plY3Rpb25zIiwiZXhwYW5kZWRSb3dLZXkiLCJvbkV4cGFuZFRvZ2dsZSIsIl9rZXkiLCJvbkFuYWx5c2lzUmVxdWVzdCIsIl9wcm9wIiwiUHJvbWlzZSIsInJlc29sdmUiLCJlbmhhbmNlZEFuYWx5c2lzQ2FjaGUiLCJNYXAiLCJsb2FkaW5nQW5hbHlzaXMiLCJTZXQiLCJzb3J0QnkiLCJzZWFyY2hUZXJtIiwidXNlVmlydHVhbGl6YXRpb24iLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJCZXRTbGlwQ29tcG9uZW50IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiT3B0aW1pemVkUHJvcE9sbGFtYUNvbnRhaW5lci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IG1lbW8sIHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBlbmhhbmNlZExvZ2dlciB9IGZyb20gJy4uLy4uL3V0aWxzL2VuaGFuY2VkTG9nZ2VyJztcclxuaW1wb3J0IHsgaHR0cEZldGNoIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvSHR0cENsaWVudCc7XHJcbmltcG9ydCB7IEJldFNsaXBDb21wb25lbnQgfSBmcm9tICcuLi9iZXR0aW5nL0JldFNsaXBDb21wb25lbnQnO1xyXG5pbXBvcnQgRW5oYW5jZWRFcnJvckJvdW5kYXJ5IGZyb20gJy4uL0VuaGFuY2VkRXJyb3JCb3VuZGFyeSc7XHJcbmltcG9ydCB7IFByb3BGaWx0ZXJzIH0gZnJvbSAnLi4vZmlsdGVycy9Qcm9wRmlsdGVycyc7XHJcbmltcG9ydCB7IHVzZVByb3BPbGxhbWFTdGF0ZSB9IGZyb20gJy4uL2hvb2tzL3VzZVByb3BPbGxhbWFTdGF0ZSc7XHJcbmltcG9ydCB7IFByb3BMaXN0IH0gZnJvbSAnLi4vbGlzdHMvUHJvcExpc3QnO1xyXG5pbXBvcnQgTG9hZGluZ092ZXJsYXkgZnJvbSAnLi4vTG9hZGluZ092ZXJsYXknO1xyXG5pbXBvcnQgeyBQZXJmb3JtYW5jZVBhbmVsIH0gZnJvbSAnLi4vcGVyZm9ybWFuY2UvUGVyZm9ybWFuY2VQYW5lbCc7XHJcbmltcG9ydCB7IFByb3BTb3J0aW5nIH0gZnJvbSAnLi4vc29ydGluZy9Qcm9wU29ydGluZyc7XHJcbmltcG9ydCB7IEdhbWVTdGF0c1BhbmVsIH0gZnJvbSAnLi4vc3RhdHMvR2FtZVN0YXRzUGFuZWwnO1xyXG5pbXBvcnQgeyB1c2VPcHRpbWl6ZWREYXRhRmV0Y2hpbmcgfSBmcm9tICcuLi8uLi9ob29rcy91c2VPcHRpbWl6ZWREYXRhRmV0Y2hpbmcnO1xyXG5cclxuLyoqXHJcbiAqIE9wdGltaXplZCBQcm9wT2xsYW1hIENvbnRhaW5lciB3aXRoIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50czpcclxuICogLSBNZW1vaXplZCBjb21wb25lbnRzIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgcmUtcmVuZGVyc1xyXG4gKiAtIERlYm91bmNlZCBkYXRhIGZldGNoaW5nIHRvIHJlZHVjZSBBUEkgY2FsbHNcclxuICogLSBPcHRpbWl6ZWQgc3RhdGUgbWFuYWdlbWVudFxyXG4gKiAtIFByb3BlciBSZWFjdC5tZW1vIHVzYWdlIGZvciBjaGlsZCBjb21wb25lbnRzXHJcbiAqL1xyXG5jb25zdCBPcHRpbWl6ZWRQcm9wT2xsYW1hQ29udGFpbmVyOiBSZWFjdC5GQyA9IG1lbW8oKCkgPT4ge1xyXG4gIC8vIFN0YXRlIGFuZCBhY3Rpb25zIGhvb2tzXHJcbiAgY29uc3QgW3N0YXRlLCBhY3Rpb25zXSA9IHVzZVByb3BPbGxhbWFTdGF0ZSgpO1xyXG5cclxuICAvLyBPcHRpbWl6ZWQgZGF0YSBmZXRjaGluZyB3aXRoIGRlYm91bmNpbmcgYW5kIGNhY2hpbmdcclxuICBjb25zdCB7IGRhdGE6IGhlYWx0aERhdGEsIGxvYWRpbmc6IGhlYWx0aExvYWRpbmcsIGVycm9yOiBoZWFsdGhFcnJvciB9ID0gdXNlT3B0aW1pemVkRGF0YUZldGNoaW5nKFxyXG4gICAgKCkgPT4gaHR0cEZldGNoKCcvYXBpL3YyL2hlYWx0aCcpLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpLFxyXG4gICAgW10sIC8vIE5vIGRlcGVuZGVuY2llcyAtIG9ubHkgZmV0Y2ggb25jZVxyXG4gICAge1xyXG4gICAgICBkZWJvdW5jZURlbGF5OiA1MDAsXHJcbiAgICAgIGNhY2hlVGltZTogNjAwMDAsIC8vIENhY2hlIGZvciAxIG1pbnV0ZVxyXG4gICAgICBhdXRvUmVmcmVzaDogZmFsc2UsIC8vIERpc2FibGUgYXV0by1yZWZyZXNoIGZvciBoZWFsdGggY2hlY2tcclxuICAgIH1cclxuICApO1xyXG5cclxuICAvLyBMb2cgaGVhbHRoIGRhdGEgZm9yIGRlYnVnZ2luZyBidXQgZG9uJ3QgY2F1c2UgcmUtcmVuZGVyc1xyXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoaGVhbHRoRGF0YSkge1xyXG4gICAgICBlbmhhbmNlZExvZ2dlci5pbmZvKCdPcHRpbWl6ZWRQcm9wT2xsYW1hQ29udGFpbmVyJywgJ2hlYWx0aENoZWNrJywgJ0hlYWx0aCBjaGVjayBzdWNjZXNzJywgeyBoZWFsdGhEYXRhIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKGhlYWx0aEVycm9yKSB7XHJcbiAgICAgIGVuaGFuY2VkTG9nZ2VyLmVycm9yKCdPcHRpbWl6ZWRQcm9wT2xsYW1hQ29udGFpbmVyJywgJ2hlYWx0aENoZWNrJywgJ0hlYWx0aCBjaGVjayBmYWlsZWQnLCB1bmRlZmluZWQsIGhlYWx0aEVycm9yIGFzIHVua25vd24gYXMgRXJyb3IpO1xyXG4gICAgfVxyXG4gIH0sIFtoZWFsdGhEYXRhLCBoZWFsdGhFcnJvcl0pO1xyXG5cclxuICAvLyBNZW1vaXplZCBoYW5kbGVycyB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IHJlLXJlbmRlcnMgb2YgY2hpbGQgY29tcG9uZW50c1xyXG4gIGNvbnN0IG1lbW9pemVkSGFuZGxlcnMgPSB1c2VNZW1vKCgpID0+ICh7XHJcbiAgICBoYW5kbGVGaWx0ZXJzQ2hhbmdlOiAoZmlsdGVyczogYW55KSA9PiBhY3Rpb25zLnVwZGF0ZUZpbHRlcnMoZmlsdGVycyksXHJcbiAgICBoYW5kbGVTb3J0aW5nQ2hhbmdlOiAoc29ydGluZzogYW55KSA9PiBhY3Rpb25zLnVwZGF0ZVNvcnRpbmcoc29ydGluZyksXHJcbiAgICBoYW5kbGVHYW1lU2VsZWN0OiAoZ2FtZTogYW55KSA9PiB7XHJcbiAgICAgIGlmIChnYW1lKSBhY3Rpb25zLnNldFNlbGVjdGVkR2FtZShnYW1lKTtcclxuICAgIH0sXHJcbiAgICBoYW5kbGVTdGF0c0dhbWVTZWxlY3Q6IChnYW1lSWQ6IG51bWJlcikgPT4ge1xyXG4gICAgICBjb25zdCBnYW1lID0gc3RhdGUudXBjb21pbmdHYW1lcy5maW5kKChnOiBhbnkpID0+IGcuZ2FtZV9pZCA9PT0gZ2FtZUlkKTtcclxuICAgICAgaWYgKGdhbWUpIHtcclxuICAgICAgICBhY3Rpb25zLnNldFNlbGVjdGVkR2FtZSh7XHJcbiAgICAgICAgICBnYW1lX2lkOiBnYW1lSWQsXHJcbiAgICAgICAgICBob21lOiBnYW1lLmhvbWUsXHJcbiAgICAgICAgICBhd2F5OiBnYW1lLmF3YXksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgfSksIFthY3Rpb25zLCBzdGF0ZS51cGNvbWluZ0dhbWVzXSk7XHJcblxyXG4gIC8vIE1lbW9pemVkIGNvbm5lY3Rpb24gaGVhbHRoIGRhdGEgdG8gcHJldmVudCB1bm5lY2Vzc2FyeSByZS1yZW5kZXJzXHJcbiAgY29uc3QgY29ubmVjdGlvbkhlYWx0aERhdGEgPSB1c2VNZW1vKCgpID0+ICh7XHJcbiAgICBzdGF0dXM6IHN0YXRlLmNvbm5lY3Rpb25IZWFsdGguaXNIZWFsdGh5ID8gJ2hlYWx0aHknIGFzIGNvbnN0IDogJ2Vycm9yJyBhcyBjb25zdCxcclxuICAgIGxhdGVuY3k6IHN0YXRlLmNvbm5lY3Rpb25IZWFsdGgubGF0ZW5jeSxcclxuICAgIGxhc3RDaGVjazogbmV3IERhdGUoc3RhdGUuY29ubmVjdGlvbkhlYWx0aC5sYXN0Q2hlY2tlZCksXHJcbiAgfSksIFtzdGF0ZS5jb25uZWN0aW9uSGVhbHRoLmlzSGVhbHRoeSwgc3RhdGUuY29ubmVjdGlvbkhlYWx0aC5sYXRlbmN5LCBzdGF0ZS5jb25uZWN0aW9uSGVhbHRoLmxhc3RDaGVja2VkXSk7XHJcblxyXG4gIC8vIE1lbW9pemVkIHBlcmZvcm1hbmNlIG1ldHJpY3MgdG8gcHJldmVudCB1bm5lY2Vzc2FyeSByZS1yZW5kZXJzXHJcbiAgY29uc3QgcGVyZm9ybWFuY2VNZXRyaWNzID0gdXNlTWVtbygoKSA9PiAoe30gYXMgdW5rbm93biBhcyBvYmplY3QpLCBbXSk7XHJcblxyXG4gIC8vIERlcml2ZSBCZXRTbGlwSXRlbVtdIGZyb20gc2VsZWN0ZWRQcm9wcyB0byBzYXRpc2Z5IEJldFNsaXBDb21wb25lbnRcclxuICBjb25zdCBiZXRTbGlwSXRlbXMgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHJldHVybiAoc3RhdGUuc2VsZWN0ZWRQcm9wcyB8fCBbXSkubWFwKChzcDogYW55KSA9PiAoe1xyXG4gICAgICAgIG9wcG9ydHVuaXR5SWQ6IHNwLmlkID8/IHNwLm9wcG9ydHVuaXR5SWQgPz8gU3RyaW5nKHNwPy5wbGF5ZXJJZCA/PyBzcD8ua2V5ID8/ICcnKSxcclxuICAgICAgICBvcHBvcnR1bml0eTogc3AgYXMgYW55LFxyXG4gICAgICAgIHN0YWtlOiB0eXBlb2Ygc3Auc3Rha2UgPT09ICdudW1iZXInID8gc3Auc3Rha2UgOiBzdGF0ZS5lbnRyeUFtb3VudCB8fCAwLFxyXG4gICAgICAgIHBvdGVudGlhbFBheW91dDogdHlwZW9mIHNwLnBvdGVudGlhbFBheW91dCA9PT0gJ251bWJlcicgPyBzcC5wb3RlbnRpYWxQYXlvdXQgOiAwLFxyXG4gICAgICAgIGFkZGVkQXQ6IHNwLmFkZGVkQXQgPz8gRGF0ZS5ub3coKSxcclxuICAgICAgfSkpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICByZXR1cm4gW10gYXMgYW55W107XHJcbiAgICB9XHJcbiAgfSwgW3N0YXRlLnNlbGVjdGVkUHJvcHMsIHN0YXRlLmVudHJ5QW1vdW50XSk7XHJcblxyXG4gIC8vIE5vcm1hbGl6ZSBsb2FkaW5nU3RhZ2UgdG8gZXhwZWN0ZWQgdW5pb24gZm9yIExvYWRpbmdPdmVybGF5XHJcbiAgY29uc3Qgbm9ybWFsaXplZExvYWRpbmdTdGFnZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xyXG4gICAgY29uc3Qgc3RhZ2UgPSBzdGF0ZS5sb2FkaW5nU3RhZ2U7XHJcbiAgICBpZiAoIXN0YWdlKSByZXR1cm4gJ2ZldGNoaW5nJyBhcyBjb25zdDtcclxuICAgIGNvbnN0IHMgPSB0eXBlb2Ygc3RhZ2UgPT09ICdzdHJpbmcnID8gc3RhZ2UgOiAoc3RhZ2U/LnN0YWdlIGFzIHN0cmluZyB8IHVuZGVmaW5lZCk7XHJcbiAgICBpZiAocyA9PT0gJ2FjdGl2YXRpbmcnIHx8IHMgPT09ICdmZXRjaGluZycgfHwgcyA9PT0gJ3Byb2Nlc3NpbmcnKSByZXR1cm4gcyBhcyAnYWN0aXZhdGluZycgfCAnZmV0Y2hpbmcnIHwgJ3Byb2Nlc3NpbmcnO1xyXG4gICAgLy8gTWFwIG90aGVyIGludGVybmFsIHN0YWdlcyB0byAncHJvY2Vzc2luZycgYXMgYSBzYWZlIGRlZmF1bHRcclxuICAgIHJldHVybiAncHJvY2Vzc2luZycgYXMgY29uc3Q7XHJcbiAgfSwgW3N0YXRlLmxvYWRpbmdTdGFnZV0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEVuaGFuY2VkRXJyb3JCb3VuZGFyeT5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9J3Byb3Atb2xsYW1hLWNvbnRhaW5lciB0ZXh0LXdoaXRlJz5cclxuICAgICAgICB7LyogSGVhZGVyIFNlY3Rpb24gKi99XHJcbiAgICAgICAgPEhlYWRlclNlY3Rpb24gXHJcbiAgICAgICAgICBjb25uZWN0aW9uSGVhbHRoPXtjb25uZWN0aW9uSGVhbHRoRGF0YX1cclxuICAgICAgICAgIHBlcmZvcm1hbmNlTWV0cmljcz17cGVyZm9ybWFuY2VNZXRyaWNzfVxyXG4gICAgICAgICAgaGVhbHRoTG9hZGluZz17aGVhbHRoTG9hZGluZ31cclxuICAgICAgICAvPlxyXG5cclxuICAgICAgICB7LyogQ29udHJvbCBQYW5lbCAqL31cclxuICAgICAgICA8Q29udHJvbFBhbmVsXHJcbiAgICAgICAgICBzdGF0ZT17c3RhdGV9XHJcbiAgICAgICAgICBoYW5kbGVycz17e1xyXG4gICAgICAgICAgICBoYW5kbGVGaWx0ZXJzQ2hhbmdlOiBtZW1vaXplZEhhbmRsZXJzLmhhbmRsZUZpbHRlcnNDaGFuZ2UsXHJcbiAgICAgICAgICAgIGhhbmRsZVNvcnRpbmdDaGFuZ2U6IG1lbW9pemVkSGFuZGxlcnMuaGFuZGxlU29ydGluZ0NoYW5nZSxcclxuICAgICAgICAgICAgaGFuZGxlU3RhdHNHYW1lU2VsZWN0OiBtZW1vaXplZEhhbmRsZXJzLmhhbmRsZVN0YXRzR2FtZVNlbGVjdCxcclxuICAgICAgICAgIH19XHJcbiAgICAgICAgLz5cclxuXHJcbiAgICAgICAgey8qIE1haW4gQ29udGVudCAqL31cclxuICAgICAgICA8TWFpbkNvbnRlbnRcclxuICAgICAgICAgIHN0YXRlPXtzdGF0ZX1cclxuICAgICAgICAvPlxyXG5cclxuICAgICAgICB7LyogQmV0IFNsaXAgKi99XHJcbiAgICAgICAgPEJldFNsaXBTZWN0aW9uXHJcbiAgICAgICAgICBzZWxlY3RlZFByb3BzPXtiZXRTbGlwSXRlbXN9XHJcbiAgICAgICAgICBlbnRyeUFtb3VudD17c3RhdGUuZW50cnlBbW91bnR9XHJcbiAgICAgICAgICBvbkVudHJ5QW1vdW50Q2hhbmdlPXthY3Rpb25zLnNldEVudHJ5QW1vdW50fVxyXG4gICAgICAgICAgb25SZW1vdmVQcm9wPXsoaWQ6IHN0cmluZykgPT4gYWN0aW9ucy5yZW1vdmVTZWxlY3RlZFByb3AoaWQpfVxyXG4gICAgICAgICAgb25DbGVhclNsaXA9eygpID0+IGFjdGlvbnMuc2V0U2VsZWN0ZWRQcm9wcyhbXSl9XHJcbiAgICAgICAgICBvblBsYWNlQmV0PXthc3luYyAoKSA9PiB7IGVuaGFuY2VkTG9nZ2VyLmluZm8oJ09wdGltaXplZFByb3BPbGxhbWFDb250YWluZXInLCAnb25QbGFjZUJldCcsICdQbGFjZSBiZXQgbm90IGltcGxlbWVudGVkIGluIG9wdGltaXplZCBjb250YWluZXInKTsgfX1cclxuICAgICAgICAvPlxyXG5cclxuICAgICAgICB7LyogTG9hZGluZyBPdmVybGF5ICovfVxyXG4gICAgICAgIDxMb2FkaW5nT3ZlcmxheVxyXG4gICAgICAgICAgaXNWaXNpYmxlPXshIXN0YXRlLmlzTG9hZGluZ31cclxuICAgICAgICAgIHN0YWdlPXtub3JtYWxpemVkTG9hZGluZ1N0YWdlfVxyXG4gICAgICAgICAgbWVzc2FnZT17c3RhdGUubG9hZGluZ01lc3NhZ2V9XHJcbiAgICAgICAgICBwcm9ncmVzcz17c3RhdGUucHJvcExvYWRpbmdQcm9ncmVzc31cclxuICAgICAgICAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvRW5oYW5jZWRFcnJvckJvdW5kYXJ5PlxyXG4gICk7XHJcbn0pO1xyXG5cclxuT3B0aW1pemVkUHJvcE9sbGFtYUNvbnRhaW5lci5kaXNwbGF5TmFtZSA9ICdPcHRpbWl6ZWRQcm9wT2xsYW1hQ29udGFpbmVyJztcclxuXHJcbi8vIE1lbW9pemVkIHN1Yi1jb21wb25lbnRzIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgcmUtcmVuZGVyc1xyXG5cclxuY29uc3QgSGVhZGVyU2VjdGlvbiA9IG1lbW88e1xyXG4gIGNvbm5lY3Rpb25IZWFsdGg6IHsgc3RhdHVzOiAnaGVhbHRoeScgfCAnZXJyb3InOyBsYXRlbmN5OiBudW1iZXI7IGxhc3RDaGVjazogRGF0ZSB9O1xyXG4gIHBlcmZvcm1hbmNlTWV0cmljczoge307XHJcbiAgaGVhbHRoTG9hZGluZzogYm9vbGVhbjtcclxufT4oKHsgY29ubmVjdGlvbkhlYWx0aCwgcGVyZm9ybWFuY2VNZXRyaWNzLCBoZWFsdGhMb2FkaW5nIH0pID0+IChcclxuICA8ZGl2IGNsYXNzTmFtZT0naGVhZGVyLXNlY3Rpb24nPlxyXG4gICAgPGgxIGNsYXNzTmFtZT0ndGV4dC0zeGwgZm9udC1ib2xkIG1iLTYgdGV4dC1jZW50ZXIgdGV4dC13aGl0ZSc+XHJcbiAgICAgIEFJIFNwb3J0cyBBbmFseXRpY3MgJiBQcm9wIEdlbmVyYXRpb25cclxuICAgIDwvaDE+XHJcblxyXG4gICAgey8qIFBlcmZvcm1hbmNlIE1vbml0b3IgKi99XHJcbiAgICA8UGVyZm9ybWFuY2VQYW5lbFxyXG4gICAgICBjb25uZWN0aW9uSGVhbHRoPXtjb25uZWN0aW9uSGVhbHRofVxyXG4gICAgICBwZXJmb3JtYW5jZU1ldHJpY3M9e3BlcmZvcm1hbmNlTWV0cmljc31cclxuICAgIC8+XHJcbiAgICBcclxuICAgIHtoZWFsdGhMb2FkaW5nICYmIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9J3RleHQtY2VudGVyIHRleHQtY3lhbi00MDAgdGV4dC1zbSc+XHJcbiAgICAgICAgQ2hlY2tpbmcgYmFja2VuZCBoZWFsdGguLi5cclxuICAgICAgPC9kaXY+XHJcbiAgICApfVxyXG4gIDwvZGl2PlxyXG4pKTtcclxuXHJcbkhlYWRlclNlY3Rpb24uZGlzcGxheU5hbWUgPSAnSGVhZGVyU2VjdGlvbic7XHJcblxyXG5jb25zdCBDb250cm9sUGFuZWwgPSBtZW1vPHtcclxuICBzdGF0ZTogYW55O1xyXG4gIGhhbmRsZXJzOiBhbnk7XHJcbn0+KCh7IHN0YXRlLCBoYW5kbGVycyB9KSA9PiAoXHJcbiAgPGRpdiBjbGFzc05hbWU9J2NvbnRyb2wtcGFuZWwgZ3JpZCBncmlkLWNvbHMtMSBsZzpncmlkLWNvbHMtMyBnYXAtNiBtYi04Jz5cclxuICAgIHsvKiBGaWx0ZXJzICovfVxyXG4gICAgPGRpdiBjbGFzc05hbWU9J2JnLXNsYXRlLTgwMC81MCBwLTYgcm91bmRlZC1sZyBib3JkZXIgYm9yZGVyLXNsYXRlLTcwMCc+XHJcbiAgICAgIDxQcm9wRmlsdGVyc1xyXG4gICAgICAgIGZpbHRlcnM9e3N0YXRlLmZpbHRlcnN9XHJcbiAgICAgICAgb25GaWx0ZXJzQ2hhbmdlPXtoYW5kbGVycy5oYW5kbGVGaWx0ZXJzQ2hhbmdlfVxyXG4gICAgICAgIHNwb3J0cz17WydBbGwnLCAnTkJBJywgJ05GTCcsICdOSEwnLCAnTUxCJ119XHJcbiAgICAgICAgc3RhdFR5cGVzPXtbJ0FsbCcsICdQb2ludHMnLCAnUmVib3VuZHMnLCAnQXNzaXN0cycsICdIb21lIFJ1bnMnLCAnUkJJcycsICdIaXRzJ119XHJcbiAgICAgICAgdXBjb21pbmdHYW1lcz17c3RhdGUudXBjb21pbmdHYW1lc31cclxuICAgICAgICBzZWxlY3RlZEdhbWU9e3N0YXRlLnNlbGVjdGVkR2FtZX1cclxuICAgICAgICBvbkdhbWVTZWxlY3Q9e2hhbmRsZXJzLmhhbmRsZUdhbWVTZWxlY3R9XHJcbiAgICAgIC8+XHJcbiAgICA8L2Rpdj5cclxuXHJcbiAgICB7LyogU29ydGluZyAqL31cclxuICAgIDxkaXYgY2xhc3NOYW1lPSdiZy1zbGF0ZS04MDAvNTAgcC02IHJvdW5kZWQtbGcgYm9yZGVyIGJvcmRlci1zbGF0ZS03MDAnPlxyXG4gICAgICA8UHJvcFNvcnRpbmdcclxuICAgICAgICBzb3J0aW5nPXtzdGF0ZS5zb3J0aW5nfVxyXG4gICAgICAgIG9uU29ydGluZ0NoYW5nZT17aGFuZGxlcnMuaGFuZGxlU29ydGluZ0NoYW5nZX1cclxuICAgICAgLz5cclxuICAgIDwvZGl2PlxyXG5cclxuICAgIHsvKiBHYW1lIFN0YXRzICovfVxyXG4gICAgPGRpdiBjbGFzc05hbWU9J2JnLXNsYXRlLTgwMC81MCBwLTYgcm91bmRlZC1sZyBib3JkZXIgYm9yZGVyLXNsYXRlLTcwMCc+XHJcbiAgICAgIDxHYW1lU3RhdHNQYW5lbFxyXG4gICAgICAgIGdhbWVzPXtzdGF0ZS51cGNvbWluZ0dhbWVzfVxyXG4gICAgICAgIHNlbGVjdGVkR2FtZUlkPXtzdGF0ZS5zZWxlY3RlZEdhbWU/LmdhbWVfaWQgfHwgbnVsbH1cclxuICAgICAgICBvbkdhbWVTZWxlY3Q9e2hhbmRsZXJzLmhhbmRsZVN0YXRzR2FtZVNlbGVjdH1cclxuICAgICAgICBsb2FkaW5nPXtzdGF0ZS5pc0xvYWRpbmd9XHJcbiAgICAgIC8+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuKSk7XHJcblxyXG5Db250cm9sUGFuZWwuZGlzcGxheU5hbWUgPSAnQ29udHJvbFBhbmVsJztcclxuXHJcbmNvbnN0IE1haW5Db250ZW50ID0gbWVtbzx7XHJcbiAgc3RhdGU6IGFueTtcclxuICBoYW5kbGVycz86IGFueTtcclxufT4oKHsgc3RhdGUsIGhhbmRsZXJzIH0pID0+IChcclxuICA8ZGl2IGNsYXNzTmFtZT0nbWFpbi1jb250ZW50Jz5cclxuICAgIHsvKiBFcnJvciBEaXNwbGF5ICovfVxyXG4gICAge3N0YXRlLmVycm9yICYmIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9J2JnLXJlZC05MDAvNTAgYm9yZGVyIGJvcmRlci1yZWQtNTAwIHRleHQtcmVkLTIwMCBwLTQgcm91bmRlZC1sZyBtYi02Jz5cclxuICAgICAgICA8aDMgY2xhc3NOYW1lPSdmb250LXNlbWlib2xkIG1iLTInPkVycm9yPC9oMz5cclxuICAgICAgICA8cD57c3RhdGUuZXJyb3J9PC9wPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICl9XHJcblxyXG4gICAgey8qIFJlbmRlciBFcnJvciBEaXNwbGF5ICovfVxyXG4gICAge3N0YXRlLnJlbmRlckVycm9yICYmIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9J2JnLXllbGxvdy05MDAvNTAgYm9yZGVyIGJvcmRlci15ZWxsb3ctNTAwIHRleHQteWVsbG93LTIwMCBwLTQgcm91bmRlZC1sZyBtYi02Jz5cclxuICAgICAgICA8aDMgY2xhc3NOYW1lPSdmb250LXNlbWlib2xkIG1iLTInPlJlbmRlciBFcnJvcjwvaDM+XHJcbiAgICAgICAgPHA+e3N0YXRlLnJlbmRlckVycm9yfTwvcD5cclxuICAgICAgPC9kaXY+XHJcbiAgICApfVxyXG5cclxuICAgIHsvKiBQcm9wcyBMaXN0ICovfVxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nYmctc2xhdGUtODAwLzMwIHJvdW5kZWQtbGcgYm9yZGVyIGJvcmRlci1zbGF0ZS03MDAnPlxyXG4gICAgICA8UHJvcExpc3RcclxuICAgICAgICBwcm9wcz17c3RhdGUucHJvamVjdGlvbnMgfHwgW119XHJcbiAgICAgICAgbG9hZGluZz17ISFzdGF0ZS5pc0xvYWRpbmd9XHJcbiAgICAgICAgZXhwYW5kZWRSb3dLZXk9e3N0YXRlLmV4cGFuZGVkUm93S2V5ID8/IG51bGx9XHJcbiAgb25FeHBhbmRUb2dnbGU9eyhfa2V5OiBzdHJpbmcpID0+IHsgLyogbm9vcCBmb3Igbm93ICovIH19XHJcbiAgb25BbmFseXNpc1JlcXVlc3Q9e2FzeW5jIChfcHJvcDogYW55KSA9PiB7IHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7IH19XHJcbiAgICAgICAgZW5oYW5jZWRBbmFseXNpc0NhY2hlPXtzdGF0ZS5lbmhhbmNlZEFuYWx5c2lzQ2FjaGUgfHwgbmV3IE1hcCgpfVxyXG4gICAgICAgIGxvYWRpbmdBbmFseXNpcz17c3RhdGUubG9hZGluZ0FuYWx5c2lzIHx8IG5ldyBTZXQoKX1cclxuICAgICAgICBzb3J0Qnk9e3N0YXRlLnNvcnRpbmc/LnNvcnRCeSB8fCAnJ31cclxuICAgICAgICBzZWFyY2hUZXJtPXtzdGF0ZS5maWx0ZXJzPy5zZWFyY2hUZXJtIHx8ICcnfVxyXG4gICAgICAgIHVzZVZpcnR1YWxpemF0aW9uPXtBcnJheS5pc0FycmF5KHN0YXRlLnByb2plY3Rpb25zKSA/IHN0YXRlLnByb2plY3Rpb25zLmxlbmd0aCA+IDEwMCA6IGZhbHNlfVxyXG4gICAgICAvPlxyXG4gICAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuKSk7XHJcblxyXG5NYWluQ29udGVudC5kaXNwbGF5TmFtZSA9ICdNYWluQ29udGVudCc7XHJcblxyXG5jb25zdCBCZXRTbGlwU2VjdGlvbiA9IG1lbW88e1xyXG4gIHNlbGVjdGVkUHJvcHM6IGFueVtdO1xyXG4gIGVudHJ5QW1vdW50OiBudW1iZXI7XHJcbiAgb25FbnRyeUFtb3VudENoYW5nZTogKGFtb3VudDogbnVtYmVyKSA9PiB2b2lkO1xyXG4gIG9uUmVtb3ZlUHJvcD86IChvcHBvcnR1bml0eUlkOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgb25DbGVhclNsaXA/OiAoKSA9PiB2b2lkO1xyXG4gIG9uUGxhY2VCZXQ/OiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xyXG59PigoeyBzZWxlY3RlZFByb3BzLCBlbnRyeUFtb3VudCwgb25FbnRyeUFtb3VudENoYW5nZSwgb25SZW1vdmVQcm9wLCBvbkNsZWFyU2xpcCwgb25QbGFjZUJldCB9KSA9PiAoXHJcbiAgPGRpdiBjbGFzc05hbWU9J2JldC1zbGlwLXNlY3Rpb24gbXQtOCc+XHJcbiAgICA8QmV0U2xpcENvbXBvbmVudFxyXG4gICAgICBzZWxlY3RlZFByb3BzPXtzZWxlY3RlZFByb3BzfVxyXG4gICAgICBlbnRyeUFtb3VudD17ZW50cnlBbW91bnR9XHJcbiAgICAgIG9uRW50cnlBbW91bnRDaGFuZ2U9e29uRW50cnlBbW91bnRDaGFuZ2V9XHJcbiAgICAgIG9uUmVtb3ZlUHJvcD17b25SZW1vdmVQcm9wID8/ICgoKSA9PiB7fSl9XHJcbiAgICAgIG9uQ2xlYXJTbGlwPXtvbkNsZWFyU2xpcCA/PyAoKCkgPT4ge30pfVxyXG4gICAgICBvblBsYWNlQmV0PXtvblBsYWNlQmV0ID8gKCgpID0+IHsgdm9pZCBvblBsYWNlQmV0KCk7IH0pIDogKCgpID0+IHt9KX1cclxuICAgIC8+XHJcbiAgPC9kaXY+XHJcbikpO1xyXG5cclxuQmV0U2xpcFNlY3Rpb24uZGlzcGxheU5hbWUgPSAnQmV0U2xpcFNlY3Rpb24nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgT3B0aW1pemVkUHJvcE9sbGFtYUNvbnRhaW5lcjtcclxuIl0sIm1hcHBpbmdz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T0FBT0MsT0FBTyxDQUFDQyxPQUFPLENBQUMsSUFBSSxDQUFDO01BQUUsQ0FBRTtNQUNyRUMscUJBQXFCLEVBQUVuSCxLQUFLLENBQUNtSCxxQkFBcUIsSUFBSSxJQUFJQyxHQUFHLENBQUMsQ0FBRTtNQUNoRUMsZUFBZSxFQUFFckgsS0FBSyxDQUFDcUgsZUFBZSxJQUFJLElBQUlDLEdBQUcsQ0FBQyxDQUFFO01BQ3BEQyxNQUFNLEVBQUV2SCxLQUFLLENBQUM0QixPQUFPLEVBQUUyRixNQUFNLElBQUksRUFBRztNQUNwQ0MsVUFBVSxFQUFFeEgsS0FBSyxDQUFDeUIsT0FBTyxFQUFFK0YsVUFBVSxJQUFJLEVBQUc7TUFDNUNDLGlCQUFpQixFQUFFQyxLQUFLLENBQUNDLE9BQU8sQ0FBQzNILEtBQUssQ0FBQzJHLFdBQVcsQ0FBQyxHQUFHM0csS0FBSyxDQUFDMkcsV0FBVyxDQUFDaUIsTUFBTSxHQUFHLEdBQUcsR0FBRztJQUFNLENBQzlGO0VBQUMsQ0FDRyxDQUFDO0FBQUEsQ0FDTCxDQUNOLENBQUM7QUFFRmhELFdBQVcsQ0FBQ2UsV0FBVyxHQUFHLGFBQWE7QUFFdkMsTUFBTWQsY0FBYyxnQkFBRyxJQUFBOUUsV0FBSSxFQU94QixDQUFDO0VBQUVvRCxhQUFhO0VBQUVVLFdBQVc7RUFBRWlCLG1CQUFtQjtFQUFFRSxZQUFZO0VBQUVFLFdBQVc7RUFBRUU7QUFBVyxDQUFDLGtCQUM1RixJQUFBMUcsV0FBQSxDQUFBMkYsR0FBQTtFQUFLRyxTQUFTLEVBQUMsdUJBQXVCO0VBQUFGLFFBQUEsZUFDcEMsSUFBQTVGLFdBQUEsQ0FBQTJGLEdBQUEsRUFBQ3RHLGlCQUFBLENBQUE4SixnQkFBZ0I7SUFDZjFFLGFBQWEsRUFBRUEsYUFBYztJQUM3QlUsV0FBVyxFQUFFQSxXQUFZO0lBQ3pCaUIsbUJBQW1CLEVBQUVBLG1CQUFvQjtJQUN6Q0UsWUFBWSxFQUFFQSxZQUFZLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBRTtJQUN6Q0UsV0FBVyxFQUFFQSxXQUFXLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBRTtJQUN2Q0UsVUFBVSxFQUFFQSxVQUFVLEdBQUksTUFBTTtNQUFFLEtBQUtBLFVBQVUsQ0FBQyxDQUFDO0lBQUUsQ0FBQyxHQUFLLE1BQU0sQ0FBQztFQUFHLENBQ3RFO0FBQUMsQ0FDQyxDQUNOLENBQUM7QUFFRlAsY0FBYyxDQUFDYyxXQUFXLEdBQUcsZ0JBQWdCO0FBQUMsSUFBQW1DLFFBQUEsR0FBQUMsT0FBQSxDQUFBMUksT0FBQSxHQUUvQlMsNEJBQTRCIiwiaWdub3JlTGlzdCI6W119