da3d8592301b92f9b11609357c501bd2
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * Filters Component Tests - Phase 4.2 Frontend Tests
 * Test suite for filtering functionality components
 */

// Mock components and props
const mockProps = [{
  id: 'prop-1',
  sport: 'MLB',
  player_name: 'Mike Trout',
  prop_type: 'runs_scored',
  line: 1.5,
  over_odds: 1.85,
  under_odds: 1.95,
  confidence_score: 0.75,
  recommendation: 'over',
  team: 'LAA'
}, {
  id: 'prop-2',
  sport: 'MLB',
  player_name: 'Aaron Judge',
  prop_type: 'hits',
  line: 1.5,
  over_odds: 2.10,
  under_odds: 1.75,
  confidence_score: 0.68,
  recommendation: 'under',
  team: 'NYY'
}, {
  id: 'prop-3',
  sport: 'NFL',
  player_name: 'Josh Allen',
  prop_type: 'passing_yards',
  line: 265.5,
  over_odds: 1.90,
  under_odds: 1.90,
  confidence_score: 0.82,
  recommendation: 'over',
  team: 'BUF'
}];

// Mock Filter Component (create a simple version for testing)

const MockPropFilters = ({
  props,
  onFiltersChange,
  initialFilters = {}
}) => {
  const [filters, setFilters] = _react.default.useState(initialFilters);
  _react.default.useEffect(() => {
    // Apply filters
    const filtered = props.filter(prop => {
      if (filters.sport && prop.sport !== filters.sport) return false;
      if (filters.propType && prop.prop_type !== filters.propType) return false;
      if (filters.team && prop.team !== filters.team) return false;
      if (filters.confidenceMin && prop.confidence_score < filters.confidenceMin) return false;
      if (filters.recommendation && prop.recommendation !== filters.recommendation) return false;
      return true;
    });
    onFiltersChange(filtered);
  }, [filters, props, onFiltersChange]);
  const handleFilterChange = (key, value) => {
    setFilters(prev => ({
      ...prev,
      [key]: value
    }));
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    "data-testid": "prop-filters",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("select", {
      "data-testid": "sport-filter",
      value: filters.sport || '',
      onChange: e => handleFilterChange('sport', e.target.value || undefined),
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
        value: "",
        children: "All Sports"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
        value: "MLB",
        children: "MLB"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
        value: "NFL",
        children: "NFL"
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("select", {
      "data-testid": "prop-type-filter",
      value: filters.propType || '',
      onChange: e => handleFilterChange('propType', e.target.value || undefined),
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
        value: "",
        children: "All Prop Types"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
        value: "runs_scored",
        children: "Runs Scored"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
        value: "hits",
        children: "Hits"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
        value: "passing_yards",
        children: "Passing Yards"
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("select", {
      "data-testid": "team-filter",
      value: filters.team || '',
      onChange: e => handleFilterChange('team', e.target.value || undefined),
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
        value: "",
        children: "All Teams"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
        value: "LAA",
        children: "LAA"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
        value: "NYY",
        children: "NYY"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
        value: "BUF",
        children: "BUF"
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
      type: "range",
      "data-testid": "confidence-filter",
      min: "0",
      max: "1",
      step: "0.01",
      value: filters.confidenceMin || 0,
      onChange: e => handleFilterChange('confidenceMin', parseFloat(e.target.value))
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
      "data-testid": "confidence-display",
      children: ["Min Confidence: ", ((filters.confidenceMin || 0) * 100).toFixed(0), "%"]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("select", {
      "data-testid": "recommendation-filter",
      value: filters.recommendation || '',
      onChange: e => handleFilterChange('recommendation', e.target.value || undefined),
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
        value: "",
        children: "All Recommendations"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
        value: "over",
        children: "Over"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
        value: "under",
        children: "Under"
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
      "data-testid": "clear-filters",
      onClick: () => setFilters({}),
      children: "Clear Filters"
    })]
  });
};
describe('PropFilters Component', () => {
  let user;
  const mockOnFiltersChange = jest.fn();
  beforeEach(() => {
    user = _userEvent.default.setup();
    mockOnFiltersChange.mockClear();
  });
  it('renders all filter controls', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPropFilters, {
      props: mockProps,
      onFiltersChange: mockOnFiltersChange
    }));
    expect(_react2.screen.getByTestId('sport-filter')).toBeInTheDocument();
    expect(_react2.screen.getByTestId('prop-type-filter')).toBeInTheDocument();
    expect(_react2.screen.getByTestId('team-filter')).toBeInTheDocument();
    expect(_react2.screen.getByTestId('confidence-filter')).toBeInTheDocument();
    expect(_react2.screen.getByTestId('recommendation-filter')).toBeInTheDocument();
    expect(_react2.screen.getByTestId('clear-filters')).toBeInTheDocument();
  });
  it('filters props by sport correctly', async () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPropFilters, {
      props: mockProps,
      onFiltersChange: mockOnFiltersChange
    }));
    const sportFilter = _react2.screen.getByTestId('sport-filter');
    await user.selectOptions(sportFilter, 'MLB');
    await (0, _react2.waitFor)(() => {
      expect(mockOnFiltersChange).toHaveBeenCalledWith(mockProps.filter(prop => prop.sport === 'MLB'));
    });
  });
  it('filters props by prop type correctly', async () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPropFilters, {
      props: mockProps,
      onFiltersChange: mockOnFiltersChange
    }));
    const propTypeFilter = _react2.screen.getByTestId('prop-type-filter');
    await user.selectOptions(propTypeFilter, 'hits');
    await (0, _react2.waitFor)(() => {
      expect(mockOnFiltersChange).toHaveBeenCalledWith(mockProps.filter(prop => prop.prop_type === 'hits'));
    });
  });
  it('filters props by team correctly', async () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPropFilters, {
      props: mockProps,
      onFiltersChange: mockOnFiltersChange
    }));
    const teamFilter = _react2.screen.getByTestId('team-filter');
    await user.selectOptions(teamFilter, 'NYY');
    await (0, _react2.waitFor)(() => {
      expect(mockOnFiltersChange).toHaveBeenCalledWith(mockProps.filter(prop => prop.team === 'NYY'));
    });
  });
  it('filters props by confidence score correctly', async () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPropFilters, {
      props: mockProps,
      onFiltersChange: mockOnFiltersChange
    }));
    const confidenceFilter = _react2.screen.getByTestId('confidence-filter');
    _react2.fireEvent.change(confidenceFilter, {
      target: {
        value: '0.7'
      }
    });
    await (0, _react2.waitFor)(() => {
      expect(mockOnFiltersChange).toHaveBeenCalledWith(mockProps.filter(prop => prop.confidence_score >= 0.7));
    });

    // Check display updates
    expect(_react2.screen.getByTestId('confidence-display')).toHaveTextContent('Min Confidence: 70%');
  });
  it('filters props by recommendation correctly', async () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPropFilters, {
      props: mockProps,
      onFiltersChange: mockOnFiltersChange
    }));
    const recommendationFilter = _react2.screen.getByTestId('recommendation-filter');
    await user.selectOptions(recommendationFilter, 'over');
    await (0, _react2.waitFor)(() => {
      expect(mockOnFiltersChange).toHaveBeenCalledWith(mockProps.filter(prop => prop.recommendation === 'over'));
    });
  });
  it('applies multiple filters correctly', async () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPropFilters, {
      props: mockProps,
      onFiltersChange: mockOnFiltersChange
    }));

    // Apply sport filter
    const sportFilter = _react2.screen.getByTestId('sport-filter');
    await user.selectOptions(sportFilter, 'MLB');

    // Apply recommendation filter
    const recommendationFilter = _react2.screen.getByTestId('recommendation-filter');
    await user.selectOptions(recommendationFilter, 'over');
    await (0, _react2.waitFor)(() => {
      const expectedFiltered = mockProps.filter(prop => prop.sport === 'MLB' && prop.recommendation === 'over');
      expect(mockOnFiltersChange).toHaveBeenCalledWith(expectedFiltered);
    });
  });
  it('clears all filters when clear button is clicked', async () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPropFilters, {
      props: mockProps,
      onFiltersChange: mockOnFiltersChange,
      initialFilters: {
        sport: 'MLB',
        team: 'NYY'
      }
    }));
    const clearButton = _react2.screen.getByTestId('clear-filters');
    await user.click(clearButton);
    await (0, _react2.waitFor)(() => {
      expect(mockOnFiltersChange).toHaveBeenCalledWith(mockProps);
    });

    // Check that all filters are reset
    expect(_react2.screen.getByTestId('sport-filter')).toHaveValue('');
    expect(_react2.screen.getByTestId('team-filter')).toHaveValue('');
  });
  it('handles empty props array gracefully', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPropFilters, {
      props: [],
      onFiltersChange: mockOnFiltersChange
    }));
    expect(mockOnFiltersChange).toHaveBeenCalledWith([]);
  });
  it('maintains filter state after prop updates', async () => {
    const {
      rerender
    } = (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPropFilters, {
      props: mockProps,
      onFiltersChange: mockOnFiltersChange
    }));

    // Set a filter
    const sportFilter = _react2.screen.getByTestId('sport-filter');
    await user.selectOptions(sportFilter, 'MLB');

    // Update props
    const newProps = [...mockProps, {
      id: 'prop-4',
      sport: 'MLB',
      player_name: 'Shohei Ohtani',
      prop_type: 'home_runs',
      line: 0.5,
      over_odds: 2.50,
      under_odds: 1.50,
      confidence_score: 0.90,
      recommendation: 'over',
      team: 'LAA'
    }];
    rerender(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPropFilters, {
      props: newProps,
      onFiltersChange: mockOnFiltersChange
    }));

    // Filter should still be applied
    await (0, _react2.waitFor)(() => {
      const expectedFiltered = newProps.filter(prop => prop.sport === 'MLB');
      expect(mockOnFiltersChange).toHaveBeenCalledWith(expectedFiltered);
    });
    expect(_react2.screen.getByTestId('sport-filter')).toHaveValue('MLB');
  });
  it('handles edge cases in confidence filtering', async () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPropFilters, {
      props: mockProps,
      onFiltersChange: mockOnFiltersChange
    }));
    const confidenceFilter = _react2.screen.getByTestId('confidence-filter');

    // Test minimum value (0)
    _react2.fireEvent.change(confidenceFilter, {
      target: {
        value: '0'
      }
    });
    await (0, _react2.waitFor)(() => {
      expect(mockOnFiltersChange).toHaveBeenCalledWith(mockProps); // All props should pass
    });

    // Test maximum value (1)
    _react2.fireEvent.change(confidenceFilter, {
      target: {
        value: '1'
      }
    });
    await (0, _react2.waitFor)(() => {
      expect(mockOnFiltersChange).toHaveBeenCalledWith([]); // No props have 1.0 confidence
    });
  });
  it('updates filter display correctly', async () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPropFilters, {
      props: mockProps,
      onFiltersChange: mockOnFiltersChange
    }));
    const confidenceFilter = _react2.screen.getByTestId('confidence-filter');
    const confidenceDisplay = _react2.screen.getByTestId('confidence-display');
    _react2.fireEvent.change(confidenceFilter, {
      target: {
        value: '0.85'
      }
    });
    expect(confidenceDisplay).toHaveTextContent('Min Confidence: 85%');
  });
  it('calls onFiltersChange with initial props on mount', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPropFilters, {
      props: mockProps,
      onFiltersChange: mockOnFiltersChange
    }));
    expect(mockOnFiltersChange).toHaveBeenCalledWith(mockProps);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,