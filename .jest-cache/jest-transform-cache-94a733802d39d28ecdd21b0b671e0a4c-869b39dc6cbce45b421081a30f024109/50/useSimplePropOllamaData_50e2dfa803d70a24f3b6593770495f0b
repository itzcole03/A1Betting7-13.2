99ccf3d7312546b83df984dcc3ee5144
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSimplePropOllamaData = useSimplePropOllamaData;
var _react = require("react");
var _SimplePropsService = require("../../services/SimplePropsService");
/**
 * Simple PropOllama Data Hook
 * Bypasses all complex services and managers for debugging
 */

function useSimplePropOllamaData({
  state,
  actions
}) {
  console.log('[useSimplePropOllamaData] Hook initialized with sport:', state.filters.selectedSport);
  const fetchData = (0, _react.useCallback)(async () => {
    if (state.isLoading) return; // Prevent multiple concurrent requests

    console.log('[useSimplePropOllamaData] Starting data fetch...');
    actions.setIsLoading(true);
    actions.setError(null);
    actions.setLoadingMessage('Fetching props...');
    try {
      const sport = state.filters.selectedSport;

      // Skip fetching for 'All' sport
      if (sport === 'All') {
        actions.setProjections([]);
        return;
      }
      console.log('[useSimplePropOllamaData] Fetching props for sport:', sport);
      const props = await (0, _SimplePropsService.fetchPropsSimple)(sport, 'player', {
        limit: 20,
        // Start with smaller number for testing
        offset: 0
      });
      console.log('[useSimplePropOllamaData] ✅ Fetched props:', props.length);

      // Convert SimpleFeaturedProp to the format expected by the state
      const convertedProps = props.map(prop => ({
        ...prop,
        overOdds: prop.overOdds,
        underOdds: prop.underOdds
      }));
      actions.setProjections(convertedProps);
      actions.setLoadingMessage('Complete!');
    } catch (error) {
      console.error('[useSimplePropOllamaData] ❌ Error:', error);
      actions.setError(error instanceof Error ? error.message : 'Failed to fetch props');
    } finally {
      actions.setIsLoading(false);
      actions.setLoadingMessage('');
    }
  }, [state.filters.selectedSport, state.isLoading, actions]);

  // Effect to trigger data fetching when sport changes
  (0, _react.useEffect)(() => {
    console.log('[useSimplePropOllamaData] Sport changed to:', state.filters.selectedSport);
    fetchData().catch(error => {
      console.error('[useSimplePropOllamaData] useEffect fetchData failed:', error);
    });
  }, [state.filters.selectedSport, fetchData]);
  return {
    fetchData
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX1NpbXBsZVByb3BzU2VydmljZSIsInVzZVNpbXBsZVByb3BPbGxhbWFEYXRhIiwic3RhdGUiLCJhY3Rpb25zIiwiY29uc29sZSIsImxvZyIsImZpbHRlcnMiLCJzZWxlY3RlZFNwb3J0IiwiZmV0Y2hEYXRhIiwidXNlQ2FsbGJhY2siLCJpc0xvYWRpbmciLCJzZXRJc0xvYWRpbmciLCJzZXRFcnJvciIsInNldExvYWRpbmdNZXNzYWdlIiwic3BvcnQiLCJzZXRQcm9qZWN0aW9ucyIsInByb3BzIiwiZmV0Y2hQcm9wc1NpbXBsZSIsImxpbWl0Iiwib2Zmc2V0IiwibGVuZ3RoIiwiY29udmVydGVkUHJvcHMiLCJtYXAiLCJwcm9wIiwib3Zlck9kZHMiLCJ1bmRlck9kZHMiLCJlcnJvciIsIkVycm9yIiwibWVzc2FnZSIsInVzZUVmZmVjdCIsImNhdGNoIl0sInNvdXJjZXMiOlsidXNlU2ltcGxlUHJvcE9sbGFtYURhdGEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFNpbXBsZSBQcm9wT2xsYW1hIERhdGEgSG9va1xyXG4gKiBCeXBhc3NlcyBhbGwgY29tcGxleCBzZXJ2aWNlcyBhbmQgbWFuYWdlcnMgZm9yIGRlYnVnZ2luZ1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGZldGNoUHJvcHNTaW1wbGUgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9TaW1wbGVQcm9wc1NlcnZpY2UnO1xyXG5pbXBvcnQgeyBQcm9wT2xsYW1hQWN0aW9ucywgUHJvcE9sbGFtYVN0YXRlIH0gZnJvbSAnLi91c2VQcm9wT2xsYW1hU3RhdGUnO1xyXG5cclxuaW50ZXJmYWNlIFVzZVNpbXBsZVByb3BPbGxhbWFEYXRhUHJvcHMge1xyXG4gIHN0YXRlOiBQcm9wT2xsYW1hU3RhdGU7XHJcbiAgYWN0aW9uczogUHJvcE9sbGFtYUFjdGlvbnM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VTaW1wbGVQcm9wT2xsYW1hRGF0YSh7IHN0YXRlLCBhY3Rpb25zIH06IFVzZVNpbXBsZVByb3BPbGxhbWFEYXRhUHJvcHMpIHtcclxuICBjb25zb2xlLmxvZyhcclxuICAgICdbdXNlU2ltcGxlUHJvcE9sbGFtYURhdGFdIEhvb2sgaW5pdGlhbGl6ZWQgd2l0aCBzcG9ydDonLFxyXG4gICAgc3RhdGUuZmlsdGVycy5zZWxlY3RlZFNwb3J0XHJcbiAgKTtcclxuXHJcbiAgY29uc3QgZmV0Y2hEYXRhID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgaWYgKHN0YXRlLmlzTG9hZGluZykgcmV0dXJuOyAvLyBQcmV2ZW50IG11bHRpcGxlIGNvbmN1cnJlbnQgcmVxdWVzdHNcclxuXHJcbiAgICBjb25zb2xlLmxvZygnW3VzZVNpbXBsZVByb3BPbGxhbWFEYXRhXSBTdGFydGluZyBkYXRhIGZldGNoLi4uJyk7XHJcbiAgICBhY3Rpb25zLnNldElzTG9hZGluZyh0cnVlKTtcclxuICAgIGFjdGlvbnMuc2V0RXJyb3IobnVsbCk7XHJcbiAgICBhY3Rpb25zLnNldExvYWRpbmdNZXNzYWdlKCdGZXRjaGluZyBwcm9wcy4uLicpO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHNwb3J0ID0gc3RhdGUuZmlsdGVycy5zZWxlY3RlZFNwb3J0O1xyXG5cclxuICAgICAgLy8gU2tpcCBmZXRjaGluZyBmb3IgJ0FsbCcgc3BvcnRcclxuICAgICAgaWYgKHNwb3J0ID09PSAnQWxsJykge1xyXG4gICAgICAgIGFjdGlvbnMuc2V0UHJvamVjdGlvbnMoW10pO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc29sZS5sb2coJ1t1c2VTaW1wbGVQcm9wT2xsYW1hRGF0YV0gRmV0Y2hpbmcgcHJvcHMgZm9yIHNwb3J0OicsIHNwb3J0KTtcclxuXHJcbiAgICAgIGNvbnN0IHByb3BzID0gYXdhaXQgZmV0Y2hQcm9wc1NpbXBsZShzcG9ydCwgJ3BsYXllcicsIHtcclxuICAgICAgICBsaW1pdDogMjAsIC8vIFN0YXJ0IHdpdGggc21hbGxlciBudW1iZXIgZm9yIHRlc3RpbmdcclxuICAgICAgICBvZmZzZXQ6IDAsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgY29uc29sZS5sb2coJ1t1c2VTaW1wbGVQcm9wT2xsYW1hRGF0YV0g4pyFIEZldGNoZWQgcHJvcHM6JywgcHJvcHMubGVuZ3RoKTtcclxuXHJcbiAgICAgIC8vIENvbnZlcnQgU2ltcGxlRmVhdHVyZWRQcm9wIHRvIHRoZSBmb3JtYXQgZXhwZWN0ZWQgYnkgdGhlIHN0YXRlXHJcbiAgICAgIGNvbnN0IGNvbnZlcnRlZFByb3BzID0gcHJvcHMubWFwKHByb3AgPT4gKHtcclxuICAgICAgICAuLi5wcm9wLFxyXG4gICAgICAgIG92ZXJPZGRzOiBwcm9wLm92ZXJPZGRzLFxyXG4gICAgICAgIHVuZGVyT2RkczogcHJvcC51bmRlck9kZHMsXHJcbiAgICAgIH0pKTtcclxuXHJcbiAgICAgIGFjdGlvbnMuc2V0UHJvamVjdGlvbnMoY29udmVydGVkUHJvcHMgYXMgYW55KTtcclxuICAgICAgYWN0aW9ucy5zZXRMb2FkaW5nTWVzc2FnZSgnQ29tcGxldGUhJyk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdbdXNlU2ltcGxlUHJvcE9sbGFtYURhdGFdIOKdjCBFcnJvcjonLCBlcnJvcik7XHJcbiAgICAgIGFjdGlvbnMuc2V0RXJyb3IoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIGZldGNoIHByb3BzJyk7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICBhY3Rpb25zLnNldElzTG9hZGluZyhmYWxzZSk7XHJcbiAgICAgIGFjdGlvbnMuc2V0TG9hZGluZ01lc3NhZ2UoJycpO1xyXG4gICAgfVxyXG4gIH0sIFtzdGF0ZS5maWx0ZXJzLnNlbGVjdGVkU3BvcnQsIHN0YXRlLmlzTG9hZGluZywgYWN0aW9uc10pO1xyXG5cclxuICAvLyBFZmZlY3QgdG8gdHJpZ2dlciBkYXRhIGZldGNoaW5nIHdoZW4gc3BvcnQgY2hhbmdlc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdbdXNlU2ltcGxlUHJvcE9sbGFtYURhdGFdIFNwb3J0IGNoYW5nZWQgdG86Jywgc3RhdGUuZmlsdGVycy5zZWxlY3RlZFNwb3J0KTtcbiAgICBmZXRjaERhdGEoKS5jYXRjaChlcnJvciA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbdXNlU2ltcGxlUHJvcE9sbGFtYURhdGFdIHVzZUVmZmVjdCBmZXRjaERhdGEgZmFpbGVkOicsIGVycm9yKTtcbiAgICB9KTtcbiAgfSwgW3N0YXRlLmZpbHRlcnMuc2VsZWN0ZWRTcG9ydCwgZmV0Y2hEYXRhXSk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBmZXRjaERhdGEsXHJcbiAgfTtcclxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxtQkFBQSxHQUFBRCxPQUFBO0FBTkE7QUFDQTtBQUNBO0FBQ0E7O0FBV08sU0FBU0UsdUJBQXVCQSxDQUFDO0VBQUVDLEtBQUs7RUFBRUM7QUFBc0MsQ0FBQyxFQUFFO0VBQ3hGQyxPQUFPLENBQUNDLEdBQUcsQ0FDVCx3REFBd0QsRUFDeERILEtBQUssQ0FBQ0ksT0FBTyxDQUFDQyxhQUNoQixDQUFDO0VBRUQsTUFBTUMsU0FBUyxHQUFHLElBQUFDLGtCQUFXLEVBQUMsWUFBWTtJQUN4QyxJQUFJUCxLQUFLLENBQUNRLFNBQVMsRUFBRSxPQUFPLENBQUM7O0lBRTdCTixPQUFPLENBQUNDLEdBQUcsQ0FBQyxrREFBa0QsQ0FBQztJQUMvREYsT0FBTyxDQUFDUSxZQUFZLENBQUMsSUFBSSxDQUFDO0lBQzFCUixPQUFPLENBQUNTLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFDdEJULE9BQU8sQ0FBQ1UsaUJBQWlCLENBQUMsbUJBQW1CLENBQUM7SUFFOUMsSUFBSTtNQUNGLE1BQU1DLEtBQUssR0FBR1osS0FBSyxDQUFDSSxPQUFPLENBQUNDLGFBQWE7O01BRXpDO01BQ0EsSUFBSU8sS0FBSyxLQUFLLEtBQUssRUFBRTtRQUNuQlgsT0FBTyxDQUFDWSxjQUFjLENBQUMsRUFBRSxDQUFDO1FBQzFCO01BQ0Y7TUFFQVgsT0FBTyxDQUFDQyxHQUFHLENBQUMscURBQXFELEVBQUVTLEtBQUssQ0FBQztNQUV6RSxNQUFNRSxLQUFLLEdBQUcsTUFBTSxJQUFBQyxvQ0FBZ0IsRUFBQ0gsS0FBSyxFQUFFLFFBQVEsRUFBRTtRQUNwREksS0FBSyxFQUFFLEVBQUU7UUFBRTtRQUNYQyxNQUFNLEVBQUU7TUFDVixDQUFDLENBQUM7TUFFRmYsT0FBTyxDQUFDQyxHQUFHLENBQUMsNENBQTRDLEVBQUVXLEtBQUssQ0FBQ0ksTUFBTSxDQUFDOztNQUV2RTtNQUNBLE1BQU1DLGNBQWMsR0FBR0wsS0FBSyxDQUFDTSxHQUFHLENBQUNDLElBQUksS0FBSztRQUN4QyxHQUFHQSxJQUFJO1FBQ1BDLFFBQVEsRUFBRUQsSUFBSSxDQUFDQyxRQUFRO1FBQ3ZCQyxTQUFTLEVBQUVGLElBQUksQ0FBQ0U7TUFDbEIsQ0FBQyxDQUFDLENBQUM7TUFFSHRCLE9BQU8sQ0FBQ1ksY0FBYyxDQUFDTSxjQUFxQixDQUFDO01BQzdDbEIsT0FBTyxDQUFDVSxpQkFBaUIsQ0FBQyxXQUFXLENBQUM7SUFDeEMsQ0FBQyxDQUFDLE9BQU9hLEtBQUssRUFBRTtNQUNkdEIsT0FBTyxDQUFDc0IsS0FBSyxDQUFDLG9DQUFvQyxFQUFFQSxLQUFLLENBQUM7TUFDMUR2QixPQUFPLENBQUNTLFFBQVEsQ0FBQ2MsS0FBSyxZQUFZQyxLQUFLLEdBQUdELEtBQUssQ0FBQ0UsT0FBTyxHQUFHLHVCQUF1QixDQUFDO0lBQ3BGLENBQUMsU0FBUztNQUNSekIsT0FBTyxDQUFDUSxZQUFZLENBQUMsS0FBSyxDQUFDO01BQzNCUixPQUFPLENBQUNVLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztJQUMvQjtFQUNGLENBQUMsRUFBRSxDQUFDWCxLQUFLLENBQUNJLE9BQU8sQ0FBQ0MsYUFBYSxFQUFFTCxLQUFLLENBQUNRLFNBQVMsRUFBRVAsT0FBTyxDQUFDLENBQUM7O0VBRTNEO0VBQ0EsSUFBQTBCLGdCQUFTLEVBQUMsTUFBTTtJQUNkekIsT0FBTyxDQUFDQyxHQUFHLENBQUMsNkNBQTZDLEVBQUVILEtBQUssQ0FBQ0ksT0FBTyxDQUFDQyxhQUFhLENBQUM7SUFDdkZDLFNBQVMsQ0FBQyxDQUFDLENBQUNzQixLQUFLLENBQUNKLEtBQUssSUFBSTtNQUN6QnRCLE9BQU8sQ0FBQ3NCLEtBQUssQ0FBQyx1REFBdUQsRUFBRUEsS0FBSyxDQUFDO0lBQy9FLENBQUMsQ0FBQztFQUNKLENBQUMsRUFBRSxDQUFDeEIsS0FBSyxDQUFDSSxPQUFPLENBQUNDLGFBQWEsRUFBRUMsU0FBUyxDQUFDLENBQUM7RUFFNUMsT0FBTztJQUNMQTtFQUNGLENBQUM7QUFDSCIsImlnbm9yZUxpc3QiOltdfQ==