{"version":3,"names":["classifyFailure","closeCode","error","message","Error","toLowerCase","toString","includes","exports","getFailureDescription","classification"],"sources":["ConnectionState.ts"],"sourcesContent":["/**\r\n * WebSocket Connection States\r\n * \r\n * Defines the connection state machine and related types for WebSocket management.\r\n */\r\n\r\nexport type WSConnectionPhase =\r\n  | 'idle'           // Not connected, no attempts made\r\n  | 'connecting'     // Initial connection attempt\r\n  | 'open'           // Successfully connected and operational\r\n  | 'degraded'       // Connected but with reduced functionality\r\n  | 'reconnecting'   // Attempting to reconnect after failure\r\n  | 'failed'         // Connection failed, still retrying\r\n  | 'fallback';      // Gave up reconnecting, using local mode\r\n\r\nexport type WSCloseCode = \r\n  | 1000  // Normal closure\r\n  | 1001  // Going away\r\n  | 1002  // Protocol error\r\n  | 1003  // Unsupported data\r\n  | 1006  // Abnormal closure (no close frame)\r\n  | 1011  // Server error\r\n  | 4400  // Custom: Unsupported version\r\n  | 4401  // Custom: Invalid role\r\n  | 4500; // Custom: Server handshake error\r\n\r\nexport type WSFailureClassification =\r\n  | 'network'       // DNS, connection refused, network issues\r\n  | 'handshake'     // 4xx responses, version mismatch\r\n  | 'server_error'  // 5xx responses, server-side issues  \r\n  | 'abnormal'      // 1006, unexpected closure\r\n  | 'timeout'       // Connection or ping timeout\r\n  | 'unknown';      // Unclassified error\r\n\r\nexport interface WSConnectionAttempt {\r\n  attempt: number;\r\n  timestamp: Date;\r\n  duration_ms?: number;\r\n  close_code?: WSCloseCode;\r\n  close_reason?: string;\r\n  classification: WSFailureClassification;\r\n  next_retry_eta?: Date;\r\n}\r\n\r\nexport interface WSConnectionStats {\r\n  total_attempts: number;\r\n  successful_connections: number;\r\n  current_uptime_ms: number;\r\n  messages_received: number;\r\n  messages_sent: number;\r\n  heartbeats_received: number;\r\n  heartbeats_sent: number;\r\n  last_activity: Date | null;\r\n  connection_start: Date | null;\r\n  message_counts_by_type: Record<string, number>;\r\n}\r\n\r\nexport interface WSHelloMessage extends WSMessage {\r\n  type: 'hello';\r\n  server_time: string;\r\n  accepted_version: number;\r\n  features: string[];\r\n  request_id: string;\r\n  client_id: string;\r\n  heartbeat_interval_ms: number;\r\n}\r\n\r\nexport interface WSState {\r\n  phase: WSConnectionPhase;\r\n  client_id: string;\r\n  url: string;\r\n  stats: WSConnectionStats;\r\n  current_attempt: WSConnectionAttempt | null;\r\n  recent_attempts: WSConnectionAttempt[];\r\n  fallback_reason: string | null;\r\n  last_hello_message: WSHelloMessage | null;\r\n  connection_features: string[];\r\n  is_fallback_mode: boolean;\r\n}\r\n\r\nexport interface WSMessage {\r\n  type: string;\r\n  timestamp: string;\r\n  [key: string]: unknown;\r\n}\r\n\r\nexport const classifyFailure = (\r\n  closeCode?: WSCloseCode, \r\n  error?: Error | Event\r\n): WSFailureClassification => {\r\n  // Classify based on close code first\r\n  if (closeCode) {\r\n    switch (closeCode) {\r\n      case 4400:\r\n      case 4401:\r\n        return 'handshake';\r\n      case 4500:\r\n      case 1011:\r\n        return 'server_error';\r\n      case 1006:\r\n        return 'abnormal';\r\n      case 1000:\r\n      case 1001:\r\n        return 'network'; // Normal closures during connection issues\r\n      default:\r\n        return 'unknown';\r\n    }\r\n  }\r\n  \r\n  // Classify based on error message\r\n  if (error) {\r\n    const message = error instanceof Error \r\n      ? error.message.toLowerCase()\r\n      : error.toString().toLowerCase();\r\n    \r\n    if (message.includes('network') || \r\n        message.includes('connection refused') ||\r\n        message.includes('dns') ||\r\n        message.includes('host not found')) {\r\n      return 'network';\r\n    }\r\n    \r\n    if (message.includes('timeout')) {\r\n      return 'timeout';\r\n    }\r\n    \r\n    if (message.includes('handshake') || \r\n        message.includes('upgrade') ||\r\n        message.includes('version')) {\r\n      return 'handshake';\r\n    }\r\n    \r\n    if (message.includes('server error') || \r\n        message.includes('internal error')) {\r\n      return 'server_error';\r\n    }\r\n  }\r\n  \r\n  return 'unknown';\r\n};\r\n\r\nexport const getFailureDescription = (classification: WSFailureClassification): string => {\r\n  switch (classification) {\r\n    case 'network':\r\n      return 'Network connectivity issue (DNS, connection refused, etc.)';\r\n    case 'handshake':\r\n      return 'WebSocket handshake rejected (version mismatch, invalid params)';\r\n    case 'server_error':\r\n      return 'Server internal error during connection';\r\n    case 'abnormal':\r\n      return 'Connection closed unexpectedly (no close frame received)';\r\n    case 'timeout':\r\n      return 'Connection or heartbeat timeout';\r\n    case 'unknown':\r\n    default:\r\n      return 'Unknown connection failure';\r\n  }\r\n};"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;;AASqB;;AAWX;;AAQU;;AAsDb,MAAMA,eAAe,GAAGA,CAC7BC,SAAuB,EACvBC,KAAqB,KACO;EAC5B;EACA,IAAID,SAAS,EAAE;IACb,QAAQA,SAAS;MACf,KAAK,IAAI;MACT,KAAK,IAAI;QACP,OAAO,WAAW;MACpB,KAAK,IAAI;MACT,KAAK,IAAI;QACP,OAAO,cAAc;MACvB,KAAK,IAAI;QACP,OAAO,UAAU;MACnB,KAAK,IAAI;MACT,KAAK,IAAI;QACP,OAAO,SAAS;MAAE;MACpB;QACE,OAAO,SAAS;IACpB;EACF;;EAEA;EACA,IAAIC,KAAK,EAAE;IACT,MAAMC,OAAO,GAAGD,KAAK,YAAYE,KAAK,GAClCF,KAAK,CAACC,OAAO,CAACE,WAAW,CAAC,CAAC,GAC3BH,KAAK,CAACI,QAAQ,CAAC,CAAC,CAACD,WAAW,CAAC,CAAC;IAElC,IAAIF,OAAO,CAACI,QAAQ,CAAC,SAAS,CAAC,IAC3BJ,OAAO,CAACI,QAAQ,CAAC,oBAAoB,CAAC,IACtCJ,OAAO,CAACI,QAAQ,CAAC,KAAK,CAAC,IACvBJ,OAAO,CAACI,QAAQ,CAAC,gBAAgB,CAAC,EAAE;MACtC,OAAO,SAAS;IAClB;IAEA,IAAIJ,OAAO,CAACI,QAAQ,CAAC,SAAS,CAAC,EAAE;MAC/B,OAAO,SAAS;IAClB;IAEA,IAAIJ,OAAO,CAACI,QAAQ,CAAC,WAAW,CAAC,IAC7BJ,OAAO,CAACI,QAAQ,CAAC,SAAS,CAAC,IAC3BJ,OAAO,CAACI,QAAQ,CAAC,SAAS,CAAC,EAAE;MAC/B,OAAO,WAAW;IACpB;IAEA,IAAIJ,OAAO,CAACI,QAAQ,CAAC,cAAc,CAAC,IAChCJ,OAAO,CAACI,QAAQ,CAAC,gBAAgB,CAAC,EAAE;MACtC,OAAO,cAAc;IACvB;EACF;EAEA,OAAO,SAAS;AAClB,CAAC;AAACC,OAAA,CAAAR,eAAA,GAAAA,eAAA;AAEK,MAAMS,qBAAqB,GAAIC,cAAuC,IAAa;EACxF,QAAQA,cAAc;IACpB,KAAK,SAAS;MACZ,OAAO,4DAA4D;IACrE,KAAK,WAAW;MACd,OAAO,iEAAiE;IAC1E,KAAK,cAAc;MACjB,OAAO,yCAAyC;IAClD,KAAK,UAAU;MACb,OAAO,0DAA0D;IACnE,KAAK,SAAS;MACZ,OAAO,iCAAiC;IAC1C,KAAK,SAAS;IACd;MACE,OAAO,4BAA4B;EACvC;AACF,CAAC;AAACF,OAAA,CAAAC,qBAAA,GAAAA,qBAAA","ignoreList":[]}