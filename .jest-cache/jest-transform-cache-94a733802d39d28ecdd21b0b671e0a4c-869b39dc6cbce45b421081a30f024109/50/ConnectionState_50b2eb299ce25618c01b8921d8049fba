470d7b84b5dec1514c45038bd79e9281
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFailureDescription = exports.classifyFailure = void 0;
/**
 * WebSocket Connection States
 * 
 * Defines the connection state machine and related types for WebSocket management.
 */

// Gave up reconnecting, using local mode

// Custom: Server handshake error

// Unclassified error

const classifyFailure = (closeCode, error) => {
  // Classify based on close code first
  if (closeCode) {
    switch (closeCode) {
      case 4400:
      case 4401:
        return 'handshake';
      case 4500:
      case 1011:
        return 'server_error';
      case 1006:
        return 'abnormal';
      case 1000:
      case 1001:
        return 'network';
      // Normal closures during connection issues
      default:
        return 'unknown';
    }
  }

  // Classify based on error message
  if (error) {
    const message = error instanceof Error ? error.message.toLowerCase() : error.toString().toLowerCase();
    if (message.includes('network') || message.includes('connection refused') || message.includes('dns') || message.includes('host not found')) {
      return 'network';
    }
    if (message.includes('timeout')) {
      return 'timeout';
    }
    if (message.includes('handshake') || message.includes('upgrade') || message.includes('version')) {
      return 'handshake';
    }
    if (message.includes('server error') || message.includes('internal error')) {
      return 'server_error';
    }
  }
  return 'unknown';
};
exports.classifyFailure = classifyFailure;
const getFailureDescription = classification => {
  switch (classification) {
    case 'network':
      return 'Network connectivity issue (DNS, connection refused, etc.)';
    case 'handshake':
      return 'WebSocket handshake rejected (version mismatch, invalid params)';
    case 'server_error':
      return 'Server internal error during connection';
    case 'abnormal':
      return 'Connection closed unexpectedly (no close frame received)';
    case 'timeout':
      return 'Connection or heartbeat timeout';
    case 'unknown':
    default:
      return 'Unknown connection failure';
  }
};
exports.getFailureDescription = getFailureDescription;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,