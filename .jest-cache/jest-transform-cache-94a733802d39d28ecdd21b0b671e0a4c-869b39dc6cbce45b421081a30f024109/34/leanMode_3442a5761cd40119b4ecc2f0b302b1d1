26eb6433d6f8316e17b29bfca7eaf46d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLeanModeStatus = getLeanModeStatus;
exports.isLeanMode = isLeanMode;
exports.logLeanModeStatus = logLeanModeStatus;
exports.setLeanMode = setLeanMode;
/**
 * Lean Mode Utility
 * Determines if the application should run in lean mode with reduced monitoring and features
 * 
 * Lean mode is activated by:
 * - Environment variable: VITE_DEV_LEAN_MODE=true
 * - URL parameter: ?lean=true
 * - localStorage: devLeanMode=true
 */

/**
 * Check if lean mode is enabled
 * @returns true if lean mode is active, false otherwise
 */
function isLeanMode() {
  // Check environment variable first (runtime-safe)
  const envLean = typeof global.importMeta !== 'undefined' && global.importMeta.env && global.importMeta.env.VITE_DEV_LEAN_MODE || process.env.VITE_DEV_LEAN_MODE;
  if (envLean === 'true') return true;

  // Check URL parameters
  try {
    const qs = new URLSearchParams(window.location.search);
    if (qs.has("lean") && qs.get("lean") !== "false") {
      return true;
    }
  } catch (error) {
    console.warn("[LeanMode] Failed to parse URL parameters:", error);
  }

  // Check localStorage
  try {
    if (localStorage.getItem("devLeanMode") === "true") {
      return true;
    }
  } catch (error) {
    console.warn("[LeanMode] Failed to access localStorage:", error);
  }
  return false;
}

/**
 * Set lean mode in localStorage
 * @param enabled whether to enable lean mode
 */
function setLeanMode(enabled) {
  try {
    if (enabled) {
      localStorage.setItem("devLeanMode", "true");
    } else {
      localStorage.removeItem("devLeanMode");
    }
  } catch (error) {
    console.warn("[LeanMode] Failed to update localStorage:", error);
  }
}

/**
 * Get lean mode status with details about how it was activated
 * @returns object with lean mode status and activation source
 */
function getLeanModeStatus() {
  // Check environment variable
  const envLean2 = typeof global.importMeta !== 'undefined' && global.importMeta.env && global.importMeta.env.VITE_DEV_LEAN_MODE || process.env.VITE_DEV_LEAN_MODE;
  if (envLean2 === 'true') {
    return {
      enabled: true,
      source: 'environment'
    };
  }

  // Check URL parameters
  try {
    const qs = new URLSearchParams(window.location.search);
    if (qs.has("lean") && qs.get("lean") !== "false") {
      return {
        enabled: true,
        source: "url"
      };
    }
  } catch (error) {
    console.warn("[LeanMode] Failed to parse URL parameters:", error);
  }

  // Check localStorage
  try {
    if (localStorage.getItem("devLeanMode") === "true") {
      return {
        enabled: true,
        source: "localStorage"
      };
    }
  } catch (error) {
    console.warn("[LeanMode] Failed to access localStorage:", error);
  }
  return {
    enabled: false,
    source: "none"
  };
}

/**
 * Log lean mode status to console
 */
function logLeanModeStatus() {
  const status = getLeanModeStatus();
  if (status.enabled) {
    console.info(`[LeanMode] ACTIVE - source: ${status.source} - monitoring and features suppressed`);
  } else {
    console.info("[LeanMode] DISABLED - full monitoring and features active");
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,