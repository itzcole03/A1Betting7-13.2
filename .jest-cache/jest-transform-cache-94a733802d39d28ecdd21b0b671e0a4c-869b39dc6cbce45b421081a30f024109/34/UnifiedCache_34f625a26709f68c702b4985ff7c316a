767ccb07d7ea68508f8d1ce0cf979758
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._unifiedCache = exports.UnifiedCache = void 0;
var _UnifiedCache;
class UnifiedCache {
  // 5 minutes - Fixed variable name issues

  constructor() {
    this.cache = new Map();
    this.defaultTTL = 300000;
  }
  static getInstance() {
    if (!UnifiedCache.instance) {
      UnifiedCache.instance = new UnifiedCache();
    }
    return UnifiedCache.instance;
  }
  set(key, value, ttl) {
    const _expiry = Date.now() + (ttl || this.defaultTTL);
    this.cache.set(key, {
      value,
      expiry: _expiry
    });
  }
  get(key) {
    const _item = this.cache.get(key);
    if (!_item) return null;
    if (this.isExpired(_item)) {
      this.cache.delete(key);
      return null;
    }
    return _item.value;
  }
  has(key) {
    const _item = this.cache.get(key);
    if (!_item) return false;
    if (this.isExpired(_item)) {
      this.cache.delete(key);
      return false;
    }
    return true;
  }
  delete(key) {
    this.cache.delete(key);
  }
  clear() {
    this.cache.clear();
  }
  isExpired(item) {
    return Date.now() > item.expiry;
  }
  getSize() {
    return this.cache.size;
  }
  getKeys() {
    return Array.from(this.cache.keys());
  }
  setDefaultTTL(ttl) {
    this.defaultTTL = ttl;
  }
}
exports.UnifiedCache = UnifiedCache;
_UnifiedCache = UnifiedCache;
UnifiedCache.instance = void 0;
const _unifiedCache = exports._unifiedCache = UnifiedCache.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVbmlmaWVkQ2FjaGUiLCJjb25zdHJ1Y3RvciIsImNhY2hlIiwiTWFwIiwiZGVmYXVsdFRUTCIsImdldEluc3RhbmNlIiwiaW5zdGFuY2UiLCJzZXQiLCJrZXkiLCJ2YWx1ZSIsInR0bCIsIl9leHBpcnkiLCJEYXRlIiwibm93IiwiZXhwaXJ5IiwiZ2V0IiwiX2l0ZW0iLCJpc0V4cGlyZWQiLCJkZWxldGUiLCJoYXMiLCJjbGVhciIsIml0ZW0iLCJnZXRTaXplIiwic2l6ZSIsImdldEtleXMiLCJBcnJheSIsImZyb20iLCJrZXlzIiwic2V0RGVmYXVsdFRUTCIsImV4cG9ydHMiLCJfVW5pZmllZENhY2hlIiwiX3VuaWZpZWRDYWNoZSJdLCJzb3VyY2VzIjpbIlVuaWZpZWRDYWNoZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgQ2FjaGVJdGVtPFQ+IHtcclxuICB2YWx1ZTogVDtcclxuICBleHBpcnk6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFVuaWZpZWRDYWNoZSB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFVuaWZpZWRDYWNoZTtcclxuICBwcml2YXRlIGNhY2hlOiBNYXA8c3RyaW5nLCBDYWNoZUl0ZW08dW5rbm93bj4+ID0gbmV3IE1hcCgpO1xyXG4gIHByaXZhdGUgZGVmYXVsdFRUTDogbnVtYmVyID0gMzAwMDAwOyAvLyA1IG1pbnV0ZXMgLSBGaXhlZCB2YXJpYWJsZSBuYW1lIGlzc3Vlc1xyXG5cclxuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgc3RhdGljIGdldEluc3RhbmNlKCk6IFVuaWZpZWRDYWNoZSB7XHJcbiAgICBpZiAoIVVuaWZpZWRDYWNoZS5pbnN0YW5jZSkge1xyXG4gICAgICBVbmlmaWVkQ2FjaGUuaW5zdGFuY2UgPSBuZXcgVW5pZmllZENhY2hlKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gVW5pZmllZENhY2hlLmluc3RhbmNlO1xyXG4gIH1cclxuXHJcbiAgc2V0PFQ+KGtleTogc3RyaW5nLCB2YWx1ZTogVCwgdHRsPzogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCBfZXhwaXJ5ID0gRGF0ZS5ub3coKSArICh0dGwgfHwgdGhpcy5kZWZhdWx0VFRMKTtcclxuICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgeyB2YWx1ZSwgZXhwaXJ5OiBfZXhwaXJ5IH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0PFQ+KGtleTogc3RyaW5nKTogVCB8IG51bGwge1xyXG4gICAgY29uc3QgX2l0ZW0gPSB0aGlzLmNhY2hlLmdldChrZXkpO1xyXG4gICAgaWYgKCFfaXRlbSkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgaWYgKHRoaXMuaXNFeHBpcmVkKF9pdGVtKSkge1xyXG4gICAgICB0aGlzLmNhY2hlLmRlbGV0ZShrZXkpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgcmV0dXJuIF9pdGVtLnZhbHVlIGFzIFQ7XHJcbiAgfVxyXG5cclxuICBoYXMoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IF9pdGVtID0gdGhpcy5jYWNoZS5nZXQoa2V5KTtcclxuICAgIGlmICghX2l0ZW0pIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICBpZiAodGhpcy5pc0V4cGlyZWQoX2l0ZW0pKSB7XHJcbiAgICAgIHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZShrZXk6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy5jYWNoZS5kZWxldGUoa2V5KTtcclxuICB9XHJcblxyXG4gIGNsZWFyKCk6IHZvaWQge1xyXG4gICAgdGhpcy5jYWNoZS5jbGVhcigpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpc0V4cGlyZWQoaXRlbTogQ2FjaGVJdGVtPHVua25vd24+KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gRGF0ZS5ub3coKSA+IGl0ZW0uZXhwaXJ5O1xyXG4gIH1cclxuXHJcbiAgZ2V0U2l6ZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuc2l6ZTtcclxuICB9XHJcblxyXG4gIGdldEtleXMoKTogc3RyaW5nW10ge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5jYWNoZS5rZXlzKCkpO1xyXG4gIH1cclxuXHJcbiAgc2V0RGVmYXVsdFRUTCh0dGw6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5kZWZhdWx0VFRMID0gdHRsO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IF91bmlmaWVkQ2FjaGUgPSBVbmlmaWVkQ2FjaGUuZ2V0SW5zdGFuY2UoKTtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBS08sTUFBTUEsWUFBWSxDQUFDO0VBR2E7O0VBRTdCQyxXQUFXQSxDQUFBLEVBQUc7SUFBQSxLQUhkQyxLQUFLLEdBQW9DLElBQUlDLEdBQUcsQ0FBQyxDQUFDO0lBQUEsS0FDbERDLFVBQVUsR0FBVyxNQUFNO0VBRVo7RUFFdkIsT0FBT0MsV0FBV0EsQ0FBQSxFQUFpQjtJQUNqQyxJQUFJLENBQUNMLFlBQVksQ0FBQ00sUUFBUSxFQUFFO01BQzFCTixZQUFZLENBQUNNLFFBQVEsR0FBRyxJQUFJTixZQUFZLENBQUMsQ0FBQztJQUM1QztJQUNBLE9BQU9BLFlBQVksQ0FBQ00sUUFBUTtFQUM5QjtFQUVBQyxHQUFHQSxDQUFJQyxHQUFXLEVBQUVDLEtBQVEsRUFBRUMsR0FBWSxFQUFRO0lBQ2hELE1BQU1DLE9BQU8sR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxJQUFJSCxHQUFHLElBQUksSUFBSSxDQUFDTixVQUFVLENBQUM7SUFDckQsSUFBSSxDQUFDRixLQUFLLENBQUNLLEdBQUcsQ0FBQ0MsR0FBRyxFQUFFO01BQUVDLEtBQUs7TUFBRUssTUFBTSxFQUFFSDtJQUFRLENBQUMsQ0FBQztFQUNqRDtFQUVBSSxHQUFHQSxDQUFJUCxHQUFXLEVBQVk7SUFDNUIsTUFBTVEsS0FBSyxHQUFHLElBQUksQ0FBQ2QsS0FBSyxDQUFDYSxHQUFHLENBQUNQLEdBQUcsQ0FBQztJQUNqQyxJQUFJLENBQUNRLEtBQUssRUFBRSxPQUFPLElBQUk7SUFFdkIsSUFBSSxJQUFJLENBQUNDLFNBQVMsQ0FBQ0QsS0FBSyxDQUFDLEVBQUU7TUFDekIsSUFBSSxDQUFDZCxLQUFLLENBQUNnQixNQUFNLENBQUNWLEdBQUcsQ0FBQztNQUN0QixPQUFPLElBQUk7SUFDYjtJQUVGLE9BQU9RLEtBQUssQ0FBQ1AsS0FBSztFQUNsQjtFQUVBVSxHQUFHQSxDQUFDWCxHQUFXLEVBQVc7SUFDeEIsTUFBTVEsS0FBSyxHQUFHLElBQUksQ0FBQ2QsS0FBSyxDQUFDYSxHQUFHLENBQUNQLEdBQUcsQ0FBQztJQUNqQyxJQUFJLENBQUNRLEtBQUssRUFBRSxPQUFPLEtBQUs7SUFFeEIsSUFBSSxJQUFJLENBQUNDLFNBQVMsQ0FBQ0QsS0FBSyxDQUFDLEVBQUU7TUFDekIsSUFBSSxDQUFDZCxLQUFLLENBQUNnQixNQUFNLENBQUNWLEdBQUcsQ0FBQztNQUN0QixPQUFPLEtBQUs7SUFDZDtJQUVBLE9BQU8sSUFBSTtFQUNiO0VBRUFVLE1BQU1BLENBQUNWLEdBQVcsRUFBUTtJQUN4QixJQUFJLENBQUNOLEtBQUssQ0FBQ2dCLE1BQU0sQ0FBQ1YsR0FBRyxDQUFDO0VBQ3hCO0VBRUFZLEtBQUtBLENBQUEsRUFBUztJQUNaLElBQUksQ0FBQ2xCLEtBQUssQ0FBQ2tCLEtBQUssQ0FBQyxDQUFDO0VBQ3BCO0VBRVFILFNBQVNBLENBQUNJLElBQXdCLEVBQVc7SUFDbkQsT0FBT1QsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxHQUFHUSxJQUFJLENBQUNQLE1BQU07RUFDakM7RUFFQVEsT0FBT0EsQ0FBQSxFQUFXO0lBQ2hCLE9BQU8sSUFBSSxDQUFDcEIsS0FBSyxDQUFDcUIsSUFBSTtFQUN4QjtFQUVBQyxPQUFPQSxDQUFBLEVBQWE7SUFDbEIsT0FBT0MsS0FBSyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDeEIsS0FBSyxDQUFDeUIsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUN0QztFQUVBQyxhQUFhQSxDQUFDbEIsR0FBVyxFQUFRO0lBQy9CLElBQUksQ0FBQ04sVUFBVSxHQUFHTSxHQUFHO0VBQ3ZCO0FBQ0Y7QUFBQ21CLE9BQUEsQ0FBQTdCLFlBQUEsR0FBQUEsWUFBQTtBQUFBOEIsYUFBQSxHQWxFWTlCLFlBQVk7QUFBWkEsWUFBWSxDQUNSTSxRQUFRO0FBbUVsQixNQUFNeUIsYUFBYSxHQUFBRixPQUFBLENBQUFFLGFBQUEsR0FBRy9CLFlBQVksQ0FBQ0ssV0FBVyxDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=