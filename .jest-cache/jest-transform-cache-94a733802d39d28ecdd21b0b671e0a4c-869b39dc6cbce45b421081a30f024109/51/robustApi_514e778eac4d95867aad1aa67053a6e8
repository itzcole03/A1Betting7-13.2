5929985b698fafe4d995a23825d875a3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.robustApi = exports.fetchWithFallback = exports.fetchPerformanceStats = exports.fetchHealthData = exports.default = exports.RobustApiClient = void 0;
var _ensureHealthShape = require("./ensureHealthShape");
var _ensureMetricsShape = require("./ensureMetricsShape");
/**
 * Robust API Utility - Handles API errors gracefully
 * Prevents JSON parsing errors when APIs return HTML
 */

class RobustApiClient {
  constructor(baseUrl = '') {
    this.baseUrl = void 0;
    this.baseUrl = baseUrl;
  }
  async fetch(url, options = {}) {
    const {
      timeout = 10000,
      retries = 2,
      fallbackData,
      ...fetchOptions
    } = options;
    const fullUrl = url.startsWith('http') ? url : `${this.baseUrl}${url}`;
    for (let attempt = 0; attempt <= retries; attempt++) {
      try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), timeout);
        const response = await fetch(fullUrl, {
          ...fetchOptions,
          signal: controller.signal
        });
        clearTimeout(timeoutId);
        if (!response.ok) {
          // Handle HTTP errors
          if (response.status === 404) {
            return {
              success: false,
              error: 'API endpoint not found',
              data: fallbackData
            };
          }
          if (response.status >= 500) {
            return {
              success: false,
              error: 'Server error - API temporarily unavailable',
              data: fallbackData
            };
          }
          return {
            success: false,
            error: `HTTP ${response.status}: ${response.statusText}`,
            data: fallbackData
          };
        }

        // Check content type to avoid JSON parsing errors
        const contentType = response.headers.get('content-type') || '';
        if (contentType.includes('application/json')) {
          try {
            const data = await response.json();
            return {
              success: true,
              data
            };
          } catch (jsonError) {
            console.warn('Failed to parse JSON response:', jsonError);
            return {
              success: false,
              error: 'Invalid JSON response from server',
              data: fallbackData
            };
          }
        } else if (contentType.includes('text/html')) {
          // Server returned HTML (likely an error page)
          const html = await response.text();
          console.warn('API returned HTML instead of JSON:', url);
          return {
            success: false,
            error: 'API returned HTML instead of JSON - service may be down',
            isHtml: true,
            data: fallbackData
          };
        } else {
          // Try to parse as text
          const text = await response.text();
          return {
            success: true,
            data: text
          };
        }
      } catch (error) {
        console.warn(`API attempt ${attempt + 1} failed for ${url}:`, error);
        if (attempt === retries) {
          const errorMessage = error instanceof Error ? error.message : 'Unknown error';
          if (errorMessage.includes('abort')) {
            return {
              success: false,
              error: 'Request timeout - API not responding',
              data: fallbackData
            };
          }
          return {
            success: false,
            error: `Network error: ${errorMessage}`,
            data: fallbackData
          };
        }

        // Wait before retry
        await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)));
      }
    }
    return {
      success: false,
      error: 'Max retries exceeded',
      data: fallbackData
    };
  }
  async get(url, options) {
    return this.fetch(url, {
      ...options,
      method: 'GET'
    });
  }
  async post(url, data, options) {
    return this.fetch(url, {
      ...options,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      },
      body: data ? JSON.stringify(data) : null
    });
  }
}

// Detect backend URL based on environment
exports.RobustApiClient = RobustApiClient;
const getBackendUrl = () => {
  // Check if we're in a cloud environment (like fly.dev, vercel, netlify, etc.)
  const hostname = window.location.hostname;
  const isCloudEnv = hostname.includes('.fly.dev') || hostname.includes('.vercel.app') || hostname.includes('.netlify.app') || hostname.includes('.herokuapp.com') || !hostname.includes('localhost');
  if (isCloudEnv) {
    // In cloud environments, don't try to fetch from localhost
    // Use relative URLs or disable API calls entirely
    return null; // This will trigger mock data mode
  }

  // Only try localhost in local development
  // Avoid import.meta.env in test environment (Jest)
  if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {
    return 'http://localhost:8000';
  }
  return '';
};

// Global instance with null check
const backendUrl = getBackendUrl();
const robustApi = exports.robustApi = backendUrl ? new RobustApiClient(backendUrl) : null;

// Convenience functions with fallback data
const fetchWithFallback = async (url, fallbackData, options) => {
  // If no API client available, return fallback immediately
  if (!robustApi) {
    console.info(`No API client available for ${url}, using fallback data`);
    return fallbackData;
  }
  try {
    const result = await robustApi.get(url, {
      ...options,
      fallbackData
    });
    return result.data || fallbackData;
  } catch (error) {
    console.warn(`API call to ${url} failed, using fallback data:`, error);
    return fallbackData;
  }
};

// Health check with mock data
exports.fetchWithFallback = fetchWithFallback;
const fetchHealthData = async () => {
  const mockHealthData = {
    status: 'healthy',
    services: {
      api: 'operational',
      cache: 'operational',
      database: 'operational'
    },
    performance: {
      cache_hit_rate: 85.2,
      cache_type: 'memory'
    },
    uptime_seconds: 3600
  };

  // If no backend URL configured (cloud environment), use mock data immediately
  if (!robustApi) {
    // eslint-disable-next-line no-console
    console.info('Running in cloud environment - using mock health data');
    return (0, _ensureHealthShape.ensureHealthShape)(mockHealthData, {
      usedMock: true
    });
  }
  try {
    // Try both health endpoints
    const result1 = await robustApi.get('/health', {
      fallbackData: mockHealthData,
      timeout: 3000
    });
    if (result1.success) {
      // Defensive: result1.data may be undefined or nested
      if (result1.data && typeof result1.data === 'object' && 'data' in result1.data) {
        return (0, _ensureHealthShape.ensureHealthShape)(result1.data.data || result1.data);
      }
      return (0, _ensureHealthShape.ensureHealthShape)(result1.data);
    }
    const result2 = await robustApi.get('/api/health', {
      fallbackData: mockHealthData,
      timeout: 3000
    });
    if (result2.success) {
      return (0, _ensureHealthShape.ensureHealthShape)(result2.data);
    }
  } catch (error) {
    // eslint-disable-next-line no-console
    console.warn('Health API calls failed, using mock data:', error);
  }
  return (0, _ensureHealthShape.ensureHealthShape)(mockHealthData, {
    usedMock: true
  });
};

// Performance stats with mock data
exports.fetchHealthData = fetchHealthData;
const fetchPerformanceStats = async () => {
  const mockStats = {
    api_performance: {
      '/health': {
        avg_time_ms: 45.2,
        min_time_ms: 23.1,
        max_time_ms: 156.8,
        total_calls: 247,
        cache_hits: 89,
        errors: 2
      },
      '/mlb/games': {
        avg_time_ms: 127.3,
        min_time_ms: 45.2,
        max_time_ms: 342.1,
        total_calls: 156,
        cache_hits: 134,
        errors: 1
      }
    },
    cache_performance: {
      cache_type: 'memory',
      hits: 312,
      misses: 67,
      errors: 3,
      hit_rate: 82.3,
      total_requests: 379
    },
    system_info: {
      optimization_level: 'Phase 4 Enhanced',
      caching_strategy: 'Cloud Demo Mode',
      monitoring: 'Real-time Performance Tracking'
    }
  };

  // If no backend URL configured (cloud environment), use mock data immediately
  if (!robustApi) {
    console.info('Running in cloud environment - using mock performance data');
    return {
      data: mockStats
    };
  }
  try {
    const result = await robustApi.get('/performance/stats', {
      fallbackData: {
        data: mockStats
      },
      timeout: 3000
    });
    if (result.success) {
      // Apply metrics normalization to prevent total_requests errors
      const rawData = result.data && typeof result.data === 'object' && 'data' in result.data ? result.data.data : result.data;
      const normalizedMetrics = (0, _ensureMetricsShape.ensureMetricsShape)(rawData);
      return {
        data: normalizedMetrics
      };
    }
  } catch (error) {
    // eslint-disable-next-line no-console
    console.warn('Performance stats API failed, using mock data:', error);
  }

  // Apply normalization to mock data as well
  const normalizedMockStats = (0, _ensureMetricsShape.ensureMetricsShape)(mockStats);
  return {
    data: normalizedMockStats
  };
};
exports.fetchPerformanceStats = fetchPerformanceStats;
var _default = exports.default = robustApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,