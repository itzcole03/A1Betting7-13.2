189a0393be9b41533f0940745215498b
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const framer_motion_1 = require("framer-motion");
const lucide_react_1 = require("lucide-react");
const react_1 = __importStar(require("react"));
const AccessRequestService_1 = require("../../services/AccessRequestService");
const location_1 = require("../../utils/location");
const _AccessRequestForm = ({ onRequestSubmitted }) => {
    const [email, setEmail] = (0, react_1.useState)('');
    const [message, setMessage] = (0, react_1.useState)('');
    const [isSubmitting, setIsSubmitting] = (0, react_1.useState)(false);
    const [response, setResponse] = (0, react_1.useState)(null);
    const [error, setError] = (0, react_1.useState)(null);
    const [showSuccess, setShowSuccess] = (0, react_1.useState)(false);
    const _handleSubmit = async (e) => {
        e.preventDefault();
        // Validation
        if (!email.trim()) {
            setError('Email address is required');
            return;
        }
        if (!AccessRequestService_1._accessRequestService.isValidEmail(email)) {
            setError('Please enter a valid email address');
            return;
        }
        setIsSubmitting(true);
        setError(null);
        try {
            // Check for existing request first
            const existingRequest = await AccessRequestService_1._accessRequestService.checkExistingRequest(email);
            if (existingRequest) {
                setError(`You already have a ${existingRequest.status} access request. Please check your email or contact support.`);
                setIsSubmitting(false);
                return;
            }
            // Submit new request
            const requestResponse = await AccessRequestService_1._accessRequestService.submitAccessRequest({
                email: email.trim(),
                message: message.trim() || undefined,
            });
            setResponse(requestResponse);
            setShowSuccess(true);
            // Reset form
            setEmail('');
            setMessage('');
            // Notify parent component
            if (onRequestSubmitted) {
                onRequestSubmitted(requestResponse);
            }
        }
        catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to submit access request');
        }
        finally {
            setIsSubmitting(false);
        }
    };
    const resetForm = () => {
        setShowSuccess(false);
        setResponse(null);
        setError(null);
        setEmail('');
        setMessage('');
    };
    if (showSuccess && response?.success) {
        return ((0, jsx_runtime_1.jsx)(framer_motion_1.motion.div, { initial: { opacity: 0, scale: 0.95 }, animate: { opacity: 1, scale: 1 }, className: 'max-w-md mx-auto', children: (0, jsx_runtime_1.jsxs)("div", { className: 'bg-slate-800/50 backdrop-blur-lg border border-slate-700/50 rounded-xl p-8 text-center', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-16 h-16 mx-auto mb-6 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center', children: (0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle, { className: 'w-8 h-8 text-white' }) }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-300 mb-6 leading-relaxed', children: response.message }), (0, jsx_runtime_1.jsxs)("div", { className: 'text-left', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-blue-300 font-medium text-sm', children: "What happens next?" }), (0, jsx_runtime_1.jsxs)("ul", { className: 'text-blue-200/80 text-xs mt-2 space-y-1', children: [(0, jsx_runtime_1.jsx)("li", { children: "\u2022 Your request will be reviewed by the admin team" }), (0, jsx_runtime_1.jsx)("li", { children: "\u2022 You'll receive an email notification with the decision" }), (0, jsx_runtime_1.jsx)("li", { children: "\u2022 Check your spam folder if you don't see our email" })] })] }), (0, jsx_runtime_1.jsx)("button", { onClick: resetForm, className: 'px-6 py-2 bg-slate-700 hover:bg-slate-600 rounded-lg text-white transition-colors', children: "Submit Another Request" })] }) }));
    }
    return ((0, jsx_runtime_1.jsx)(framer_motion_1.motion.div, { initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, className: 'max-w-md mx-auto', children: (0, jsx_runtime_1.jsxs)("div", { className: 'bg-slate-800/50 backdrop-blur-lg border border-slate-700/50 rounded-xl p-8', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'text-center mb-8', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-16 h-16 mx-auto mb-4 bg-gradient-to-r from-cyber-primary to-cyber-accent rounded-full flex items-center justify-center', children: (0, jsx_runtime_1.jsx)(lucide_react_1.Mail, { className: 'w-8 h-8 text-white' }) }), (0, jsx_runtime_1.jsx)("h2", { className: 'text-2xl font-bold text-white mb-2', children: "Request Access" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-400', children: "Enter your email to request access to the A1 Betting platform" })] }), (0, jsx_runtime_1.jsxs)("form", { onSubmit: _handleSubmit, className: 'space-y-6', children: [error && ((0, jsx_runtime_1.jsx)(framer_motion_1.motion.div, { initial: { opacity: 0, scale: 0.95 }, animate: { opacity: 1, scale: 1 }, className: 'bg-red-500/10 border border-red-500/50 rounded-lg p-4', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-3', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertCircle, { className: 'w-5 h-5 text-red-400 flex-shrink-0' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-red-300 text-sm', children: error })] }) })), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)("label", { htmlFor: 'email', className: 'block text-sm font-medium text-gray-300 mb-2', children: ["Email Address ", (0, jsx_runtime_1.jsx)("span", { className: 'text-red-400', children: "*" })] }), (0, jsx_runtime_1.jsx)("input", { id: 'email', type: 'email', value: email, onChange: e => setEmail(e.target.value), placeholder: 'your.email@company.com', className: 'w-full px-4 py-3 bg-slate-700/50 border border-slate-600/50 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-cyber-primary focus:ring-2 focus:ring-cyber-primary/20 transition-all', disabled: isSubmitting, required: true })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)("label", { htmlFor: 'message', className: 'block text-sm font-medium text-gray-300 mb-2', children: ["Additional Message ", (0, jsx_runtime_1.jsx)("span", { className: 'text-gray-500', children: "(optional)" })] }), (0, jsx_runtime_1.jsx)("textarea", { id: 'message', value: message, onChange: e => setMessage(e.target.value), placeholder: 'Tell us about your intended use case or any additional context...', rows: 3, className: 'w-full px-4 py-3 bg-slate-700/50 border border-slate-600/50 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-cyber-primary focus:ring-2 focus:ring-cyber-primary/20 transition-all resize-none', disabled: isSubmitting, maxLength: 500 }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-xs text-gray-500 mt-1', children: [message.length, "/500 characters"] })] }), (0, jsx_runtime_1.jsx)("div", { className: 'bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-4', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start space-x-3', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Info, { className: 'w-5 h-5 text-yellow-400 mt-0.5 flex-shrink-0' }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-yellow-300 font-medium text-sm', children: "Access Review Process" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-yellow-200/80 text-xs mt-1', children: "All access requests are manually reviewed. You'll receive an email notification with the decision, typically within 24-48 hours." })] })] }) }), (0, jsx_runtime_1.jsx)("button", { type: 'submit', disabled: isSubmitting || !email.trim(), className: 'w-full flex items-center justify-center space-x-2 px-6 py-3 bg-gradient-to-r from-cyber-primary to-cyber-accent hover:from-cyber-secondary hover:to-cyber-primary rounded-lg text-slate-900 font-medium transition-all disabled:opacity-50 disabled:cursor-not-allowed', children: isSubmitting ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-5 h-5 border-2 border-slate-900/30 border-t-slate-900 rounded-full animate-spin' }), (0, jsx_runtime_1.jsx)("span", { children: "Submitting Request..." })] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Send, { className: 'w-5 h-5' }), (0, jsx_runtime_1.jsx)("span", { children: "Submit Access Request" })] })) })] }), (0, jsx_runtime_1.jsx)("div", { className: 'mt-6 pt-6 border-t border-slate-700/50 text-center', children: (0, jsx_runtime_1.jsxs)("p", { className: 'text-xs text-gray-500', children: ["Already have access?", ' ', (0, jsx_runtime_1.jsx)("button", { onClick: () => (0, location_1.getLocation)().assign('/login'), className: 'text-cyber-primary hover:text-cyber-secondary transition-colors', children: "Sign in here" })] }) })] }) }));
};
exports.default = _AccessRequestForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,