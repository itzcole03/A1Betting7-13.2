ed29a23051e0afac369e9c29b64d7500
"use strict";
// Utility functions for interacting with window.location, abstracted for robust mocking in tests and SSR safety.
Object.defineProperty(exports, "__esModule", { value: true });
exports.reloadPage = exports.navigateTo = exports.getQueryParams = exports.getLocation = void 0;
/**
 * Returns the current window.location object.
 * Throws if called outside a browser environment (SSR/test safe).
 * Useful for mocking in tests and SSR safety.
 * @returns {Location} The window.location object.
 * @throws {Error} If called outside a browser environment.
 */
const getLocation = () => {
    if (typeof window === 'undefined' || !window.location) {
        throw new Error('getLocation: Can only be used in a browser environment.');
    }
    return window.location;
};
exports.getLocation = getLocation;
/**
 * Parses a query string (or the current URL's query string) into an object.
 * Handles empty, malformed, or repeated parameters robustly.
 * SSR/test safe: if window is not defined and no search is provided, returns empty object.
 *
 * @param {string} [search] - Optional query string (e.g., '?foo=1&bar=2'). If omitted, uses window.location.search.
 * @returns {Record<string, string>} An object mapping query parameter names to values. If a parameter appears multiple times, the last value is used.
 */
const getQueryParams = (search) => {
    let queryString = '';
    if (search !== undefined) {
        queryString = search.replace(/^\?/, '');
    }
    else if (typeof window !== 'undefined' && window.location) {
        queryString = window.location.search.replace(/^\?/, '');
    }
    else {
        // SSR/test environment: no window, no search provided
        return {};
    }
    if (!queryString)
        return {};
    // URLSearchParams handles malformed input gracefully; last value wins for repeated keys
    return Object.fromEntries(new URLSearchParams(queryString));
};
exports.getQueryParams = getQueryParams;
/**
 * Navigates the browser to the specified URL.
 * Throws if called outside a browser environment (SSR/test safe).
 * @param url - The URL to navigate to. Should be a valid absolute or relative URL.
 * @throws {Error} If called outside a browser environment or if the URL is invalid.
 */
const navigateTo = (url) => {
    if (typeof window === 'undefined' || !window.location) {
        throw new Error('navigateTo: Can only be used in a browser environment.');
    }
    try {
        // Validate URL (relative or absolute)
        new URL(url, window.location.origin);
    }
    catch {
        throw new Error(`navigateTo: Invalid URL: ${url}`);
    }
    window.location.assign(url);
};
exports.navigateTo = navigateTo;
/**
 * Reloads the current page.
 * Throws if called outside a browser environment (SSR/test safe).
 * @throws {Error} If called outside a browser environment.
 */
const reloadPage = () => {
    if (typeof window === 'undefined' || !window.location) {
        throw new Error('reloadPage: Can only be used in a browser environment.');
    }
    window.location.reload();
};
exports.reloadPage = reloadPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxiY21hZFxcRG93bmxvYWRzXFxBMUJldHRpbmc3LTEzLjJcXGZyb250ZW5kXFxzcmNcXHV0aWxzXFxsb2NhdGlvbi50cyIsIm1hcHBpbmdzIjoiO0FBQUEsaUhBQWlIOzs7QUFFakg7Ozs7OztHQU1HO0FBQ0ksTUFBTSxXQUFXLEdBQUcsR0FBYSxFQUFFO0lBQ3hDLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3RELE1BQU0sSUFBSSxLQUFLLENBQUMseURBQXlELENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBQ0QsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDO0FBQ3pCLENBQUMsQ0FBQztBQUxXLFFBQUEsV0FBVyxlQUt0QjtBQUVGOzs7Ozs7O0dBT0c7QUFDSSxNQUFNLGNBQWMsR0FBRyxDQUFDLE1BQWUsRUFBMEIsRUFBRTtJQUN4RSxJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUM7SUFDckIsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDekIsV0FBVyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLENBQUM7U0FBTSxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDNUQsV0FBVyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUQsQ0FBQztTQUFNLENBQUM7UUFDTixzREFBc0Q7UUFDdEQsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBQ0QsSUFBSSxDQUFDLFdBQVc7UUFBRSxPQUFPLEVBQUUsQ0FBQztJQUM1Qix3RkFBd0Y7SUFDeEYsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDOUQsQ0FBQyxDQUFDO0FBYlcsUUFBQSxjQUFjLGtCQWF6QjtBQUVGOzs7OztHQUtHO0FBQ0ksTUFBTSxVQUFVLEdBQUcsQ0FBQyxHQUFXLEVBQVEsRUFBRTtJQUM5QyxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN0RCxNQUFNLElBQUksS0FBSyxDQUFDLHdEQUF3RCxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUNELElBQUksQ0FBQztRQUNILHNDQUFzQztRQUV0QyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBQUMsTUFBTSxDQUFDO1FBQ1AsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBQ0QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDO0FBWlcsUUFBQSxVQUFVLGNBWXJCO0FBRUY7Ozs7R0FJRztBQUNJLE1BQU0sVUFBVSxHQUFHLEdBQVMsRUFBRTtJQUNuQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN0RCxNQUFNLElBQUksS0FBSyxDQUFDLHdEQUF3RCxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUNELE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDM0IsQ0FBQyxDQUFDO0FBTFcsUUFBQSxVQUFVLGNBS3JCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcYmNtYWRcXERvd25sb2Fkc1xcQTFCZXR0aW5nNy0xMy4yXFxmcm9udGVuZFxcc3JjXFx1dGlsc1xcbG9jYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVXRpbGl0eSBmdW5jdGlvbnMgZm9yIGludGVyYWN0aW5nIHdpdGggd2luZG93LmxvY2F0aW9uLCBhYnN0cmFjdGVkIGZvciByb2J1c3QgbW9ja2luZyBpbiB0ZXN0cyBhbmQgU1NSIHNhZmV0eS5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IHdpbmRvdy5sb2NhdGlvbiBvYmplY3QuXG4gKiBUaHJvd3MgaWYgY2FsbGVkIG91dHNpZGUgYSBicm93c2VyIGVudmlyb25tZW50IChTU1IvdGVzdCBzYWZlKS5cbiAqIFVzZWZ1bCBmb3IgbW9ja2luZyBpbiB0ZXN0cyBhbmQgU1NSIHNhZmV0eS5cbiAqIEByZXR1cm5zIHtMb2NhdGlvbn0gVGhlIHdpbmRvdy5sb2NhdGlvbiBvYmplY3QuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgY2FsbGVkIG91dHNpZGUgYSBicm93c2VyIGVudmlyb25tZW50LlxuICovXG5leHBvcnQgY29uc3QgZ2V0TG9jYXRpb24gPSAoKTogTG9jYXRpb24gPT4ge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgIXdpbmRvdy5sb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignZ2V0TG9jYXRpb246IENhbiBvbmx5IGJlIHVzZWQgaW4gYSBicm93c2VyIGVudmlyb25tZW50LicpO1xuICB9XG4gIHJldHVybiB3aW5kb3cubG9jYXRpb247XG59O1xuXG4vKipcbiAqIFBhcnNlcyBhIHF1ZXJ5IHN0cmluZyAob3IgdGhlIGN1cnJlbnQgVVJMJ3MgcXVlcnkgc3RyaW5nKSBpbnRvIGFuIG9iamVjdC5cbiAqIEhhbmRsZXMgZW1wdHksIG1hbGZvcm1lZCwgb3IgcmVwZWF0ZWQgcGFyYW1ldGVycyByb2J1c3RseS5cbiAqIFNTUi90ZXN0IHNhZmU6IGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCBhbmQgbm8gc2VhcmNoIGlzIHByb3ZpZGVkLCByZXR1cm5zIGVtcHR5IG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3NlYXJjaF0gLSBPcHRpb25hbCBxdWVyeSBzdHJpbmcgKGUuZy4sICc/Zm9vPTEmYmFyPTInKS4gSWYgb21pdHRlZCwgdXNlcyB3aW5kb3cubG9jYXRpb24uc2VhcmNoLlxuICogQHJldHVybnMge1JlY29yZDxzdHJpbmcsIHN0cmluZz59IEFuIG9iamVjdCBtYXBwaW5nIHF1ZXJ5IHBhcmFtZXRlciBuYW1lcyB0byB2YWx1ZXMuIElmIGEgcGFyYW1ldGVyIGFwcGVhcnMgbXVsdGlwbGUgdGltZXMsIHRoZSBsYXN0IHZhbHVlIGlzIHVzZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRRdWVyeVBhcmFtcyA9IChzZWFyY2g/OiBzdHJpbmcpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0+IHtcbiAgbGV0IHF1ZXJ5U3RyaW5nID0gJyc7XG4gIGlmIChzZWFyY2ggIT09IHVuZGVmaW5lZCkge1xuICAgIHF1ZXJ5U3RyaW5nID0gc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmxvY2F0aW9uKSB7XG4gICAgcXVlcnlTdHJpbmcgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gU1NSL3Rlc3QgZW52aXJvbm1lbnQ6IG5vIHdpbmRvdywgbm8gc2VhcmNoIHByb3ZpZGVkXG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGlmICghcXVlcnlTdHJpbmcpIHJldHVybiB7fTtcbiAgLy8gVVJMU2VhcmNoUGFyYW1zIGhhbmRsZXMgbWFsZm9ybWVkIGlucHV0IGdyYWNlZnVsbHk7IGxhc3QgdmFsdWUgd2lucyBmb3IgcmVwZWF0ZWQga2V5c1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKG5ldyBVUkxTZWFyY2hQYXJhbXMocXVlcnlTdHJpbmcpKTtcbn07XG5cbi8qKlxuICogTmF2aWdhdGVzIHRoZSBicm93c2VyIHRvIHRoZSBzcGVjaWZpZWQgVVJMLlxuICogVGhyb3dzIGlmIGNhbGxlZCBvdXRzaWRlIGEgYnJvd3NlciBlbnZpcm9ubWVudCAoU1NSL3Rlc3Qgc2FmZSkuXG4gKiBAcGFyYW0gdXJsIC0gVGhlIFVSTCB0byBuYXZpZ2F0ZSB0by4gU2hvdWxkIGJlIGEgdmFsaWQgYWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMLlxuICogQHRocm93cyB7RXJyb3J9IElmIGNhbGxlZCBvdXRzaWRlIGEgYnJvd3NlciBlbnZpcm9ubWVudCBvciBpZiB0aGUgVVJMIGlzIGludmFsaWQuXG4gKi9cbmV4cG9ydCBjb25zdCBuYXZpZ2F0ZVRvID0gKHVybDogc3RyaW5nKTogdm9pZCA9PiB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCAhd2luZG93LmxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCduYXZpZ2F0ZVRvOiBDYW4gb25seSBiZSB1c2VkIGluIGEgYnJvd3NlciBlbnZpcm9ubWVudC4nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZhbGlkYXRlIFVSTCAocmVsYXRpdmUgb3IgYWJzb2x1dGUpXG4gICAgIFxuICAgIG5ldyBVUkwodXJsLCB3aW5kb3cubG9jYXRpb24ub3JpZ2luKTtcbiAgfSBjYXRjaCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBuYXZpZ2F0ZVRvOiBJbnZhbGlkIFVSTDogJHt1cmx9YCk7XG4gIH1cbiAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xufTtcblxuLyoqXG4gKiBSZWxvYWRzIHRoZSBjdXJyZW50IHBhZ2UuXG4gKiBUaHJvd3MgaWYgY2FsbGVkIG91dHNpZGUgYSBicm93c2VyIGVudmlyb25tZW50IChTU1IvdGVzdCBzYWZlKS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBjYWxsZWQgb3V0c2lkZSBhIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gKi9cbmV4cG9ydCBjb25zdCByZWxvYWRQYWdlID0gKCk6IHZvaWQgPT4ge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgIXdpbmRvdy5sb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcigncmVsb2FkUGFnZTogQ2FuIG9ubHkgYmUgdXNlZCBpbiBhIGJyb3dzZXIgZW52aXJvbm1lbnQuJyk7XG4gIH1cbiAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xufTtcbiJdLCJ2ZXJzaW9uIjozfQ==