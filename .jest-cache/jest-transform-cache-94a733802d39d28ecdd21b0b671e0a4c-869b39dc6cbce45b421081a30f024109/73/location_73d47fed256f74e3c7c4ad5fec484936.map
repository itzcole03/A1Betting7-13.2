{"file":"C:\\Users\\bcmad\\Downloads\\A1Betting7-13.2\\frontend\\src\\utils\\location.ts","mappings":";AAAA,iHAAiH;;;AAEjH;;;;;;GAMG;AACI,MAAM,WAAW,GAAG,GAAa,EAAE;IACxC,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QACtD,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;IAC7E,CAAC;IACD,OAAO,MAAM,CAAC,QAAQ,CAAC;AACzB,CAAC,CAAC;AALW,QAAA,WAAW,eAKtB;AAEF;;;;;;;GAOG;AACI,MAAM,cAAc,GAAG,CAAC,MAAe,EAA0B,EAAE;IACxE,IAAI,WAAW,GAAG,EAAE,CAAC;IACrB,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;QACzB,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAC1C,CAAC;SAAM,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;QAC5D,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAC1D,CAAC;SAAM,CAAC;QACN,sDAAsD;QACtD,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,IAAI,CAAC,WAAW;QAAE,OAAO,EAAE,CAAC;IAC5B,wFAAwF;IACxF,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC;AAbW,QAAA,cAAc,kBAazB;AAEF;;;;;GAKG;AACI,MAAM,UAAU,GAAG,CAAC,GAAW,EAAQ,EAAE;IAC9C,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QACtD,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;IAC5E,CAAC;IACD,IAAI,CAAC;QACH,sCAAsC;QAEtC,IAAI,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;IAAC,MAAM,CAAC;QACP,MAAM,IAAI,KAAK,CAAC,4BAA4B,GAAG,EAAE,CAAC,CAAC;IACrD,CAAC;IACD,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC9B,CAAC,CAAC;AAZW,QAAA,UAAU,cAYrB;AAEF;;;;GAIG;AACI,MAAM,UAAU,GAAG,GAAS,EAAE;IACnC,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QACtD,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;IAC5E,CAAC;IACD,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;AAC3B,CAAC,CAAC;AALW,QAAA,UAAU,cAKrB","names":[],"sources":["C:\\Users\\bcmad\\Downloads\\A1Betting7-13.2\\frontend\\src\\utils\\location.ts"],"sourcesContent":["// Utility functions for interacting with window.location, abstracted for robust mocking in tests and SSR safety.\n\n/**\n * Returns the current window.location object.\n * Throws if called outside a browser environment (SSR/test safe).\n * Useful for mocking in tests and SSR safety.\n * @returns {Location} The window.location object.\n * @throws {Error} If called outside a browser environment.\n */\nexport const getLocation = (): Location => {\n  if (typeof window === 'undefined' || !window.location) {\n    throw new Error('getLocation: Can only be used in a browser environment.');\n  }\n  return window.location;\n};\n\n/**\n * Parses a query string (or the current URL's query string) into an object.\n * Handles empty, malformed, or repeated parameters robustly.\n * SSR/test safe: if window is not defined and no search is provided, returns empty object.\n *\n * @param {string} [search] - Optional query string (e.g., '?foo=1&bar=2'). If omitted, uses window.location.search.\n * @returns {Record<string, string>} An object mapping query parameter names to values. If a parameter appears multiple times, the last value is used.\n */\nexport const getQueryParams = (search?: string): Record<string, string> => {\n  let queryString = '';\n  if (search !== undefined) {\n    queryString = search.replace(/^\\?/, '');\n  } else if (typeof window !== 'undefined' && window.location) {\n    queryString = window.location.search.replace(/^\\?/, '');\n  } else {\n    // SSR/test environment: no window, no search provided\n    return {};\n  }\n  if (!queryString) return {};\n  // URLSearchParams handles malformed input gracefully; last value wins for repeated keys\n  return Object.fromEntries(new URLSearchParams(queryString));\n};\n\n/**\n * Navigates the browser to the specified URL.\n * Throws if called outside a browser environment (SSR/test safe).\n * @param url - The URL to navigate to. Should be a valid absolute or relative URL.\n * @throws {Error} If called outside a browser environment or if the URL is invalid.\n */\nexport const navigateTo = (url: string): void => {\n  if (typeof window === 'undefined' || !window.location) {\n    throw new Error('navigateTo: Can only be used in a browser environment.');\n  }\n  try {\n    // Validate URL (relative or absolute)\n     \n    new URL(url, window.location.origin);\n  } catch {\n    throw new Error(`navigateTo: Invalid URL: ${url}`);\n  }\n  window.location.assign(url);\n};\n\n/**\n * Reloads the current page.\n * Throws if called outside a browser environment (SSR/test safe).\n * @throws {Error} If called outside a browser environment.\n */\nexport const reloadPage = (): void => {\n  if (typeof window === 'undefined' || !window.location) {\n    throw new Error('reloadPage: Can only be used in a browser environment.');\n  }\n  window.location.reload();\n};\n"],"version":3}