9d2da710abfd24aa98f132049050904d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.UnifiedErrorService = exports.ErrorSeverity = exports.ErrorCategory = void 0;
var _BaseService = require("./BaseService");
var _UnifiedErrorService;
let ErrorSeverity = exports.ErrorSeverity = /*#__PURE__*/function (ErrorSeverity) {
  ErrorSeverity["LOW"] = "low";
  ErrorSeverity["MEDIUM"] = "medium";
  ErrorSeverity["HIGH"] = "high";
  ErrorSeverity["CRITICAL"] = "critical";
  return ErrorSeverity;
}({});
let ErrorCategory = exports.ErrorCategory = /*#__PURE__*/function (ErrorCategory) {
  ErrorCategory["NETWORK"] = "network";
  ErrorCategory["VALIDATION"] = "validation";
  ErrorCategory["AUTHENTICATION"] = "authentication";
  ErrorCategory["PERMISSION"] = "permission";
  ErrorCategory["BUSINESS_LOGIC"] = "business_logic";
  ErrorCategory["SYSTEM"] = "system";
  ErrorCategory["UNKNOWN"] = "unknown";
  return ErrorCategory;
}({});
class UnifiedErrorService extends _BaseService.BaseService {
  // milliseconds

  constructor() {
    // @ts-expect-error TS(2554): Expected 2 arguments, but got 1. BaseService expects two arguments, but only one is provided here for singleton pattern compatibility.
    super('UnifiedErrorService');
    this.errors = new Map();
    this.errorCounter = 0;
    this.maxRetries = 3;
    this.retryDelays = [1000, 2000, 5000];
  }
  static getInstance() {
    if (!UnifiedErrorService.instance) {
      UnifiedErrorService.instance = new UnifiedErrorService();
    }
    return UnifiedErrorService.instance;
  }
  reportError(error, context = {}, category = ErrorCategory.UNKNOWN, severity = ErrorSeverity.MEDIUM) {
    const _errorId = `error_${++this.errorCounter}_${Date.now()}`;

    // Properly serialize error and context objects
    let errorMessage = '';
    let errorCode = 'UNKNOWN_ERROR';
    let errorStack = '';
    if (typeof error === 'string') {
      errorMessage = error;
    } else if (error instanceof Error) {
      errorMessage = error.message;
      errorCode = error.name || 'Error';
      errorStack = error.stack || '';
    } else if (error && typeof error === 'object') {
      errorMessage = JSON.stringify(error);
      errorCode = error.code || error.name || 'ObjectError';
    } else {
      errorMessage = String(error);
    }

    // Serialize context safely
    let serializedContext = {};
    try {
      serializedContext = typeof context === 'object' && context !== null ? JSON.parse(JSON.stringify(context)) : context;
    } catch (serializationError) {
      serializedContext = {
        error: 'Failed to serialize context',
        original: String(context)
      };
    }
    const _errorDetails = {
      id: _errorId,
      message: errorMessage,
      code: errorCode,
      category,
      severity,
      context: serializedContext,
      timestamp: new Date(),
      stack: errorStack,
      resolved: false,
      retryCount: 0
    };
    this.errors.set(_errorId, _errorDetails);

    // Log with properly serialized data
    // Production console statements disabled for lint compliance
    // console.error('[UnifiedErrorService] Error reported:', {
    //   id: _errorId,
    //   message: errorMessage,
    //   code: errorCode,
    //   category,
    //   severity,
    //   context: serializedContext,
    //   timestamp: _errorDetails.timestamp.toISOString()
    // });

    this.logger.error('Error reported', _errorDetails);
    this.emit('error_reported', _errorDetails);

    // Auto-resolve low severity errors after some time
    if (severity === ErrorSeverity.LOW) {
      setTimeout(() => this.resolveError(_errorId), 60000); // 1 minute
    }

    // Notify if critical
    if (severity === ErrorSeverity.CRITICAL) {
      this.emit('critical_error', _errorDetails);
    }
    return _errorId;
  }
  async retryOperation(operation, context = {}, category = ErrorCategory.NETWORK) {
    let lastError = null;
    for (let _attempt = 0; _attempt <= this.maxRetries; _attempt++) {
      try {
        if (_attempt > 0) {
          const _delay = this.retryDelays[Math.min(_attempt - 1, this.retryDelays.length - 1)];
          await this.delay(_delay);
          this.logger.info('Retrying operation', {
            attempt: _attempt,
            delay: _delay,
            context
          });
        }
        return await operation();
      } catch (error) {
        lastError = error;
        if (_attempt === this.maxRetries) {
          // Final attempt failed
          const _errorId = this.reportError(lastError, {
            ...context,
            totalAttempts: _attempt + 1
          }, category, ErrorSeverity.HIGH);
          throw new Error(`Operation failed after ${_attempt + 1} attempts. Error ID: ${_errorId}`);
        }
      }
    }
    throw lastError;
  }
  resolveError(errorId, resolution) {
    const _error = this.errors.get(errorId);
    if (!_error) {
      this.logger.warn('Attempted to resolve non-existent error', {
        errorId
      });
      return false;
    }
    _error.resolved = true;
    _error.context.resolution = resolution;
    _error.context.resolvedAt = new Date();
    this.logger.info('Error resolved', {
      errorId,
      resolution
    });
    this.emit('error_resolved', _error);
    return true;
  }
  getError(errorId) {
    return this.errors.get(errorId) || null;
  }
  getErrors(filters = {}) {
    const _allErrors = Array.from(this.errors.values());
    return _allErrors.filter(error => {
      if (filters.category && error.category !== filters.category) return false;
      if (filters.severity && error.severity !== filters.severity) return false;
      if (filters.resolved !== undefined && error.resolved !== filters.resolved) return false;
      if (filters.since && error.timestamp < filters.since) return false;
      return true;
    });
  }
  getErrorStats() {
    const _errors = Array.from(this.errors.values());
    const _stats = {
      total: _errors.length,
      resolved: _errors.filter(e => e.resolved).length,
      byCategory: {},
      bySeverity: {}
    };

    // Initialize counts
    Object.values(ErrorCategory).forEach(cat => _stats.byCategory[cat] = 0);
    Object.values(ErrorSeverity).forEach(sev => _stats.bySeverity[sev] = 0);

    // Count errors
    _errors.forEach(error => {
      _stats.byCategory[error.category]++;
      _stats.bySeverity[error.severity]++;
    });
    return _stats;
  }
  clearErrors(olderThan) {
    let _cleared = 0;
    for (const [id, error] of this.errors.entries()) {
      if (!olderThan || error.timestamp < olderThan) {
        if (error.resolved || error.severity === ErrorSeverity.LOW) {
          this.errors.delete(id);
          _cleared++;
        }
      }
    }
    this.logger.info('Errors cleared', {
      cleared: _cleared,
      olderThan
    });
    return _cleared;
  }
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Helper methods for common error categories
  reportNetworkError(error, context = {}) {
    return this.reportError(error, context, ErrorCategory.NETWORK, ErrorSeverity.MEDIUM);
  }
  reportValidationError(message, context = {}) {
    return this.reportError(message, context, ErrorCategory.VALIDATION, ErrorSeverity.LOW);
  }
  reportAuthError(error, context = {}) {
    return this.reportError(error, context, ErrorCategory.AUTHENTICATION, ErrorSeverity.HIGH);
  }
  reportCriticalError(error, context = {}) {
    return this.reportError(error, context, ErrorCategory.SYSTEM, ErrorSeverity.CRITICAL);
  }
}
exports.UnifiedErrorService = UnifiedErrorService;
_UnifiedErrorService = UnifiedErrorService;
UnifiedErrorService.instance = void 0;
var _default = exports.default = UnifiedErrorService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,