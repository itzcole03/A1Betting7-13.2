{"version":3,"names":["_BaseService","require","_UnifiedErrorService","ErrorSeverity","exports","ErrorCategory","UnifiedErrorService","BaseService","constructor","errors","Map","errorCounter","maxRetries","retryDelays","getInstance","instance","reportError","error","context","category","UNKNOWN","severity","MEDIUM","_errorId","Date","now","errorMessage","errorCode","errorStack","Error","message","name","stack","JSON","stringify","code","String","serializedContext","parse","serializationError","original","_errorDetails","id","timestamp","resolved","retryCount","set","logger","emit","LOW","setTimeout","resolveError","CRITICAL","retryOperation","operation","NETWORK","lastError","_attempt","_delay","Math","min","length","delay","info","attempt","totalAttempts","HIGH","errorId","resolution","_error","get","warn","resolvedAt","getError","getErrors","filters","_allErrors","Array","from","values","filter","undefined","since","getErrorStats","_errors","_stats","total","e","byCategory","bySeverity","Object","forEach","cat","sev","clearErrors","olderThan","_cleared","entries","delete","cleared","ms","Promise","resolve","reportNetworkError","reportValidationError","VALIDATION","reportAuthError","AUTHENTICATION","reportCriticalError","SYSTEM","_default","default"],"sources":["UnifiedErrorService.ts"],"sourcesContent":["import { BaseService } from './BaseService';\r\n\r\nexport enum ErrorSeverity {\r\n  LOW = 'low',\r\n  MEDIUM = 'medium',\r\n  HIGH = 'high',\r\n  CRITICAL = 'critical',\r\n}\r\n\r\nexport enum ErrorCategory {\r\n  NETWORK = 'network',\r\n  VALIDATION = 'validation',\r\n  AUTHENTICATION = 'authentication',\r\n  PERMISSION = 'permission',\r\n  BUSINESS_LOGIC = 'business_logic',\r\n  SYSTEM = 'system',\r\n  UNKNOWN = 'unknown',\r\n}\r\n\r\nexport interface ErrorDetails {\r\n  id: string;\r\n  message: string;\r\n  code?: string;\r\n  category: ErrorCategory;\r\n  severity: ErrorSeverity;\r\n  context: unknown;\r\n  timestamp: Date;\r\n  stack?: string;\r\n  resolved: boolean;\r\n  retryCount: number;\r\n}\r\n\r\nexport class UnifiedErrorService extends BaseService {\r\n  private static instance: UnifiedErrorService;\r\n  private errors: Map<string, ErrorDetails> = new Map();\r\n  private errorCounter = 0;\r\n  private maxRetries = 3;\r\n  private retryDelays = [1000, 2000, 5000]; // milliseconds\r\n\r\n  protected constructor() {\r\n    // @ts-expect-error TS(2554): Expected 2 arguments, but got 1. BaseService expects two arguments, but only one is provided here for singleton pattern compatibility.\r\n    super('UnifiedErrorService');\r\n  }\r\n\r\n  static getInstance(): UnifiedErrorService {\r\n    if (!UnifiedErrorService.instance) {\r\n      UnifiedErrorService.instance = new UnifiedErrorService();\r\n    }\r\n    return UnifiedErrorService.instance;\r\n  }\r\n\r\n  reportError(\r\n    error: Error | string,\r\n    context: Record<string, any> = {},\r\n    category: ErrorCategory = ErrorCategory.UNKNOWN,\r\n    severity: ErrorSeverity = ErrorSeverity.MEDIUM\r\n  ): string {\r\n    const _errorId = `error_${++this.errorCounter}_${Date.now()}`;\r\n\r\n    // Properly serialize error and context objects\r\n    let errorMessage = '';\r\n    let errorCode = 'UNKNOWN_ERROR';\r\n    let errorStack = '';\r\n\r\n    if (typeof error === 'string') {\r\n      errorMessage = error;\r\n    } else if (error instanceof Error) {\r\n      errorMessage = error.message;\r\n      errorCode = error.name || 'Error';\r\n      errorStack = error.stack || '';\r\n    } else if (error && typeof error === 'object') {\r\n      errorMessage = JSON.stringify(error);\r\n      errorCode = (error as any).code || (error as any).name || 'ObjectError';\r\n    } else {\r\n      errorMessage = String(error);\r\n    }\r\n\r\n    // Serialize context safely\r\n    let serializedContext: any = {};\r\n    try {\r\n      serializedContext =\r\n        typeof context === 'object' && context !== null\r\n          ? JSON.parse(JSON.stringify(context))\r\n          : context;\r\n    } catch (serializationError) {\r\n      serializedContext = { error: 'Failed to serialize context', original: String(context) };\r\n    }\r\n\r\n    const _errorDetails: ErrorDetails = {\r\n      id: _errorId,\r\n      message: errorMessage,\r\n      code: errorCode,\r\n      category,\r\n      severity,\r\n      context: serializedContext,\r\n      timestamp: new Date(),\r\n      stack: errorStack,\r\n      resolved: false,\r\n      retryCount: 0,\r\n    };\r\n\r\n    this.errors.set(_errorId, _errorDetails);\r\n\r\n    // Log with properly serialized data\r\n    // Production console statements disabled for lint compliance\r\n    // console.error('[UnifiedErrorService] Error reported:', {\r\n    //   id: _errorId,\r\n    //   message: errorMessage,\r\n    //   code: errorCode,\r\n    //   category,\r\n    //   severity,\r\n    //   context: serializedContext,\r\n    //   timestamp: _errorDetails.timestamp.toISOString()\r\n    // });\r\n\r\n    this.logger.error('Error reported', _errorDetails);\r\n    this.emit('error_reported', _errorDetails);\r\n\r\n    // Auto-resolve low severity errors after some time\r\n    if (severity === ErrorSeverity.LOW) {\r\n      setTimeout(() => this.resolveError(_errorId), 60000); // 1 minute\r\n    }\r\n\r\n    // Notify if critical\r\n    if (severity === ErrorSeverity.CRITICAL) {\r\n      this.emit('critical_error', _errorDetails);\r\n    }\r\n\r\n    return _errorId;\r\n  }\r\n\r\n  async retryOperation<T>(\r\n    operation: () => Promise<T>,\r\n    context: Record<string, any> = {},\r\n    category: ErrorCategory = ErrorCategory.NETWORK\r\n  ): Promise<T> {\r\n    let lastError: Error | null = null;\r\n\r\n    for (let _attempt = 0; _attempt <= this.maxRetries; _attempt++) {\r\n      try {\r\n        if (_attempt > 0) {\r\n          const _delay = this.retryDelays[Math.min(_attempt - 1, this.retryDelays.length - 1)];\r\n          await this.delay(_delay);\r\n          this.logger.info('Retrying operation', { attempt: _attempt, delay: _delay, context });\r\n        }\r\n\r\n        return await operation();\r\n      } catch (error) {\r\n        lastError = error as Error;\r\n\r\n        if (_attempt === this.maxRetries) {\r\n          // Final attempt failed\r\n          const _errorId = this.reportError(\r\n            lastError,\r\n            { ...context, totalAttempts: _attempt + 1 },\r\n            category,\r\n            ErrorSeverity.HIGH\r\n          );\r\n\r\n          throw new Error(`Operation failed after ${_attempt + 1} attempts. Error ID: ${_errorId}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    throw lastError;\r\n  }\r\n\r\n  resolveError(errorId: string, resolution?: string): boolean {\r\n    const _error = this.errors.get(errorId);\r\n    if (!_error) {\r\n      this.logger.warn('Attempted to resolve non-existent error', { errorId });\r\n      return false;\r\n    }\r\n\r\n    _error.resolved = true;\r\n    (_error.context as any).resolution = resolution;\r\n    (_error.context as any).resolvedAt = new Date();\r\n\r\n    this.logger.info('Error resolved', { errorId, resolution });\r\n    this.emit('error_resolved', _error);\r\n\r\n    return true;\r\n  }\r\n\r\n  getError(errorId: string): ErrorDetails | null {\r\n    return this.errors.get(errorId) || null;\r\n  }\r\n\r\n  getErrors(\r\n    filters: {\r\n      category?: ErrorCategory;\r\n      severity?: ErrorSeverity;\r\n      resolved?: boolean;\r\n      since?: Date;\r\n    } = {}\r\n  ): ErrorDetails[] {\r\n    const _allErrors = Array.from(this.errors.values());\r\n\r\n    return _allErrors.filter(error => {\r\n      if (filters.category && error.category !== filters.category) return false;\r\n      if (filters.severity && error.severity !== filters.severity) return false;\r\n      if (filters.resolved !== undefined && error.resolved !== filters.resolved) return false;\r\n      if (filters.since && error.timestamp < filters.since) return false;\r\n      return true;\r\n    });\r\n  }\r\n\r\n  getErrorStats(): {\r\n    total: number;\r\n    resolved: number;\r\n    byCategory: Record<ErrorCategory, number>;\r\n    bySeverity: Record<ErrorSeverity, number>;\r\n  } {\r\n    const _errors = Array.from(this.errors.values());\r\n\r\n    const _stats = {\r\n      total: _errors.length,\r\n      resolved: _errors.filter(e => e.resolved).length,\r\n      byCategory: {} as Record<ErrorCategory, number>,\r\n      bySeverity: {} as Record<ErrorSeverity, number>,\r\n    };\r\n\r\n    // Initialize counts\r\n    Object.values(ErrorCategory).forEach(cat => (_stats.byCategory[cat] = 0));\r\n    Object.values(ErrorSeverity).forEach(sev => (_stats.bySeverity[sev] = 0));\r\n\r\n    // Count errors\r\n    _errors.forEach(error => {\r\n      _stats.byCategory[error.category]++;\r\n      _stats.bySeverity[error.severity]++;\r\n    });\r\n\r\n    return _stats;\r\n  }\r\n\r\n  clearErrors(olderThan?: Date): number {\r\n    let _cleared = 0;\r\n\r\n    for (const [id, error] of this.errors.entries()) {\r\n      if (!olderThan || error.timestamp < olderThan) {\r\n        if (error.resolved || error.severity === ErrorSeverity.LOW) {\r\n          this.errors.delete(id);\r\n          _cleared++;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.logger.info('Errors cleared', { cleared: _cleared, olderThan });\r\n    return _cleared;\r\n  }\r\n\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  // Helper methods for common error categories\r\n  reportNetworkError(error: Error, context: Record<string, any> = {}): string {\r\n    return this.reportError(error, context, ErrorCategory.NETWORK, ErrorSeverity.MEDIUM);\r\n  }\r\n\r\n  reportValidationError(message: string, context: Record<string, any> = {}): string {\r\n    return this.reportError(message, context, ErrorCategory.VALIDATION, ErrorSeverity.LOW);\r\n  }\r\n\r\n  reportAuthError(error: Error, context: Record<string, any> = {}): string {\r\n    return this.reportError(error, context, ErrorCategory.AUTHENTICATION, ErrorSeverity.HIGH);\r\n  }\r\n\r\n  reportCriticalError(error: Error, context: Record<string, any> = {}): string {\r\n    return this.reportError(error, context, ErrorCategory.SYSTEM, ErrorSeverity.CRITICAL);\r\n  }\r\n}\r\n\r\nexport default UnifiedErrorService;\r\n"],"mappings":";;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AAA4C,IAAAC,oBAAA;AAAA,IAEhCC,aAAa,GAAAC,OAAA,CAAAD,aAAA,0BAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAA,OAAbA,aAAa;AAAA;AAAA,IAObE,aAAa,GAAAD,OAAA,CAAAC,aAAA,0BAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAA,OAAbA,aAAa;AAAA;AAuBlB,MAAMC,mBAAmB,SAASC,wBAAW,CAAC;EAKT;;EAEhCC,WAAWA,CAAA,EAAG;IACtB;IACA,KAAK,CAAC,qBAAqB,CAAC;IAAC,KAPvBC,MAAM,GAA8B,IAAIC,GAAG,CAAC,CAAC;IAAA,KAC7CC,YAAY,GAAG,CAAC;IAAA,KAChBC,UAAU,GAAG,CAAC;IAAA,KACdC,WAAW,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAKxC;EAEA,OAAOC,WAAWA,CAAA,EAAwB;IACxC,IAAI,CAACR,mBAAmB,CAACS,QAAQ,EAAE;MACjCT,mBAAmB,CAACS,QAAQ,GAAG,IAAIT,mBAAmB,CAAC,CAAC;IAC1D;IACA,OAAOA,mBAAmB,CAACS,QAAQ;EACrC;EAEAC,WAAWA,CACTC,KAAqB,EACrBC,OAA4B,GAAG,CAAC,CAAC,EACjCC,QAAuB,GAAGd,aAAa,CAACe,OAAO,EAC/CC,QAAuB,GAAGlB,aAAa,CAACmB,MAAM,EACtC;IACR,MAAMC,QAAQ,GAAG,SAAS,EAAE,IAAI,CAACZ,YAAY,IAAIa,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;;IAE7D;IACA,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAIC,SAAS,GAAG,eAAe;IAC/B,IAAIC,UAAU,GAAG,EAAE;IAEnB,IAAI,OAAOX,KAAK,KAAK,QAAQ,EAAE;MAC7BS,YAAY,GAAGT,KAAK;IACtB,CAAC,MAAM,IAAIA,KAAK,YAAYY,KAAK,EAAE;MACjCH,YAAY,GAAGT,KAAK,CAACa,OAAO;MAC5BH,SAAS,GAAGV,KAAK,CAACc,IAAI,IAAI,OAAO;MACjCH,UAAU,GAAGX,KAAK,CAACe,KAAK,IAAI,EAAE;IAChC,CAAC,MAAM,IAAIf,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7CS,YAAY,GAAGO,IAAI,CAACC,SAAS,CAACjB,KAAK,CAAC;MACpCU,SAAS,GAAIV,KAAK,CAASkB,IAAI,IAAKlB,KAAK,CAASc,IAAI,IAAI,aAAa;IACzE,CAAC,MAAM;MACLL,YAAY,GAAGU,MAAM,CAACnB,KAAK,CAAC;IAC9B;;IAEA;IACA,IAAIoB,iBAAsB,GAAG,CAAC,CAAC;IAC/B,IAAI;MACFA,iBAAiB,GACf,OAAOnB,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,GAC3Ce,IAAI,CAACK,KAAK,CAACL,IAAI,CAACC,SAAS,CAAChB,OAAO,CAAC,CAAC,GACnCA,OAAO;IACf,CAAC,CAAC,OAAOqB,kBAAkB,EAAE;MAC3BF,iBAAiB,GAAG;QAAEpB,KAAK,EAAE,6BAA6B;QAAEuB,QAAQ,EAAEJ,MAAM,CAAClB,OAAO;MAAE,CAAC;IACzF;IAEA,MAAMuB,aAA2B,GAAG;MAClCC,EAAE,EAAEnB,QAAQ;MACZO,OAAO,EAAEJ,YAAY;MACrBS,IAAI,EAAER,SAAS;MACfR,QAAQ;MACRE,QAAQ;MACRH,OAAO,EAAEmB,iBAAiB;MAC1BM,SAAS,EAAE,IAAInB,IAAI,CAAC,CAAC;MACrBQ,KAAK,EAAEJ,UAAU;MACjBgB,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC;IAED,IAAI,CAACpC,MAAM,CAACqC,GAAG,CAACvB,QAAQ,EAAEkB,aAAa,CAAC;;IAExC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,IAAI,CAACM,MAAM,CAAC9B,KAAK,CAAC,gBAAgB,EAAEwB,aAAa,CAAC;IAClD,IAAI,CAACO,IAAI,CAAC,gBAAgB,EAAEP,aAAa,CAAC;;IAE1C;IACA,IAAIpB,QAAQ,KAAKlB,aAAa,CAAC8C,GAAG,EAAE;MAClCC,UAAU,CAAC,MAAM,IAAI,CAACC,YAAY,CAAC5B,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;IACxD;;IAEA;IACA,IAAIF,QAAQ,KAAKlB,aAAa,CAACiD,QAAQ,EAAE;MACvC,IAAI,CAACJ,IAAI,CAAC,gBAAgB,EAAEP,aAAa,CAAC;IAC5C;IAEA,OAAOlB,QAAQ;EACjB;EAEA,MAAM8B,cAAcA,CAClBC,SAA2B,EAC3BpC,OAA4B,GAAG,CAAC,CAAC,EACjCC,QAAuB,GAAGd,aAAa,CAACkD,OAAO,EACnC;IACZ,IAAIC,SAAuB,GAAG,IAAI;IAElC,KAAK,IAAIC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,IAAI,IAAI,CAAC7C,UAAU,EAAE6C,QAAQ,EAAE,EAAE;MAC9D,IAAI;QACF,IAAIA,QAAQ,GAAG,CAAC,EAAE;UAChB,MAAMC,MAAM,GAAG,IAAI,CAAC7C,WAAW,CAAC8C,IAAI,CAACC,GAAG,CAACH,QAAQ,GAAG,CAAC,EAAE,IAAI,CAAC5C,WAAW,CAACgD,MAAM,GAAG,CAAC,CAAC,CAAC;UACpF,MAAM,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC;UACxB,IAAI,CAACX,MAAM,CAACgB,IAAI,CAAC,oBAAoB,EAAE;YAAEC,OAAO,EAAEP,QAAQ;YAAEK,KAAK,EAAEJ,MAAM;YAAExC;UAAQ,CAAC,CAAC;QACvF;QAEA,OAAO,MAAMoC,SAAS,CAAC,CAAC;MAC1B,CAAC,CAAC,OAAOrC,KAAK,EAAE;QACduC,SAAS,GAAGvC,KAAc;QAE1B,IAAIwC,QAAQ,KAAK,IAAI,CAAC7C,UAAU,EAAE;UAChC;UACA,MAAMW,QAAQ,GAAG,IAAI,CAACP,WAAW,CAC/BwC,SAAS,EACT;YAAE,GAAGtC,OAAO;YAAE+C,aAAa,EAAER,QAAQ,GAAG;UAAE,CAAC,EAC3CtC,QAAQ,EACRhB,aAAa,CAAC+D,IAChB,CAAC;UAED,MAAM,IAAIrC,KAAK,CAAC,0BAA0B4B,QAAQ,GAAG,CAAC,wBAAwBlC,QAAQ,EAAE,CAAC;QAC3F;MACF;IACF;IAEA,MAAMiC,SAAS;EACjB;EAEAL,YAAYA,CAACgB,OAAe,EAAEC,UAAmB,EAAW;IAC1D,MAAMC,MAAM,GAAG,IAAI,CAAC5D,MAAM,CAAC6D,GAAG,CAACH,OAAO,CAAC;IACvC,IAAI,CAACE,MAAM,EAAE;MACX,IAAI,CAACtB,MAAM,CAACwB,IAAI,CAAC,yCAAyC,EAAE;QAAEJ;MAAQ,CAAC,CAAC;MACxE,OAAO,KAAK;IACd;IAEAE,MAAM,CAACzB,QAAQ,GAAG,IAAI;IACrByB,MAAM,CAACnD,OAAO,CAASkD,UAAU,GAAGA,UAAU;IAC9CC,MAAM,CAACnD,OAAO,CAASsD,UAAU,GAAG,IAAIhD,IAAI,CAAC,CAAC;IAE/C,IAAI,CAACuB,MAAM,CAACgB,IAAI,CAAC,gBAAgB,EAAE;MAAEI,OAAO;MAAEC;IAAW,CAAC,CAAC;IAC3D,IAAI,CAACpB,IAAI,CAAC,gBAAgB,EAAEqB,MAAM,CAAC;IAEnC,OAAO,IAAI;EACb;EAEAI,QAAQA,CAACN,OAAe,EAAuB;IAC7C,OAAO,IAAI,CAAC1D,MAAM,CAAC6D,GAAG,CAACH,OAAO,CAAC,IAAI,IAAI;EACzC;EAEAO,SAASA,CACPC,OAKC,GAAG,CAAC,CAAC,EACU;IAChB,MAAMC,UAAU,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACrE,MAAM,CAACsE,MAAM,CAAC,CAAC,CAAC;IAEnD,OAAOH,UAAU,CAACI,MAAM,CAAC/D,KAAK,IAAI;MAChC,IAAI0D,OAAO,CAACxD,QAAQ,IAAIF,KAAK,CAACE,QAAQ,KAAKwD,OAAO,CAACxD,QAAQ,EAAE,OAAO,KAAK;MACzE,IAAIwD,OAAO,CAACtD,QAAQ,IAAIJ,KAAK,CAACI,QAAQ,KAAKsD,OAAO,CAACtD,QAAQ,EAAE,OAAO,KAAK;MACzE,IAAIsD,OAAO,CAAC/B,QAAQ,KAAKqC,SAAS,IAAIhE,KAAK,CAAC2B,QAAQ,KAAK+B,OAAO,CAAC/B,QAAQ,EAAE,OAAO,KAAK;MACvF,IAAI+B,OAAO,CAACO,KAAK,IAAIjE,KAAK,CAAC0B,SAAS,GAAGgC,OAAO,CAACO,KAAK,EAAE,OAAO,KAAK;MAClE,OAAO,IAAI;IACb,CAAC,CAAC;EACJ;EAEAC,aAAaA,CAAA,EAKX;IACA,MAAMC,OAAO,GAAGP,KAAK,CAACC,IAAI,CAAC,IAAI,CAACrE,MAAM,CAACsE,MAAM,CAAC,CAAC,CAAC;IAEhD,MAAMM,MAAM,GAAG;MACbC,KAAK,EAAEF,OAAO,CAACvB,MAAM;MACrBjB,QAAQ,EAAEwC,OAAO,CAACJ,MAAM,CAACO,CAAC,IAAIA,CAAC,CAAC3C,QAAQ,CAAC,CAACiB,MAAM;MAChD2B,UAAU,EAAE,CAAC,CAAkC;MAC/CC,UAAU,EAAE,CAAC;IACf,CAAC;;IAED;IACAC,MAAM,CAACX,MAAM,CAAC1E,aAAa,CAAC,CAACsF,OAAO,CAACC,GAAG,IAAKP,MAAM,CAACG,UAAU,CAACI,GAAG,CAAC,GAAG,CAAE,CAAC;IACzEF,MAAM,CAACX,MAAM,CAAC5E,aAAa,CAAC,CAACwF,OAAO,CAACE,GAAG,IAAKR,MAAM,CAACI,UAAU,CAACI,GAAG,CAAC,GAAG,CAAE,CAAC;;IAEzE;IACAT,OAAO,CAACO,OAAO,CAAC1E,KAAK,IAAI;MACvBoE,MAAM,CAACG,UAAU,CAACvE,KAAK,CAACE,QAAQ,CAAC,EAAE;MACnCkE,MAAM,CAACI,UAAU,CAACxE,KAAK,CAACI,QAAQ,CAAC,EAAE;IACrC,CAAC,CAAC;IAEF,OAAOgE,MAAM;EACf;EAEAS,WAAWA,CAACC,SAAgB,EAAU;IACpC,IAAIC,QAAQ,GAAG,CAAC;IAEhB,KAAK,MAAM,CAACtD,EAAE,EAAEzB,KAAK,CAAC,IAAI,IAAI,CAACR,MAAM,CAACwF,OAAO,CAAC,CAAC,EAAE;MAC/C,IAAI,CAACF,SAAS,IAAI9E,KAAK,CAAC0B,SAAS,GAAGoD,SAAS,EAAE;QAC7C,IAAI9E,KAAK,CAAC2B,QAAQ,IAAI3B,KAAK,CAACI,QAAQ,KAAKlB,aAAa,CAAC8C,GAAG,EAAE;UAC1D,IAAI,CAACxC,MAAM,CAACyF,MAAM,CAACxD,EAAE,CAAC;UACtBsD,QAAQ,EAAE;QACZ;MACF;IACF;IAEA,IAAI,CAACjD,MAAM,CAACgB,IAAI,CAAC,gBAAgB,EAAE;MAAEoC,OAAO,EAAEH,QAAQ;MAAED;IAAU,CAAC,CAAC;IACpE,OAAOC,QAAQ;EACjB;EAEQlC,KAAKA,CAACsC,EAAU,EAAiB;IACvC,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAIpD,UAAU,CAACoD,OAAO,EAAEF,EAAE,CAAC,CAAC;EACxD;;EAEA;EACAG,kBAAkBA,CAACtF,KAAY,EAAEC,OAA4B,GAAG,CAAC,CAAC,EAAU;IAC1E,OAAO,IAAI,CAACF,WAAW,CAACC,KAAK,EAAEC,OAAO,EAAEb,aAAa,CAACkD,OAAO,EAAEpD,aAAa,CAACmB,MAAM,CAAC;EACtF;EAEAkF,qBAAqBA,CAAC1E,OAAe,EAAEZ,OAA4B,GAAG,CAAC,CAAC,EAAU;IAChF,OAAO,IAAI,CAACF,WAAW,CAACc,OAAO,EAAEZ,OAAO,EAAEb,aAAa,CAACoG,UAAU,EAAEtG,aAAa,CAAC8C,GAAG,CAAC;EACxF;EAEAyD,eAAeA,CAACzF,KAAY,EAAEC,OAA4B,GAAG,CAAC,CAAC,EAAU;IACvE,OAAO,IAAI,CAACF,WAAW,CAACC,KAAK,EAAEC,OAAO,EAAEb,aAAa,CAACsG,cAAc,EAAExG,aAAa,CAAC+D,IAAI,CAAC;EAC3F;EAEA0C,mBAAmBA,CAAC3F,KAAY,EAAEC,OAA4B,GAAG,CAAC,CAAC,EAAU;IAC3E,OAAO,IAAI,CAACF,WAAW,CAACC,KAAK,EAAEC,OAAO,EAAEb,aAAa,CAACwG,MAAM,EAAE1G,aAAa,CAACiD,QAAQ,CAAC;EACvF;AACF;AAAChD,OAAA,CAAAE,mBAAA,GAAAA,mBAAA;AAAAJ,oBAAA,GA/OYI,mBAAmB;AAAnBA,mBAAmB,CACfS,QAAQ;AAAA,IAAA+F,QAAA,GAAA1G,OAAA,CAAA2G,OAAA,GAgPVzG,mBAAmB","ignoreList":[]}