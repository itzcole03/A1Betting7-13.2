{"version":3,"names":["_ensureHealthShape","require","_ensureMetricsShape","RobustApiClient","constructor","baseUrl","fetch","url","options","timeout","retries","fallbackData","fetchOptions","fullUrl","startsWith","attempt","controller","AbortController","timeoutId","setTimeout","abort","response","signal","clearTimeout","ok","status","success","error","data","statusText","contentType","headers","get","includes","json","jsonError","console","warn","html","text","isHtml","errorMessage","Error","message","Promise","resolve","method","post","body","JSON","stringify","exports","getBackendUrl","hostname","window","location","isCloudEnv","process","env","NODE_ENV","backendUrl","robustApi","fetchWithFallback","info","result","fetchHealthData","mockHealthData","services","api","cache","database","performance","cache_hit_rate","cache_type","uptime_seconds","ensureHealthShape","usedMock","result1","result2","fetchPerformanceStats","mockStats","api_performance","avg_time_ms","min_time_ms","max_time_ms","total_calls","cache_hits","errors","cache_performance","hits","misses","hit_rate","total_requests","system_info","optimization_level","caching_strategy","monitoring","rawData","normalizedMetrics","ensureMetricsShape","normalizedMockStats","_default","default"],"sources":["robustApi.ts"],"sourcesContent":["/**\r\n * Robust API Utility - Handles API errors gracefully\r\n * Prevents JSON parsing errors when APIs return HTML\r\n */\r\n\r\nimport { ensureHealthShape } from './ensureHealthShape';\r\nimport { ensureMetricsShape } from './ensureMetricsShape';\r\n\r\ninterface ApiResponse<T> {\r\n  success: boolean;\r\n  data?: T;\r\n  error?: string;\r\n  isHtml?: boolean;\r\n}\r\n\r\ninterface ApiOptions {\r\n  timeout?: number;\r\n  retries?: number;\r\n  fallbackData?: any;\r\n  headers?: Record<string, string>;\r\n}\r\n\r\nexport class RobustApiClient {\r\n  private baseUrl: string;\r\n\r\n  constructor(baseUrl = '') {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  async fetch<T>(url: string, options: RequestInit & ApiOptions = {}): Promise<ApiResponse<T>> {\r\n    const { timeout = 10000, retries = 2, fallbackData, ...fetchOptions } = options;\r\n\r\n    const fullUrl = url.startsWith('http') ? url : `${this.baseUrl}${url}`;\r\n\r\n    for (let attempt = 0; attempt <= retries; attempt++) {\r\n      try {\r\n        const controller = new AbortController();\r\n        const timeoutId = setTimeout(() => controller.abort(), timeout);\r\n\r\n        const response = await fetch(fullUrl, {\r\n          ...fetchOptions,\r\n          signal: controller.signal,\r\n        });\r\n\r\n        clearTimeout(timeoutId);\r\n\r\n        if (!response.ok) {\r\n          // Handle HTTP errors\r\n          if (response.status === 404) {\r\n            return {\r\n              success: false,\r\n              error: 'API endpoint not found',\r\n              data: fallbackData,\r\n            };\r\n          }\r\n\r\n          if (response.status >= 500) {\r\n            return {\r\n              success: false,\r\n              error: 'Server error - API temporarily unavailable',\r\n              data: fallbackData,\r\n            };\r\n          }\r\n\r\n          return {\r\n            success: false,\r\n            error: `HTTP ${response.status}: ${response.statusText}`,\r\n            data: fallbackData,\r\n          };\r\n        }\r\n\r\n        // Check content type to avoid JSON parsing errors\r\n        const contentType = response.headers.get('content-type') || '';\r\n\r\n        if (contentType.includes('application/json')) {\r\n          try {\r\n            const data = await response.json();\r\n            return {\r\n              success: true,\r\n              data,\r\n            };\r\n          } catch (jsonError) {\r\n            console.warn('Failed to parse JSON response:', jsonError);\r\n            return {\r\n              success: false,\r\n              error: 'Invalid JSON response from server',\r\n              data: fallbackData,\r\n            };\r\n          }\r\n        } else if (contentType.includes('text/html')) {\r\n          // Server returned HTML (likely an error page)\r\n          const html = await response.text();\r\n          console.warn('API returned HTML instead of JSON:', url);\r\n\r\n          return {\r\n            success: false,\r\n            error: 'API returned HTML instead of JSON - service may be down',\r\n            isHtml: true,\r\n            data: fallbackData,\r\n          };\r\n        } else {\r\n          // Try to parse as text\r\n          const text = await response.text();\r\n          return {\r\n            success: true,\r\n            data: text as unknown as T,\r\n          };\r\n        }\r\n      } catch (error) {\r\n        console.warn(`API attempt ${attempt + 1} failed for ${url}:`, error);\r\n\r\n        if (attempt === retries) {\r\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n\r\n          if (errorMessage.includes('abort')) {\r\n            return {\r\n              success: false,\r\n              error: 'Request timeout - API not responding',\r\n              data: fallbackData,\r\n            };\r\n          }\r\n\r\n          return {\r\n            success: false,\r\n            error: `Network error: ${errorMessage}`,\r\n            data: fallbackData,\r\n          };\r\n        }\r\n\r\n        // Wait before retry\r\n        await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)));\r\n      }\r\n    }\r\n\r\n    return {\r\n      success: false,\r\n      error: 'Max retries exceeded',\r\n      data: fallbackData,\r\n    };\r\n  }\r\n\r\n  async get<T>(url: string, options?: ApiOptions): Promise<ApiResponse<T>> {\r\n    return this.fetch<T>(url, { ...options, method: 'GET' });\r\n  }\r\n\r\n  async post<T>(url: string, data?: any, options?: ApiOptions): Promise<ApiResponse<T>> {\r\n    return this.fetch<T>(url, {\r\n      ...options,\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options?.headers,\r\n      },\r\n      body: data ? JSON.stringify(data) : null,\r\n    });\r\n  }\r\n}\r\n\r\n// Detect backend URL based on environment\r\nconst getBackendUrl = () => {\r\n  // Check if we're in a cloud environment (like fly.dev, vercel, netlify, etc.)\r\n  const hostname = window.location.hostname;\r\n  const isCloudEnv =\r\n    hostname.includes('.fly.dev') ||\r\n    hostname.includes('.vercel.app') ||\r\n    hostname.includes('.netlify.app') ||\r\n    hostname.includes('.herokuapp.com') ||\r\n    !hostname.includes('localhost');\r\n\r\n  if (isCloudEnv) {\r\n    // In cloud environments, don't try to fetch from localhost\r\n    // Use relative URLs or disable API calls entirely\r\n    return null; // This will trigger mock data mode\r\n  }\r\n\r\n  // Only try localhost in local development\r\n  // Avoid import.meta.env in test environment (Jest)\r\n  if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\r\n    return 'http://localhost:8000';\r\n  }\r\n\r\n  return '';\r\n};\r\n\r\n// Global instance with null check\r\nconst backendUrl = getBackendUrl();\r\nexport const robustApi = backendUrl ? new RobustApiClient(backendUrl) : null;\r\n\r\n// Convenience functions with fallback data\r\nexport const fetchWithFallback = async <T>(\r\n  url: string,\r\n  fallbackData: T,\r\n  options?: ApiOptions\r\n): Promise<T> => {\r\n  // If no API client available, return fallback immediately\r\n  if (!robustApi) {\r\n    console.info(`No API client available for ${url}, using fallback data`);\r\n    return fallbackData;\r\n  }\r\n\r\n  try {\r\n    const result = await robustApi.get<T>(url, { ...options, fallbackData });\r\n    return result.data || fallbackData;\r\n  } catch (error) {\r\n    console.warn(`API call to ${url} failed, using fallback data:`, error);\r\n    return fallbackData;\r\n  }\r\n};\r\n\r\n// Health check with mock data\r\nexport const fetchHealthData = async () => {\r\n  const mockHealthData = {\r\n    status: 'healthy',\r\n    services: {\r\n      api: 'operational',\r\n      cache: 'operational',\r\n      database: 'operational',\r\n    },\r\n    performance: {\r\n      cache_hit_rate: 85.2,\r\n      cache_type: 'memory',\r\n    },\r\n    uptime_seconds: 3600,\r\n  };\r\n\r\n  // If no backend URL configured (cloud environment), use mock data immediately\r\n  if (!robustApi) {\r\n    // eslint-disable-next-line no-console\r\n    console.info('Running in cloud environment - using mock health data');\r\n    return ensureHealthShape(mockHealthData, { usedMock: true });\r\n  }\r\n\r\n  try {\r\n    // Try both health endpoints\r\n    const result1 = await robustApi.get('/health', { fallbackData: mockHealthData, timeout: 3000 });\r\n    if (result1.success) {\r\n      // Defensive: result1.data may be undefined or nested\r\n      if (result1.data && typeof result1.data === 'object' && 'data' in result1.data) {\r\n        return ensureHealthShape((result1.data as Record<string, unknown>).data || result1.data);\r\n      }\r\n      return ensureHealthShape(result1.data);\r\n    }\r\n\r\n    const result2 = await robustApi.get('/api/health', {\r\n      fallbackData: mockHealthData,\r\n      timeout: 3000,\r\n    });\r\n    if (result2.success) {\r\n      return ensureHealthShape(result2.data);\r\n    }\r\n  } catch (error) {\r\n    // eslint-disable-next-line no-console\r\n    console.warn('Health API calls failed, using mock data:', error);\r\n  }\r\n\r\n  return ensureHealthShape(mockHealthData, { usedMock: true });\r\n};\r\n\r\n// Performance stats with mock data\r\nexport const fetchPerformanceStats = async () => {\r\n  const mockStats = {\r\n    api_performance: {\r\n      '/health': {\r\n        avg_time_ms: 45.2,\r\n        min_time_ms: 23.1,\r\n        max_time_ms: 156.8,\r\n        total_calls: 247,\r\n        cache_hits: 89,\r\n        errors: 2,\r\n      },\r\n      '/mlb/games': {\r\n        avg_time_ms: 127.3,\r\n        min_time_ms: 45.2,\r\n        max_time_ms: 342.1,\r\n        total_calls: 156,\r\n        cache_hits: 134,\r\n        errors: 1,\r\n      },\r\n    },\r\n    cache_performance: {\r\n      cache_type: 'memory',\r\n      hits: 312,\r\n      misses: 67,\r\n      errors: 3,\r\n      hit_rate: 82.3,\r\n      total_requests: 379,\r\n    },\r\n    system_info: {\r\n      optimization_level: 'Phase 4 Enhanced',\r\n      caching_strategy: 'Cloud Demo Mode',\r\n      monitoring: 'Real-time Performance Tracking',\r\n    },\r\n  };\r\n\r\n  // If no backend URL configured (cloud environment), use mock data immediately\r\n  if (!robustApi) {\r\n    console.info('Running in cloud environment - using mock performance data');\r\n    return { data: mockStats };\r\n  }\r\n\r\n  try {\r\n    const result = await robustApi.get('/performance/stats', {\r\n      fallbackData: { data: mockStats },\r\n      timeout: 3000,\r\n    });\r\n\r\n    if (result.success) {\r\n      // Apply metrics normalization to prevent total_requests errors\r\n      const rawData = result.data && typeof result.data === 'object' && 'data' in result.data \r\n        ? (result.data as { data: unknown }).data \r\n        : result.data;\r\n      const normalizedMetrics = ensureMetricsShape(rawData);\r\n      return { data: normalizedMetrics };\r\n    }\r\n  } catch (error) {\r\n    // eslint-disable-next-line no-console\r\n    console.warn('Performance stats API failed, using mock data:', error);\r\n  }\r\n\r\n  // Apply normalization to mock data as well\r\n  const normalizedMockStats = ensureMetricsShape(mockStats);\r\n  return { data: normalizedMockStats };\r\n};\r\n\r\nexport default robustApi;\r\n"],"mappings":"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","ignoreList":[]}