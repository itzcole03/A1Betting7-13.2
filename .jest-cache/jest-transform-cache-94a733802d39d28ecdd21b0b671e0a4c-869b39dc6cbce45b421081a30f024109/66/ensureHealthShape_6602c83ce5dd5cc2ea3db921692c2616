54ee02fb52e6e1a1ea8a6080ddfc5d42
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureHealthShape = ensureHealthShape;
var _validateHealthResponse = require("./validateHealthResponse");
var _oneTimeLog = require("./oneTimeLog");
/**
 * Clean, single implementation of ensureHealthShape.
 * Normalizes health responses and avoids direct property access on unknown.
 */

const isRecord = x => typeof x === 'object' && x !== null;
const mapStatus = s => {
  if (s === 'ok' || s === 'healthy') return 'healthy';
  if (s === 'degraded') return 'degraded';
  if (s === 'down' || s === 'unhealthy' || s === 'error') return 'unhealthy';
  return 'unknown';
};
const toSafeNumber = v => {
  if (typeof v === 'boolean') return v ? 1 : 0;
  const n = Number(v);
  if (!Number.isFinite(n)) return 0;
  return n;
};
function ensureHealthShape(raw, options) {
  (0, _oneTimeLog.oneTimeLog)('ensureHealthShape-deprecated', () => console.info('[DEPRECATED] ensureHealthShape is deprecated.'));
  try {
    const validated = (0, _validateHealthResponse.validateHealthResponse)(raw);
    const vRec = isRecord(validated) ? validated : {};
    const perf = isRecord(vRec.performance) ? vRec.performance : undefined;
    const cache = isRecord(vRec.cache) ? vRec.cache : undefined;
    const infra = isRecord(vRec.infrastructure) ? vRec.infrastructure : undefined;
    const perfHitMain = perf ? perf.cache_hit_rate : undefined;
    const perfHitLegacy = perf ? perf.hit_rate : undefined;
    const cacheHitAlt = cache ? cache.hit_rate : undefined;
    const infraHit = infra && isRecord(infra.cache) ? infra.cache.hit_rate_percent : undefined;
    const computedRaw = perfHitMain ?? perfHitLegacy ?? cacheHitAlt ?? infraHit ?? 0;
    const computedHitRate = toSafeNumber(computedRaw);

    // mappedHitRate heuristics using original raw when possible
    let rawMappedHitRate = false;
    try {
      if (isRecord(raw)) {
        const rawRec = raw;
        const rPerf = isRecord(rawRec.performance) ? rawRec.performance : undefined;
        const rCache = isRecord(rawRec.cache) ? rawRec.cache : undefined;
        const rInfraCache = isRecord(rawRec.infrastructure) && isRecord(rawRec.infrastructure.cache) ? rawRec.infrastructure.cache : undefined;
        const hasPerfCache = !!(rPerf && rPerf.cache_hit_rate !== undefined);
        const hasPerfHit = !!(rPerf && rPerf.hit_rate !== undefined);
        const hasCacheHit = !!(rCache && rCache.hit_rate !== undefined);
        const hasInfraHit = !!(rInfraCache && rInfraCache.hit_rate_percent !== undefined);
        rawMappedHitRate = !hasPerfCache && (hasPerfHit || hasCacheHit || hasInfraHit);
      }
    } catch {
      // ignore
    }
    const overallStatus = vRec.overall_status;
    const servicesList = vRec.services;
    const findServiceStatus = name => {
      if (Array.isArray(servicesList)) {
        const arr = servicesList;
        const found = arr.find(s => s && typeof s === 'object' && 'name' in s && s.name === name);
        return found ? found.status : undefined;
      }
      return undefined;
    };
    return {
      status: mapStatus(overallStatus),
      services: {
        api: mapStatus(findServiceStatus('api')) || 'unknown',
        cache: mapStatus(infra && isRecord(infra.cache) ? infra.cache.status : undefined) || 'unknown',
        database: mapStatus(infra && isRecord(infra.database) ? infra.database.status : undefined) || 'unknown'
      },
      performance: {
        cache_hit_rate: computedHitRate,
        cache_type: isRecord(vRec.cache) ? 'unified' : 'unknown'
      },
      uptime_seconds: toSafeNumber(vRec.uptime_seconds),
      originFlags: {
        hadCacheHitRate: !!(perfHitMain !== undefined && perfHitMain !== null) || !!(perfHitLegacy !== undefined && perfHitLegacy !== null) || !!(cacheHitAlt !== undefined && cacheHitAlt !== null) || !!(infraHit !== undefined && infraHit !== null),
        mappedHitRate: rawMappedHitRate,
        usedMock: options?.usedMock || false
      }
    };
  } catch (error) {
    // Fallback: tolerant parsing for legacy shapes
    (0, _oneTimeLog.oneTimeLog)('ensureHealthShape-fallback', () => console.warn('[ensureHealthShape] Validation failed, using fallback data:', error));
    if (raw && typeof raw === 'object') {
      const rawObj = raw;
      const mapLegacyStatus = val => {
        if (val === true || val === 1 || String(val).toLowerCase() === '1' || String(val).toLowerCase() === 'true') return 'healthy';
        if (val === false || val === 0 || String(val).toLowerCase() === '0' || String(val).toLowerCase() === 'false') return 'unhealthy';
        if (typeof val === 'string') {
          const s = val.toLowerCase();
          if (s === 'healthy' || s === 'ok') return 'healthy';
          if (s === 'unhealthy' || s === 'down' || s === 'error') return 'unhealthy';
          if (s === 'degraded' || s === 'warning') return 'degraded';
          return s;
        }
        return 'unknown';
      };
      const status = rawObj.status !== undefined ? mapLegacyStatus(rawObj.status) : 'unknown';
      const servicesRaw = rawObj.services ?? {};
      const servicesRec = isRecord(servicesRaw) ? servicesRaw : {};
      const servicesOut = {
        api: servicesRec['api'] !== undefined ? mapLegacyStatus(servicesRec['api']) : 'unknown',
        cache: servicesRec['cache'] !== undefined ? mapLegacyStatus(servicesRec['cache']) : 'unknown',
        database: servicesRec['database'] !== undefined ? mapLegacyStatus(servicesRec['database']) : 'unknown'
      };
      const perfRec = isRecord(rawObj.performance) ? rawObj.performance : undefined;
      const infraRec = isRecord(rawObj.infrastructure) ? rawObj.infrastructure : undefined;
      const infraCacheRec = infraRec && isRecord(infraRec.cache) ? infraRec.cache : undefined;
      let hitRate = undefined;
      if (perfRec && perfRec.cache_hit_rate !== undefined) hitRate = perfRec.cache_hit_rate;else if (perfRec && perfRec.hit_rate !== undefined) hitRate = perfRec.hit_rate;else if (infraCacheRec && infraCacheRec.hit_rate_percent !== undefined) hitRate = infraCacheRec.hit_rate_percent;
      const cacheHit = (() => {
        if (typeof hitRate === 'boolean') return hitRate ? 1 : 0;
        const n = Number(hitRate);
        if (!Number.isFinite(n)) return 0;
        return n;
      })();
      return {
        status,
        services: servicesOut,
        performance: {
          cache_hit_rate: cacheHit,
          cache_type: rawObj.cache ? 'unified' : 'unknown'
        },
        uptime_seconds: (() => {
          const n = Number(rawObj.uptime_seconds || 0);
          return Number.isFinite(n) ? n : 0;
        })(),
        originFlags: {
          hadCacheHitRate: !!hitRate,
          mappedHitRate: !!(perfRec && perfRec.hit_rate !== undefined) || !!(infraCacheRec && infraCacheRec.hit_rate_percent !== undefined) && !(perfRec && perfRec.cache_hit_rate !== undefined),
          usedMock: options?.usedMock || true
        }
      };
    }
    return {
      status: 'unknown',
      services: {
        api: 'unknown',
        cache: 'unknown',
        database: 'unknown'
      },
      performance: {
        cache_hit_rate: 0,
        cache_type: 'unknown'
      },
      uptime_seconds: 0,
      originFlags: {
        hadCacheHitRate: false,
        mappedHitRate: false,
        usedMock: options?.usedMock || true
      }
    };
  }
}
// Trimmed: keep only the single clean implementation above.
//# sourceMappingURL=data:application/json;charset=utf-8;base64,