50dae8b6ec90455a5e369f7273ff179f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _lucideReact = require("lucide-react");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const StatusIndicator = ({
  status,
  message,
  size = 'md'
}) => {
  const getStatusConfig = () => {
    switch (status) {
      case 'healthy':
        return {
          icon: _lucideReact.CheckCircle,
          color: 'text-green-400',
          bgColor: 'bg-green-400/20',
          borderColor: 'border-green-400/30',
          text: message || 'All systems operational'
        };
      case 'warning':
        return {
          icon: _lucideReact.AlertTriangle,
          color: 'text-yellow-400',
          bgColor: 'bg-yellow-400/20',
          borderColor: 'border-yellow-400/30',
          text: message || 'Some issues detected'
        };
      case 'error':
        return {
          icon: _lucideReact.XCircle,
          color: 'text-red-400',
          bgColor: 'bg-red-400/20',
          borderColor: 'border-red-400/30',
          text: message || 'Service unavailable'
        };
      case 'loading':
        return {
          icon: _lucideReact.Activity,
          color: 'text-blue-400',
          bgColor: 'bg-blue-400/20',
          borderColor: 'border-blue-400/30',
          text: message || 'Loading...'
        };
      default:
        return {
          icon: _lucideReact.Activity,
          color: 'text-gray-400',
          bgColor: 'bg-gray-400/20',
          borderColor: 'border-gray-400/30',
          text: message || 'Unknown status'
        };
    }
  };
  const getSizeClasses = () => {
    switch (size) {
      case 'sm':
        return {
          container: 'px-2 py-1',
          icon: 'w-3 h-3',
          text: 'text-xs'
        };
      case 'lg':
        return {
          container: 'px-4 py-3',
          icon: 'w-6 h-6',
          text: 'text-base'
        };
      default:
        return {
          container: 'px-3 py-2',
          icon: 'w-4 h-4',
          text: 'text-sm'
        };
    }
  };
  const config = getStatusConfig();
  const sizeClasses = getSizeClasses();
  const Icon = config.icon;
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: `
      inline-flex items-center space-x-2 rounded-lg border
      ${config.bgColor} ${config.borderColor} ${sizeClasses.container}
    `,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Icon, {
      className: `
        ${config.color} ${sizeClasses.icon}
        ${status === 'loading' ? 'animate-pulse' : ''}
      `
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
      className: `${config.color} ${sizeClasses.text} font-medium`,
      children: config.text
    })]
  });
};
var _default = exports.default = StatusIndicator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,