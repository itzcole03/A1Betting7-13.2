dc1051d979052c06c9ba879155217d6e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLazyComponent = createLazyComponent;
exports.preloadLazyComponent = preloadLazyComponent;
exports.withLazyLoading = withLazyLoading;
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _enhancedLogger = require("./enhancedLogger");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Creates a lazy-loaded component with error handling and retry logic
 */
function createLazyComponent(importFn, options = {}) {
  const {
    fallback = () => /*#__PURE__*/React.createElement('div', {
      className: 'text-white p-8'
    }, 'Loading...'),
    retryDelay = 1000,
    maxRetries = 3
  } = options;

  // Create a wrapper around the import function to handle retries
  const importWithRetry = async (attempt = 1) => {
    try {
      return await importFn();
    } catch (error) {
      if (attempt < maxRetries) {
        _enhancedLogger.enhancedLogger.warn('lazyLoading', 'importWithRetry', `Failed to load component (attempt ${attempt}/${maxRetries}). Retrying in ${retryDelay}ms...`, {
          attempt,
          maxRetries
        }, error);
        await new Promise(resolve => setTimeout(resolve, retryDelay));
        return importWithRetry(attempt + 1);
      }
      _enhancedLogger.enhancedLogger.error('lazyLoading', 'importWithRetry', 'Failed to load component after maximum retries', undefined, error);
      throw error;
    }
  };
  const LazyComponent = /*#__PURE__*/(0, _react.lazy)(() => importWithRetry());
  const WrappedComponent = props => {
    const [hasError, setHasError] = React.useState(false);

    // Reset error state when props change
    React.useEffect(() => {
      setHasError(false);
    }, [props]);
    if (hasError) {
      // Return a simple error fallback (createElement to avoid JSX in .ts file)
      return /*#__PURE__*/React.createElement('div', {
        className: 'text-red-400 p-8 text-center'
      }, 'Failed to load component. Please refresh the page.');
    }
    const FallbackComponent = typeof fallback === 'function' ? fallback : () => /*#__PURE__*/React.createElement(fallback);
    const LazyAsComponent = LazyComponent;

    // Forward props to the lazy component with proper typing using a function component
    function Forwarder(p) {
      // cast to any for React.createElement to satisfy overloads
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      return /*#__PURE__*/React.createElement(LazyAsComponent, p);
    }
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_react.Suspense, {
      fallback: /*#__PURE__*/React.createElement(FallbackComponent)
    },
    /*#__PURE__*/
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    React.createElement(Forwarder, props)));
  };
  const lazyDisplayName = LazyComponent.displayName || 'Unknown';
  WrappedComponent.displayName = `LazyComponent(${lazyDisplayName})`;
  return WrappedComponent;
}

/**
 * Higher-order component for adding lazy loading to existing components
 */
function withLazyLoading(Component, options = {}) {
  return createLazyComponent(() => Promise.resolve({
    default: Component
  }), options);
}

/**
 * Preload a lazy component
 */
function preloadLazyComponent(importFn) {
  return importFn().catch(error => {
    _enhancedLogger.enhancedLogger.warn('lazyLoading', 'preloadLazyComponent', 'Failed to preload component', undefined, error);
    throw error;
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,