{"version":3,"names":["_getJestObj","mock","onCLS","jest","fn","onINP","onLCP","onFCP","onTTFB","_performanceMetrics","require","describe","mockPerformance","beforeEach","__resetPerformanceGuardsForTests","getEntriesByType","now","Object","defineProperty","window","value","writable","clearAllMocks","afterEach","restoreAllMocks","it","mockNavEntry","startTime","duration","domContentLoadedEventEnd","type","mockReturnValue","result","getNavigationTiming","expect","toEqual","domContentLoaded","firstPaint","undefined","firstContentfulPaint","totalLoadTime","timestamp","any","Number","source","toBeGreaterThan","toBe","mockTiming","navigationStart","loadEventEnd","toBeNull","mockImplementation","Error","mockOnMetric","mockClear","result1","initWebVitals","onMetric","result2","toHaveBeenCalledTimes","force","lcpCallback","calls","name","rating","lcpCalls","filter","call","toHaveLength","clsCallback","toHaveBeenCalledWith","objectContaining","includeNavigationMetrics","not","toThrow","fcpCallback","navigationType","Infinity","NaN"],"sources":["performanceMetrics.test.ts"],"sourcesContent":["import { \r\n  getNavigationTiming, \r\n  initWebVitals, \r\n  __resetPerformanceGuardsForTests,\r\n  NavigationTimingMetrics,\r\n  WebVitalMetricRecord \r\n} from '../performanceMetrics';\r\n\r\n// Mock web-vitals module\r\njest.mock('web-vitals', () => ({\r\n  onCLS: jest.fn(),\r\n  onINP: jest.fn(), \r\n  onLCP: jest.fn(),\r\n  onFCP: jest.fn(),\r\n  onTTFB: jest.fn(),\r\n}));\r\n\r\ndescribe('Performance Metrics', () => {\r\n  let mockPerformance: jest.Mocked<Performance>;\r\n\r\n  beforeEach(() => {\r\n    // Reset guards before each test\r\n    __resetPerformanceGuardsForTests();\r\n\r\n    // Create mock performance object\r\n    mockPerformance = {\r\n      getEntriesByType: jest.fn(),\r\n      now: jest.fn(),\r\n    } as any;\r\n\r\n    // Replace global performance\r\n    Object.defineProperty(window, 'performance', {\r\n      value: mockPerformance,\r\n      writable: true,\r\n    });\r\n\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.restoreAllMocks();\r\n  });\r\n\r\n  describe('getNavigationTiming', () => {\r\n    it('should return positive totalLoadTime from PerformanceNavigationTiming', () => {\r\n      const mockNavEntry = {\r\n        startTime: 0,\r\n        duration: 1234.5,\r\n        domContentLoadedEventEnd: 800,\r\n        type: 'navigate'\r\n      } as PerformanceNavigationTiming;\r\n\r\n      mockPerformance.getEntriesByType.mockReturnValue([mockNavEntry]);\r\n\r\n      const result = getNavigationTiming();\r\n\r\n      expect(result).toEqual({\r\n        startTime: 0,\r\n        domContentLoaded: 800,\r\n        firstPaint: undefined,\r\n        firstContentfulPaint: undefined,\r\n        totalLoadTime: 1234.5,\r\n        type: 'navigate',\r\n        timestamp: expect.any(Number),\r\n        source: 'navigation-timing'\r\n      });\r\n      expect(result!.totalLoadTime).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should clamp negative duration to 0', () => {\r\n      const mockNavEntry = {\r\n        startTime: 0,\r\n        duration: -1000, // This should never happen, but let's test robustness\r\n        domContentLoadedEventEnd: 500,\r\n        type: 'navigate'\r\n      } as PerformanceNavigationTiming;\r\n\r\n      mockPerformance.getEntriesByType.mockReturnValue([mockNavEntry]);\r\n\r\n      const result = getNavigationTiming();\r\n\r\n      expect(result!.totalLoadTime).toBe(0);\r\n      expect(result!.source).toBe('navigation-timing');\r\n    });\r\n\r\n    it('should fallback to legacy timing when modern API unavailable', () => {\r\n      // Mock no modern navigation entries\r\n      mockPerformance.getEntriesByType.mockReturnValue([]);\r\n\r\n      // Mock legacy timing\r\n      const mockTiming = {\r\n        navigationStart: 1000000,\r\n        domContentLoadedEventEnd: 1001000,\r\n        loadEventEnd: 1001500,\r\n      };\r\n\r\n      Object.defineProperty(mockPerformance, 'timing', {\r\n        value: mockTiming,\r\n        writable: true,\r\n      });\r\n\r\n      const result = getNavigationTiming();\r\n\r\n      expect(result).toEqual({\r\n        startTime: 0,\r\n        domContentLoaded: 1000,\r\n        firstPaint: undefined,\r\n        firstContentfulPaint: undefined,\r\n        totalLoadTime: 1500,\r\n        type: 'navigate',\r\n        timestamp: expect.any(Number),\r\n        source: 'legacy-timing'\r\n      });\r\n    });\r\n\r\n    it('should return null when no timing APIs available', () => {\r\n      mockPerformance.getEntriesByType.mockReturnValue([]);\r\n      \r\n      const result = getNavigationTiming();\r\n\r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should handle exceptions gracefully', () => {\r\n      mockPerformance.getEntriesByType.mockImplementation(() => {\r\n        throw new Error('API error');\r\n      });\r\n\r\n      const result = getNavigationTiming();\r\n\r\n      expect(result).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('initWebVitals', () => {\r\n    const { onCLS, onINP, onLCP, onFCP, onTTFB } = require('web-vitals');\r\n    let mockOnMetric: jest.Mock;\r\n\r\n    beforeEach(() => {\r\n      mockOnMetric = jest.fn();\r\n      onCLS.mockClear();\r\n      onINP.mockClear();\r\n      onLCP.mockClear();\r\n      onFCP.mockClear();\r\n      onTTFB.mockClear();\r\n    });\r\n\r\n    it('should initialize web vitals only once by default', () => {\r\n      const result1 = initWebVitals({ onMetric: mockOnMetric });\r\n      const result2 = initWebVitals({ onMetric: mockOnMetric });\r\n\r\n      expect(result1).toBe(true);  // First initialization\r\n      expect(result2).toBe(false); // Second call should be ignored\r\n\r\n      // Should only register listeners once\r\n      expect(onLCP).toHaveBeenCalledTimes(1);\r\n      expect(onCLS).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should allow re-initialization when force=true', () => {\r\n      initWebVitals({ onMetric: mockOnMetric });\r\n      const result = initWebVitals({ onMetric: mockOnMetric, force: true });\r\n\r\n      expect(result).toBe(true);\r\n      expect(onLCP).toHaveBeenCalledTimes(2);\r\n    });\r\n\r\n    it('should prevent duplicate LCP emissions', () => {\r\n      initWebVitals({ onMetric: mockOnMetric });\r\n\r\n      // Simulate LCP callbacks\r\n      const lcpCallback = onLCP.mock.calls[0][0];\r\n      \r\n      lcpCallback({ name: 'LCP', value: 1000, rating: 'good' });\r\n      lcpCallback({ name: 'LCP', value: 1200, rating: 'needs-improvement' });\r\n\r\n      // Should only call onMetric once for LCP\r\n      const lcpCalls = mockOnMetric.mock.calls.filter(call => call[0].name === 'LCP');\r\n      expect(lcpCalls).toHaveLength(1);\r\n      expect(lcpCalls[0][0].value).toBe(1000);\r\n    });\r\n\r\n    it('should clamp negative metric values to 0', () => {\r\n      initWebVitals({ onMetric: mockOnMetric });\r\n\r\n      const clsCallback = onCLS.mock.calls[0][0];\r\n      clsCallback({ name: 'CLS', value: -0.5 }); // Negative CLS shouldn't happen but test robustness\r\n\r\n      expect(mockOnMetric).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          name: 'CLS',\r\n          value: 0,\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should include navigation metrics when requested', () => {\r\n      const mockNavEntry = {\r\n        startTime: 0,\r\n        duration: 1500,\r\n        domContentLoadedEventEnd: 1000,\r\n        type: 'navigate'\r\n      } as PerformanceNavigationTiming;\r\n\r\n      mockPerformance.getEntriesByType.mockReturnValue([mockNavEntry]);\r\n\r\n      initWebVitals({ \r\n        onMetric: mockOnMetric, \r\n        includeNavigationMetrics: true \r\n      });\r\n\r\n      // Should emit navigation metrics\r\n      expect(mockOnMetric).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          name: 'navigation-total-load-time',\r\n          value: 1500,\r\n        })\r\n      );\r\n\r\n      expect(mockOnMetric).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          name: 'navigation-dom-content-loaded',\r\n          value: 1000,\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should work without onMetric callback', () => {\r\n      expect(() => {\r\n        initWebVitals({});\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('should add navigation type to web vital records', () => {\r\n      const mockNavEntry = {\r\n        type: 'reload'\r\n      } as PerformanceNavigationTiming;\r\n\r\n      mockPerformance.getEntriesByType.mockReturnValue([mockNavEntry]);\r\n\r\n      initWebVitals({ onMetric: mockOnMetric });\r\n\r\n      // Trigger a metric callback\r\n      const fcpCallback = onFCP.mock.calls[0][0];\r\n      fcpCallback({ name: 'FCP', value: 800 });\r\n\r\n      expect(mockOnMetric).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          navigationType: 'reload',\r\n          timestamp: expect.any(Number),\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Performance timing edge cases', () => {\r\n    it('should handle undefined/null duration values', () => {\r\n      const mockNavEntry = {\r\n        startTime: 0,\r\n        duration: undefined,\r\n        domContentLoadedEventEnd: 500,\r\n        type: 'navigate'\r\n      } as any;\r\n\r\n      mockPerformance.getEntriesByType.mockReturnValue([mockNavEntry]);\r\n\r\n      const result = getNavigationTiming();\r\n\r\n      expect(result!.totalLoadTime).toBe(0);\r\n    });\r\n\r\n    it('should handle infinite duration values', () => {\r\n      const mockNavEntry = {\r\n        startTime: 0,\r\n        duration: Infinity,\r\n        domContentLoadedEventEnd: 500,\r\n        type: 'navigate'\r\n      } as PerformanceNavigationTiming;\r\n\r\n      mockPerformance.getEntriesByType.mockReturnValue([mockNavEntry]);\r\n\r\n      const result = getNavigationTiming();\r\n\r\n      expect(result!.totalLoadTime).toBe(0);\r\n    });\r\n\r\n    it('should handle NaN duration values', () => {\r\n      const mockNavEntry = {\r\n        startTime: 0,\r\n        duration: NaN,\r\n        domContentLoadedEventEnd: 500,\r\n        type: 'navigate'\r\n      } as PerformanceNavigationTiming;\r\n\r\n      mockPerformance.getEntriesByType.mockReturnValue([mockNavEntry]);\r\n\r\n      const result = getNavigationTiming();\r\n\r\n      expect(result!.totalLoadTime).toBe(0);\r\n    });\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]}