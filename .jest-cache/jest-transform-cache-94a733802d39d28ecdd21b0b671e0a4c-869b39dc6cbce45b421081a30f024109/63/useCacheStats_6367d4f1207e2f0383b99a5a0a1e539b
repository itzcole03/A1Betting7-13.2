df011c7c99097d91a103587db2405ad7
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNamespaceCacheStats = exports.useCacheStats = exports.useCacheHealth = exports.formatCacheStats = void 0;
var _react = require("react");
/**
 * Cache Statistics React Hook
 * 
 * Provides comprehensive cache observability with:
 * - Automatic polling (30s dev, 60s prod) with configurable intervals
 * - Exponential backoff retry logic for failed requests
 * - Environment-aware configuration and error handling
 * - TypeScript interfaces for all cache statistics
 * - Loading and error states management
 * 
 * Usage:
 * ```typescript
 * const { data, loading, error, refetch } = useCacheStats({
 *   pollInterval: 30000, // Optional override
 *   maxRetries: 5        // Optional retry limit
 * });
 * ```
 */

// Cache statistics interfaces

// Hook configuration interface

// Hook return interface

// Default configuration
const DEFAULT_CONFIG = {
  DEV_POLL_INTERVAL: 30000,
  // 30 seconds in development
  PROD_POLL_INTERVAL: 60000,
  // 60 seconds in production
  MAX_RETRIES: 5,
  RETRY_BACKOFF_BASE: 1000,
  // Base retry delay (1 second)
  RETRY_BACKOFF_MAX: 30000 // Max retry delay (30 seconds)
};

// Environment detection
const isDevelopment = () => {
  return process.env.NODE_ENV === 'development' || window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
};

// Exponential backoff calculation
const calculateBackoffDelay = attempt => {
  const delay = DEFAULT_CONFIG.RETRY_BACKOFF_BASE * Math.pow(2, attempt);
  const jitter = Math.random() * 0.1 * delay; // Â±10% jitter
  return Math.min(delay + jitter, DEFAULT_CONFIG.RETRY_BACKOFF_MAX);
};

/**
 * Custom hook for cache statistics with polling and error handling
 */
const useCacheStats = (options = {}) => {
  // Configuration with useMemo to prevent dependency changes
  const config = (0, _react.useMemo)(() => ({
    pollInterval: options.pollInterval || (isDevelopment() ? DEFAULT_CONFIG.DEV_POLL_INTERVAL : DEFAULT_CONFIG.PROD_POLL_INTERVAL),
    maxRetries: options.maxRetries || DEFAULT_CONFIG.MAX_RETRIES,
    enabled: options.enabled !== false,
    onError: options.onError
  }), [options.pollInterval, options.maxRetries, options.enabled, options.onError]);

  // State management
  const [data, setData] = (0, _react.useState)(null);
  const [loading, setLoading] = (0, _react.useState)(true);
  const [error, setError] = (0, _react.useState)(null);
  const [lastUpdated, setLastUpdated] = (0, _react.useState)(null);
  const [retryCount, setRetryCount] = (0, _react.useState)(0);

  // Refs for cleanup and polling control
  const pollTimeoutRef = (0, _react.useRef)(null);
  const retryTimeoutRef = (0, _react.useRef)(null);
  const abortControllerRef = (0, _react.useRef)(null);
  const mountedRef = (0, _react.useRef)(true);

  // Fetch function with retry logic
  const fetchCacheStats = (0, _react.useCallback)(async (isRetry = false) => {
    if (!mountedRef.current) return;
    try {
      // Cancel any ongoing request
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }

      // Create new abort controller for this request
      abortControllerRef.current = new AbortController();
      if (!isRetry) {
        setLoading(true);
        setError(null);
      }

      // eslint-disable-next-line no-console
      console.debug('[useCacheStats] Fetching cache statistics...');
      const response = await fetch('/api/v2/meta/cache-stats', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        },
        signal: abortControllerRef.current.signal
      });
      if (!response.ok) {
        throw new Error(`Cache stats request failed: ${response.status} ${response.statusText}`);
      }
      const cacheStats = await response.json();
      if (!mountedRef.current) return;

      // Update state with successful response
      setData(cacheStats);
      setError(null);
      setRetryCount(0); // Reset retry count on success
      setLastUpdated(new Date());

      // eslint-disable-next-line no-console
      console.debug('[useCacheStats] Cache statistics updated:', {
        hit_ratio: cacheStats.hit_ratio,
        total_operations: cacheStats.total_operations,
        total_keys: cacheStats.total_keys
      });
    } catch (err) {
      if (!mountedRef.current) return;

      // Handle different error types
      const error = err;

      // Don't treat abort as an error
      if (error.name === 'AbortError') {
        // eslint-disable-next-line no-console
        console.debug('[useCacheStats] Request aborted');
        return;
      }

      // eslint-disable-next-line no-console
      console.warn('[useCacheStats] Failed to fetch cache statistics:', error.message);
      setError(error);

      // Call error callback if provided
      if (config.onError) {
        config.onError(error);
      }

      // Implement retry logic
      if (retryCount < config.maxRetries) {
        const newRetryCount = retryCount + 1;
        setRetryCount(newRetryCount);
        const retryDelay = calculateBackoffDelay(newRetryCount);

        // eslint-disable-next-line no-console
        console.debug(`[useCacheStats] Retrying in ${retryDelay}ms (attempt ${newRetryCount}/${config.maxRetries})`);
        retryTimeoutRef.current = setTimeout(() => {
          if (mountedRef.current) {
            fetchCacheStats(true);
          }
        }, retryDelay);
      } else {
        // eslint-disable-next-line no-console
        console.error(`[useCacheStats] Max retries (${config.maxRetries}) exceeded`);
      }
    } finally {
      if (mountedRef.current && !isRetry) {
        setLoading(false);
      }
    }
  }, [config, retryCount]);

  // Manual refetch function
  const refetch = (0, _react.useCallback)(async () => {
    setRetryCount(0); // Reset retry count for manual refetch
    await fetchCacheStats(false);
  }, [fetchCacheStats]);

  // Setup polling effect
  (0, _react.useEffect)(() => {
    if (!config.enabled) {
      return;
    }

    // Initial fetch
    fetchCacheStats(false);

    // Setup polling
    const scheduleNextPoll = () => {
      if (pollTimeoutRef.current) {
        clearTimeout(pollTimeoutRef.current);
      }
      pollTimeoutRef.current = setTimeout(() => {
        if (mountedRef.current && config.enabled) {
          fetchCacheStats(false);
          scheduleNextPoll(); // Schedule next poll
        }
      }, config.pollInterval);
    };
    scheduleNextPoll();

    // Cleanup function
    return () => {
      if (pollTimeoutRef.current) {
        clearTimeout(pollTimeoutRef.current);
        pollTimeoutRef.current = null;
      }
      if (retryTimeoutRef.current) {
        clearTimeout(retryTimeoutRef.current);
        retryTimeoutRef.current = null;
      }
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
        abortControllerRef.current = null;
      }
    };
  }, [config.enabled, config.pollInterval, fetchCacheStats]);

  // Cleanup on unmount
  (0, _react.useEffect)(() => {
    return () => {
      mountedRef.current = false;
    };
  }, []);
  return {
    data,
    loading,
    error,
    refetch,
    lastUpdated,
    retryCount
  };
};

/**
 * Hook for namespace-specific cache statistics
 */
exports.useCacheStats = useCacheStats;
const useNamespaceCacheStats = (namespace, options = {}) => {
  const [namespaceData, setNamespaceData] = (0, _react.useState)(null);
  const fetchNamespaceStats = (0, _react.useCallback)(async () => {
    try {
      const response = await fetch(`/api/v2/meta/cache-stats/namespace/${encodeURIComponent(namespace)}`);
      if (!response.ok) {
        throw new Error(`Namespace stats request failed: ${response.status}`);
      }
      const stats = await response.json();
      setNamespaceData(stats);
    } catch (err) {
      // eslint-disable-next-line no-console
      console.warn(`[useNamespaceCacheStats] Failed to fetch stats for namespace ${namespace}:`, err);
      setNamespaceData(null);
    }
  }, [namespace]);

  // Use main cache stats hook
  const mainResult = useCacheStats({
    ...options,
    onError: error => {
      options.onError?.(error);
      // Also try to fetch namespace stats on error
      fetchNamespaceStats();
    }
  });

  // Fetch namespace stats when main data changes
  (0, _react.useEffect)(() => {
    if (mainResult.data && namespace) {
      fetchNamespaceStats();
    }
  }, [mainResult.data, namespace, fetchNamespaceStats]);
  return {
    ...mainResult,
    namespaceData
  };
};

/**
 * Hook for cache health monitoring
 */
exports.useNamespaceCacheStats = useNamespaceCacheStats;
const useCacheHealth = (_options = {}) => {
  const [healthData, setHealthData] = (0, _react.useState)(null);
  const [loading, setLoading] = (0, _react.useState)(true);
  const [error, setError] = (0, _react.useState)(null);
  const fetchCacheHealth = (0, _react.useCallback)(async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/v2/meta/cache-health');
      if (!response.ok) {
        throw new Error(`Cache health request failed: ${response.status}`);
      }
      const health = await response.json();
      setHealthData(health);
      setError(null);
    } catch (err) {
      const error = err;
      setError(error);
      // eslint-disable-next-line no-console
      console.warn('[useCacheHealth] Failed to fetch cache health:', error.message);
    } finally {
      setLoading(false);
    }
  }, []);
  (0, _react.useEffect)(() => {
    fetchCacheHealth();

    // Poll health less frequently (every 2 minutes)
    const interval = setInterval(fetchCacheHealth, 120000);
    return () => clearInterval(interval);
  }, [fetchCacheHealth]);
  return {
    data: healthData,
    loading,
    error,
    refetch: fetchCacheHealth
  };
};

// Export utility functions
exports.useCacheHealth = useCacheHealth;
const formatCacheStats = exports.formatCacheStats = {
  /**
   * Format hit ratio as percentage
   */
  hitRatio: ratio => {
    return `${(ratio * 100).toFixed(1)}%`;
  },
  /**
   * Format latency with appropriate units
   */
  latency: ms => {
    if (ms < 1) return `${(ms * 1000).toFixed(0)}Î¼s`;
    if (ms < 1000) return `${ms.toFixed(1)}ms`;
    return `${(ms / 1000).toFixed(1)}s`;
  },
  /**
   * Format uptime duration
   */
  uptime: seconds => {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor(seconds % 86400 / 3600);
    const minutes = Math.floor(seconds % 3600 / 60);
    if (days > 0) return `${days}d ${hours}h ${minutes}m`;
    if (hours > 0) return `${hours}h ${minutes}m`;
    return `${minutes}m`;
  },
  /**
   * Format large numbers with appropriate units
   */
  count: num => {
    if (num < 1000) return num.toString();
    if (num < 1000000) return `${(num / 1000).toFixed(1)}K`;
    return `${(num / 1000000).toFixed(1)}M`;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiREVGQVVMVF9DT05GSUciLCJERVZfUE9MTF9JTlRFUlZBTCIsIlBST0RfUE9MTF9JTlRFUlZBTCIsIk1BWF9SRVRSSUVTIiwiUkVUUllfQkFDS09GRl9CQVNFIiwiUkVUUllfQkFDS09GRl9NQVgiLCJpc0RldmVsb3BtZW50IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwid2luZG93IiwibG9jYXRpb24iLCJob3N0bmFtZSIsImNhbGN1bGF0ZUJhY2tvZmZEZWxheSIsImF0dGVtcHQiLCJkZWxheSIsIk1hdGgiLCJwb3ciLCJqaXR0ZXIiLCJyYW5kb20iLCJtaW4iLCJ1c2VDYWNoZVN0YXRzIiwib3B0aW9ucyIsImNvbmZpZyIsInVzZU1lbW8iLCJwb2xsSW50ZXJ2YWwiLCJtYXhSZXRyaWVzIiwiZW5hYmxlZCIsIm9uRXJyb3IiLCJkYXRhIiwic2V0RGF0YSIsInVzZVN0YXRlIiwibG9hZGluZyIsInNldExvYWRpbmciLCJlcnJvciIsInNldEVycm9yIiwibGFzdFVwZGF0ZWQiLCJzZXRMYXN0VXBkYXRlZCIsInJldHJ5Q291bnQiLCJzZXRSZXRyeUNvdW50IiwicG9sbFRpbWVvdXRSZWYiLCJ1c2VSZWYiLCJyZXRyeVRpbWVvdXRSZWYiLCJhYm9ydENvbnRyb2xsZXJSZWYiLCJtb3VudGVkUmVmIiwiZmV0Y2hDYWNoZVN0YXRzIiwidXNlQ2FsbGJhY2siLCJpc1JldHJ5IiwiY3VycmVudCIsImFib3J0IiwiQWJvcnRDb250cm9sbGVyIiwiY29uc29sZSIsImRlYnVnIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJzaWduYWwiLCJvayIsIkVycm9yIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImNhY2hlU3RhdHMiLCJqc29uIiwiRGF0ZSIsImhpdF9yYXRpbyIsInRvdGFsX29wZXJhdGlvbnMiLCJ0b3RhbF9rZXlzIiwiZXJyIiwibmFtZSIsIndhcm4iLCJtZXNzYWdlIiwibmV3UmV0cnlDb3VudCIsInJldHJ5RGVsYXkiLCJzZXRUaW1lb3V0IiwicmVmZXRjaCIsInVzZUVmZmVjdCIsInNjaGVkdWxlTmV4dFBvbGwiLCJjbGVhclRpbWVvdXQiLCJleHBvcnRzIiwidXNlTmFtZXNwYWNlQ2FjaGVTdGF0cyIsIm5hbWVzcGFjZSIsIm5hbWVzcGFjZURhdGEiLCJzZXROYW1lc3BhY2VEYXRhIiwiZmV0Y2hOYW1lc3BhY2VTdGF0cyIsImVuY29kZVVSSUNvbXBvbmVudCIsInN0YXRzIiwibWFpblJlc3VsdCIsInVzZUNhY2hlSGVhbHRoIiwiX29wdGlvbnMiLCJoZWFsdGhEYXRhIiwic2V0SGVhbHRoRGF0YSIsImZldGNoQ2FjaGVIZWFsdGgiLCJoZWFsdGgiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImZvcm1hdENhY2hlU3RhdHMiLCJoaXRSYXRpbyIsInJhdGlvIiwidG9GaXhlZCIsImxhdGVuY3kiLCJtcyIsInVwdGltZSIsInNlY29uZHMiLCJkYXlzIiwiZmxvb3IiLCJob3VycyIsIm1pbnV0ZXMiLCJjb3VudCIsIm51bSIsInRvU3RyaW5nIl0sInNvdXJjZXMiOlsidXNlQ2FjaGVTdGF0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ2FjaGUgU3RhdGlzdGljcyBSZWFjdCBIb29rXHJcbiAqIFxyXG4gKiBQcm92aWRlcyBjb21wcmVoZW5zaXZlIGNhY2hlIG9ic2VydmFiaWxpdHkgd2l0aDpcclxuICogLSBBdXRvbWF0aWMgcG9sbGluZyAoMzBzIGRldiwgNjBzIHByb2QpIHdpdGggY29uZmlndXJhYmxlIGludGVydmFsc1xyXG4gKiAtIEV4cG9uZW50aWFsIGJhY2tvZmYgcmV0cnkgbG9naWMgZm9yIGZhaWxlZCByZXF1ZXN0c1xyXG4gKiAtIEVudmlyb25tZW50LWF3YXJlIGNvbmZpZ3VyYXRpb24gYW5kIGVycm9yIGhhbmRsaW5nXHJcbiAqIC0gVHlwZVNjcmlwdCBpbnRlcmZhY2VzIGZvciBhbGwgY2FjaGUgc3RhdGlzdGljc1xyXG4gKiAtIExvYWRpbmcgYW5kIGVycm9yIHN0YXRlcyBtYW5hZ2VtZW50XHJcbiAqIFxyXG4gKiBVc2FnZTpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjb25zdCB7IGRhdGEsIGxvYWRpbmcsIGVycm9yLCByZWZldGNoIH0gPSB1c2VDYWNoZVN0YXRzKHtcclxuICogICBwb2xsSW50ZXJ2YWw6IDMwMDAwLCAvLyBPcHRpb25hbCBvdmVycmlkZVxyXG4gKiAgIG1heFJldHJpZXM6IDUgICAgICAgIC8vIE9wdGlvbmFsIHJldHJ5IGxpbWl0XHJcbiAqIH0pO1xyXG4gKiBgYGBcclxuICovXHJcblxyXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xyXG5cclxuLy8gQ2FjaGUgc3RhdGlzdGljcyBpbnRlcmZhY2VzXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FjaGVTdGF0cyB7XHJcbiAgY2FjaGVfdmVyc2lvbjogc3RyaW5nO1xyXG4gIHRvdGFsX2tleXM6IG51bWJlcjtcclxuICBoaXRfY291bnQ6IG51bWJlcjtcclxuICBtaXNzX2NvdW50OiBudW1iZXI7XHJcbiAgaGl0X3JhdGlvOiBudW1iZXI7XHJcbiAgYXZlcmFnZV9nZXRfbGF0ZW5jeV9tczogbnVtYmVyO1xyXG4gIHRvdGFsX29wZXJhdGlvbnM6IG51bWJlcjtcclxuICByZWJ1aWxkX2V2ZW50czogbnVtYmVyO1xyXG4gIHN0YW1wZWRlX3ByZXZlbnRpb25zOiBudW1iZXI7XHJcbiAgbmFtZXNwYWNlZF9jb3VudHM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XHJcbiAgdGllcl9icmVha2Rvd246IFJlY29yZDxzdHJpbmcsIFJlY29yZDxzdHJpbmcsIG51bWJlcj4+O1xyXG4gIGxhdGVuY3lfcGVyY2VudGlsZXM6IHtcclxuICAgIHA1MDogbnVtYmVyO1xyXG4gICAgcDkwOiBudW1iZXI7XHJcbiAgICBwOTU6IG51bWJlcjtcclxuICAgIHA5OTogbnVtYmVyO1xyXG4gIH07XHJcbiAgdXB0aW1lX3NlY29uZHM6IG51bWJlcjtcclxuICBhY3RpdmVfbG9ja3M6IG51bWJlcjtcclxuICB0aW1lc3RhbXA6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBOYW1lc3BhY2VTdGF0cyB7XHJcbiAgbmFtZXNwYWNlOiBzdHJpbmc7XHJcbiAgaGl0czogbnVtYmVyO1xyXG4gIG1pc3NlczogbnVtYmVyO1xyXG4gIHNldHM6IG51bWJlcjtcclxuICBkZWxldGVzOiBudW1iZXI7XHJcbiAgaGl0X3JhdGlvOiBudW1iZXI7XHJcbiAgYXZnX2xhdGVuY3lfbXM6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDYWNoZUhlYWx0aCB7XHJcbiAgaGVhbHRoeTogYm9vbGVhbjtcclxuICBvcGVyYXRpb25zOiBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPjtcclxuICBzdGF0c19zbmFwc2hvdDogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XHJcbiAgZXJyb3I/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8vIEhvb2sgY29uZmlndXJhdGlvbiBpbnRlcmZhY2VcclxuZXhwb3J0IGludGVyZmFjZSBVc2VDYWNoZVN0YXRzT3B0aW9ucyB7XHJcbiAgcG9sbEludGVydmFsPzogbnVtYmVyOyAgICAgIC8vIFBvbGxpbmcgaW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzXHJcbiAgbWF4UmV0cmllcz86IG51bWJlcjsgICAgICAgIC8vIE1heGltdW0gcmV0cnkgYXR0ZW1wdHNcclxuICBlbmFibGVkPzogYm9vbGVhbjsgICAgICAgICAgLy8gV2hldGhlciBwb2xsaW5nIGlzIGVuYWJsZWRcclxuICBvbkVycm9yPzogKGVycm9yOiBFcnJvcikgPT4gdm9pZDsgIC8vIEVycm9yIGNhbGxiYWNrXHJcbn1cclxuXHJcbi8vIEhvb2sgcmV0dXJuIGludGVyZmFjZVxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZUNhY2hlU3RhdHNSZXN1bHQge1xyXG4gIGRhdGE6IENhY2hlU3RhdHMgfCBudWxsO1xyXG4gIGxvYWRpbmc6IGJvb2xlYW47XHJcbiAgZXJyb3I6IEVycm9yIHwgbnVsbDtcclxuICByZWZldGNoOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xyXG4gIGxhc3RVcGRhdGVkOiBEYXRlIHwgbnVsbDtcclxuICByZXRyeUNvdW50OiBudW1iZXI7XHJcbn1cclxuXHJcbi8vIERlZmF1bHQgY29uZmlndXJhdGlvblxyXG5jb25zdCBERUZBVUxUX0NPTkZJRyA9IHtcclxuICBERVZfUE9MTF9JTlRFUlZBTDogMzAwMDAsICAgIC8vIDMwIHNlY29uZHMgaW4gZGV2ZWxvcG1lbnRcclxuICBQUk9EX1BPTExfSU5URVJWQUw6IDYwMDAwLCAgIC8vIDYwIHNlY29uZHMgaW4gcHJvZHVjdGlvblxyXG4gIE1BWF9SRVRSSUVTOiA1LFxyXG4gIFJFVFJZX0JBQ0tPRkZfQkFTRTogMTAwMCwgICAgLy8gQmFzZSByZXRyeSBkZWxheSAoMSBzZWNvbmQpXHJcbiAgUkVUUllfQkFDS09GRl9NQVg6IDMwMDAwLCAgICAvLyBNYXggcmV0cnkgZGVsYXkgKDMwIHNlY29uZHMpXHJcbn07XHJcblxyXG4vLyBFbnZpcm9ubWVudCBkZXRlY3Rpb25cclxuY29uc3QgaXNEZXZlbG9wbWVudCA9ICgpID0+IHtcclxuICByZXR1cm4gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgfHwgXHJcbiAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSA9PT0gJ2xvY2FsaG9zdCcgfHxcclxuICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSAnMTI3LjAuMC4xJztcclxufTtcclxuXHJcbi8vIEV4cG9uZW50aWFsIGJhY2tvZmYgY2FsY3VsYXRpb25cclxuY29uc3QgY2FsY3VsYXRlQmFja29mZkRlbGF5ID0gKGF0dGVtcHQ6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgY29uc3QgZGVsYXkgPSBERUZBVUxUX0NPTkZJRy5SRVRSWV9CQUNLT0ZGX0JBU0UgKiBNYXRoLnBvdygyLCBhdHRlbXB0KTtcclxuICBjb25zdCBqaXR0ZXIgPSBNYXRoLnJhbmRvbSgpICogMC4xICogZGVsYXk7IC8vIMKxMTAlIGppdHRlclxyXG4gIHJldHVybiBNYXRoLm1pbihkZWxheSArIGppdHRlciwgREVGQVVMVF9DT05GSUcuUkVUUllfQkFDS09GRl9NQVgpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEN1c3RvbSBob29rIGZvciBjYWNoZSBzdGF0aXN0aWNzIHdpdGggcG9sbGluZyBhbmQgZXJyb3IgaGFuZGxpbmdcclxuICovXHJcbmV4cG9ydCBjb25zdCB1c2VDYWNoZVN0YXRzID0gKG9wdGlvbnM6IFVzZUNhY2hlU3RhdHNPcHRpb25zID0ge30pOiBVc2VDYWNoZVN0YXRzUmVzdWx0ID0+IHtcclxuICAvLyBDb25maWd1cmF0aW9uIHdpdGggdXNlTWVtbyB0byBwcmV2ZW50IGRlcGVuZGVuY3kgY2hhbmdlc1xyXG4gIGNvbnN0IGNvbmZpZyA9IHVzZU1lbW8oKCkgPT4gKHtcclxuICAgIHBvbGxJbnRlcnZhbDogb3B0aW9ucy5wb2xsSW50ZXJ2YWwgfHwgKFxyXG4gICAgICBpc0RldmVsb3BtZW50KCkgPyBERUZBVUxUX0NPTkZJRy5ERVZfUE9MTF9JTlRFUlZBTCA6IERFRkFVTFRfQ09ORklHLlBST0RfUE9MTF9JTlRFUlZBTFxyXG4gICAgKSxcclxuICAgIG1heFJldHJpZXM6IG9wdGlvbnMubWF4UmV0cmllcyB8fCBERUZBVUxUX0NPTkZJRy5NQVhfUkVUUklFUyxcclxuICAgIGVuYWJsZWQ6IG9wdGlvbnMuZW5hYmxlZCAhPT0gZmFsc2UsXHJcbiAgICBvbkVycm9yOiBvcHRpb25zLm9uRXJyb3IsXHJcbiAgfSksIFtvcHRpb25zLnBvbGxJbnRlcnZhbCwgb3B0aW9ucy5tYXhSZXRyaWVzLCBvcHRpb25zLmVuYWJsZWQsIG9wdGlvbnMub25FcnJvcl0pO1xyXG5cclxuICAvLyBTdGF0ZSBtYW5hZ2VtZW50XHJcbiAgY29uc3QgW2RhdGEsIHNldERhdGFdID0gdXNlU3RhdGU8Q2FjaGVTdGF0cyB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xyXG4gIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGU8RXJyb3IgfCBudWxsPihudWxsKTtcclxuICBjb25zdCBbbGFzdFVwZGF0ZWQsIHNldExhc3RVcGRhdGVkXSA9IHVzZVN0YXRlPERhdGUgfCBudWxsPihudWxsKTtcclxuICBjb25zdCBbcmV0cnlDb3VudCwgc2V0UmV0cnlDb3VudF0gPSB1c2VTdGF0ZSgwKTtcclxuXHJcbiAgLy8gUmVmcyBmb3IgY2xlYW51cCBhbmQgcG9sbGluZyBjb250cm9sXHJcbiAgY29uc3QgcG9sbFRpbWVvdXRSZWYgPSB1c2VSZWY8Tm9kZUpTLlRpbWVvdXQgfCBudWxsPihudWxsKTtcclxuICBjb25zdCByZXRyeVRpbWVvdXRSZWYgPSB1c2VSZWY8Tm9kZUpTLlRpbWVvdXQgfCBudWxsPihudWxsKTtcclxuICBjb25zdCBhYm9ydENvbnRyb2xsZXJSZWYgPSB1c2VSZWY8QWJvcnRDb250cm9sbGVyIHwgbnVsbD4obnVsbCk7XHJcbiAgY29uc3QgbW91bnRlZFJlZiA9IHVzZVJlZih0cnVlKTtcclxuXHJcbiAgLy8gRmV0Y2ggZnVuY3Rpb24gd2l0aCByZXRyeSBsb2dpY1xyXG4gIGNvbnN0IGZldGNoQ2FjaGVTdGF0cyA9IHVzZUNhbGxiYWNrKGFzeW5jIChpc1JldHJ5ID0gZmFsc2UpOiBQcm9taXNlPHZvaWQ+ID0+IHtcclxuICAgIGlmICghbW91bnRlZFJlZi5jdXJyZW50KSByZXR1cm47XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gQ2FuY2VsIGFueSBvbmdvaW5nIHJlcXVlc3RcclxuICAgICAgaWYgKGFib3J0Q29udHJvbGxlclJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgYWJvcnRDb250cm9sbGVyUmVmLmN1cnJlbnQuYWJvcnQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ3JlYXRlIG5ldyBhYm9ydCBjb250cm9sbGVyIGZvciB0aGlzIHJlcXVlc3RcclxuICAgICAgYWJvcnRDb250cm9sbGVyUmVmLmN1cnJlbnQgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XHJcblxyXG4gICAgICBpZiAoIWlzUmV0cnkpIHtcclxuICAgICAgICBzZXRMb2FkaW5nKHRydWUpO1xyXG4gICAgICAgIHNldEVycm9yKG51bGwpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxyXG4gICAgICBjb25zb2xlLmRlYnVnKCdbdXNlQ2FjaGVTdGF0c10gRmV0Y2hpbmcgY2FjaGUgc3RhdGlzdGljcy4uLicpO1xyXG5cclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS92Mi9tZXRhL2NhY2hlLXN0YXRzJywge1xyXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNpZ25hbDogYWJvcnRDb250cm9sbGVyUmVmLmN1cnJlbnQuc2lnbmFsLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhY2hlIHN0YXRzIHJlcXVlc3QgZmFpbGVkOiAke3Jlc3BvbnNlLnN0YXR1c30gJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBjYWNoZVN0YXRzOiBDYWNoZVN0YXRzID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG5cclxuICAgICAgaWYgKCFtb3VudGVkUmVmLmN1cnJlbnQpIHJldHVybjtcclxuXHJcbiAgICAgIC8vIFVwZGF0ZSBzdGF0ZSB3aXRoIHN1Y2Nlc3NmdWwgcmVzcG9uc2VcclxuICAgICAgc2V0RGF0YShjYWNoZVN0YXRzKTtcclxuICAgICAgc2V0RXJyb3IobnVsbCk7XHJcbiAgICAgIHNldFJldHJ5Q291bnQoMCk7IC8vIFJlc2V0IHJldHJ5IGNvdW50IG9uIHN1Y2Nlc3NcclxuICAgICAgc2V0TGFzdFVwZGF0ZWQobmV3IERhdGUoKSk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxyXG4gICAgICBjb25zb2xlLmRlYnVnKCdbdXNlQ2FjaGVTdGF0c10gQ2FjaGUgc3RhdGlzdGljcyB1cGRhdGVkOicsIHtcclxuICAgICAgICBoaXRfcmF0aW86IGNhY2hlU3RhdHMuaGl0X3JhdGlvLFxyXG4gICAgICAgIHRvdGFsX29wZXJhdGlvbnM6IGNhY2hlU3RhdHMudG90YWxfb3BlcmF0aW9ucyxcclxuICAgICAgICB0b3RhbF9rZXlzOiBjYWNoZVN0YXRzLnRvdGFsX2tleXNcclxuICAgICAgfSk7XHJcblxyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGlmICghbW91bnRlZFJlZi5jdXJyZW50KSByZXR1cm47XHJcblxyXG4gICAgICAvLyBIYW5kbGUgZGlmZmVyZW50IGVycm9yIHR5cGVzXHJcbiAgICAgIGNvbnN0IGVycm9yID0gZXJyIGFzIEVycm9yO1xyXG4gICAgICBcclxuICAgICAgLy8gRG9uJ3QgdHJlYXQgYWJvcnQgYXMgYW4gZXJyb3JcclxuICAgICAgaWYgKGVycm9yLm5hbWUgPT09ICdBYm9ydEVycm9yJykge1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXHJcbiAgICAgICAgY29uc29sZS5kZWJ1ZygnW3VzZUNhY2hlU3RhdHNdIFJlcXVlc3QgYWJvcnRlZCcpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcclxuICAgICAgY29uc29sZS53YXJuKCdbdXNlQ2FjaGVTdGF0c10gRmFpbGVkIHRvIGZldGNoIGNhY2hlIHN0YXRpc3RpY3M6JywgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgIFxyXG4gICAgICBzZXRFcnJvcihlcnJvcik7XHJcbiAgICAgIFxyXG4gICAgICAvLyBDYWxsIGVycm9yIGNhbGxiYWNrIGlmIHByb3ZpZGVkXHJcbiAgICAgIGlmIChjb25maWcub25FcnJvcikge1xyXG4gICAgICAgIGNvbmZpZy5vbkVycm9yKGVycm9yKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSW1wbGVtZW50IHJldHJ5IGxvZ2ljXHJcbiAgICAgIGlmIChyZXRyeUNvdW50IDwgY29uZmlnLm1heFJldHJpZXMpIHtcclxuICAgICAgICBjb25zdCBuZXdSZXRyeUNvdW50ID0gcmV0cnlDb3VudCArIDE7XHJcbiAgICAgICAgc2V0UmV0cnlDb3VudChuZXdSZXRyeUNvdW50KTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCByZXRyeURlbGF5ID0gY2FsY3VsYXRlQmFja29mZkRlbGF5KG5ld1JldHJ5Q291bnQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXHJcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhgW3VzZUNhY2hlU3RhdHNdIFJldHJ5aW5nIGluICR7cmV0cnlEZWxheX1tcyAoYXR0ZW1wdCAke25ld1JldHJ5Q291bnR9LyR7Y29uZmlnLm1heFJldHJpZXN9KWApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHJ5VGltZW91dFJlZi5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICBpZiAobW91bnRlZFJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIGZldGNoQ2FjaGVTdGF0cyh0cnVlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LCByZXRyeURlbGF5KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFt1c2VDYWNoZVN0YXRzXSBNYXggcmV0cmllcyAoJHtjb25maWcubWF4UmV0cmllc30pIGV4Y2VlZGVkYCk7XHJcbiAgICAgIH1cclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIGlmIChtb3VudGVkUmVmLmN1cnJlbnQgJiYgIWlzUmV0cnkpIHtcclxuICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sIFtjb25maWcsIHJldHJ5Q291bnRdKTtcclxuXHJcbiAgLy8gTWFudWFsIHJlZmV0Y2ggZnVuY3Rpb25cclxuICBjb25zdCByZWZldGNoID0gdXNlQ2FsbGJhY2soYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xyXG4gICAgc2V0UmV0cnlDb3VudCgwKTsgLy8gUmVzZXQgcmV0cnkgY291bnQgZm9yIG1hbnVhbCByZWZldGNoXHJcbiAgICBhd2FpdCBmZXRjaENhY2hlU3RhdHMoZmFsc2UpO1xyXG4gIH0sIFtmZXRjaENhY2hlU3RhdHNdKTtcclxuXHJcbiAgLy8gU2V0dXAgcG9sbGluZyBlZmZlY3RcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKCFjb25maWcuZW5hYmxlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSW5pdGlhbCBmZXRjaFxyXG4gICAgZmV0Y2hDYWNoZVN0YXRzKGZhbHNlKTtcclxuXHJcbiAgICAvLyBTZXR1cCBwb2xsaW5nXHJcbiAgICBjb25zdCBzY2hlZHVsZU5leHRQb2xsID0gKCkgPT4ge1xyXG4gICAgICBpZiAocG9sbFRpbWVvdXRSZWYuY3VycmVudCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dChwb2xsVGltZW91dFJlZi5jdXJyZW50KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcG9sbFRpbWVvdXRSZWYuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGlmIChtb3VudGVkUmVmLmN1cnJlbnQgJiYgY29uZmlnLmVuYWJsZWQpIHtcclxuICAgICAgICAgIGZldGNoQ2FjaGVTdGF0cyhmYWxzZSk7XHJcbiAgICAgICAgICBzY2hlZHVsZU5leHRQb2xsKCk7IC8vIFNjaGVkdWxlIG5leHQgcG9sbFxyXG4gICAgICAgIH1cclxuICAgICAgfSwgY29uZmlnLnBvbGxJbnRlcnZhbCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHNjaGVkdWxlTmV4dFBvbGwoKTtcclxuXHJcbiAgICAvLyBDbGVhbnVwIGZ1bmN0aW9uXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICBpZiAocG9sbFRpbWVvdXRSZWYuY3VycmVudCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dChwb2xsVGltZW91dFJlZi5jdXJyZW50KTtcclxuICAgICAgICBwb2xsVGltZW91dFJlZi5jdXJyZW50ID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYgKHJldHJ5VGltZW91dFJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHJldHJ5VGltZW91dFJlZi5jdXJyZW50KTtcclxuICAgICAgICByZXRyeVRpbWVvdXRSZWYuY3VycmVudCA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmIChhYm9ydENvbnRyb2xsZXJSZWYuY3VycmVudCkge1xyXG4gICAgICAgIGFib3J0Q29udHJvbGxlclJlZi5jdXJyZW50LmFib3J0KCk7XHJcbiAgICAgICAgYWJvcnRDb250cm9sbGVyUmVmLmN1cnJlbnQgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH0sIFtjb25maWcuZW5hYmxlZCwgY29uZmlnLnBvbGxJbnRlcnZhbCwgZmV0Y2hDYWNoZVN0YXRzXSk7XHJcblxyXG4gIC8vIENsZWFudXAgb24gdW5tb3VudFxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICBtb3VudGVkUmVmLmN1cnJlbnQgPSBmYWxzZTtcclxuICAgIH07XHJcbiAgfSwgW10pO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZGF0YSxcclxuICAgIGxvYWRpbmcsXHJcbiAgICBlcnJvcixcclxuICAgIHJlZmV0Y2gsXHJcbiAgICBsYXN0VXBkYXRlZCxcclxuICAgIHJldHJ5Q291bnQsXHJcbiAgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBIb29rIGZvciBuYW1lc3BhY2Utc3BlY2lmaWMgY2FjaGUgc3RhdGlzdGljc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHVzZU5hbWVzcGFjZUNhY2hlU3RhdHMgPSAoXHJcbiAgbmFtZXNwYWNlOiBzdHJpbmcsIFxyXG4gIG9wdGlvbnM6IFVzZUNhY2hlU3RhdHNPcHRpb25zID0ge31cclxuKTogVXNlQ2FjaGVTdGF0c1Jlc3VsdCAmIHsgbmFtZXNwYWNlRGF0YTogTmFtZXNwYWNlU3RhdHMgfCBudWxsIH0gPT4ge1xyXG4gIGNvbnN0IFtuYW1lc3BhY2VEYXRhLCBzZXROYW1lc3BhY2VEYXRhXSA9IHVzZVN0YXRlPE5hbWVzcGFjZVN0YXRzIHwgbnVsbD4obnVsbCk7XHJcbiAgXHJcbiAgY29uc3QgZmV0Y2hOYW1lc3BhY2VTdGF0cyA9IHVzZUNhbGxiYWNrKGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvdjIvbWV0YS9jYWNoZS1zdGF0cy9uYW1lc3BhY2UvJHtlbmNvZGVVUklDb21wb25lbnQobmFtZXNwYWNlKX1gKTtcclxuICAgICAgXHJcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5hbWVzcGFjZSBzdGF0cyByZXF1ZXN0IGZhaWxlZDogJHtyZXNwb25zZS5zdGF0dXN9YCk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHN0YXRzOiBOYW1lc3BhY2VTdGF0cyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgc2V0TmFtZXNwYWNlRGF0YShzdGF0cyk7XHJcbiAgICAgIFxyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXHJcbiAgICAgIGNvbnNvbGUud2FybihgW3VzZU5hbWVzcGFjZUNhY2hlU3RhdHNdIEZhaWxlZCB0byBmZXRjaCBzdGF0cyBmb3IgbmFtZXNwYWNlICR7bmFtZXNwYWNlfTpgLCBlcnIpO1xyXG4gICAgICBzZXROYW1lc3BhY2VEYXRhKG51bGwpO1xyXG4gICAgfVxyXG4gIH0sIFtuYW1lc3BhY2VdKTtcclxuXHJcbiAgLy8gVXNlIG1haW4gY2FjaGUgc3RhdHMgaG9va1xyXG4gIGNvbnN0IG1haW5SZXN1bHQgPSB1c2VDYWNoZVN0YXRzKHtcclxuICAgIC4uLm9wdGlvbnMsXHJcbiAgICBvbkVycm9yOiAoZXJyb3IpID0+IHtcclxuICAgICAgb3B0aW9ucy5vbkVycm9yPy4oZXJyb3IpO1xyXG4gICAgICAvLyBBbHNvIHRyeSB0byBmZXRjaCBuYW1lc3BhY2Ugc3RhdHMgb24gZXJyb3JcclxuICAgICAgZmV0Y2hOYW1lc3BhY2VTdGF0cygpO1xyXG4gICAgfSxcclxuICB9KTtcclxuXHJcbiAgLy8gRmV0Y2ggbmFtZXNwYWNlIHN0YXRzIHdoZW4gbWFpbiBkYXRhIGNoYW5nZXNcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKG1haW5SZXN1bHQuZGF0YSAmJiBuYW1lc3BhY2UpIHtcclxuICAgICAgZmV0Y2hOYW1lc3BhY2VTdGF0cygpO1xyXG4gICAgfVxyXG4gIH0sIFttYWluUmVzdWx0LmRhdGEsIG5hbWVzcGFjZSwgZmV0Y2hOYW1lc3BhY2VTdGF0c10pO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLi4ubWFpblJlc3VsdCxcclxuICAgIG5hbWVzcGFjZURhdGEsXHJcbiAgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBIb29rIGZvciBjYWNoZSBoZWFsdGggbW9uaXRvcmluZ1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHVzZUNhY2hlSGVhbHRoID0gKF9vcHRpb25zOiBVc2VDYWNoZVN0YXRzT3B0aW9ucyA9IHt9KSA9PiB7XHJcbiAgY29uc3QgW2hlYWx0aERhdGEsIHNldEhlYWx0aERhdGFdID0gdXNlU3RhdGU8Q2FjaGVIZWFsdGggfCBudWxsPihudWxsKTtcclxuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPEVycm9yIHwgbnVsbD4obnVsbCk7XHJcblxyXG4gIGNvbnN0IGZldGNoQ2FjaGVIZWFsdGggPSB1c2VDYWxsYmFjayhhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBzZXRMb2FkaW5nKHRydWUpO1xyXG4gICAgICBcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS92Mi9tZXRhL2NhY2hlLWhlYWx0aCcpO1xyXG4gICAgICBcclxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FjaGUgaGVhbHRoIHJlcXVlc3QgZmFpbGVkOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgY29uc3QgaGVhbHRoOiBDYWNoZUhlYWx0aCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgc2V0SGVhbHRoRGF0YShoZWFsdGgpO1xyXG4gICAgICBzZXRFcnJvcihudWxsKTtcclxuICAgICAgXHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgY29uc3QgZXJyb3IgPSBlcnIgYXMgRXJyb3I7XHJcbiAgICAgIHNldEVycm9yKGVycm9yKTtcclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcclxuICAgICAgY29uc29sZS53YXJuKCdbdXNlQ2FjaGVIZWFsdGhdIEZhaWxlZCB0byBmZXRjaCBjYWNoZSBoZWFsdGg6JywgZXJyb3IubWVzc2FnZSk7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgIH1cclxuICB9LCBbXSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBmZXRjaENhY2hlSGVhbHRoKCk7XHJcbiAgICBcclxuICAgIC8vIFBvbGwgaGVhbHRoIGxlc3MgZnJlcXVlbnRseSAoZXZlcnkgMiBtaW51dGVzKVxyXG4gICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmZXRjaENhY2hlSGVhbHRoLCAxMjAwMDApO1xyXG4gICAgXHJcbiAgICByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XHJcbiAgfSwgW2ZldGNoQ2FjaGVIZWFsdGhdKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGRhdGE6IGhlYWx0aERhdGEsXHJcbiAgICBsb2FkaW5nLFxyXG4gICAgZXJyb3IsXHJcbiAgICByZWZldGNoOiBmZXRjaENhY2hlSGVhbHRoLFxyXG4gIH07XHJcbn07XHJcblxyXG4vLyBFeHBvcnQgdXRpbGl0eSBmdW5jdGlvbnNcclxuZXhwb3J0IGNvbnN0IGZvcm1hdENhY2hlU3RhdHMgPSB7XHJcbiAgLyoqXHJcbiAgICogRm9ybWF0IGhpdCByYXRpbyBhcyBwZXJjZW50YWdlXHJcbiAgICovXHJcbiAgaGl0UmF0aW86IChyYXRpbzogbnVtYmVyKTogc3RyaW5nID0+IHtcclxuICAgIHJldHVybiBgJHsocmF0aW8gKiAxMDApLnRvRml4ZWQoMSl9JWA7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogRm9ybWF0IGxhdGVuY3kgd2l0aCBhcHByb3ByaWF0ZSB1bml0c1xyXG4gICAqL1xyXG4gIGxhdGVuY3k6IChtczogbnVtYmVyKTogc3RyaW5nID0+IHtcclxuICAgIGlmIChtcyA8IDEpIHJldHVybiBgJHsobXMgKiAxMDAwKS50b0ZpeGVkKDApfc68c2A7XHJcbiAgICBpZiAobXMgPCAxMDAwKSByZXR1cm4gYCR7bXMudG9GaXhlZCgxKX1tc2A7XHJcbiAgICByZXR1cm4gYCR7KG1zIC8gMTAwMCkudG9GaXhlZCgxKX1zYDtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBGb3JtYXQgdXB0aW1lIGR1cmF0aW9uXHJcbiAgICovXHJcbiAgdXB0aW1lOiAoc2Vjb25kczogbnVtYmVyKTogc3RyaW5nID0+IHtcclxuICAgIGNvbnN0IGRheXMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyA4NjQwMCk7XHJcbiAgICBjb25zdCBob3VycyA9IE1hdGguZmxvb3IoKHNlY29uZHMgJSA4NjQwMCkgLyAzNjAwKTtcclxuICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKChzZWNvbmRzICUgMzYwMCkgLyA2MCk7XHJcbiAgICBcclxuICAgIGlmIChkYXlzID4gMCkgcmV0dXJuIGAke2RheXN9ZCAke2hvdXJzfWggJHttaW51dGVzfW1gO1xyXG4gICAgaWYgKGhvdXJzID4gMCkgcmV0dXJuIGAke2hvdXJzfWggJHttaW51dGVzfW1gO1xyXG4gICAgcmV0dXJuIGAke21pbnV0ZXN9bWA7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogRm9ybWF0IGxhcmdlIG51bWJlcnMgd2l0aCBhcHByb3ByaWF0ZSB1bml0c1xyXG4gICAqL1xyXG4gIGNvdW50OiAobnVtOiBudW1iZXIpOiBzdHJpbmcgPT4ge1xyXG4gICAgaWYgKG51bSA8IDEwMDApIHJldHVybiBudW0udG9TdHJpbmcoKTtcclxuICAgIGlmIChudW0gPCAxMDAwMDAwKSByZXR1cm4gYCR7KG51bSAvIDEwMDApLnRvRml4ZWQoMSl9S2A7XHJcbiAgICByZXR1cm4gYCR7KG51bSAvIDEwMDAwMDApLnRvRml4ZWQoMSl9TWA7XHJcbiAgfSxcclxufTsiXSwibWFwcGluZ3MiOiI7Ozs7OztBQW1CQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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