{"version":3,"names":["_react","require","DEFAULT_CONFIG","DEV_POLL_INTERVAL","PROD_POLL_INTERVAL","MAX_RETRIES","RETRY_BACKOFF_BASE","RETRY_BACKOFF_MAX","isDevelopment","process","env","NODE_ENV","window","location","hostname","calculateBackoffDelay","attempt","delay","Math","pow","jitter","random","min","useCacheStats","options","config","useMemo","pollInterval","maxRetries","enabled","onError","data","setData","useState","loading","setLoading","error","setError","lastUpdated","setLastUpdated","retryCount","setRetryCount","pollTimeoutRef","useRef","retryTimeoutRef","abortControllerRef","mountedRef","fetchCacheStats","useCallback","isRetry","current","abort","AbortController","console","debug","response","fetch","method","headers","signal","ok","Error","status","statusText","cacheStats","json","Date","hit_ratio","total_operations","total_keys","err","name","warn","message","newRetryCount","retryDelay","setTimeout","refetch","useEffect","scheduleNextPoll","clearTimeout","exports","useNamespaceCacheStats","namespace","namespaceData","setNamespaceData","fetchNamespaceStats","encodeURIComponent","stats","mainResult","useCacheHealth","_options","healthData","setHealthData","fetchCacheHealth","health","interval","setInterval","clearInterval","formatCacheStats","hitRatio","ratio","toFixed","latency","ms","uptime","seconds","days","floor","hours","minutes","count","num","toString"],"sources":["useCacheStats.ts"],"sourcesContent":["/**\r\n * Cache Statistics React Hook\r\n * \r\n * Provides comprehensive cache observability with:\r\n * - Automatic polling (30s dev, 60s prod) with configurable intervals\r\n * - Exponential backoff retry logic for failed requests\r\n * - Environment-aware configuration and error handling\r\n * - TypeScript interfaces for all cache statistics\r\n * - Loading and error states management\r\n * \r\n * Usage:\r\n * ```typescript\r\n * const { data, loading, error, refetch } = useCacheStats({\r\n *   pollInterval: 30000, // Optional override\r\n *   maxRetries: 5        // Optional retry limit\r\n * });\r\n * ```\r\n */\r\n\r\nimport { useEffect, useState, useCallback, useRef, useMemo } from 'react';\r\n\r\n// Cache statistics interfaces\r\nexport interface CacheStats {\r\n  cache_version: string;\r\n  total_keys: number;\r\n  hit_count: number;\r\n  miss_count: number;\r\n  hit_ratio: number;\r\n  average_get_latency_ms: number;\r\n  total_operations: number;\r\n  rebuild_events: number;\r\n  stampede_preventions: number;\r\n  namespaced_counts: Record<string, number>;\r\n  tier_breakdown: Record<string, Record<string, number>>;\r\n  latency_percentiles: {\r\n    p50: number;\r\n    p90: number;\r\n    p95: number;\r\n    p99: number;\r\n  };\r\n  uptime_seconds: number;\r\n  active_locks: number;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface NamespaceStats {\r\n  namespace: string;\r\n  hits: number;\r\n  misses: number;\r\n  sets: number;\r\n  deletes: number;\r\n  hit_ratio: number;\r\n  avg_latency_ms: number;\r\n}\r\n\r\nexport interface CacheHealth {\r\n  healthy: boolean;\r\n  operations: Record<string, boolean>;\r\n  stats_snapshot: Record<string, unknown>;\r\n  error?: string;\r\n}\r\n\r\n// Hook configuration interface\r\nexport interface UseCacheStatsOptions {\r\n  pollInterval?: number;      // Polling interval in milliseconds\r\n  maxRetries?: number;        // Maximum retry attempts\r\n  enabled?: boolean;          // Whether polling is enabled\r\n  onError?: (error: Error) => void;  // Error callback\r\n}\r\n\r\n// Hook return interface\r\nexport interface UseCacheStatsResult {\r\n  data: CacheStats | null;\r\n  loading: boolean;\r\n  error: Error | null;\r\n  refetch: () => Promise<void>;\r\n  lastUpdated: Date | null;\r\n  retryCount: number;\r\n}\r\n\r\n// Default configuration\r\nconst DEFAULT_CONFIG = {\r\n  DEV_POLL_INTERVAL: 30000,    // 30 seconds in development\r\n  PROD_POLL_INTERVAL: 60000,   // 60 seconds in production\r\n  MAX_RETRIES: 5,\r\n  RETRY_BACKOFF_BASE: 1000,    // Base retry delay (1 second)\r\n  RETRY_BACKOFF_MAX: 30000,    // Max retry delay (30 seconds)\r\n};\r\n\r\n// Environment detection\r\nconst isDevelopment = () => {\r\n  return process.env.NODE_ENV === 'development' || \r\n         window.location.hostname === 'localhost' ||\r\n         window.location.hostname === '127.0.0.1';\r\n};\r\n\r\n// Exponential backoff calculation\r\nconst calculateBackoffDelay = (attempt: number): number => {\r\n  const delay = DEFAULT_CONFIG.RETRY_BACKOFF_BASE * Math.pow(2, attempt);\r\n  const jitter = Math.random() * 0.1 * delay; // Â±10% jitter\r\n  return Math.min(delay + jitter, DEFAULT_CONFIG.RETRY_BACKOFF_MAX);\r\n};\r\n\r\n/**\r\n * Custom hook for cache statistics with polling and error handling\r\n */\r\nexport const useCacheStats = (options: UseCacheStatsOptions = {}): UseCacheStatsResult => {\r\n  // Configuration with useMemo to prevent dependency changes\r\n  const config = useMemo(() => ({\r\n    pollInterval: options.pollInterval || (\r\n      isDevelopment() ? DEFAULT_CONFIG.DEV_POLL_INTERVAL : DEFAULT_CONFIG.PROD_POLL_INTERVAL\r\n    ),\r\n    maxRetries: options.maxRetries || DEFAULT_CONFIG.MAX_RETRIES,\r\n    enabled: options.enabled !== false,\r\n    onError: options.onError,\r\n  }), [options.pollInterval, options.maxRetries, options.enabled, options.onError]);\r\n\r\n  // State management\r\n  const [data, setData] = useState<CacheStats | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\r\n  const [retryCount, setRetryCount] = useState(0);\r\n\r\n  // Refs for cleanup and polling control\r\n  const pollTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const retryTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const abortControllerRef = useRef<AbortController | null>(null);\r\n  const mountedRef = useRef(true);\r\n\r\n  // Fetch function with retry logic\r\n  const fetchCacheStats = useCallback(async (isRetry = false): Promise<void> => {\r\n    if (!mountedRef.current) return;\r\n\r\n    try {\r\n      // Cancel any ongoing request\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n      }\r\n\r\n      // Create new abort controller for this request\r\n      abortControllerRef.current = new AbortController();\r\n\r\n      if (!isRetry) {\r\n        setLoading(true);\r\n        setError(null);\r\n      }\r\n\r\n      // eslint-disable-next-line no-console\r\n      console.debug('[useCacheStats] Fetching cache statistics...');\r\n\r\n      const response = await fetch('/api/v2/meta/cache-stats', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        signal: abortControllerRef.current.signal,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Cache stats request failed: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const cacheStats: CacheStats = await response.json();\r\n\r\n      if (!mountedRef.current) return;\r\n\r\n      // Update state with successful response\r\n      setData(cacheStats);\r\n      setError(null);\r\n      setRetryCount(0); // Reset retry count on success\r\n      setLastUpdated(new Date());\r\n      \r\n      // eslint-disable-next-line no-console\r\n      console.debug('[useCacheStats] Cache statistics updated:', {\r\n        hit_ratio: cacheStats.hit_ratio,\r\n        total_operations: cacheStats.total_operations,\r\n        total_keys: cacheStats.total_keys\r\n      });\r\n\r\n    } catch (err) {\r\n      if (!mountedRef.current) return;\r\n\r\n      // Handle different error types\r\n      const error = err as Error;\r\n      \r\n      // Don't treat abort as an error\r\n      if (error.name === 'AbortError') {\r\n        // eslint-disable-next-line no-console\r\n        console.debug('[useCacheStats] Request aborted');\r\n        return;\r\n      }\r\n\r\n      // eslint-disable-next-line no-console\r\n      console.warn('[useCacheStats] Failed to fetch cache statistics:', error.message);\r\n      \r\n      setError(error);\r\n      \r\n      // Call error callback if provided\r\n      if (config.onError) {\r\n        config.onError(error);\r\n      }\r\n\r\n      // Implement retry logic\r\n      if (retryCount < config.maxRetries) {\r\n        const newRetryCount = retryCount + 1;\r\n        setRetryCount(newRetryCount);\r\n        \r\n        const retryDelay = calculateBackoffDelay(newRetryCount);\r\n        \r\n        // eslint-disable-next-line no-console\r\n        console.debug(`[useCacheStats] Retrying in ${retryDelay}ms (attempt ${newRetryCount}/${config.maxRetries})`);\r\n        \r\n        retryTimeoutRef.current = setTimeout(() => {\r\n          if (mountedRef.current) {\r\n            fetchCacheStats(true);\r\n          }\r\n        }, retryDelay);\r\n      } else {\r\n        // eslint-disable-next-line no-console\r\n        console.error(`[useCacheStats] Max retries (${config.maxRetries}) exceeded`);\r\n      }\r\n    } finally {\r\n      if (mountedRef.current && !isRetry) {\r\n        setLoading(false);\r\n      }\r\n    }\r\n  }, [config, retryCount]);\r\n\r\n  // Manual refetch function\r\n  const refetch = useCallback(async (): Promise<void> => {\r\n    setRetryCount(0); // Reset retry count for manual refetch\r\n    await fetchCacheStats(false);\r\n  }, [fetchCacheStats]);\r\n\r\n  // Setup polling effect\r\n  useEffect(() => {\r\n    if (!config.enabled) {\r\n      return;\r\n    }\r\n\r\n    // Initial fetch\r\n    fetchCacheStats(false);\r\n\r\n    // Setup polling\r\n    const scheduleNextPoll = () => {\r\n      if (pollTimeoutRef.current) {\r\n        clearTimeout(pollTimeoutRef.current);\r\n      }\r\n\r\n      pollTimeoutRef.current = setTimeout(() => {\r\n        if (mountedRef.current && config.enabled) {\r\n          fetchCacheStats(false);\r\n          scheduleNextPoll(); // Schedule next poll\r\n        }\r\n      }, config.pollInterval);\r\n    };\r\n\r\n    scheduleNextPoll();\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      if (pollTimeoutRef.current) {\r\n        clearTimeout(pollTimeoutRef.current);\r\n        pollTimeoutRef.current = null;\r\n      }\r\n      \r\n      if (retryTimeoutRef.current) {\r\n        clearTimeout(retryTimeoutRef.current);\r\n        retryTimeoutRef.current = null;\r\n      }\r\n      \r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n        abortControllerRef.current = null;\r\n      }\r\n    };\r\n  }, [config.enabled, config.pollInterval, fetchCacheStats]);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      mountedRef.current = false;\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    data,\r\n    loading,\r\n    error,\r\n    refetch,\r\n    lastUpdated,\r\n    retryCount,\r\n  };\r\n};\r\n\r\n/**\r\n * Hook for namespace-specific cache statistics\r\n */\r\nexport const useNamespaceCacheStats = (\r\n  namespace: string, \r\n  options: UseCacheStatsOptions = {}\r\n): UseCacheStatsResult & { namespaceData: NamespaceStats | null } => {\r\n  const [namespaceData, setNamespaceData] = useState<NamespaceStats | null>(null);\r\n  \r\n  const fetchNamespaceStats = useCallback(async (): Promise<void> => {\r\n    try {\r\n      const response = await fetch(`/api/v2/meta/cache-stats/namespace/${encodeURIComponent(namespace)}`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Namespace stats request failed: ${response.status}`);\r\n      }\r\n      \r\n      const stats: NamespaceStats = await response.json();\r\n      setNamespaceData(stats);\r\n      \r\n    } catch (err) {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(`[useNamespaceCacheStats] Failed to fetch stats for namespace ${namespace}:`, err);\r\n      setNamespaceData(null);\r\n    }\r\n  }, [namespace]);\r\n\r\n  // Use main cache stats hook\r\n  const mainResult = useCacheStats({\r\n    ...options,\r\n    onError: (error) => {\r\n      options.onError?.(error);\r\n      // Also try to fetch namespace stats on error\r\n      fetchNamespaceStats();\r\n    },\r\n  });\r\n\r\n  // Fetch namespace stats when main data changes\r\n  useEffect(() => {\r\n    if (mainResult.data && namespace) {\r\n      fetchNamespaceStats();\r\n    }\r\n  }, [mainResult.data, namespace, fetchNamespaceStats]);\r\n\r\n  return {\r\n    ...mainResult,\r\n    namespaceData,\r\n  };\r\n};\r\n\r\n/**\r\n * Hook for cache health monitoring\r\n */\r\nexport const useCacheHealth = (_options: UseCacheStatsOptions = {}) => {\r\n  const [healthData, setHealthData] = useState<CacheHealth | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  const fetchCacheHealth = useCallback(async (): Promise<void> => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const response = await fetch('/api/v2/meta/cache-health');\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Cache health request failed: ${response.status}`);\r\n      }\r\n      \r\n      const health: CacheHealth = await response.json();\r\n      setHealthData(health);\r\n      setError(null);\r\n      \r\n    } catch (err) {\r\n      const error = err as Error;\r\n      setError(error);\r\n      // eslint-disable-next-line no-console\r\n      console.warn('[useCacheHealth] Failed to fetch cache health:', error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchCacheHealth();\r\n    \r\n    // Poll health less frequently (every 2 minutes)\r\n    const interval = setInterval(fetchCacheHealth, 120000);\r\n    \r\n    return () => clearInterval(interval);\r\n  }, [fetchCacheHealth]);\r\n\r\n  return {\r\n    data: healthData,\r\n    loading,\r\n    error,\r\n    refetch: fetchCacheHealth,\r\n  };\r\n};\r\n\r\n// Export utility functions\r\nexport const formatCacheStats = {\r\n  /**\r\n   * Format hit ratio as percentage\r\n   */\r\n  hitRatio: (ratio: number): string => {\r\n    return `${(ratio * 100).toFixed(1)}%`;\r\n  },\r\n\r\n  /**\r\n   * Format latency with appropriate units\r\n   */\r\n  latency: (ms: number): string => {\r\n    if (ms < 1) return `${(ms * 1000).toFixed(0)}Î¼s`;\r\n    if (ms < 1000) return `${ms.toFixed(1)}ms`;\r\n    return `${(ms / 1000).toFixed(1)}s`;\r\n  },\r\n\r\n  /**\r\n   * Format uptime duration\r\n   */\r\n  uptime: (seconds: number): string => {\r\n    const days = Math.floor(seconds / 86400);\r\n    const hours = Math.floor((seconds % 86400) / 3600);\r\n    const minutes = Math.floor((seconds % 3600) / 60);\r\n    \r\n    if (days > 0) return `${days}d ${hours}h ${minutes}m`;\r\n    if (hours > 0) return `${hours}h ${minutes}m`;\r\n    return `${minutes}m`;\r\n  },\r\n\r\n  /**\r\n   * Format large numbers with appropriate units\r\n   */\r\n  count: (num: number): string => {\r\n    if (num < 1000) return num.toString();\r\n    if (num < 1000000) return `${(num / 1000).toFixed(1)}K`;\r\n    return `${(num / 1000000).toFixed(1)}M`;\r\n  },\r\n};"],"mappings":"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","ignoreList":[]}