73423cb27b71b5a6f817945fee2ff689
"use strict";

// Mock useSimplePropOllamaData to provide all required actions

// Mock FeaturedPropsService to return empty array for all fetches
_getJestObj().mock('../components/hooks/useSimplePropOllamaData', () => ({
  __esModule: true,
  useSimplePropOllamaData: ({
    state,
    actions
  }) => ({
    fetchData: jest.fn(),
    // Removed invalid import inside object
    // actions object with all required functions
    actions: {
      setIsLoading: jest.fn(),
      setError: jest.fn(),
      setLoadingMessage: jest.fn(),
      setProjections: jest.fn()
    }
  })
}));
_getJestObj().mock('../services/unified/FeaturedPropsService', () => ({
  __esModule: true,
  fetchFeaturedProps: jest.fn(async () => []),
  fetchBatchPredictions: jest.fn(async () => []),
  mockProps: []
}));
_getJestObj().mock('../components/hooks/usePropOllamaState', () => ({
  __esModule: true,
  usePropOllamaState: () => [{
    projections: [],
    isLoading: false,
    filters: {
      searchTerm: '',
      selectedSport: 'MLB'
    },
    sorting: {
      sortBy: 'default'
    },
    displayOptions: {
      expandedRowKey: null,
      useVirtualization: false
    },
    selectedProps: [],
    entryAmount: 0,
    enhancedAnalysisCache: new Map(),
    loadingAnalysis: new Set(),
    connectionHealth: {
      isHealthy: true,
      latency: 0,
      lastChecked: Date.now()
    },
    loadingStage: {
      stage: 'complete'
    },
    loadingMessage: '',
    upcomingGames: [],
    selectedGame: null
  }, {
    updateFilters: jest.fn(),
    updateSorting: jest.fn(),
    setSelectedGame: jest.fn(),
    updateDisplayOptions: jest.fn(),
    removeSelectedProp: jest.fn(),
    setEntryAmount: jest.fn(),
    setSelectedProps: jest.fn(),
    actions: {
      setIsLoading: jest.fn(),
      setError: jest.fn(),
      setLoadingMessage: jest.fn(),
      setProjections: jest.fn()
    }
  }]
}));
var _react = require("@testing-library/react");
require("../../../jest.setup.e2e.js");
var backendDiscoveryModule = _interopRequireWildcard(require("../services/backendDiscovery"));
var getBackendUrlModule = _interopRequireWildcard(require("../utils/getBackendUrl"));
var _backend = require("./mocks/backend");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('App E2E - Empty State', () => {
  beforeEach(() => {
    jest.clearAllMocks();

    // Setup backend mocks
    (0, _backend.setupBackendMocks)({
      emptyFeaturedProps: true
    });

    // Mock getBackendUrl to return a consistent URL
    jest.spyOn(getBackendUrlModule, 'getBackendUrl').mockReturnValue('http://localhost:8000');
    // Mock discoverBackend to resolve to null by default
    if (!Object.getOwnPropertyDescriptor(backendDiscoveryModule, 'discoverBackend')?.get) {
      jest.spyOn(backendDiscoveryModule, 'discoverBackend').mockResolvedValue(null);
    }

    // Mock localStorage.getItem using Object.defineProperty for Jest compatibility
    Object.defineProperty(window.localStorage, 'getItem', {
      configurable: true,
      value: key => {
        if (key === 'onboardingComplete') return 'true';
        if (key === 'user') return JSON.stringify({
          id: 'test',
          email: 'test@example.com',
          role: 'user'
        });
        if (key === 'token') return 'test-token';
        return null;
      }
    });
  });
  it('shows empty state if no enhanced bets are returned', async () => {
    jest.useFakeTimers();
    try {
      const App = (await Promise.resolve().then(() => _interopRequireWildcard(require('../App')))).default;
      await (await Promise.resolve().then(() => _interopRequireWildcard(require('react-dom/test-utils')))).act(async () => {
        (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(App, {}));
        jest.runAllTimers();
      });
      // Prefer a data-testid if present, otherwise fallback to text match
      let emptyState = null;
      try {
        emptyState = await _react.screen.findByTestId('empty-props', {}, {
          timeout: 2000
        });
      } catch (err) {
        // Try alternate testid used by some components
        try {
          emptyState = await _react.screen.findByTestId('empty-state', {}, {
            timeout: 2000
          });
        } catch {
          // fallback to text matcher used historically
          emptyState = await _react.screen.findByText(/No props found|No enhanced props|No results/i, {}, {
            timeout: 5000
          });
        }
      }
      expect(emptyState).toBeInTheDocument();
    } finally {
      jest.useRealTimers();
    }
  }, 10000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfX2VzTW9kdWxlIiwidXNlU2ltcGxlUHJvcE9sbGFtYURhdGEiLCJzdGF0ZSIsImFjdGlvbnMiLCJmZXRjaERhdGEiLCJqZXN0IiwiZm4iLCJzZXRJc0xvYWRpbmciLCJzZXRFcnJvciIsInNldExvYWRpbmdNZXNzYWdlIiwic2V0UHJvamVjdGlvbnMiLCJmZXRjaEZlYXR1cmVkUHJvcHMiLCJmZXRjaEJhdGNoUHJlZGljdGlvbnMiLCJtb2NrUHJvcHMiLCJ1c2VQcm9wT2xsYW1hU3RhdGUiLCJwcm9qZWN0aW9ucyIsImlzTG9hZGluZyIsImZpbHRlcnMiLCJzZWFyY2hUZXJtIiwic2VsZWN0ZWRTcG9ydCIsInNvcnRpbmciLCJzb3J0QnkiLCJkaXNwbGF5T3B0aW9ucyIsImV4cGFuZGVkUm93S2V5IiwidXNlVmlydHVhbGl6YXRpb24iLCJzZWxlY3RlZFByb3BzIiwiZW50cnlBbW91bnQiLCJlbmhhbmNlZEFuYWx5c2lzQ2FjaGUiLCJNYXAiLCJsb2FkaW5nQW5hbHlzaXMiLCJTZXQiLCJjb25uZWN0aW9uSGVhbHRoIiwiaXNIZWFsdGh5IiwibGF0ZW5jeSIsImxhc3RDaGVja2VkIiwiRGF0ZSIsIm5vdyIsImxvYWRpbmdTdGFnZSIsInN0YWdlIiwibG9hZGluZ01lc3NhZ2UiLCJ1cGNvbWluZ0dhbWVzIiwic2VsZWN0ZWRHYW1lIiwidXBkYXRlRmlsdGVycyIsInVwZGF0ZVNvcnRpbmciLCJzZXRTZWxlY3RlZEdhbWUiLCJ1cGRhdGVEaXNwbGF5T3B0aW9ucyIsInJlbW92ZVNlbGVjdGVkUHJvcCIsInNldEVudHJ5QW1vdW50Iiwic2V0U2VsZWN0ZWRQcm9wcyIsIl9yZWFjdCIsInJlcXVpcmUiLCJiYWNrZW5kRGlzY292ZXJ5TW9kdWxlIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJnZXRCYWNrZW5kVXJsTW9kdWxlIiwiX2JhY2tlbmQiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsInNldHVwQmFja2VuZE1vY2tzIiwiZW1wdHlGZWF0dXJlZFByb3BzIiwic3B5T24iLCJtb2NrUmV0dXJuVmFsdWUiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImNvbmZpZ3VyYWJsZSIsInZhbHVlIiwia2V5IiwiSlNPTiIsInN0cmluZ2lmeSIsImlkIiwiZW1haWwiLCJyb2xlIiwiaXQiLCJ1c2VGYWtlVGltZXJzIiwiQXBwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwiYWN0IiwicmVuZGVyIiwianN4IiwicnVuQWxsVGltZXJzIiwiZW1wdHlTdGF0ZSIsInNjcmVlbiIsImZpbmRCeVRlc3RJZCIsInRpbWVvdXQiLCJlcnIiLCJmaW5kQnlUZXh0IiwiZXhwZWN0IiwidG9CZUluVGhlRG9jdW1lbnQiLCJ1c2VSZWFsVGltZXJzIl0sInNvdXJjZXMiOlsiQXBwLmVtcHR5LXN0YXRlLmUyZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb2NrIHVzZVNpbXBsZVByb3BPbGxhbWFEYXRhIHRvIHByb3ZpZGUgYWxsIHJlcXVpcmVkIGFjdGlvbnNcclxuamVzdC5tb2NrKCcuLi9jb21wb25lbnRzL2hvb2tzL3VzZVNpbXBsZVByb3BPbGxhbWFEYXRhJywgKCkgPT4gKHtcclxuICBfX2VzTW9kdWxlOiB0cnVlLFxyXG4gIHVzZVNpbXBsZVByb3BPbGxhbWFEYXRhOiAoeyBzdGF0ZSwgYWN0aW9ucyB9OiBhbnkpID0+ICh7XHJcbiAgICBmZXRjaERhdGE6IGplc3QuZm4oKSxcclxuICAgIC8vIFJlbW92ZWQgaW52YWxpZCBpbXBvcnQgaW5zaWRlIG9iamVjdFxyXG4gICAgLy8gYWN0aW9ucyBvYmplY3Qgd2l0aCBhbGwgcmVxdWlyZWQgZnVuY3Rpb25zXHJcbiAgICBhY3Rpb25zOiB7XHJcbiAgICAgIHNldElzTG9hZGluZzogamVzdC5mbigpLFxyXG4gICAgICBzZXRFcnJvcjogamVzdC5mbigpLFxyXG4gICAgICBzZXRMb2FkaW5nTWVzc2FnZTogamVzdC5mbigpLFxyXG4gICAgICBzZXRQcm9qZWN0aW9uczogamVzdC5mbigpLFxyXG4gICAgfSxcclxuICB9KSxcclxufSkpO1xyXG4vLyBNb2NrIEZlYXR1cmVkUHJvcHNTZXJ2aWNlIHRvIHJldHVybiBlbXB0eSBhcnJheSBmb3IgYWxsIGZldGNoZXNcclxuamVzdC5tb2NrKCcuLi9zZXJ2aWNlcy91bmlmaWVkL0ZlYXR1cmVkUHJvcHNTZXJ2aWNlJywgKCkgPT4gKHtcclxuICBfX2VzTW9kdWxlOiB0cnVlLFxyXG4gIGZldGNoRmVhdHVyZWRQcm9wczogamVzdC5mbihhc3luYyAoKSA9PiBbXSksXHJcbiAgZmV0Y2hCYXRjaFByZWRpY3Rpb25zOiBqZXN0LmZuKGFzeW5jICgpID0+IFtdKSxcclxuICBtb2NrUHJvcHM6IFtdLFxyXG59KSk7XHJcblxyXG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xyXG5pbXBvcnQgJy4uLy4uLy4uL2plc3Quc2V0dXAuZTJlLmpzJztcclxuaW1wb3J0ICogYXMgYmFja2VuZERpc2NvdmVyeU1vZHVsZSBmcm9tICcuLi9zZXJ2aWNlcy9iYWNrZW5kRGlzY292ZXJ5JztcclxuaW1wb3J0ICogYXMgZ2V0QmFja2VuZFVybE1vZHVsZSBmcm9tICcuLi91dGlscy9nZXRCYWNrZW5kVXJsJztcclxuaW1wb3J0IHsgc2V0dXBCYWNrZW5kTW9ja3MgfSBmcm9tICcuL21vY2tzL2JhY2tlbmQnO1xyXG5qZXN0Lm1vY2soJy4uL2NvbXBvbmVudHMvaG9va3MvdXNlUHJvcE9sbGFtYVN0YXRlJywgKCkgPT4gKHtcclxuICBfX2VzTW9kdWxlOiB0cnVlLFxyXG4gIHVzZVByb3BPbGxhbWFTdGF0ZTogKCkgPT4gW1xyXG4gICAge1xyXG4gICAgICBwcm9qZWN0aW9uczogW10sXHJcbiAgICAgIGlzTG9hZGluZzogZmFsc2UsXHJcbiAgICAgIGZpbHRlcnM6IHsgc2VhcmNoVGVybTogJycsIHNlbGVjdGVkU3BvcnQ6ICdNTEInIH0sXHJcbiAgICAgIHNvcnRpbmc6IHsgc29ydEJ5OiAnZGVmYXVsdCcgfSxcclxuICAgICAgZGlzcGxheU9wdGlvbnM6IHsgZXhwYW5kZWRSb3dLZXk6IG51bGwsIHVzZVZpcnR1YWxpemF0aW9uOiBmYWxzZSB9LFxyXG4gICAgICBzZWxlY3RlZFByb3BzOiBbXSxcclxuICAgICAgZW50cnlBbW91bnQ6IDAsXHJcbiAgICAgIGVuaGFuY2VkQW5hbHlzaXNDYWNoZTogbmV3IE1hcCgpLFxyXG4gICAgICBsb2FkaW5nQW5hbHlzaXM6IG5ldyBTZXQoKSxcclxuICAgICAgY29ubmVjdGlvbkhlYWx0aDogeyBpc0hlYWx0aHk6IHRydWUsIGxhdGVuY3k6IDAsIGxhc3RDaGVja2VkOiBEYXRlLm5vdygpIH0sXHJcbiAgICAgIGxvYWRpbmdTdGFnZTogeyBzdGFnZTogJ2NvbXBsZXRlJyB9LFxyXG4gICAgICBsb2FkaW5nTWVzc2FnZTogJycsXHJcbiAgICAgIHVwY29taW5nR2FtZXM6IFtdLFxyXG4gICAgICBzZWxlY3RlZEdhbWU6IG51bGwsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB1cGRhdGVGaWx0ZXJzOiBqZXN0LmZuKCksXHJcbiAgICAgIHVwZGF0ZVNvcnRpbmc6IGplc3QuZm4oKSxcclxuICAgICAgc2V0U2VsZWN0ZWRHYW1lOiBqZXN0LmZuKCksXHJcbiAgICAgIHVwZGF0ZURpc3BsYXlPcHRpb25zOiBqZXN0LmZuKCksXHJcbiAgICAgIHJlbW92ZVNlbGVjdGVkUHJvcDogamVzdC5mbigpLFxyXG4gICAgICBzZXRFbnRyeUFtb3VudDogamVzdC5mbigpLFxyXG4gICAgICBzZXRTZWxlY3RlZFByb3BzOiBqZXN0LmZuKCksXHJcbiAgICAgIGFjdGlvbnM6IHtcclxuICAgICAgICBzZXRJc0xvYWRpbmc6IGplc3QuZm4oKSxcclxuICAgICAgICBzZXRFcnJvcjogamVzdC5mbigpLFxyXG4gICAgICAgIHNldExvYWRpbmdNZXNzYWdlOiBqZXN0LmZuKCksXHJcbiAgICAgICAgc2V0UHJvamVjdGlvbnM6IGplc3QuZm4oKSxcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgXSxcclxufSkpO1xyXG5cclxuZGVzY3JpYmUoJ0FwcCBFMkUgLSBFbXB0eSBTdGF0ZScsICgpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xyXG5cclxuICAgIC8vIFNldHVwIGJhY2tlbmQgbW9ja3NcclxuICAgIHNldHVwQmFja2VuZE1vY2tzKHsgZW1wdHlGZWF0dXJlZFByb3BzOiB0cnVlIH0pO1xyXG5cclxuICAgIC8vIE1vY2sgZ2V0QmFja2VuZFVybCB0byByZXR1cm4gYSBjb25zaXN0ZW50IFVSTFxyXG4gICAgamVzdC5zcHlPbihnZXRCYWNrZW5kVXJsTW9kdWxlLCAnZ2V0QmFja2VuZFVybCcpLm1vY2tSZXR1cm5WYWx1ZSgnaHR0cDovL2xvY2FsaG9zdDo4MDAwJyk7XHJcbiAgICAvLyBNb2NrIGRpc2NvdmVyQmFja2VuZCB0byByZXNvbHZlIHRvIG51bGwgYnkgZGVmYXVsdFxyXG4gICAgaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhY2tlbmREaXNjb3ZlcnlNb2R1bGUsICdkaXNjb3ZlckJhY2tlbmQnKT8uZ2V0KSB7XHJcbiAgICAgIGplc3Quc3B5T24oYmFja2VuZERpc2NvdmVyeU1vZHVsZSwgJ2Rpc2NvdmVyQmFja2VuZCcpLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE1vY2sgbG9jYWxTdG9yYWdlLmdldEl0ZW0gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5IGZvciBKZXN0IGNvbXBhdGliaWxpdHlcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cubG9jYWxTdG9yYWdlLCAnZ2V0SXRlbScsIHtcclxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICB2YWx1ZTogKGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgaWYgKGtleSA9PT0gJ29uYm9hcmRpbmdDb21wbGV0ZScpIHJldHVybiAndHJ1ZSc7XHJcbiAgICAgICAgaWYgKGtleSA9PT0gJ3VzZXInKVxyXG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHsgaWQ6ICd0ZXN0JywgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJywgcm9sZTogJ3VzZXInIH0pO1xyXG4gICAgICAgIGlmIChrZXkgPT09ICd0b2tlbicpIHJldHVybiAndGVzdC10b2tlbic7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3dzIGVtcHR5IHN0YXRlIGlmIG5vIGVuaGFuY2VkIGJldHMgYXJlIHJldHVybmVkJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgamVzdC51c2VGYWtlVGltZXJzKCk7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBBcHAgPSAoYXdhaXQgaW1wb3J0KCcuLi9BcHAnKSkuZGVmYXVsdDtcclxuICAgICAgYXdhaXQgKFxyXG4gICAgICAgIGF3YWl0IGltcG9ydCgncmVhY3QtZG9tL3Rlc3QtdXRpbHMnKVxyXG4gICAgICApLmFjdChhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgcmVuZGVyKDxBcHAgLz4pO1xyXG4gICAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICAvLyBQcmVmZXIgYSBkYXRhLXRlc3RpZCBpZiBwcmVzZW50LCBvdGhlcndpc2UgZmFsbGJhY2sgdG8gdGV4dCBtYXRjaFxyXG4gICAgICBsZXQgZW1wdHlTdGF0ZSA9IG51bGw7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgZW1wdHlTdGF0ZSA9IGF3YWl0IHNjcmVlbi5maW5kQnlUZXN0SWQoJ2VtcHR5LXByb3BzJywge30sIHsgdGltZW91dDogMjAwMCB9KTtcclxuICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgLy8gVHJ5IGFsdGVybmF0ZSB0ZXN0aWQgdXNlZCBieSBzb21lIGNvbXBvbmVudHNcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgZW1wdHlTdGF0ZSA9IGF3YWl0IHNjcmVlbi5maW5kQnlUZXN0SWQoJ2VtcHR5LXN0YXRlJywge30sIHsgdGltZW91dDogMjAwMCB9KTtcclxuICB9IGNhdGNoIHtcclxuICAgICAgICAgIC8vIGZhbGxiYWNrIHRvIHRleHQgbWF0Y2hlciB1c2VkIGhpc3RvcmljYWxseVxyXG4gICAgICAgICAgZW1wdHlTdGF0ZSA9IGF3YWl0IHNjcmVlbi5maW5kQnlUZXh0KC9ObyBwcm9wcyBmb3VuZHxObyBlbmhhbmNlZCBwcm9wc3xObyByZXN1bHRzL2ksIHt9LCB7IHRpbWVvdXQ6IDUwMDAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGV4cGVjdChlbXB0eVN0YXRlKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgamVzdC51c2VSZWFsVGltZXJzKCk7XHJcbiAgICB9XHJcbiAgfSwgMTAwMDApO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQWVBO0FBZEFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDZDQUE2QyxFQUFFLE9BQU87RUFDOURDLFVBQVUsRUFBRSxJQUFJO0VBQ2hCQyx1QkFBdUIsRUFBRUEsQ0FBQztJQUFFQyxLQUFLO0lBQUVDO0VBQWEsQ0FBQyxNQUFNO0lBQ3JEQyxTQUFTLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDcEI7SUFDQTtJQUNBSCxPQUFPLEVBQUU7TUFDUEksWUFBWSxFQUFFRixJQUFJLENBQUNDLEVB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