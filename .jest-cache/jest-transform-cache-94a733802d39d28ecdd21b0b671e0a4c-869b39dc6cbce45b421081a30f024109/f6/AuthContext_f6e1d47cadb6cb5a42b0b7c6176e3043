2ad304fc0fb6a372d469ee6815241c44
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAuth = exports._AuthProvider = exports._AuthContext = void 0;
var _react = _interopRequireWildcard(require("react"));
var _authService = require("../services/authService");
var _logger = require("../utils/logger");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Authentication context and provider for managing user authentication state and actions.
 *
 * Provides login, logout, registration, and password management for the app.
 *
 * @module contexts/AuthContext
 */

/**
 * AuthContextType
 * Provides authentication state and actions for the app.
 */

// Stub register method for test compatibility
const register = async (_email, _password) => {
  // In a real implementation, this would call an API endpoint
  return Promise.resolve();
};

/**
 * React context for authentication state and actions.
 */
const _AuthContext = exports._AuthContext = /*#__PURE__*/(0, _react.createContext)(undefined);

/**
 * AuthProvider component.
 * Wrap your app with this provider to enable authentication state and actions.
 * @param {object} props - React children.
 * @returns {JSX.Element} The provider component.
 */
/**
 * useAuthState
 * Custom hook to encapsulate authentication state logic for modularity and testability.
 */
function useAuthState() {
  const [user, setUser] = (0, _react.useState)(null);
  const [loading, setLoading] = (0, _react.useState)(false);
  const [error, setError] = (0, _react.useState)(null);
  const [isAdmin, setIsAdmin] = (0, _react.useState)(false);
  const [isAuthenticated, setIsAuthenticated] = (0, _react.useState)(false);
  const [requiresPasswordChange, setRequiresPasswordChange] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    // Skip auth restoration if bootstrap already handled it
    const globalState = window;
    if (typeof window !== 'undefined' && globalState.__A1_AUTH_RESTORED) {
      return;
    }
    const _initializeAuth = () => {
      if (_authService._authService.isAuthenticated()) {
        const _storedUser = _authService._authService.getUser();
        if (_storedUser) {
          setUser(_storedUser);
          setIsAdmin(_authService._authService.isAdmin());
          setIsAuthenticated(true);
          setRequiresPasswordChange(_authService._authService.requiresPasswordChange());

          // Mark as restored to prevent duplicate logs
          if (typeof window !== 'undefined') {
            globalState.__A1_AUTH_RESTORED = true;
          }

          // Structured logging for audit (only if not already restored by bootstrap)
          _logger.logger.info('🔐 Authentication restored', {
            email: _storedUser.email,
            role: _storedUser.role,
            userId: _storedUser.id
          }, 'Auth');
        }
      }
    };
    setTimeout(_initializeAuth, 100);
  }, []);
  const login = async (email, password) => {
    setLoading(true);
    setError(null);
    try {
      const _response = await _authService._authService.login(email, password);
      if (_response.success && _response.user) {
        setUser(_response.user);
        setIsAdmin(_response.user.role === 'admin' || _response.user.permissions?.includes('admin') || false);
        setIsAuthenticated(true);
        setRequiresPasswordChange(_response.requiresPasswordChange || false);
      } else {
        throw new Error(_response.message || 'Login failed');
      }
    } catch (e) {
      setError(e.message || 'Login failed');
      throw e;
    } finally {
      setLoading(false);
    }
  };
  const logout = async () => {
    setLoading(true);
    setError(null);
    try {
      await _authService._authService.logout();
      setUser(null);
      setIsAdmin(false);
      setIsAuthenticated(false);
      setRequiresPasswordChange(false);
    } catch (e) {
      setError(e.message || 'Logout failed');
    } finally {
      setLoading(false);
    }
  };
  const changePassword = async data => {
    setLoading(true);
    setError(null);
    try {
      const _response = await _authService._authService.changePassword(data);
      if (_response.success) {
        const _updatedUser = _authService._authService.getUser();
        if (_updatedUser) {
          setUser(_updatedUser);
          setRequiresPasswordChange(false);
        }
      } else {
        throw new Error(_response.message || 'Password change failed');
      }
    } catch (e) {
      setError(e.message || 'Password change failed');
      throw e;
    } finally {
      setLoading(false);
    }
  };
  const clearError = () => {
    setError(null);
  };
  return {
    user,
    loading,
    error,
    isAdmin,
    isAuthenticated,
    requiresPasswordChange,
    login,
    logout,
    changePassword,
    clearError,
    register
  };
}

/**
 * AuthProvider component.
 * Wrap your app with this provider to enable authentication state and actions.
 * Uses useAuthState for modularity and testability.
 * @param {object} props - React children.
 * @returns {JSX.Element} The provider component.
 */
const AuthProvider = ({
  children
}) => {
  const contextValue = useAuthState();
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.Provider, {
    value: contextValue,
    children: children
  });
};
const _AuthProvider = exports._AuthProvider = AuthProvider;

/**
 * useAuth
 * Access the authentication context in any component.
 */
const useAuth = () => {
  const ctx = (0, _react.useContext)(_AuthContext);
  if (!ctx) throw new Error('useAuth must be used within AuthProvider');
  return ctx;
};
exports.useAuth = useAuth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfYXV0aFNlcnZpY2UiLCJfbG9nZ2VyIiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJyZWdpc3RlciIsIl9lbWFpbCIsIl9wYXNzd29yZCIsIlByb21pc2UiLCJyZXNvbHZlIiwiX0F1dGhDb250ZXh0IiwiZXhwb3J0cyIsImNyZWF0ZUNvbnRleHQiLCJ1bmRlZmluZWQiLCJ1c2VBdXRoU3RhdGUiLCJ1c2VyIiwic2V0VXNlciIsInVzZVN0YXRlIiwibG9hZGluZyIsInNldExvYWRpbmciLCJlcnJvciIsInNldEVycm9yIiwiaXNBZG1pbiIsInNldElzQWRtaW4iLCJpc0F1dGhlbnRpY2F0ZWQiLCJzZXRJc0F1dGhlbnRpY2F0ZWQiLCJyZXF1aXJlc1Bhc3N3b3JkQ2hhbmdlIiwic2V0UmVxdWlyZXNQYXNzd29yZENoYW5nZSIsInVzZUVmZmVjdCIsImdsb2JhbFN0YXRlIiwid2luZG93IiwiX19BMV9BVVRIX1JFU1RPUkVEIiwiX2luaXRpYWxpemVBdXRoIiwiYXV0aFNlcnZpY2UiLCJfc3RvcmVkVXNlciIsImdldFVzZXIiLCJsb2dnZXIiLCJpbmZvIiwiZW1haWwiLCJyb2xlIiwidXNlcklkIiwiaWQiLCJzZXRUaW1lb3V0IiwibG9naW4iLCJwYXNzd29yZCIsIl9yZXNwb25zZSIsInN1Y2Nlc3MiLCJwZXJtaXNzaW9ucyIsImluY2x1ZGVzIiwiRXJyb3IiLCJtZXNzYWdlIiwibG9nb3V0IiwiY2hhbmdlUGFzc3dvcmQiLCJkYXRhIiwiX3VwZGF0ZWRVc2VyIiwiY2xlYXJFcnJvciIsIkF1dGhQcm92aWRlciIsImNoaWxkcmVuIiwiY29udGV4dFZhbHVlIiwianN4IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsIl9BdXRoUHJvdmlkZXIiLCJ1c2VBdXRoIiwiY3R4IiwidXNlQ29udGV4dCJdLCJzb3VyY2VzIjpbIkF1dGhDb250ZXh0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQXV0aGVudGljYXRpb24gY29udGV4dCBhbmQgcHJvdmlkZXIgZm9yIG1hbmFnaW5nIHVzZXIgYXV0aGVudGljYXRpb24gc3RhdGUgYW5kIGFjdGlvbnMuXHJcbiAqXHJcbiAqIFByb3ZpZGVzIGxvZ2luLCBsb2dvdXQsIHJlZ2lzdHJhdGlvbiwgYW5kIHBhc3N3b3JkIG1hbmFnZW1lbnQgZm9yIHRoZSBhcHAuXHJcbiAqXHJcbiAqIEBtb2R1bGUgY29udGV4dHMvQXV0aENvbnRleHRcclxuICovXHJcbmltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCBSZWFjdE5vZGUsIHVzZUNvbnRleHQsIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7XHJcbiAgQXV0aFJlc3BvbnNlLFxyXG4gIF9hdXRoU2VydmljZSBhcyBhdXRoU2VydmljZSxcclxuICBQYXNzd29yZENoYW5nZVJlcXVlc3QsXHJcbiAgVXNlcixcclxufSBmcm9tICcuLi9zZXJ2aWNlcy9hdXRoU2VydmljZSc7XHJcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4uL3V0aWxzL2xvZ2dlcic7XHJcblxyXG4vKipcclxuICogQXV0aENvbnRleHRUeXBlXHJcbiAqIFByb3ZpZGVzIGF1dGhlbnRpY2F0aW9uIHN0YXRlIGFuZCBhY3Rpb25zIGZvciB0aGUgYXBwLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBdXRoQ29udGV4dFR5cGUge1xyXG4gIHVzZXI6IFVzZXIgfCBudWxsO1xyXG4gIGxvYWRpbmc6IGJvb2xlYW47XHJcbiAgZXJyb3I6IHN0cmluZyB8IG51bGw7XHJcbiAgaXNBZG1pbjogYm9vbGVhbjtcclxuICBpc0F1dGhlbnRpY2F0ZWQ6IGJvb2xlYW47XHJcbiAgcmVxdWlyZXNQYXNzd29yZENoYW5nZTogYm9vbGVhbjtcclxuICBsb2dpbjogKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD47XHJcbiAgbG9nb3V0OiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xyXG4gIGNoYW5nZVBhc3N3b3JkOiAoZGF0YTogUGFzc3dvcmRDaGFuZ2VSZXF1ZXN0KSA9PiBQcm9taXNlPHZvaWQ+O1xyXG4gIGNsZWFyRXJyb3I6ICgpID0+IHZvaWQ7XHJcbiAgcmVnaXN0ZXI6IChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSA9PiBQcm9taXNlPHZvaWQ+O1xyXG59XHJcbi8vIFN0dWIgcmVnaXN0ZXIgbWV0aG9kIGZvciB0ZXN0IGNvbXBhdGliaWxpdHlcclxuY29uc3QgcmVnaXN0ZXIgPSBhc3luYyAoX2VtYWlsOiBzdHJpbmcsIF9wYXNzd29yZDogc3RyaW5nKSA9PiB7XHJcbiAgLy8gSW4gYSByZWFsIGltcGxlbWVudGF0aW9uLCB0aGlzIHdvdWxkIGNhbGwgYW4gQVBJIGVuZHBvaW50XHJcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlYWN0IGNvbnRleHQgZm9yIGF1dGhlbnRpY2F0aW9uIHN0YXRlIGFuZCBhY3Rpb25zLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9BdXRoQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8QXV0aENvbnRleHRUeXBlIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xyXG5cclxuLyoqXHJcbiAqIEF1dGhQcm92aWRlciBjb21wb25lbnQuXHJcbiAqIFdyYXAgeW91ciBhcHAgd2l0aCB0aGlzIHByb3ZpZGVyIHRvIGVuYWJsZSBhdXRoZW50aWNhdGlvbiBzdGF0ZSBhbmQgYWN0aW9ucy5cclxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzIC0gUmVhY3QgY2hpbGRyZW4uXHJcbiAqIEByZXR1cm5zIHtKU1guRWxlbWVudH0gVGhlIHByb3ZpZGVyIGNvbXBvbmVudC5cclxuICovXHJcbi8qKlxyXG4gKiB1c2VBdXRoU3RhdGVcclxuICogQ3VzdG9tIGhvb2sgdG8gZW5jYXBzdWxhdGUgYXV0aGVudGljYXRpb24gc3RhdGUgbG9naWMgZm9yIG1vZHVsYXJpdHkgYW5kIHRlc3RhYmlsaXR5LlxyXG4gKi9cclxuZnVuY3Rpb24gdXNlQXV0aFN0YXRlKCk6IEF1dGhDb250ZXh0VHlwZSB7XHJcbiAgY29uc3QgW3VzZXIsIHNldFVzZXJdID0gdXNlU3RhdGU8VXNlciB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IFtpc0FkbWluLCBzZXRJc0FkbWluXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbaXNBdXRoZW50aWNhdGVkLCBzZXRJc0F1dGhlbnRpY2F0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IFtyZXF1aXJlc1Bhc3N3b3JkQ2hhbmdlLCBzZXRSZXF1aXJlc1Bhc3N3b3JkQ2hhbmdlXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIC8vIFNraXAgYXV0aCByZXN0b3JhdGlvbiBpZiBib290c3RyYXAgYWxyZWFkeSBoYW5kbGVkIGl0XHJcbiAgICBjb25zdCBnbG9iYWxTdGF0ZSA9IHdpbmRvdyBhcyB0eXBlb2Ygd2luZG93ICYgeyBfX0ExX0FVVEhfUkVTVE9SRUQ/OiBib29sZWFuIH07XHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsU3RhdGUuX19BMV9BVVRIX1JFU1RPUkVEKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBfaW5pdGlhbGl6ZUF1dGggPSAoKSA9PiB7XHJcbiAgICAgIGlmIChhdXRoU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xyXG4gICAgICAgIGNvbnN0IF9zdG9yZWRVc2VyID0gYXV0aFNlcnZpY2UuZ2V0VXNlcigpO1xyXG4gICAgICAgIGlmIChfc3RvcmVkVXNlcikge1xyXG4gICAgICAgICAgc2V0VXNlcihfc3RvcmVkVXNlcik7XHJcbiAgICAgICAgICBzZXRJc0FkbWluKGF1dGhTZXJ2aWNlLmlzQWRtaW4oKSk7XHJcbiAgICAgICAgICBzZXRJc0F1dGhlbnRpY2F0ZWQodHJ1ZSk7XHJcbiAgICAgICAgICBzZXRSZXF1aXJlc1Bhc3N3b3JkQ2hhbmdlKGF1dGhTZXJ2aWNlLnJlcXVpcmVzUGFzc3dvcmRDaGFuZ2UoKSk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIE1hcmsgYXMgcmVzdG9yZWQgdG8gcHJldmVudCBkdXBsaWNhdGUgbG9nc1xyXG4gICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIGdsb2JhbFN0YXRlLl9fQTFfQVVUSF9SRVNUT1JFRCA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIFN0cnVjdHVyZWQgbG9nZ2luZyBmb3IgYXVkaXQgKG9ubHkgaWYgbm90IGFscmVhZHkgcmVzdG9yZWQgYnkgYm9vdHN0cmFwKVxyXG4gICAgICAgICAgbG9nZ2VyLmluZm8oXHJcbiAgICAgICAgICAgICfwn5SQIEF1dGhlbnRpY2F0aW9uIHJlc3RvcmVkJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGVtYWlsOiBfc3RvcmVkVXNlci5lbWFpbCxcclxuICAgICAgICAgICAgICByb2xlOiBfc3RvcmVkVXNlci5yb2xlLFxyXG4gICAgICAgICAgICAgIHVzZXJJZDogX3N0b3JlZFVzZXIuaWQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICdBdXRoJ1xyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBzZXRUaW1lb3V0KF9pbml0aWFsaXplQXV0aCwgMTAwKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIGNvbnN0IGxvZ2luID0gYXN5bmMgKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpID0+IHtcclxuICAgIHNldExvYWRpbmcodHJ1ZSk7XHJcbiAgICBzZXRFcnJvcihudWxsKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IF9yZXNwb25zZTogQXV0aFJlc3BvbnNlID0gYXdhaXQgYXV0aFNlcnZpY2UubG9naW4oZW1haWwsIHBhc3N3b3JkKTtcclxuICAgICAgaWYgKF9yZXNwb25zZS5zdWNjZXNzICYmIF9yZXNwb25zZS51c2VyKSB7XHJcbiAgICAgICAgc2V0VXNlcihfcmVzcG9uc2UudXNlcik7XHJcbiAgICAgICAgc2V0SXNBZG1pbihcclxuICAgICAgICAgIF9yZXNwb25zZS51c2VyLnJvbGUgPT09ICdhZG1pbicgfHwgX3Jlc3BvbnNlLnVzZXIucGVybWlzc2lvbnM/LmluY2x1ZGVzKCdhZG1pbicpIHx8IGZhbHNlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBzZXRJc0F1dGhlbnRpY2F0ZWQodHJ1ZSk7XHJcbiAgICAgICAgc2V0UmVxdWlyZXNQYXNzd29yZENoYW5nZShfcmVzcG9uc2UucmVxdWlyZXNQYXNzd29yZENoYW5nZSB8fCBmYWxzZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKF9yZXNwb25zZS5tZXNzYWdlIHx8ICdMb2dpbiBmYWlsZWQnKTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZTogdW5rbm93bikge1xyXG4gICAgICBzZXRFcnJvcigoZSBhcyBFcnJvcikubWVzc2FnZSB8fCAnTG9naW4gZmFpbGVkJyk7XHJcbiAgICAgIHRocm93IGU7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBsb2dvdXQgPSBhc3luYyAoKSA9PiB7XHJcbiAgICBzZXRMb2FkaW5nKHRydWUpO1xyXG4gICAgc2V0RXJyb3IobnVsbCk7XHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCBhdXRoU2VydmljZS5sb2dvdXQoKTtcclxuICAgICAgc2V0VXNlcihudWxsKTtcclxuICAgICAgc2V0SXNBZG1pbihmYWxzZSk7XHJcbiAgICAgIHNldElzQXV0aGVudGljYXRlZChmYWxzZSk7XHJcbiAgICAgIHNldFJlcXVpcmVzUGFzc3dvcmRDaGFuZ2UoZmFsc2UpO1xyXG4gICAgfSBjYXRjaCAoZTogdW5rbm93bikge1xyXG4gICAgICBzZXRFcnJvcigoZSBhcyBFcnJvcikubWVzc2FnZSB8fCAnTG9nb3V0IGZhaWxlZCcpO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgY2hhbmdlUGFzc3dvcmQgPSBhc3luYyAoZGF0YTogUGFzc3dvcmRDaGFuZ2VSZXF1ZXN0KSA9PiB7XHJcbiAgICBzZXRMb2FkaW5nKHRydWUpO1xyXG4gICAgc2V0RXJyb3IobnVsbCk7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBfcmVzcG9uc2U6IEF1dGhSZXNwb25zZSA9IGF3YWl0IGF1dGhTZXJ2aWNlLmNoYW5nZVBhc3N3b3JkKGRhdGEpO1xyXG4gICAgICBpZiAoX3Jlc3BvbnNlLnN1Y2Nlc3MpIHtcclxuICAgICAgICBjb25zdCBfdXBkYXRlZFVzZXIgPSBhdXRoU2VydmljZS5nZXRVc2VyKCk7XHJcbiAgICAgICAgaWYgKF91cGRhdGVkVXNlcikge1xyXG4gICAgICAgICAgc2V0VXNlcihfdXBkYXRlZFVzZXIpO1xyXG4gICAgICAgICAgc2V0UmVxdWlyZXNQYXNzd29yZENoYW5nZShmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihfcmVzcG9uc2UubWVzc2FnZSB8fCAnUGFzc3dvcmQgY2hhbmdlIGZhaWxlZCcpO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlOiB1bmtub3duKSB7XHJcbiAgICAgIHNldEVycm9yKChlIGFzIEVycm9yKS5tZXNzYWdlIHx8ICdQYXNzd29yZCBjaGFuZ2UgZmFpbGVkJyk7XHJcbiAgICAgIHRocm93IGU7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBjbGVhckVycm9yID0gKCkgPT4ge1xyXG4gICAgc2V0RXJyb3IobnVsbCk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHVzZXIsXHJcbiAgICBsb2FkaW5nLFxyXG4gICAgZXJyb3IsXHJcbiAgICBpc0FkbWluLFxyXG4gICAgaXNBdXRoZW50aWNhdGVkLFxyXG4gICAgcmVxdWlyZXNQYXNzd29yZENoYW5nZSxcclxuICAgIGxvZ2luLFxyXG4gICAgbG9nb3V0LFxyXG4gICAgY2hhbmdlUGFzc3dvcmQsXHJcbiAgICBjbGVhckVycm9yLFxyXG4gICAgcmVnaXN0ZXIsXHJcbiAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEF1dGhQcm92aWRlciBjb21wb25lbnQuXHJcbiAqIFdyYXAgeW91ciBhcHAgd2l0aCB0aGlzIHByb3ZpZGVyIHRvIGVuYWJsZSBhdXRoZW50aWNhdGlvbiBzdGF0ZSBhbmQgYWN0aW9ucy5cclxuICogVXNlcyB1c2VBdXRoU3RhdGUgZm9yIG1vZHVsYXJpdHkgYW5kIHRlc3RhYmlsaXR5LlxyXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgLSBSZWFjdCBjaGlsZHJlbi5cclxuICogQHJldHVybnMge0pTWC5FbGVtZW50fSBUaGUgcHJvdmlkZXIgY29tcG9uZW50LlxyXG4gKi9cclxuY29uc3QgQXV0aFByb3ZpZGVyOiBSZWFjdC5GQzx7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfT4gPSAoeyBjaGlsZHJlbiB9KSA9PiB7XHJcbiAgY29uc3QgY29udGV4dFZhbHVlID0gdXNlQXV0aFN0YXRlKCk7XHJcbiAgcmV0dXJuIDxfQXV0aENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZX0+e2NoaWxkcmVufTwvX0F1dGhDb250ZXh0LlByb3ZpZGVyPjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBfQXV0aFByb3ZpZGVyID0gQXV0aFByb3ZpZGVyO1xyXG5cclxuLyoqXHJcbiAqIHVzZUF1dGhcclxuICogQWNjZXNzIHRoZSBhdXRoZW50aWNhdGlvbiBjb250ZXh0IGluIGFueSBjb21wb25lbnQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdXNlQXV0aCA9ICgpID0+IHtcclxuICBjb25zdCBjdHggPSB1c2VDb250ZXh0KF9BdXRoQ29udGV4dCk7XHJcbiAgaWYgKCFjdHgpIHRocm93IG5ldyBFcnJvcigndXNlQXV0aCBtdXN0IGJlIHVzZWQgd2l0aGluIEF1dGhQcm92aWRlcicpO1xyXG4gIHJldHVybiBjdHg7XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBTUEsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQXlDLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUFBLFNBQUFELHdCQUFBSyxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBUCx1QkFBQSxZQUFBQSxDQUFBSyxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFB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