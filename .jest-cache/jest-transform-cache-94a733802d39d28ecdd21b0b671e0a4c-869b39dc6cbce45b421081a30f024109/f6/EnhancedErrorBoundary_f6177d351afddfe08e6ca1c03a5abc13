509feb58cda5e25690d8171d0db842b3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EnhancedErrorBoundary = exports.DefaultErrorFallback = void 0;
var _react = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Enhanced Error Boundary with Modern Error Handling
 * Implements comprehensive error tracking, recovery strategies, and user-friendly fallbacks
 */

class EnhancedErrorBoundary extends _react.Component {
  constructor(props) {
    super(props);
    this.retryTimeoutId = null;
    this.sessionId = this.generateSessionId();
    this.retry = () => {
      const {
        retryCount
      } = this.state;
      console.log(`[EnhancedErrorBoundary] Attempting recovery (${retryCount + 1})`);
      this.setState(prevState => ({
        hasError: false,
        error: null,
        errorInfo: null,
        retryCount: prevState.retryCount + 1,
        isRecovering: false
      }));
    };
    this.resetError = () => {
      console.log('[EnhancedErrorBoundary] Resetting error state');
      this.setState({
        hasError: false,
        error: null,
        errorInfo: null,
        retryCount: 0,
        isRecovering: false,
        errorId: ''
      });
    };
    this.state = {
      hasError: false,
      error: null,
      errorInfo: null,
      errorId: '',
      retryCount: 0,
      isRecovering: false
    };
  }
  static getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI
    return {
      hasError: true,
      error,
      errorId: EnhancedErrorBoundary.generateErrorId()
    };
  }
  componentDidCatch(error, errorInfo) {
    // Log error details
    console.error('[EnhancedErrorBoundary] Error caught:', error);
    console.error('[EnhancedErrorBoundary] Error info:', errorInfo);
    this.setState({
      error,
      errorInfo
    });

    // Report error
    this.reportError(error, errorInfo);

    // Call custom error handler
    if (this.props.onError) {
      this.props.onError(error, errorInfo);
    }

    // Attempt automatic recovery for certain error types
    if (this.props.enableRecovery && this.shouldAttemptRecovery(error)) {
      this.scheduleRecovery();
    }
  }
  componentDidUpdate(prevProps) {
    const {
      resetOnPropsChange,
      resetKeys
    } = this.props;
    const {
      hasError
    } = this.state;

    // Reset error state if props change (useful for route changes)
    if (hasError && resetOnPropsChange && this.propsHaveChanged(prevProps, resetKeys)) {
      this.resetError();
    }
  }
  componentWillUnmount() {
    if (this.retryTimeoutId) {
      clearTimeout(this.retryTimeoutId);
    }
  }
  propsHaveChanged(prevProps, resetKeys) {
    if (!resetKeys) {
      return JSON.stringify(prevProps) !== JSON.stringify(this.props);
    }
    return resetKeys.some(key => prevProps[key] !== this.props[key]);
  }
  shouldAttemptRecovery(error) {
    // Define which errors should trigger automatic recovery
    const recoverableErrors = ['ChunkLoadError', 'Loading chunk', 'Loading CSS chunk', 'ResizeObserver loop limit exceeded'];
    return recoverableErrors.some(pattern => error.message.includes(pattern) || error.name.includes(pattern));
  }
  scheduleRecovery() {
    const {
      maxRetries = 3
    } = this.props;
    const {
      retryCount
    } = this.state;
    if (retryCount < maxRetries) {
      this.setState({
        isRecovering: true
      });

      // Exponential backoff for retry attempts
      const delay = Math.min(1000 * Math.pow(2, retryCount), 10000);
      this.retryTimeoutId = setTimeout(() => {
        this.retry();
      }, delay);
    }
  }
  reportError(error, errorInfo) {
    const errorReport = {
      timestamp: Date.now(),
      userAgent: navigator.userAgent,
      url: window.location.href,
      sessionId: this.sessionId,
      errorId: this.state.errorId,
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      },
      componentStack: errorInfo.componentStack || '',
      additionalContext: {
        props: this.props,
        retryCount: this.state.retryCount
      }
    };

    // Store error report locally
    this.storeErrorReport(errorReport);

    // Send to error reporting service (if configured)
    this.sendErrorReport(errorReport);
  }
  storeErrorReport(report) {
    try {
      const key = `error_${report.errorId}_${report.timestamp}`;
      localStorage.setItem(key, JSON.stringify(report));

      // Clean up old error reports (keep only last 10)
      this.cleanupErrorReports();
    } catch (e) {
      console.warn('[EnhancedErrorBoundary] Failed to store error report:', e);
    }
  }
  cleanupErrorReports() {
    try {
      const errorKeys = Object.keys(localStorage).filter(key => key.startsWith('error_')).sort().reverse();

      // Remove old reports, keep only the most recent 10
      errorKeys.slice(10).forEach(key => {
        localStorage.removeItem(key);
      });
    } catch (e) {
      console.warn('[EnhancedErrorBoundary] Failed to cleanup error reports:', e);
    }
  }
  async sendErrorReport(report) {
    try {
      // Only send in production or if explicitly enabled
      if (process.env.NODE_ENV !== 'production') {
        console.log('[EnhancedErrorBoundary] Error report (dev mode):', report);
        return;
      }

      // Send to error reporting endpoint
      await fetch('/api/errors', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(report)
      });
    } catch (e) {
      console.warn('[EnhancedErrorBoundary] Failed to send error report:', e);
    }
  }
  static generateErrorId() {
    return `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  generateSessionId() {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  render() {
    const {
      hasError,
      error,
      errorInfo,
      errorId,
      retryCount,
      isRecovering
    } = this.state;
    const {
      children,
      fallback: FallbackComponent
    } = this.props;
    if (hasError && error && errorInfo) {
      // Show recovery loading state
      if (isRecovering) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "flex items-center justify-center min-h-[200px] bg-slate-900 rounded-lg border border-slate-700",
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "text-center p-6",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: "animate-spin rounded-full h-8 w-8 border-b-2 border-yellow-500 mx-auto mb-4"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              className: "text-white text-lg font-medium",
              children: "Recovering..."
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              className: "text-slate-400 text-sm mt-2",
              children: "Attempting to restore functionality"
            })]
          })
        });
      }

      // Use custom fallback component if provided
      if (FallbackComponent) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(FallbackComponent, {
          error: error,
          errorInfo: errorInfo,
          resetError: this.resetError,
          retry: this.retry,
          retryCount: retryCount,
          errorId: errorId
        });
      }

      // Default fallback UI
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(DefaultErrorFallback, {
        error: error,
        errorInfo: errorInfo,
        resetError: this.resetError,
        retry: this.retry,
        retryCount: retryCount,
        errorId: errorId
      });
    }
    return children;
  }
}

/**
 * Default Error Fallback Component
 */
exports.EnhancedErrorBoundary = EnhancedErrorBoundary;
const DefaultErrorFallback = ({
  error,
  errorInfo,
  resetError,
  retry,
  retryCount,
  errorId
}) => {
  const [showDetails, setShowDetails] = _react.default.useState(false);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "min-h-[400px] bg-slate-900 rounded-lg border border-red-500/20 p-6",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "text-center mb-6",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "w-16 h-16 bg-red-500/10 rounded-full flex items-center justify-center mx-auto mb-4",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("svg", {
          className: "w-8 h-8 text-red-500",
          fill: "none",
          stroke: "currentColor",
          viewBox: "0 0 24 24",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 2,
            d: "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"
          })
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h2", {
        className: "text-xl font-bold text-white mb-2",
        children: "Something went wrong"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
        className: "text-slate-400 mb-4",
        children: "We encountered an unexpected error. Our team has been notified."
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
        className: "text-xs text-slate-500 mb-6",
        children: ["Error ID: ", errorId]
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "flex gap-3 justify-center mb-6",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
        onClick: retry,
        disabled: retryCount >= 3,
        className: "px-4 py-2 bg-yellow-500 text-black font-medium rounded-lg hover:bg-yellow-400 disabled:opacity-50 disabled:cursor-not-allowed transition-colors",
        children: retryCount >= 3 ? 'Max Retries Reached' : `Retry${retryCount > 0 ? ` (${retryCount})` : ''}`
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
        onClick: resetError,
        className: "px-4 py-2 bg-slate-700 text-white font-medium rounded-lg hover:bg-slate-600 transition-colors",
        children: "Reset"
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "text-center",
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("button", {
        onClick: () => setShowDetails(!showDetails),
        className: "text-slate-400 hover:text-white text-sm transition-colors",
        children: [showDetails ? 'Hide' : 'Show', " Error Details"]
      })
    }), showDetails && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "mt-4 p-4 bg-slate-800 rounded-lg",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
        className: "text-white font-medium mb-2",
        children: "Error Details:"
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
        className: "text-red-400 text-sm mb-2",
        children: [error.name, ": ", error.message]
      }), error.stack && /*#__PURE__*/(0, _jsxRuntime.jsxs)("details", {
        className: "text-xs text-slate-400",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("summary", {
          className: "cursor-pointer hover:text-white",
          children: "Stack Trace"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("pre", {
          className: "mt-2 whitespace-pre-wrap overflow-x-auto",
          children: error.stack
        })]
      }), errorInfo.componentStack && /*#__PURE__*/(0, _jsxRuntime.jsxs)("details", {
        className: "text-xs text-slate-400 mt-2",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("summary", {
          className: "cursor-pointer hover:text-white",
          children: "Component Stack"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("pre", {
          className: "mt-2 whitespace-pre-wrap overflow-x-auto",
          children: errorInfo.componentStack
        })]
      })]
    })]
  });
};
exports.DefaultErrorFallback = DefaultErrorFallback;
var _default = exports.default = EnhancedErrorBoundary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,