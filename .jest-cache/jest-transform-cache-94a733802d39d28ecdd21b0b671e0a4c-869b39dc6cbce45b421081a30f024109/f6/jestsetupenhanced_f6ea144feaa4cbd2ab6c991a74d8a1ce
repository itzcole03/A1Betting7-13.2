dce840823b64618cbff72bc23bcb22b0
"use strict";

// Jest setup for enhanced config â€” plain JS to avoid TypeScript parsing issues
/* eslint-disable no-undef */
// Provide import.meta.env shim for components that read it
if (typeof global.importMeta === 'undefined') {
  global.importMeta = {
    env: {}
  };
}
if (typeof global.import === 'undefined') {
  global.import = global.import || function () {};
}
// Ensure modules can read import.meta.env
if (typeof global.import !== 'undefined' && typeof global.import.meta === 'undefined') {
  global.import.meta = {
    env: {
      MODE: 'test',
      DEV: false,
      PROD: false,
      VITE_API_URL: 'http://localhost:8000'
    }
  };
}
// Also set window.import.meta for browser code
if (typeof window !== 'undefined' && typeof window.import === 'undefined') {
  window.import = window.import || {};
  window.import.meta = window.import.meta || {
    env: {
      MODE: 'test',
      DEV: false,
      PROD: false
    }
  };
}

// Stub URL.createObjectURL used by components
if (typeof window !== 'undefined' && !window.URL.createObjectURL) {
  window.URL.createObjectURL = function () {
    return 'blob:mock';
  };
}

// No-op for navigation methods that jsdom doesn't implement
if (typeof window !== 'undefined') {
  try {
    const loc = window.location || {};
    if (loc && typeof loc.assign !== 'function') {
      Object.defineProperty(window.location, 'assign', {
        configurable: true,
        writable: true,
        value: () => {}
      });
    }
    if (loc && typeof loc.reload !== 'function') {
      Object.defineProperty(window.location, 'reload', {
        configurable: true,
        writable: true,
        value: () => {}
      });
    }
  } catch (e) {
    // Some environments lock window.location; ignore if we cannot redefine
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnbG9iYWwiLCJpbXBvcnRNZXRhIiwiZW52IiwiaW1wb3J0IiwibWV0YSIsIk1PREUiLCJERVYiLCJQUk9EIiwiVklURV9BUElfVVJMIiwid2luZG93IiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwibG9jIiwibG9jYXRpb24iLCJhc3NpZ24iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJyZWxvYWQiLCJlIl0sInNvdXJjZXMiOlsiamVzdC5zZXR1cC5lbmhhbmNlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBKZXN0IHNldHVwIGZvciBlbmhhbmNlZCBjb25maWcg4oCUIHBsYWluIEpTIHRvIGF2b2lkIFR5cGVTY3JpcHQgcGFyc2luZyBpc3N1ZXNcclxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cclxuLy8gUHJvdmlkZSBpbXBvcnQubWV0YS5lbnYgc2hpbSBmb3IgY29tcG9uZW50cyB0aGF0IHJlYWQgaXRcclxuaWYgKHR5cGVvZiBnbG9iYWwuaW1wb3J0TWV0YSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICBnbG9iYWwuaW1wb3J0TWV0YSA9IHsgZW52OiB7fSB9O1xyXG59XHJcbmlmICh0eXBlb2YgZ2xvYmFsLmltcG9ydCA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICBnbG9iYWwuaW1wb3J0ID0gZ2xvYmFsLmltcG9ydCB8fCBmdW5jdGlvbiAoKSB7fTtcclxufVxyXG4vLyBFbnN1cmUgbW9kdWxlcyBjYW4gcmVhZCBpbXBvcnQubWV0YS5lbnZcclxuaWYgKHR5cGVvZiBnbG9iYWwuaW1wb3J0ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZ2xvYmFsLmltcG9ydC5tZXRhID09PSAndW5kZWZpbmVkJykge1xyXG4gIGdsb2JhbC5pbXBvcnQubWV0YSA9IHsgZW52OiB7IE1PREU6ICd0ZXN0JywgREVWOiBmYWxzZSwgUFJPRDogZmFsc2UsIFZJVEVfQVBJX1VSTDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMCcgfSB9O1xyXG59XHJcbi8vIEFsc28gc2V0IHdpbmRvdy5pbXBvcnQubWV0YSBmb3IgYnJvd3NlciBjb2RlXHJcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmltcG9ydCA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICB3aW5kb3cuaW1wb3J0ID0gd2luZG93LmltcG9ydCB8fCB7fTtcclxuICB3aW5kb3cuaW1wb3J0Lm1ldGEgPSB3aW5kb3cuaW1wb3J0Lm1ldGEgfHwgeyBlbnY6IHsgTU9ERTogJ3Rlc3QnLCBERVY6IGZhbHNlLCBQUk9EOiBmYWxzZSB9IH07XHJcbn1cclxuXHJcbi8vIFN0dWIgVVJMLmNyZWF0ZU9iamVjdFVSTCB1c2VkIGJ5IGNvbXBvbmVudHNcclxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICF3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTCkge1xyXG4gIHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ2Jsb2I6bW9jayc7IH07XHJcbn1cclxuXHJcbi8vIE5vLW9wIGZvciBuYXZpZ2F0aW9uIG1ldGhvZHMgdGhhdCBqc2RvbSBkb2Vzbid0IGltcGxlbWVudFxyXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgbG9jID0gd2luZG93LmxvY2F0aW9uIHx8IHt9O1xyXG4gICAgaWYgKGxvYyAmJiB0eXBlb2YgbG9jLmFzc2lnbiAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LmxvY2F0aW9uLCAnYXNzaWduJywge1xyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcclxuICAgICAgICB2YWx1ZTogKCkgPT4ge30sXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKGxvYyAmJiB0eXBlb2YgbG9jLnJlbG9hZCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LmxvY2F0aW9uLCAncmVsb2FkJywge1xyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcclxuICAgICAgICB2YWx1ZTogKCkgPT4ge30sXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIC8vIFNvbWUgZW52aXJvbm1lbnRzIGxvY2sgd2luZG93LmxvY2F0aW9uOyBpZ25vcmUgaWYgd2UgY2Fubm90IHJlZGVmaW5lXHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLE9BQU9BLE1BQU0sQ0FBQ0MsVUFBVSxLQUFLLFdBQVcsRUFBRTtFQUM1Q0QsTUFBTSxDQUFDQyxVQUFVLEdBQUc7SUFBRUMsR0FBRyxFQUFFLENBQUM7RUFBRSxDQUFDO0FBQ2pDO0FBQ0EsSUFBSSxPQUFPRixNQUFNLENBQUNHLE1BQU0sS0FBSyxXQUFXLEVBQUU7RUFDeENILE1BQU0sQ0FBQ0csTUFBTSxHQUFHSCxNQUFNLENBQUNHLE1BQU0sSUFBSSxZQUFZLENBQUMsQ0FBQztBQUNqRDtBQUNBO0FBQ0EsSUFBSSxPQUFPSCxNQUFNLENBQUNHLE1BQU0sS0FBSyxXQUFXLElBQUksT0FBT0gsTUFBTSxDQUFDRyxNQUFNLENBQUNDLElBQUksS0FBSyxXQUFXLEVBQUU7RUFDckZKLE1BQU0sQ0FBQ0csTUFBTSxDQUFDQyxJQUFJLEdBQUc7SUFBRUYsR0FBRyxFQUFFO01BQUVHLElBQUksRUFBRSxNQUFNO01BQUVDLEdBQUcsRUFBRSxLQUFLO01BQUVDLElBQUksRUFBRSxLQUFLO01BQUVDLFlBQVksRUFBRTtJQUF3QjtFQUFFLENBQUM7QUFDaEg7QUFDQTtBQUNBLElBQUksT0FBT0MsTUFBTSxLQUFLLFdBQVcsSUFBSSxPQUFPQSxNQUFNLENBQUNOLE1BQU0sS0FBSyxXQUFXLEVBQUU7RUFDekVNLE1BQU0sQ0FBQ04sTUFBTSxHQUFHTSxNQUFNLENBQUNOLE1BQU0sSUFBSSxDQUFDLENBQUM7RUFDbkNNLE1BQU0sQ0FBQ04sTUFBTSxDQUFDQyxJQUFJLEdBQUdLLE1BQU0sQ0FBQ04sTUFBTSxDQUFDQyxJQUFJLElBQUk7SUFBRUYsR0FBRyxFQUFFO01BQUVHLElBQUksRUFBRSxNQUFNO01BQUVDLEdBQUcsRUFBRSxLQUFLO01BQUVDLElBQUksRUFBRTtJQUFNO0VBQUUsQ0FBQztBQUMvRjs7QUFFQTtBQUNBLElBQUksT0FBT0UsTUFBTSxLQUFLLFdBQVcsSUFBSSxDQUFDQSxNQUFNLENBQUNDLEdBQUcsQ0FBQ0MsZUFBZSxFQUFFO0VBQ2hFRixNQUFNLENBQUNDLEdBQUcsQ0FBQ0MsZUFBZSxHQUFHLFlBQVk7SUFBRSxPQUFPLFdBQVc7RUFBRSxDQUFDO0FBQ2xFOztBQUVBO0FBQ0EsSUFBSSxPQUFPRixNQUFNLEtBQUssV0FBVyxFQUFFO0VBQ2pDLElBQUk7SUFDRixNQUFNRyxHQUFHLEdBQUdILE1BQU0sQ0FBQ0ksUUFBUSxJQUFJLENBQUMsQ0FBQztJQUNqQyxJQUFJRCxHQUFHLElBQUksT0FBT0EsR0FBRyxDQUFDRSxNQUFNLEtBQUssVUFBVSxFQUFFO01BQzNDQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ1AsTUFBTSxDQUFDSSxRQUFRLEVBQUUsUUFBUSxFQUFFO1FBQy9DSSxZQUFZLEVBQUUsSUFBSTtRQUNsQkMsUUFBUSxFQUFFLElBQUk7UUFDZEMsS0FBSyxFQUFFQSxDQUFBLEtBQU0sQ0FBQztNQUNoQixDQUFDLENBQUM7SUFDSjtJQUNBLElBQUlQLEdBQUcsSUFBSSxPQUFPQSxHQUFHLENBQUNRLE1BQU0sS0FBSyxVQUFVLEVBQUU7TUFDM0NMLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDUCxNQUFNLENBQUNJLFFBQVEsRUFBRSxRQUFRLEVBQUU7UUFDL0NJLFlBQVksRUFBRSxJQUFJO1FBQ2xCQyxRQUFRLEVBQUUsSUFBSTtRQUNkQyxLQUFLLEVBQUVBLENBQUEsS0FBTSxDQUFDO01BQ2hCLENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQyxDQUFDLE9BQU9FLENBQUMsRUFBRTtJQUNWO0VBQUE7QUFFSiIsImlnbm9yZUxpc3QiOltdfQ==