5fb9da7235328d046c3ca338e22f44d0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withPerformanceTracking = exports.usePerformanceTracking = exports.performanceMonitor = void 0;
var React = _interopRequireWildcard(require("react"));
var _logger = require("./logger");
var _performanceMetrics = require("../perf/performanceMetrics");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Performance Monitoring for A1Betting Frontend
 *
 * Tracks loading times, component render performance, and provides
 * insights for optimization.
 */

class PerformanceMonitor {
  constructor() {
    this.metrics = [];
    this.loadStartTimes = new Map();
  }
  /**
   * Start tracking component load time
   */
  startLoading(componentName) {
    this.loadStartTimes.set(componentName, performance.now());
    _logger.logger.debug(`⏱️ Started loading ${componentName}`, {}, 'Performance');
  }

  /**
   * End tracking component load time
   */
  endLoading(componentName) {
    const startTime = this.loadStartTimes.get(componentName);
    if (startTime) {
      const loadTime = performance.now() - startTime;
      this.recordMetric({
        componentName,
        loadTime,
        timestamp: Date.now(),
        userAgent: navigator.userAgent
      });
      this.loadStartTimes.delete(componentName);
      _logger.logger.info(`✅ ${componentName} loaded in ${loadTime.toFixed(2)}ms`, {
        componentName,
        loadTime
      }, 'Performance');
    }
  }

  /**
   * Track component render performance
   */
  trackRender(componentName, renderFn) {
    const startTime = performance.now();
    const result = renderFn();
    const renderTime = performance.now() - startTime;

    // Store render time as a metric
    this.recordMetric({
      componentName,
      loadTime: renderTime,
      renderTime,
      timestamp: Date.now(),
      userAgent: navigator.userAgent
    });
    _logger.logger.debug(`🔄 ${componentName} rendered in ${renderTime.toFixed(2)}ms`, {
      componentName,
      renderTime
    }, 'Performance');
    return result;
  }

  /**
   * Record performance metric
   */
  recordMetric(metric) {
    this.metrics.push(metric);

    // Keep only last 100 metrics to prevent memory leaks
    if (this.metrics.length > 100) {
      this.metrics = this.metrics.slice(-100);
    }

    // Log warnings for slow components
    if (metric.loadTime > 2000) {
      _logger.logger.warn(`🐌 Slow component load: ${metric.componentName} took ${metric.loadTime.toFixed(2)}ms`, {
        metric
      }, 'Performance');
    }
  }

  /**
   * Get performance summary
   */
  getSummary() {
    if (this.metrics.length === 0) {
      return {
        totalComponents: 0,
        averageLoadTime: 0,
        slowestComponent: null,
        fastestComponent: null
      };
    }
    const totalLoadTime = this.metrics.reduce((sum, metric) => sum + metric.loadTime, 0);
    const averageLoadTime = totalLoadTime / this.metrics.length;
    const slowestComponent = this.metrics.reduce((slowest, current) => current.loadTime > slowest.loadTime ? current : slowest);
    const fastestComponent = this.metrics.reduce((fastest, current) => current.loadTime < fastest.loadTime ? current : fastest);
    return {
      totalComponents: this.metrics.length,
      averageLoadTime,
      slowestComponent,
      fastestComponent
    };
  }

  /**
   * Get all metrics
   */
  getMetrics() {
    return [...this.metrics];
  }

  /**
   * Clear all metrics
   */
  clear() {
    this.metrics = [];
    this.loadStartTimes.clear();
  }

  /**
   * Track Core Web Vitals
   */
  trackWebVitals() {
    // Initialize unified web vitals (idempotent)
    (0, _performanceMetrics.initWebVitals)({
      onMetric: metric => {
        // Map to logger categories
        _logger.logger.info(`📊 ${metric.name}: ${metric.value.toFixed(2)}${metric.name === 'CLS' ? '' : 'ms'}`, {
          metric: metric.name,
          value: metric.value,
          rating: metric.rating
        }, 'WebVitals');
      },
      includeNavigationMetrics: true
    });

    // Extra navigation timing diagnostics (one-off) using normalized helper
    const nav = (0, _performanceMetrics.getNavigationTiming)();
    if (nav) {
      _logger.logger.debug('📊 Navigation Timing (normalized)', {
        totalLoadTime: nav.totalLoadTime,
        domContentLoaded: nav.domContentLoaded,
        type: nav.type,
        source: nav.source
      }, 'WebVitals');
    }
  }
}

// Global performance monitor instance
const performanceMonitor = exports.performanceMonitor = new PerformanceMonitor();

/**
 * HOC for tracking component performance
 */
const withPerformanceTracking = (WrappedComponent, componentName) => {
  const ComponentWithPerformanceTracking = props => {
    const name = componentName || WrappedComponent.displayName || WrappedComponent.name || 'UnknownComponent';
    React.useEffect(() => {
      performanceMonitor.startLoading(name);
      return () => {
        performanceMonitor.endLoading(name);
      };
    }, [name]);
    return /*#__PURE__*/React.createElement(WrappedComponent, props);
  };
  ComponentWithPerformanceTracking.displayName = `withPerformanceTracking(${componentName || WrappedComponent.displayName || WrappedComponent.name})`;
  return ComponentWithPerformanceTracking;
};

/**
 * Hook for tracking component performance
 */
exports.withPerformanceTracking = withPerformanceTracking;
const usePerformanceTracking = componentName => {
  React.useEffect(() => {
    performanceMonitor.startLoading(componentName);
    return () => {
      performanceMonitor.endLoading(componentName);
    };
  }, [componentName]);
  const trackOperation = React.useCallback((operationName, operation) => {
    return performanceMonitor.trackRender(`${componentName}.${operationName}`, operation);
  }, [componentName]);
  return {
    trackOperation
  };
};

// Initialize web vitals tracking
exports.usePerformanceTracking = usePerformanceTracking;
if (typeof window !== 'undefined') {
  performanceMonitor.trackWebVitals();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,