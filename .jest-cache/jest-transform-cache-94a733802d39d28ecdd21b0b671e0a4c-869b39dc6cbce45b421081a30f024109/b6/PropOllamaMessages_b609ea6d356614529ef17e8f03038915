290c2f8a26bef8511ce4041a513f1124
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _framerMotion = require("framer-motion");
var _react = _interopRequireWildcard(require("react"));
var _Message = _interopRequireDefault(require("./Message"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// Import PropOllamaMessage interface

const PropOllamaMessages = ({
  messages,
  onSuggestionClick,
  variant = 'cyber' // Provide a default value
}) => {
  const messagesEndRef = (0, _react.useRef)(null);

  // Scroll to bottom on new message
  (0, _react.useEffect)(() => {
    messagesEndRef.current?.scrollIntoView({
      behavior: 'smooth'
    });
  }, [messages]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "flex-1 overflow-y-auto p-6 space-y-4",
    "aria-live": "polite",
    "aria-label": "Chat message history",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.AnimatePresence, {
      children: messages.map((message, index) => /*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.motion.div, {
        initial: {
          opacity: 0,
          y: 20
        },
        animate: {
          opacity: 1,
          y: 0
        },
        exit: {
          opacity: 0,
          y: -20
        },
        transition: {
          duration: 0.3,
          delay: index * 0.1
        },
        role: "listitem",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Message.default, {
          message: message,
          variant: variant,
          onSuggestionClick: onSuggestionClick
        })
      }, message.id))
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      ref: messagesEndRef
    })]
  });
};
var _default = exports.default = PropOllamaMessages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZnJhbWVyTW90aW9uIiwicmVxdWlyZSIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX01lc3NhZ2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJQcm9wT2xsYW1hTWVzc2FnZXMiLCJtZXNzYWdlcyIsIm9uU3VnZ2VzdGlvbkNsaWNrIiwidmFyaWFudCIsIm1lc3NhZ2VzRW5kUmVmIiwidXNlUmVmIiwidXNlRWZmZWN0IiwiY3VycmVudCIsInNjcm9sbEludG9WaWV3IiwiYmVoYXZpb3IiLCJqc3hzIiwiY2xhc3NOYW1lIiwiY2hpbGRyZW4iLCJqc3giLCJBbmltYXRlUHJlc2VuY2UiLCJtYXAiLCJtZXNzYWdlIiwiaW5kZXgiLCJtb3Rpb24iLCJkaXYiLCJpbml0aWFsIiwib3BhY2l0eSIsInkiLCJhbmltYXRlIiwiZXhpdCIsInRyYW5zaXRpb24iLCJkdXJhdGlvbiIsImRlbGF5Iiwicm9sZSIsImlkIiwicmVmIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiUHJvcE9sbGFtYU1lc3NhZ2VzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmltYXRlUHJlc2VuY2UsIG1vdGlvbiB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xyXG5pbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBNZXNzYWdlIGZyb20gJy4vTWVzc2FnZSc7XHJcbmltcG9ydCB7IFByb3BPbGxhbWFNZXNzYWdlIH0gZnJvbSAnLi9Qcm9wT2xsYW1hJzsgLy8gSW1wb3J0IFByb3BPbGxhbWFNZXNzYWdlIGludGVyZmFjZVxyXG5cclxuaW50ZXJmYWNlIFByb3BPbGxhbWFNZXNzYWdlc1Byb3BzIHtcclxuICBtZXNzYWdlczogUHJvcE9sbGFtYU1lc3NhZ2VbXTtcclxuICBvblN1Z2dlc3Rpb25DbGljazogKHN1Z2dlc3Rpb246IHN0cmluZykgPT4gdm9pZDtcclxuICB2YXJpYW50PzogJ2N5YmVyJyB8ICdjbGFzc2ljJztcclxufVxyXG5cclxuY29uc3QgUHJvcE9sbGFtYU1lc3NhZ2VzOiBSZWFjdC5GQzxQcm9wT2xsYW1hTWVzc2FnZXNQcm9wcz4gPSAoe1xyXG4gIG1lc3NhZ2VzLFxyXG4gIG9uU3VnZ2VzdGlvbkNsaWNrLFxyXG4gIHZhcmlhbnQgPSAnY3liZXInLCAvLyBQcm92aWRlIGEgZGVmYXVsdCB2YWx1ZVxyXG59KSA9PiB7XHJcbiAgY29uc3QgbWVzc2FnZXNFbmRSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xyXG5cclxuICAvLyBTY3JvbGwgdG8gYm90dG9tIG9uIG5ldyBtZXNzYWdlXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIG1lc3NhZ2VzRW5kUmVmLmN1cnJlbnQ/LnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xyXG4gIH0sIFttZXNzYWdlc10pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdlxyXG4gICAgICBjbGFzc05hbWU9J2ZsZXgtMSBvdmVyZmxvdy15LWF1dG8gcC02IHNwYWNlLXktNCdcclxuICAgICAgYXJpYS1saXZlPSdwb2xpdGUnXHJcbiAgICAgIGFyaWEtbGFiZWw9J0NoYXQgbWVzc2FnZSBoaXN0b3J5J1xyXG4gICAgPlxyXG4gICAgICA8QW5pbWF0ZVByZXNlbmNlPlxyXG4gICAgICAgIHttZXNzYWdlcy5tYXAoKG1lc3NhZ2UsIGluZGV4KSA9PiAoXHJcbiAgICAgICAgICA8bW90aW9uLmRpdlxyXG4gICAgICAgICAgICBrZXk9e21lc3NhZ2UuaWR9XHJcbiAgICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogMjAgfX1cclxuICAgICAgICAgICAgYW5pbWF0ZT17eyBvcGFjaXR5OiAxLCB5OiAwIH19XHJcbiAgICAgICAgICAgIGV4aXQ9e3sgb3BhY2l0eTogMCwgeTogLTIwIH19XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuMywgZGVsYXk6IGluZGV4ICogMC4xIH19XHJcbiAgICAgICAgICAgIHJvbGU9J2xpc3RpdGVtJ1xyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICA8TWVzc2FnZVxyXG4gICAgICAgICAgICAgIG1lc3NhZ2U9e21lc3NhZ2V9XHJcbiAgICAgICAgICAgICAgdmFyaWFudD17dmFyaWFudH1cclxuICAgICAgICAgICAgICBvblN1Z2dlc3Rpb25DbGljaz17b25TdWdnZXN0aW9uQ2xpY2t9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8L21vdGlvbi5kaXY+XHJcbiAgICAgICAgKSl9XHJcbiAgICAgIDwvQW5pbWF0ZVByZXNlbmNlPlxyXG4gICAgICA8ZGl2IHJlZj17bWVzc2FnZXNFbmRSZWZ9IC8+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUHJvcE9sbGFtYU1lc3NhZ2VzOyAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxhQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFDLHVCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxRQUFBLEdBQUFDLHNCQUFBLENBQUFKLE9BQUE7QUFBZ0MsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBQUEsU0FBQUUsd0JBQUFJLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFOLHVCQUFBLFlBQUFBLENBQUFJLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENB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