7a7a31a8a7e013a5b9f08a47b6334322
"use strict";

_getJestObj().mock('axios');
_getJestObj().mock('../../../services/propOllamaService');
_getJestObj().mock('../../../services/backendDiscovery');

// Mock the exact path used by the component for propOllamaService

// [DEBUG] Top of test file
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _propOllamaService = require("../../../services/propOllamaService");
var _reactQuery = require("@tanstack/react-query");
var _react = require("@testing-library/react");
var _react2 = _interopRequireDefault(require("react"));
var _reactRouterDom = require("react-router-dom");
var _AppContext = require("../../../contexts/AppContext");
var _AuthContext = require("../../../contexts/AuthContext");
var _ThemeContext = require("../../../contexts/ThemeContext");
var _PropOllama = _interopRequireDefault(require("../PropOllama"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
console.log('[DEBUG] Top of PropOllama.test.tsx');
console.log('[DEBUG] Imported propOllamaService in test:', _propOllamaService.propOllamaService);

// Mock matchMedia and scrollIntoView for jsdom and framer-motion requirements
const matchMediaMock = query => ({
  matches: false,
  media: query,
  onchange: null,
  addListener: jest.fn(),
  // deprecated
  removeListener: jest.fn(),
  // deprecated
  addEventListener: jest.fn(),
  removeEventListener: jest.fn(),
  dispatchEvent: jest.fn()
});
Object.defineProperty(HTMLDivElement.prototype, 'scrollIntoView', {
  value: jest.fn(),
  writable: true
});

// Assign matchMedia after function definition
window.matchMedia = matchMediaMock;
global.matchMedia = matchMediaMock;
if (!window.addEventListener) {
  window.addEventListener = jest.fn();
}
if (!document.addEventListener) {
  document.addEventListener = jest.fn();
}
if (!Element.prototype.addEventListener) {
  Element.prototype.addEventListener = jest.fn();
}
if (!Element.prototype.removeEventListener) {
  Element.prototype.removeEventListener = jest.fn();
}
window.alert = jest.fn();
if (!window.addEventListener) {
  window.addEventListener = jest.fn();
}
if (!document.addEventListener) {
  document.addEventListener = jest.fn();
}
if (!Element.prototype.addEventListener) {
  Element.prototype.addEventListener = jest.fn();
}
if (!Element.prototype.removeEventListener) {
  Element.prototype.removeEventListener = jest.fn();
}
window.alert = jest.fn();
const CompositeProvider = ({
  children
}) => /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactQuery.QueryClientProvider, {
  client: new _reactQuery.QueryClient(),
  children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext._AuthProvider, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.MemoryRouter, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ThemeContext._ThemeProvider, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AppContext._AppProvider, {
          children: children
        })
      })
    })
  })
});

// Mock fetch for all PropOllama endpoints
// Helper to match both relative and absolute URLs for PropOllama endpoints
const isPropOllamaEndpoint = (url, endpoint) => {
  // Accepts /api/propollama/endpoint and http://localhost:8000/api/propollama/endpoint (and 8001)
  return url.endsWith(`/api/propollama/${endpoint}`) || url === `/api/propollama/${endpoint}` || url === `http://localhost:8000/api/propollama/${endpoint}` || url === `http://localhost:8001/api/propollama/${endpoint}`;
};
afterEach(() => {
  jest.resetAllMocks();
});
afterEach(() => {
  jest.resetAllMocks();
});
test('displays health check status', async () => {
  (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(CompositeProvider, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_PropOllama.default, {})
  }));
  // Use aria-label for robust querying
  const _healthBtn = _react.screen.getByRole('button', {
    name: /check propollama api health/i
  });
  _react.fireEvent.click(_healthBtn);
  await (0, _react.waitFor)(() => {
    expect(_react.screen.queryByText(/health check failed/i)).not.toBeInTheDocument();
  });
});
test('displays backend error message', async () => {
  (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(CompositeProvider, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_PropOllama.default, {})
  }));
  const _input = _react.screen.getByLabelText(/type your message/i);
  _react.fireEvent.change(_input, {
    target: {
      value: 'error'
    }
  });
  _react.fireEvent.submit(_input.form);
  await (0, _react.waitFor)(() => {
    const alert = _react.screen.getByRole('alert');
    expect(alert).toHaveTextContent(/simulated error/i);
    expect(alert).toHaveTextContent(/traceback/i);
    expect(alert).toHaveTextContent(/http 500/i);
  });
});
test('displays AI response for valid message', async () => {
  (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(CompositeProvider, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_PropOllama.default, {})
  }));
  // Wait for the model dropdown to be populated
  await (0, _react.waitFor)(() => {
    const modelSelect = _react.screen.getByLabelText(/model:/i);
    expect(modelSelect.options.length).toBeGreaterThan(0);
  });
  const _input = _react.screen.getByLabelText(/type your message/i);
  _react.fireEvent.change(_input, {
    target: {
      value: 'hello'
    }
  });
  _react.fireEvent.submit(_input.form);
  // Use getAllByText and filter for the actual AI message
  await (0, _react.waitFor)(() => {
    const aiResponses = _react.screen.getAllByText((content, node) => typeof content === 'string' && content.includes('AI response'), {
      exact: false
    });
    // Find the one that is inside a message bubble (has a parent with role="listitem" and aria-label="AI message")
    const aiMessage = aiResponses.find(node => {
      let el = node.parentElement;
      while (el) {
        if (el.getAttribute && el.getAttribute('aria-label') === 'AI message') {
          return true;
        }
        el = el.parentElement;
      }
      return false;
    });
    expect(aiMessage).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,