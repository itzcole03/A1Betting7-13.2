{"version":3,"names":["_ensureModelMetricsShape","require","describe","it","result","ensureModelMetricsShape","expect","toEqual","model","name","provider","optimization_level","performance","throughput_rps","avg_latency_ms","p95_latency_ms","success_rate","usage","total_requests","input_tokens","output_tokens","total_tokens","originFlags","partialPayload","legacyData","optimizationLevel","opt_level","modelName","system_info","toBe","mappedLegacy","mixedData","toBeFalsy","stringData","partialData","some_other_field","optimization_mode","optimizationTier","tokenData","successData","success_requests"],"sources":["ensureModelMetricsShape.test.ts"],"sourcesContent":["import { ensureModelMetricsShape } from '../ensureModelMetricsShape';\r\n\r\ndescribe('ensureModelMetricsShape', () => {\r\n  it('should handle empty object with full defaults', () => {\r\n    const result = ensureModelMetricsShape({});\r\n    \r\n    expect(result).toEqual({\r\n      model: {\r\n        name: 'Unknown Model',\r\n        provider: 'Unknown Provider', \r\n        optimization_level: 'Basic'\r\n      },\r\n      performance: {\r\n        throughput_rps: 0,\r\n        avg_latency_ms: 0,\r\n        p95_latency_ms: 0,\r\n        success_rate: 0\r\n      },\r\n      usage: {\r\n        total_requests: 0,\r\n        input_tokens: 0,\r\n        output_tokens: 0,\r\n        total_tokens: 0\r\n      },\r\n      originFlags: {\r\n        partialPayload: true\r\n      }\r\n    });\r\n  });\r\n\r\n  it('should map legacy optimization_level fields', () => {\r\n    const legacyData = {\r\n      optimizationLevel: 'Advanced',\r\n      opt_level: 'Phase 3',\r\n      modelName: 'Test Model',\r\n      provider: 'OpenAI',\r\n      system_info: {\r\n        optimization_level: 'Phase 4 Enhanced'\r\n      }\r\n    };\r\n\r\n    const result = ensureModelMetricsShape(legacyData);\r\n    \r\n    // Should use first found value (optimizationLevel)\r\n    expect(result.model.optimization_level).toBe('Advanced');\r\n    expect(result.model.name).toBe('Test Model');\r\n    expect(result.model.provider).toBe('OpenAI');\r\n    expect(result.originFlags?.mappedLegacy).toBe(true);\r\n  });\r\n\r\n  it('should prefer canonical structure over legacy', () => {\r\n    const mixedData = {\r\n      model: {\r\n        name: 'Canonical Model',\r\n        provider: 'Canonical Provider',\r\n        optimization_level: 'Canonical Level'\r\n      },\r\n      // Legacy fields should be ignored\r\n      modelName: 'Legacy Model',\r\n      provider: 'Legacy Provider',\r\n      optimizationLevel: 'Legacy Level',\r\n      performance: {\r\n        throughput_rps: 100,\r\n        avg_latency_ms: 50\r\n      }\r\n    };\r\n\r\n    const result = ensureModelMetricsShape(mixedData);\r\n    \r\n    expect(result.model.name).toBe('Canonical Model');\r\n    expect(result.model.provider).toBe('Canonical Provider');\r\n    expect(result.model.optimization_level).toBe('Canonical Level');\r\n    expect(result.performance.throughput_rps).toBe(100);\r\n    expect(result.originFlags?.mappedLegacy).toBeFalsy();\r\n  });\r\n\r\n  it('should coerce string numbers to numbers', () => {\r\n    const stringData = {\r\n      model: {\r\n        name: 'String Model',\r\n        provider: 'Test',\r\n        optimization_level: 'Basic'\r\n      },\r\n      performance: {\r\n        throughput_rps: '123.45',\r\n        avg_latency_ms: '67.89',\r\n        success_rate: '0.95'\r\n      },\r\n      usage: {\r\n        total_requests: '1000',\r\n        input_tokens: '500',\r\n        output_tokens: '300'\r\n      }\r\n    };\r\n\r\n    const result = ensureModelMetricsShape(stringData);\r\n    \r\n    expect(result.performance.throughput_rps).toBe(123.45);\r\n    expect(result.performance.avg_latency_ms).toBe(67.89);\r\n    expect(result.performance.success_rate).toBe(0.95);\r\n    expect(result.usage.total_requests).toBe(1000);\r\n    expect(result.usage.total_tokens).toBe(800); // Derived sum\r\n  });\r\n\r\n  it('should mark partial payload when sections missing', () => {\r\n    const partialData = {\r\n      model: {\r\n        name: 'Partial Model',\r\n        optimization_level: 'Basic'\r\n      },\r\n      // Missing performance and usage sections\r\n      some_other_field: 'value'\r\n    };\r\n\r\n    const result = ensureModelMetricsShape(partialData);\r\n    \r\n    expect(result.originFlags?.partialPayload).toBe(true);\r\n    // Should still have safe defaults for missing sections\r\n    expect(result.performance.throughput_rps).toBe(0);\r\n    expect(result.usage.total_requests).toBe(0);\r\n  });\r\n\r\n  it('should handle multiple legacy optimization variants', () => {\r\n    const legacyData = {\r\n      opt_level: 'Phase 2',\r\n      optimization_mode: 'Fast', \r\n      optimizationTier: 'High',\r\n      modelName: 'Multi-Legacy Model'\r\n    };\r\n\r\n    const result = ensureModelMetricsShape(legacyData);\r\n    \r\n    // Should use first match in legacy path order\r\n    expect(result.model.optimization_level).toBe('Phase 2');\r\n    expect(result.model.name).toBe('Multi-Legacy Model');\r\n    expect(result.originFlags?.mappedLegacy).toBe(true);\r\n  });\r\n\r\n  it('should derive total_tokens from input + output', () => {\r\n    const tokenData = {\r\n      model: { name: 'Token Model', provider: 'Test', optimization_level: 'Basic' },\r\n      performance: { throughput_rps: 10, avg_latency_ms: 100, p95_latency_ms: 200, success_rate: 0.9 },\r\n      usage: {\r\n        total_requests: 100,\r\n        input_tokens: 150,\r\n        output_tokens: 75,\r\n        // total_tokens missing - should be derived\r\n      }\r\n    };\r\n\r\n    const result = ensureModelMetricsShape(tokenData);\r\n    \r\n    expect(result.usage.total_tokens).toBe(225); // 150 + 75\r\n  });\r\n\r\n  it('should derive success_rate from success_requests/total_requests', () => {\r\n    const successData = {\r\n      model: { name: 'Success Model', provider: 'Test', optimization_level: 'Basic' },\r\n      performance: { throughput_rps: 10, avg_latency_ms: 100, p95_latency_ms: 200 },\r\n      // Missing success_rate in performance section\r\n      success_requests: 85,\r\n      total_requests: 100,\r\n      usage: { total_requests: 100, input_tokens: 0, output_tokens: 0, total_tokens: 0 }\r\n    };\r\n\r\n    const result = ensureModelMetricsShape(successData);\r\n    \r\n    expect(result.performance.success_rate).toBe(0.85);\r\n    expect(result.originFlags?.mappedLegacy).toBe(true);\r\n  });\r\n\r\n  it('should handle null input gracefully', () => {\r\n    const result = ensureModelMetricsShape(null);\r\n    \r\n    expect(result.model.name).toBe('Unknown Model');\r\n    expect(result.model.optimization_level).toBe('Basic');\r\n    expect(result.originFlags?.partialPayload).toBe(true);\r\n  });\r\n\r\n  it('should handle non-object input gracefully', () => {\r\n    const result = ensureModelMetricsShape('invalid input');\r\n    \r\n    expect(result.model.name).toBe('Unknown Model');\r\n    expect(result.performance.throughput_rps).toBe(0);\r\n    expect(result.usage.total_requests).toBe(0);\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}