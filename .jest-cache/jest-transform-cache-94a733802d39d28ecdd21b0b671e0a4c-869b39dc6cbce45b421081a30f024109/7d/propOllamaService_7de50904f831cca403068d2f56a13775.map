{"version":3,"names":["_axios","_interopRequireDefault","require","PropOllamaService","constructor","chatHistory","getBackendUrl","envUrl","process","env","VITE_API_URL","REACT_APP_API_URL","replace","sendChatMessage","request","baseUrl","console","log","response","axios","post","headers","timeout","addToHistory","message","data","confidence","shap_explanation","suggestions","content","error","errorMessage","isAxiosError","backendError","JSON","stringify","toString","status","errJson","detail","trace","Array","isArray","map","d","msg","join","Error","getPropOllamaHealth","get","getAvailableModels","models","getModelHealth","modelName","params","model_name","model_health","getConversationStarters","type","metadata","id","Date","now","Math","random","substr","timestamp","toISOString","push","length","slice","getChatHistory","clearChatHistory","getSystemStatus","model_ready","model_status","response_time_avg","uptime","accuracy","formatShapExplanation","shap_values","Object","entries","feature","value","impact","l","toUpperCase","importance","abs","sort","a","b","propOllamaService","exports","_default","default"],"sources":["propOllamaService.ts"],"sourcesContent":["/**\r\n * PropOllama Service\r\n * Connects frontend to sophisticated PropOllama backend chat engine\r\n * Provides real ML predictions with conversational explanations\r\n */\r\n\r\nimport axios, { AxiosResponse } from 'axios';\r\n\r\nexport interface PropOllamaRequest {\r\n  message: string;\r\n  analysisType?: 'prop' | 'spread' | 'total' | 'strategy' | 'general';\r\n  context?: Record<string, unknown>;\r\n  model?: string; // Add model to request interface\r\n  includeWebResearch?: boolean; // Add includeWebResearch\r\n  requestBestBets?: boolean; // Add requestBestBets\r\n}\r\n\r\nexport interface PropOllamaResponse {\r\n  content: string;\r\n  response?: string; // Add response field for backend compatibility\r\n  confidence: number;\r\n  suggestions: string[];\r\n  model_used: string;\r\n  response_time: number;\r\n  analysis_type: string;\r\n  shap_explanation?: Record<string, number>;\r\n  best_bets?: any[]; // Add best_bets to response interface\r\n}\r\n\r\nexport interface PropOllamaChatMessage {\r\n  id: string;\r\n  type: 'user' | 'assistant';\r\n  content: string;\r\n  timestamp: string;\r\n  confidence?: number;\r\n  shap_explanation?: Record<string, number>;\r\n  suggestions?: string[];\r\n}\r\n\r\n// Health status interface from backend\r\nexport interface ScraperHealth {\r\n  is_healthy?: boolean;\r\n  is_stale?: boolean;\r\n  last_success?: string;\r\n  last_error?: string;\r\n  healing_attempts?: number;\r\n}\r\n\r\nexport interface ModelHealthStatus {\r\n  status: string;\r\n  last_error?: string;\r\n  last_update?: string;\r\n}\r\n\r\nclass PropOllamaService {\r\n  private chatHistory: PropOllamaChatMessage[] = [];\r\n\r\n  private async getBackendUrl(): Promise<string> {\r\n    // Use environment variable for tests or manual override\r\n    const envUrl = process.env.VITE_API_URL || process.env.REACT_APP_API_URL;\r\n    if (envUrl) {\r\n      return envUrl.replace(/\\/$/, '');\r\n    }\r\n    // Default to localhost\r\n    return 'http://localhost:8000';\r\n  }\r\n\r\n  async sendChatMessage(request: PropOllamaRequest): Promise<PropOllamaResponse> {\r\n    try {\r\n      const baseUrl = await this.getBackendUrl();\r\n      console.log(`ðŸ¤– Sending message to PropOllama at ${baseUrl}`);\r\n\r\n      const response: AxiosResponse<any> = await axios.post(\r\n        `${baseUrl}/api/propollama/chat`,\r\n        request,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          timeout: 60000, // Increase timeout for chat responses\r\n        }\r\n      );\r\n\r\n      this.addToHistory('user', request.message);\r\n      // Use response.data.response as the analyst reply (backend contract)\r\n      this.addToHistory('assistant', response.data.response, {\r\n        // Optionally map other fields if present\r\n        confidence: response.data.confidence,\r\n        shap_explanation: response.data.shap_explanation,\r\n        suggestions: response.data.suggestions,\r\n      });\r\n\r\n      // For compatibility, return an object with content as the analyst reply\r\n      return {\r\n        ...response.data,\r\n        content: response.data.response,\r\n      };\r\n    } catch (error: any) {\r\n      console.error('PropOllama chat error:', error);\r\n      let errorMessage = 'Failed to get PropOllama response.';\r\n\r\n      if (axios.isAxiosError(error) && error.response) {\r\n        let backendError = '';\r\n        try {\r\n          backendError = JSON.stringify(error.response.data);\r\n        } catch {\r\n          backendError = error.response.data.toString();\r\n        }\r\n\r\n        errorMessage = `HTTP ${error.response.status}`;\r\n        try {\r\n          const errJson = error.response.data;\r\n          if (errJson?.detail) {\r\n            if (typeof errJson.detail === 'string') {\r\n              errorMessage += `: ${errJson.detail}`;\r\n            } else if (typeof errJson.detail === 'object') {\r\n              if (errJson.detail.message) errorMessage += `: ${errJson.detail.message}`;\r\n              if (errJson.detail.trace) errorMessage += `\\nTrace: ${errJson.detail.trace}`;\r\n            } else if (Array.isArray(errJson.detail)) {\r\n              errorMessage += `: ${errJson.detail\r\n                .map((d: any) => d?.msg || JSON.stringify(d))\r\n                .join(', ')}`;\r\n            }\r\n          }\r\n        } catch {\r\n          errorMessage += `: ${backendError}`;\r\n        }\r\n      } else if (error instanceof Error) {\r\n        errorMessage = error.message;\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n  }\r\n\r\n  async getPropOllamaHealth(): Promise<any> {\r\n    try {\r\n      const baseUrl = await this.getBackendUrl();\r\n      const response = await axios.get(`${baseUrl}/api/propollama/health`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching PropOllama health:', error);\r\n      throw new Error('Failed to fetch PropOllama health');\r\n    }\r\n  }\r\n\r\n  async getAvailableModels(): Promise<string[]> {\r\n    try {\r\n      const baseUrl = await this.getBackendUrl();\r\n      const response = await axios.get(`${baseUrl}/api/propollama/models`);\r\n      if (Array.isArray(response.data.models)) {\r\n        return response.data.models;\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error fetching available models:', error);\r\n      throw new Error('Failed to fetch available models');\r\n    }\r\n  }\r\n\r\n  async getModelHealth(modelName: string): Promise<ModelHealthStatus> {\r\n    try {\r\n      const baseUrl = await this.getBackendUrl();\r\n      const response = await axios.get(`${baseUrl}/api/propollama/model_health`, {\r\n        params: { model_name: modelName },\r\n      });\r\n      return response.data.model_health;\r\n    } catch (error) {\r\n      console.error(`Error fetching health for model ${modelName}:`, error);\r\n      throw new Error(`Failed to fetch health for model ${modelName}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get conversation starters for common queries\r\n   */\r\n  getConversationStarters(): string[] {\r\n    return [\r\n      \"What are today's best betting opportunities?\",\r\n      'Explain the Lakers vs Warriors prediction',\r\n      \"How does weather affect tonight's games?\",\r\n      \"What's your confidence in the over/under bets?\",\r\n      'Show me SHAP explanations for top picks',\r\n      'What injury reports should I know about?',\r\n      'How is the ML ensemble performing today?',\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Add message to chat history\r\n   */\r\n  private addToHistory(\r\n    type: 'user' | 'assistant',\r\n    content: string,\r\n    metadata?: {\r\n      confidence?: number;\r\n      shap_explanation?: Record<string, number>;\r\n      suggestions?: string[];\r\n    }\r\n  ): void {\r\n    const message: PropOllamaChatMessage = {\r\n      id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      type,\r\n      content,\r\n      timestamp: new Date().toISOString(),\r\n      ...metadata,\r\n    };\r\n\r\n    this.chatHistory.push(message);\r\n\r\n    // Keep only last 50 messages to prevent memory issues\r\n    if (this.chatHistory.length > 50) {\r\n      this.chatHistory = this.chatHistory.slice(-50);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get chat history\r\n   */\r\n  getChatHistory(): PropOllamaChatMessage[] {\r\n    return [...this.chatHistory];\r\n  }\r\n\r\n  /**\r\n   * Clear chat history\r\n   */\r\n  clearChatHistory(): void {\r\n    this.chatHistory = [];\r\n  }\r\n\r\n  /**\r\n   * Get PropOllama system status\r\n   */\r\n  async getSystemStatus(): Promise<{\r\n    status: string;\r\n    model_ready: boolean;\r\n    response_time_avg: number;\r\n    accuracy: number;\r\n  }> {\r\n    try {\r\n      const baseUrl = await this.getBackendUrl();\r\n      const response = await axios.get(`${baseUrl}/health`);\r\n      return {\r\n        status: response.data.status || 'unknown',\r\n        model_ready: response.data.model_status === 'ready',\r\n        response_time_avg: response.data.uptime || 0,\r\n        accuracy: 0.964, // Our ensemble accuracy\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to get PropOllama status:', error);\r\n      return {\r\n        status: 'error',\r\n        model_ready: false,\r\n        response_time_avg: 0,\r\n        accuracy: 0,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Format SHAP explanation for display\r\n   */\r\n  formatShapExplanation(shap_values: Record<string, number>): Array<{\r\n    feature: string;\r\n    importance: number;\r\n    impact: 'positive' | 'negative' | 'neutral';\r\n  }> {\r\n    return Object.entries(shap_values || {})\r\n      .map(([feature, value]) => {\r\n        const impact: 'positive' | 'negative' | 'neutral' =\r\n          value > 0.05 ? 'positive' : value < -0.05 ? 'negative' : 'neutral';\r\n\r\n        return {\r\n          feature: feature.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()),\r\n          importance: Math.abs(value),\r\n          impact,\r\n        };\r\n      })\r\n      .sort((a, b) => b.importance - a.importance);\r\n  }\r\n}\r\n\r\nexport const propOllamaService = new PropOllamaService();\r\nexport default propOllamaService;\r\n"],"mappings":";;;;;;;AAMA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AANA;AACA;AACA;AACA;AACA;;AAmCA;;AAeA,MAAMC,iBAAiB,CAAC;EAAAC,YAAA;IAAA,KACdC,WAAW,GAA4B,EAAE;EAAA;EAEjD,MAAcC,aAAaA,CAAA,EAAoB;IAC7C;IACA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,YAAY,IAAIF,OAAO,CAACC,GAAG,CAACE,iBAAiB;IACxE,IAAIJ,MAAM,EAAE;MACV,OAAOA,MAAM,CAACK,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAClC;IACA;IACA,OAAO,uBAAuB;EAChC;EAEA,MAAMC,eAAeA,CAACC,OAA0B,EAA+B;IAC7E,IAAI;MACF,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACT,aAAa,CAAC,CAAC;MAC1CU,OAAO,CAACC,GAAG,CAAC,uCAAuCF,OAAO,EAAE,CAAC;MAE7D,MAAMG,QAA4B,GAAG,MAAMC,cAAK,CAACC,IAAI,CACnD,GAAGL,OAAO,sBAAsB,EAChCD,OAAO,EACP;QACEO,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,OAAO,EAAE,KAAK,CAAE;MAClB,CACF,CAAC;MAED,IAAI,CAACC,YAAY,CAAC,MAAM,EAAET,OAAO,CAACU,OAAO,CAAC;MAC1C;MACA,IAAI,CAACD,YAAY,CAAC,WAAW,EAAEL,QAAQ,CAACO,IAAI,CAACP,QAAQ,EAAE;QACrD;QACAQ,UAAU,EAAER,QAAQ,CAACO,IAAI,CAACC,UAAU;QACpCC,gBAAgB,EAAET,QAAQ,CAACO,IAAI,CAACE,gBAAgB;QAChDC,WAAW,EAAEV,QAAQ,CAACO,IAAI,CAACG;MAC7B,CAAC,CAAC;;MAEF;MACA,OAAO;QACL,GAAGV,QAAQ,CAACO,IAAI;QAChBI,OAAO,EAAEX,QAAQ,CAACO,IAAI,CAACP;MACzB,CAAC;IACH,CAAC,CAAC,OAAOY,KAAU,EAAE;MACnBd,OAAO,CAACc,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,IAAIC,YAAY,GAAG,oCAAoC;MAEvD,IAAIZ,cAAK,CAACa,YAAY,CAACF,KAAK,CAAC,IAAIA,KAAK,CAACZ,QAAQ,EAAE;QAC/C,IAAIe,YAAY,GAAG,EAAE;QACrB,IAAI;UACFA,YAAY,GAAGC,IAAI,CAACC,SAAS,CAACL,KAAK,CAACZ,QAAQ,CAACO,IAAI,CAAC;QACpD,CAAC,CAAC,MAAM;UACNQ,YAAY,GAAGH,KAAK,CAACZ,QAAQ,CAACO,IAAI,CAACW,QAAQ,CAAC,CAAC;QAC/C;QAEAL,YAAY,GAAG,QAAQD,KAAK,CAACZ,QAAQ,CAACmB,MAAM,EAAE;QAC9C,IAAI;UACF,MAAMC,OAAO,GAAGR,KAAK,CAACZ,QAAQ,CAACO,IAAI;UACnC,IAAIa,OAAO,EAAEC,MAAM,EAAE;YACnB,IAAI,OAAOD,OAAO,CAACC,MAAM,KAAK,QAAQ,EAAE;cACtCR,YAAY,IAAI,KAAKO,OAAO,CAACC,MAAM,EAAE;YACvC,CAAC,MAAM,IAAI,OAAOD,OAAO,CAACC,MAAM,KAAK,QAAQ,EAAE;cAC7C,IAAID,OAAO,CAACC,MAAM,CAACf,OAAO,EAAEO,YAAY,IAAI,KAAKO,OAAO,CAACC,MAAM,CAACf,OAAO,EAAE;cACzE,IAAIc,OAAO,CAACC,MAAM,CAACC,KAAK,EAAET,YAAY,IAAI,YAAYO,OAAO,CAACC,MAAM,CAACC,KAAK,EAAE;YAC9E,CAAC,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACJ,OAAO,CAACC,MAAM,CAAC,EAAE;cACxCR,YAAY,IAAI,KAAKO,OAAO,CAACC,MAAM,CAChCI,GAAG,CAAEC,CAAM,IAAKA,CAAC,EAAEC,GAAG,IAAIX,IAAI,CAACC,SAAS,CAACS,CAAC,CAAC,CAAC,CAC5CE,IAAI,CAAC,IAAI,CAAC,EAAE;YACjB;UACF;QACF,CAAC,CAAC,MAAM;UACNf,YAAY,IAAI,KAAKE,YAAY,EAAE;QACrC;MACF,CAAC,MAAM,IAAIH,KAAK,YAAYiB,KAAK,EAAE;QACjChB,YAAY,GAAGD,KAAK,CAACN,OAAO;MAC9B;MACA,MAAM,IAAIuB,KAAK,CAAChB,YAAY,CAAC;IAC/B;EACF;EAEA,MAAMiB,mBAAmBA,CAAA,EAAiB;IACxC,IAAI;MACF,MAAMjC,OAAO,GAAG,MAAM,IAAI,CAACT,aAAa,CAAC,CAAC;MAC1C,MAAMY,QAAQ,GAAG,MAAMC,cAAK,CAAC8B,GAAG,CAAC,GAAGlC,OAAO,wBAAwB,CAAC;MACpE,OAAOG,QAAQ,CAACO,IAAI;IACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,MAAM,IAAIiB,KAAK,CAAC,mCAAmC,CAAC;IACtD;EACF;EAEA,MAAMG,kBAAkBA,CAAA,EAAsB;IAC5C,IAAI;MACF,MAAMnC,OAAO,GAAG,MAAM,IAAI,CAACT,aAAa,CAAC,CAAC;MAC1C,MAAMY,QAAQ,GAAG,MAAMC,cAAK,CAAC8B,GAAG,CAAC,GAAGlC,OAAO,wBAAwB,CAAC;MACpE,IAAI0B,KAAK,CAACC,OAAO,CAACxB,QAAQ,CAACO,IAAI,CAAC0B,MAAM,CAAC,EAAE;QACvC,OAAOjC,QAAQ,CAACO,IAAI,CAAC0B,MAAM;MAC7B;MACA,OAAO,EAAE;IACX,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAM,IAAIiB,KAAK,CAAC,kCAAkC,CAAC;IACrD;EACF;EAEA,MAAMK,cAAcA,CAACC,SAAiB,EAA8B;IAClE,IAAI;MACF,MAAMtC,OAAO,GAAG,MAAM,IAAI,CAACT,aAAa,CAAC,CAAC;MAC1C,MAAMY,QAAQ,GAAG,MAAMC,cAAK,CAAC8B,GAAG,CAAC,GAAGlC,OAAO,8BAA8B,EAAE;QACzEuC,MAAM,EAAE;UAAEC,UAAU,EAAEF;QAAU;MAClC,CAAC,CAAC;MACF,OAAOnC,QAAQ,CAACO,IAAI,CAAC+B,YAAY;IACnC,CAAC,CAAC,OAAO1B,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,mCAAmCuB,SAAS,GAAG,EAAEvB,KAAK,CAAC;MACrE,MAAM,IAAIiB,KAAK,CAAC,oCAAoCM,SAAS,EAAE,CAAC;IAClE;EACF;;EAEA;AACF;AACA;EACEI,uBAAuBA,CAAA,EAAa;IAClC,OAAO,CACL,8CAA8C,EAC9C,2CAA2C,EAC3C,0CAA0C,EAC1C,gDAAgD,EAChD,yCAAyC,EACzC,0CAA0C,EAC1C,0CAA0C,CAC3C;EACH;;EAEA;AACF;AACA;EACUlC,YAAYA,CAClBmC,IAA0B,EAC1B7B,OAAe,EACf8B,QAIC,EACK;IACN,MAAMnC,OAA8B,GAAG;MACrCoC,EAAE,EAAE,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC5B,QAAQ,CAAC,EAAE,CAAC,CAAC6B,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;MAClEP,IAAI;MACJ7B,OAAO;MACPqC,SAAS,EAAE,IAAIL,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC,CAAC;MACnC,GAAGR;IACL,CAAC;IAED,IAAI,CAACtD,WAAW,CAAC+D,IAAI,CAAC5C,OAAO,CAAC;;IAE9B;IACA,IAAI,IAAI,CAACnB,WAAW,CAACgE,MAAM,GAAG,EAAE,EAAE;MAChC,IAAI,CAAChE,WAAW,GAAG,IAAI,CAACA,WAAW,CAACiE,KAAK,CAAC,CAAC,EAAE,CAAC;IAChD;EACF;;EAEA;AACF;AACA;EACEC,cAAcA,CAAA,EAA4B;IACxC,OAAO,CAAC,GAAG,IAAI,CAAClE,WAAW,CAAC;EAC9B;;EAEA;AACF;AACA;EACEmE,gBAAgBA,CAAA,EAAS;IACvB,IAAI,CAACnE,WAAW,GAAG,EAAE;EACvB;;EAEA;AACF;AACA;EACE,MAAMoE,eAAeA,CAAA,EAKlB;IACD,IAAI;MACF,MAAM1D,OAAO,GAAG,MAAM,IAAI,CAACT,aAAa,CAAC,CAAC;MAC1C,MAAMY,QAAQ,GAAG,MAAMC,cAAK,CAAC8B,GAAG,CAAC,GAAGlC,OAAO,SAAS,CAAC;MACrD,OAAO;QACLsB,MAAM,EAAEnB,QAAQ,CAACO,IAAI,CAACY,MAAM,IAAI,SAAS;QACzCqC,WAAW,EAAExD,QAAQ,CAACO,IAAI,CAACkD,YAAY,KAAK,OAAO;QACnDC,iBAAiB,EAAE1D,QAAQ,CAACO,IAAI,CAACoD,MAAM,IAAI,CAAC;QAC5CC,QAAQ,EAAE,KAAK,CAAE;MACnB,CAAC;IACH,CAAC,CAAC,OAAOhD,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,OAAO;QACLO,MAAM,EAAE,OAAO;QACfqC,WAAW,EAAE,KAAK;QAClBE,iBAAiB,EAAE,CAAC;QACpBE,QAAQ,EAAE;MACZ,CAAC;IACH;EACF;;EAEA;AACF;AACA;EACEC,qBAAqBA,CAACC,WAAmC,EAItD;IACD,OAAOC,MAAM,CAACC,OAAO,CAACF,WAAW,IAAI,CAAC,CAAC,CAAC,CACrCrC,GAAG,CAAC,CAAC,CAACwC,OAAO,EAAEC,KAAK,CAAC,KAAK;MACzB,MAAMC,MAA2C,GAC/CD,KAAK,GAAG,IAAI,GAAG,UAAU,GAAGA,KAAK,GAAG,CAAC,IAAI,GAAG,UAAU,GAAG,SAAS;MAEpE,OAAO;QACLD,OAAO,EAAEA,OAAO,CAACvE,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE0E,CAAC,IAAIA,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;QAC1EC,UAAU,EAAEzB,IAAI,CAAC0B,GAAG,CAACL,KAAK,CAAC;QAC3BC;MACF,CAAC;IACH,CAAC,CAAC,CACDK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACJ,UAAU,GAAGG,CAAC,CAACH,UAAU,CAAC;EAChD;AACF;AAEO,MAAMK,iBAAiB,GAAAC,OAAA,CAAAD,iBAAA,GAAG,IAAI1F,iBAAiB,CAAC,CAAC;AAAC,IAAA4F,QAAA,GAAAD,OAAA,CAAAE,OAAA,GAC1CH,iBAAiB","ignoreList":[]}