b6817bf3dbe492777455e8ca130edc69
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildWebSocketUrl = buildWebSocketUrl;
exports.getOrPersistClientId = getOrPersistClientId;
exports.resolveWebSocketBase = resolveWebSocketBase;
exports.validateWebSocketUrl = validateWebSocketUrl;
/**
 * Canonical WebSocket URL Builder
 * Single source of truth for WebSocket URL construction
 */

// Client ID persistence utility
function getOrPersistClientId(storageKey = 'ws_client_id', passedClientId) {
  let clientId = passedClientId;

  // Try to get from storage first
  const storedClientId = window.localStorage.getItem(storageKey);
  const initialFromStorage = !!storedClientId;
  if (!clientId && storedClientId) {
    clientId = storedClientId;
  }

  // Generate new one if none available
  if (!clientId) {
    clientId = `client_${Math.random().toString(36).substr(2, 9)}`;
  }

  // Always persist to storage
  window.localStorage.setItem(storageKey, clientId);

  // Dev-only diagnostic log
  if (import.meta.env.DEV) {
    // eslint-disable-next-line no-console
    console.log('[ClientIdDiag]', {
      initialFromStorage,
      passedIn: !!passedClientId,
      finalClientId: clientId
    });
  }
  return clientId;
}

// Environment resolution helper
function resolveWebSocketBase() {
  let baseUrl = import.meta.env.VITE_WS_URL;

  // Check for legacy path in environment and sanitize
  if (baseUrl && baseUrl.includes('client_/ws')) {
    // eslint-disable-next-line no-console
    console.warn('[EnvDiag][LegacyInEnv] Legacy WebSocket path detected in environment, sanitizing:', baseUrl);
    baseUrl = baseUrl.replace(/\/client_\/ws.*$/, '');
  }

  // Default fallback
  if (!baseUrl) {
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const host = window.location.hostname;
    const port = host === 'localhost' ? '8000' : window.location.port;
    baseUrl = `${protocol}//${host}${port ? `:${port}` : ''}`;
  }
  return baseUrl;
}

/**
 * Canonical WebSocket URL Builder
 * MUST be used for all WebSocket URL construction
 */
function buildWebSocketUrl(options = {}) {
  const {
    clientId: providedClientId,
    role = 'frontend',
    version = 1,
    baseUrl: providedBaseUrl
  } = options;

  // Resolve base URL
  const baseUrl = providedBaseUrl || resolveWebSocketBase();

  // Get or generate client ID
  const clientId = getOrPersistClientId('ws_client_id', providedClientId);
  try {
    // Use URL constructor for robust path building
    const url = new URL('/ws/client', baseUrl);
    url.searchParams.set('client_id', clientId);
    url.searchParams.set('version', String(version));
    url.searchParams.set('role', role);
    const result = url.toString();

    // Defensive assertion - dev only
    if (import.meta.env.DEV) {
      if (result.includes('client_/ws')) {
        // eslint-disable-next-line no-console
        console.error('[WSBuildDiag][LegacyDetected]', {
          url: result,
          stack: new Error().stack
        });
        throw new Error('Legacy websocket path constructed after migration');
      }

      // eslint-disable-next-line no-console
      console.log('[WSBuildDiag] Built canonical WebSocket URL:', result);
    }
    return result;
  } catch (error) {
    // Fallback with defensive assertion
    const params = new URLSearchParams();
    params.set('client_id', clientId);
    params.set('version', String(version));
    params.set('role', role);
    const fallbackUrl = `${baseUrl}/ws/client?${params.toString()}`;

    // Defensive assertion on fallback too
    if (import.meta.env.DEV && fallbackUrl.includes('client_/ws')) {
      // eslint-disable-next-line no-console
      console.error('[WSBuildDiag][LegacyDetected] Even fallback created legacy path!', {
        url: fallbackUrl,
        error,
        stack: new Error().stack
      });
      throw new Error('Legacy websocket path constructed in fallback after migration');
    }
    if (import.meta.env.DEV) {
      // eslint-disable-next-line no-console
      console.warn('[WSBuildDiag] URL constructor failed, using fallback:', fallbackUrl, error);
    }
    return fallbackUrl;
  }
}

// Validate that a URL doesn't contain legacy patterns
function validateWebSocketUrl(url) {
  return !url.includes('client_/ws');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRPclBlcnNpc3RDbGllbnRJZCIsInN0b3JhZ2VLZXkiLCJwYXNzZWRDbGllbnRJZCIsImNsaWVudElkIiwic3RvcmVkQ2xpZW50SWQiLCJ3aW5kb3ciLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiaW5pdGlhbEZyb21TdG9yYWdlIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwic2V0SXRlbSIsImltcG9ydCIsIm1ldGEiLCJlbnYiLCJERVYiLCJjb25zb2xlIiwibG9nIiwicGFzc2VkSW4iLCJmaW5hbENsaWVudElkIiwicmVzb2x2ZVdlYlNvY2tldEJhc2UiLCJiYXNlVXJsIiwiVklURV9XU19VUkwiLCJpbmNsdWRlcyIsIndhcm4iLCJyZXBsYWNlIiwicHJvdG9jb2wiLCJsb2NhdGlvbiIsImhvc3QiLCJob3N0bmFtZSIsInBvcnQiLCJidWlsZFdlYlNvY2tldFVybCIsIm9wdGlvbnMiLCJwcm92aWRlZENsaWVudElkIiwicm9sZSIsInZlcnNpb24iLCJwcm92aWRlZEJhc2VVcmwiLCJ1cmwiLCJVUkwiLCJzZWFyY2hQYXJhbXMiLCJzZXQiLCJTdHJpbmciLCJyZXN1bHQiLCJlcnJvciIsInN0YWNrIiwiRXJyb3IiLCJwYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJmYWxsYmFja1VybCIsInZhbGlkYXRlV2ViU29ja2V0VXJsIl0sInNvdXJjZXMiOlsid2Vic29ja2V0QnVpbGRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ2Fub25pY2FsIFdlYlNvY2tldCBVUkwgQnVpbGRlclxyXG4gKiBTaW5nbGUgc291cmNlIG9mIHRydXRoIGZvciBXZWJTb2NrZXQgVVJMIGNvbnN0cnVjdGlvblxyXG4gKi9cclxuXHJcbmludGVyZmFjZSBXZWJTb2NrZXRVcmxPcHRpb25zIHtcclxuICBjbGllbnRJZD86IHN0cmluZztcclxuICByb2xlPzogc3RyaW5nO1xyXG4gIHZlcnNpb24/OiBudW1iZXI7XHJcbiAgYmFzZVVybD86IHN0cmluZztcclxufVxyXG5cclxuLy8gQ2xpZW50IElEIHBlcnNpc3RlbmNlIHV0aWxpdHlcclxuZXhwb3J0IGZ1bmN0aW9uIGdldE9yUGVyc2lzdENsaWVudElkKHN0b3JhZ2VLZXkgPSAnd3NfY2xpZW50X2lkJywgcGFzc2VkQ2xpZW50SWQ/OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIGxldCBjbGllbnRJZCA9IHBhc3NlZENsaWVudElkO1xyXG4gIFxyXG4gIC8vIFRyeSB0byBnZXQgZnJvbSBzdG9yYWdlIGZpcnN0XHJcbiAgY29uc3Qgc3RvcmVkQ2xpZW50SWQgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oc3RvcmFnZUtleSk7XHJcbiAgY29uc3QgaW5pdGlhbEZyb21TdG9yYWdlID0gISFzdG9yZWRDbGllbnRJZDtcclxuICBcclxuICBpZiAoIWNsaWVudElkICYmIHN0b3JlZENsaWVudElkKSB7XHJcbiAgICBjbGllbnRJZCA9IHN0b3JlZENsaWVudElkO1xyXG4gIH1cclxuICBcclxuICAvLyBHZW5lcmF0ZSBuZXcgb25lIGlmIG5vbmUgYXZhaWxhYmxlXHJcbiAgaWYgKCFjbGllbnRJZCkge1xyXG4gICAgY2xpZW50SWQgPSBgY2xpZW50XyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWA7XHJcbiAgfVxyXG4gIFxyXG4gIC8vIEFsd2F5cyBwZXJzaXN0IHRvIHN0b3JhZ2VcclxuICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleSwgY2xpZW50SWQpO1xyXG4gIFxyXG4gIC8vIERldi1vbmx5IGRpYWdub3N0aWMgbG9nXHJcbiAgaWYgKGltcG9ydC5tZXRhLmVudi5ERVYpIHtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXHJcbiAgICBjb25zb2xlLmxvZygnW0NsaWVudElkRGlhZ10nLCB7XHJcbiAgICAgIGluaXRpYWxGcm9tU3RvcmFnZSxcclxuICAgICAgcGFzc2VkSW46ICEhcGFzc2VkQ2xpZW50SWQsXHJcbiAgICAgIGZpbmFsQ2xpZW50SWQ6IGNsaWVudElkXHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIGNsaWVudElkO1xyXG59XHJcblxyXG4vLyBFbnZpcm9ubWVudCByZXNvbHV0aW9uIGhlbHBlclxyXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVdlYlNvY2tldEJhc2UoKTogc3RyaW5nIHtcclxuICBsZXQgYmFzZVVybCA9IGltcG9ydC5tZXRhLmVudi5WSVRFX1dTX1VSTDtcclxuICBcclxuICAvLyBDaGVjayBmb3IgbGVnYWN5IHBhdGggaW4gZW52aXJvbm1lbnQgYW5kIHNhbml0aXplXHJcbiAgaWYgKGJhc2VVcmwgJiYgYmFzZVVybC5pbmNsdWRlcygnY2xpZW50Xy93cycpKSB7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxyXG4gICAgY29uc29sZS53YXJuKCdbRW52RGlhZ11bTGVnYWN5SW5FbnZdIExlZ2FjeSBXZWJTb2NrZXQgcGF0aCBkZXRlY3RlZCBpbiBlbnZpcm9ubWVudCwgc2FuaXRpemluZzonLCBiYXNlVXJsKTtcclxuICAgIGJhc2VVcmwgPSBiYXNlVXJsLnJlcGxhY2UoL1xcL2NsaWVudF9cXC93cy4qJC8sICcnKTtcclxuICB9XHJcbiAgXHJcbiAgLy8gRGVmYXVsdCBmYWxsYmFja1xyXG4gIGlmICghYmFzZVVybCkge1xyXG4gICAgY29uc3QgcHJvdG9jb2wgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonID8gJ3dzczonIDogJ3dzOic7XHJcbiAgICBjb25zdCBob3N0ID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lO1xyXG4gICAgY29uc3QgcG9ydCA9IGhvc3QgPT09ICdsb2NhbGhvc3QnID8gJzgwMDAnIDogd2luZG93LmxvY2F0aW9uLnBvcnQ7XHJcbiAgICBiYXNlVXJsID0gYCR7cHJvdG9jb2x9Ly8ke2hvc3R9JHtwb3J0ID8gYDoke3BvcnR9YCA6ICcnfWA7XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiBiYXNlVXJsO1xyXG59XHJcblxyXG4vKipcclxuICogQ2Fub25pY2FsIFdlYlNvY2tldCBVUkwgQnVpbGRlclxyXG4gKiBNVVNUIGJlIHVzZWQgZm9yIGFsbCBXZWJTb2NrZXQgVVJMIGNvbnN0cnVjdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkV2ViU29ja2V0VXJsKG9wdGlvbnM6IFdlYlNvY2tldFVybE9wdGlvbnMgPSB7fSk6IHN0cmluZyB7XHJcbiAgY29uc3Qge1xyXG4gICAgY2xpZW50SWQ6IHByb3ZpZGVkQ2xpZW50SWQsXHJcbiAgICByb2xlID0gJ2Zyb250ZW5kJyxcclxuICAgIHZlcnNpb24gPSAxLFxyXG4gICAgYmFzZVVybDogcHJvdmlkZWRCYXNlVXJsXHJcbiAgfSA9IG9wdGlvbnM7XHJcbiAgXHJcbiAgLy8gUmVzb2x2ZSBiYXNlIFVSTFxyXG4gIGNvbnN0IGJhc2VVcmwgPSBwcm92aWRlZEJhc2VVcmwgfHwgcmVzb2x2ZVdlYlNvY2tldEJhc2UoKTtcclxuICBcclxuICAvLyBHZXQgb3IgZ2VuZXJhdGUgY2xpZW50IElEXHJcbiAgY29uc3QgY2xpZW50SWQgPSBnZXRPclBlcnNpc3RDbGllbnRJZCgnd3NfY2xpZW50X2lkJywgcHJvdmlkZWRDbGllbnRJZCk7XHJcbiAgXHJcbiAgdHJ5IHtcclxuICAgIC8vIFVzZSBVUkwgY29uc3RydWN0b3IgZm9yIHJvYnVzdCBwYXRoIGJ1aWxkaW5nXHJcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKCcvd3MvY2xpZW50JywgYmFzZVVybCk7XHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgnY2xpZW50X2lkJywgY2xpZW50SWQpO1xyXG4gICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3ZlcnNpb24nLCBTdHJpbmcodmVyc2lvbikpO1xyXG4gICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3JvbGUnLCByb2xlKTtcclxuICAgIFxyXG4gICAgY29uc3QgcmVzdWx0ID0gdXJsLnRvU3RyaW5nKCk7XHJcbiAgICBcclxuICAgIC8vIERlZmVuc2l2ZSBhc3NlcnRpb24gLSBkZXYgb25seVxyXG4gICAgaWYgKGltcG9ydC5tZXRhLmVudi5ERVYpIHtcclxuICAgICAgaWYgKHJlc3VsdC5pbmNsdWRlcygnY2xpZW50Xy93cycpKSB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdbV1NCdWlsZERpYWddW0xlZ2FjeURldGVjdGVkXScsIHsgXHJcbiAgICAgICAgICB1cmw6IHJlc3VsdCwgXHJcbiAgICAgICAgICBzdGFjazogbmV3IEVycm9yKCkuc3RhY2sgXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMZWdhY3kgd2Vic29ja2V0IHBhdGggY29uc3RydWN0ZWQgYWZ0ZXIgbWlncmF0aW9uJyk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXHJcbiAgICAgIGNvbnNvbGUubG9nKCdbV1NCdWlsZERpYWddIEJ1aWx0IGNhbm9uaWNhbCBXZWJTb2NrZXQgVVJMOicsIHJlc3VsdCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIC8vIEZhbGxiYWNrIHdpdGggZGVmZW5zaXZlIGFzc2VydGlvblxyXG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xyXG4gICAgcGFyYW1zLnNldCgnY2xpZW50X2lkJywgY2xpZW50SWQpO1xyXG4gICAgcGFyYW1zLnNldCgndmVyc2lvbicsIFN0cmluZyh2ZXJzaW9uKSk7XHJcbiAgICBwYXJhbXMuc2V0KCdyb2xlJywgcm9sZSk7XHJcbiAgICBcclxuICAgIGNvbnN0IGZhbGxiYWNrVXJsID0gYCR7YmFzZVVybH0vd3MvY2xpZW50PyR7cGFyYW1zLnRvU3RyaW5nKCl9YDtcclxuICAgIFxyXG4gICAgLy8gRGVmZW5zaXZlIGFzc2VydGlvbiBvbiBmYWxsYmFjayB0b29cclxuICAgIGlmIChpbXBvcnQubWV0YS5lbnYuREVWICYmIGZhbGxiYWNrVXJsLmluY2x1ZGVzKCdjbGllbnRfL3dzJykpIHtcclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcclxuICAgICAgY29uc29sZS5lcnJvcignW1dTQnVpbGREaWFnXVtMZWdhY3lEZXRlY3RlZF0gRXZlbiBmYWxsYmFjayBjcmVhdGVkIGxlZ2FjeSBwYXRoIScsIHsgXHJcbiAgICAgICAgdXJsOiBmYWxsYmFja1VybCwgXHJcbiAgICAgICAgZXJyb3IsXHJcbiAgICAgICAgc3RhY2s6IG5ldyBFcnJvcigpLnN0YWNrIFxyXG4gICAgICB9KTtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdMZWdhY3kgd2Vic29ja2V0IHBhdGggY29uc3RydWN0ZWQgaW4gZmFsbGJhY2sgYWZ0ZXIgbWlncmF0aW9uJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChpbXBvcnQubWV0YS5lbnYuREVWKSB7XHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXHJcbiAgICAgIGNvbnNvbGUud2FybignW1dTQnVpbGREaWFnXSBVUkwgY29uc3RydWN0b3IgZmFpbGVkLCB1c2luZyBmYWxsYmFjazonLCBmYWxsYmFja1VybCwgZXJyb3IpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gZmFsbGJhY2tVcmw7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBWYWxpZGF0ZSB0aGF0IGEgVVJMIGRvZXNuJ3QgY29udGFpbiBsZWdhY3kgcGF0dGVybnNcclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlV2ViU29ja2V0VXJsKHVybDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuICF1cmwuaW5jbHVkZXMoJ2NsaWVudF8vd3MnKTtcclxufSJdLCJt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