{"version":3,"names":["AnalysisCacheService","constructor","memoryCache","stats","DEFAULT_TTL","STALE_TTL","Map","hits","misses","stale","evictions","setInterval","cleanupExpiredEntries","getInstance","instance","generateCacheKey","request","propId","player","team","sport","statType","line","get","key","actualKey","startsWith","entry","getFromLocalStorage","now","Date","age","timestamp","ttl","delete","value","isStale","set","options","setInLocalStorage","has","hasInLocalStorage","deleteFromLocalStorage","clear","keysToDelete","keys","push","replace","clearLocalStorage","getStats","evictionCount","entries","localStorage","storedItem","getItem","JSON","parse","removeItem","error","console","setItem","stringify","keysToRemove","i","length","forEach","exports","_AnalysisCacheService"],"sources":["AnalysisCacheService.ts"],"sourcesContent":["import { PropAnalysisRequest, PropAnalysisResponse } from './PropAnalysisAggregator';\r\n\r\ninterface CacheEntry<T> {\r\n  value: T;\r\n  timestamp: number;\r\n  ttl: number;\r\n}\r\n\r\ninterface CacheStats {\r\n  hits: number;\r\n  misses: number;\r\n  stale: number;\r\n  evictions: number;\r\n}\r\n\r\n/**\r\n * Multi-level caching service for prop analysis results\r\n * Implements memory cache with TTL and optional localStorage persistence\r\n */\r\nexport class AnalysisCacheService {\r\n  private static instance: AnalysisCacheService;\r\n  private memoryCache: Map<string, CacheEntry<PropAnalysisResponse>>;\r\n  private stats: CacheStats;\r\n  private readonly DEFAULT_TTL = 5 * 60 * 1000; // 5 minutes\r\n  private readonly STALE_TTL = 30 * 60 * 1000; // 30 minutes\r\n\r\n  private constructor() {\r\n    this.memoryCache = new Map();\r\n    this.stats = {\r\n      hits: 0,\r\n      misses: 0,\r\n      stale: 0,\r\n      evictions: 0,\r\n    };\r\n\r\n    // Run cache cleanup every minute\r\n    setInterval(() => this.cleanupExpiredEntries(), 60 * 1000);\r\n  }\r\n\r\n  /**\r\n   * Get singleton instance\r\n   */\r\n  public static getInstance(): AnalysisCacheService {\r\n    if (!AnalysisCacheService.instance) {\r\n      AnalysisCacheService.instance = new AnalysisCacheService();\r\n    }\r\n    return AnalysisCacheService.instance;\r\n  }\r\n\r\n  /**\r\n   * Generate a cache key from a request\r\n   */\r\n  public static generateCacheKey(request: PropAnalysisRequest): string {\r\n    const { propId, player, team, sport, statType, line } = request;\r\n    return `prop_analysis:${propId}:${player}:${team}:${sport}:${statType}:${line}`;\r\n  }\r\n\r\n  /**\r\n   * Get an item from cache\r\n   * Returns null if not found or expired\r\n   * Returns the item with isStale=true if it's stale but not fully expired\r\n   */\r\n  public get(key: string): PropAnalysisResponse | null {\r\n    // Use a consistent key format\r\n    const actualKey = key.startsWith('cache:') ? key : `cache:${key}`;\r\n    const entry = this.memoryCache.get(actualKey);\r\n\r\n    if (!entry) {\r\n      this.stats.misses++;\r\n      return this.getFromLocalStorage(actualKey);\r\n    }\r\n\r\n    const now = Date.now();\r\n    const age = now - entry.timestamp;\r\n\r\n    // If fully expired\r\n    if (age >= entry.ttl + this.STALE_TTL) {\r\n      this.memoryCache.delete(key);\r\n      this.stats.misses++;\r\n      return this.getFromLocalStorage(key);\r\n    }\r\n\r\n    // If stale but not fully expired\r\n    if (age > entry.ttl) {\r\n      this.stats.stale++;\r\n      return {\r\n        ...entry.value,\r\n        isStale: true,\r\n      };\r\n    }\r\n\r\n    // Fresh hit\r\n    this.stats.hits++;\r\n    return entry.value;\r\n  }\r\n\r\n  /**\r\n   * Set an item in cache\r\n   */\r\n  public set(key: string, value: PropAnalysisResponse, options?: { ttl?: number }): void {\r\n    const ttl = options?.ttl || this.DEFAULT_TTL;\r\n\r\n    // Use a consistent key format\r\n    const actualKey = key.startsWith('cache:') ? key : `cache:${key}`;\r\n\r\n    this.memoryCache.set(actualKey, {\r\n      value,\r\n      timestamp: Date.now(),\r\n      ttl,\r\n    });\r\n\r\n    // Also store in localStorage if available\r\n    this.setInLocalStorage(actualKey, value, ttl);\r\n  }\r\n\r\n  /**\r\n   * Check if an item exists in cache and is not expired\r\n   */\r\n  public has(key: string): boolean {\r\n    // Use a consistent key format\r\n    const actualKey = key.startsWith('cache:') ? key : `cache:${key}`;\r\n    const entry = this.memoryCache.get(actualKey);\r\n\r\n    if (!entry) {\r\n      return this.hasInLocalStorage(actualKey);\r\n    }\r\n\r\n    const now = Date.now();\r\n    return now - entry.timestamp <= entry.ttl;\r\n  }\r\n\r\n  /**\r\n   * Delete an item from cache\r\n   */\r\n  public delete(key: string): void {\r\n    // Use a consistent key format\r\n    const actualKey = key.startsWith('cache:') ? key : `cache:${key}`;\r\n    this.memoryCache.delete(actualKey);\r\n    this.deleteFromLocalStorage(actualKey);\r\n  }\r\n\r\n  /**\r\n   * Clear the entire cache\r\n   */\r\n  public clear(): void {\r\n    // Get a list of all keys to explicitly delete each one\r\n    // This ensures we properly handle prefix consistency\r\n    const keysToDelete = [];\r\n    for (const key of this.memoryCache.keys()) {\r\n      keysToDelete.push(key);\r\n    }\r\n\r\n    // Delete each key individually\r\n    for (const key of keysToDelete) {\r\n      this.delete(key.replace('cache:', ''));\r\n    }\r\n\r\n    // Also clear the memory cache and localStorage\r\n    this.memoryCache.clear();\r\n    this.clearLocalStorage();\r\n  }\r\n\r\n  /**\r\n   * Get cache statistics\r\n   */\r\n  public getStats(): CacheStats {\r\n    return { ...this.stats };\r\n  }\r\n\r\n  /**\r\n   * Clean up expired entries\r\n   */\r\n  private cleanupExpiredEntries(): void {\r\n    const now = Date.now();\r\n    let evictionCount = 0;\r\n\r\n    for (const [key, entry] of this.memoryCache.entries()) {\r\n      if (now - entry.timestamp > entry.ttl + this.STALE_TTL) {\r\n        this.memoryCache.delete(key);\r\n        evictionCount++;\r\n      }\r\n    }\r\n\r\n    if (evictionCount > 0) {\r\n      this.stats.evictions += evictionCount;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get an item from localStorage\r\n   */\r\n  private getFromLocalStorage(key: string): PropAnalysisResponse | null {\r\n    try {\r\n      if (typeof localStorage === 'undefined') return null;\r\n\r\n      // Key should already be in 'cache:' format\r\n      const storedItem = localStorage.getItem(key);\r\n      if (!storedItem) return null;\r\n\r\n      const entry = JSON.parse(storedItem) as CacheEntry<PropAnalysisResponse>;\r\n      const now = Date.now();\r\n      const age = now - entry.timestamp;\r\n\r\n      // If fully expired\r\n      if (age >= entry.ttl + this.STALE_TTL) {\r\n        localStorage.removeItem(key);\r\n        return null;\r\n      }\r\n\r\n      // If stale but not fully expired\r\n      if (age > entry.ttl) {\r\n        this.stats.stale++;\r\n        return {\r\n          ...entry.value,\r\n          isStale: true,\r\n        };\r\n      }\r\n\r\n      // Fresh hit from localStorage\r\n      this.stats.hits++;\r\n\r\n      // Also add to memory cache for faster access next time\r\n      this.memoryCache.set(key, entry);\r\n\r\n      return entry.value;\r\n    } catch (error) {\r\n      console.error('Error reading from localStorage:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set an item in localStorage\r\n   */\r\n  private setInLocalStorage(key: string, value: PropAnalysisResponse, ttl: number): void {\r\n    try {\r\n      if (typeof localStorage === 'undefined') return;\r\n\r\n      const entry: CacheEntry<PropAnalysisResponse> = {\r\n        value,\r\n        timestamp: Date.now(),\r\n        ttl,\r\n      };\r\n\r\n      // Key should already be in 'cache:' format\r\n      localStorage.setItem(key, JSON.stringify(entry));\r\n    } catch (error) {\r\n      console.error('Error writing to localStorage:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if an item exists in localStorage and is not expired\r\n   */\r\n  private hasInLocalStorage(key: string): boolean {\r\n    try {\r\n      if (typeof localStorage === 'undefined') return false;\r\n\r\n      // Key should already be in 'cache:' format\r\n      const storedItem = localStorage.getItem(key);\r\n      if (!storedItem) return false;\r\n\r\n      const entry = JSON.parse(storedItem) as CacheEntry<PropAnalysisResponse>;\r\n      const now = Date.now();\r\n      return now - entry.timestamp <= entry.ttl;\r\n    } catch (error) {\r\n      console.error('Error checking localStorage:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete an item from localStorage\r\n   */\r\n  private deleteFromLocalStorage(key: string): void {\r\n    try {\r\n      if (typeof localStorage === 'undefined') return;\r\n      // Key should already be in 'cache:' format\r\n      localStorage.removeItem(key);\r\n    } catch (error) {\r\n      console.error('Error deleting from localStorage:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all cache items from localStorage\r\n   */\r\n  private clearLocalStorage(): void {\r\n    try {\r\n      if (typeof localStorage === 'undefined') return;\r\n\r\n      const keysToRemove: string[] = [];\r\n\r\n      for (let i = 0; i < localStorage.length; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key && key.startsWith('cache:')) {\r\n          keysToRemove.push(key);\r\n        }\r\n      }\r\n\r\n      keysToRemove.forEach(key => localStorage.removeItem(key));\r\n    } catch (error) {\r\n      console.error('Error clearing localStorage cache:', error);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}