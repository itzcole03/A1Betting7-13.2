38708fe21f964f96e9fd03e4d6546390
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnalysisCacheService = void 0;
var _AnalysisCacheService;
/**
 * Multi-level caching service for prop analysis results
 * Implements memory cache with TTL and optional localStorage persistence
 */
class AnalysisCacheService {
  // 30 minutes

  constructor() {
    this.memoryCache = void 0;
    this.stats = void 0;
    this.DEFAULT_TTL = 5 * 60 * 1000;
    // 5 minutes
    this.STALE_TTL = 30 * 60 * 1000;
    this.memoryCache = new Map();
    this.stats = {
      hits: 0,
      misses: 0,
      stale: 0,
      evictions: 0
    };

    // Run cache cleanup every minute
    setInterval(() => this.cleanupExpiredEntries(), 60 * 1000);
  }

  /**
   * Get singleton instance
   */
  static getInstance() {
    if (!AnalysisCacheService.instance) {
      AnalysisCacheService.instance = new AnalysisCacheService();
    }
    return AnalysisCacheService.instance;
  }

  /**
   * Generate a cache key from a request
   */
  static generateCacheKey(request) {
    const {
      propId,
      player,
      team,
      sport,
      statType,
      line
    } = request;
    return `prop_analysis:${propId}:${player}:${team}:${sport}:${statType}:${line}`;
  }

  /**
   * Get an item from cache
   * Returns null if not found or expired
   * Returns the item with isStale=true if it's stale but not fully expired
   */
  get(key) {
    // Use a consistent key format
    const actualKey = key.startsWith('cache:') ? key : `cache:${key}`;
    const entry = this.memoryCache.get(actualKey);
    if (!entry) {
      this.stats.misses++;
      return this.getFromLocalStorage(actualKey);
    }
    const now = Date.now();
    const age = now - entry.timestamp;

    // If fully expired
    if (age >= entry.ttl + this.STALE_TTL) {
      this.memoryCache.delete(key);
      this.stats.misses++;
      return this.getFromLocalStorage(key);
    }

    // If stale but not fully expired
    if (age > entry.ttl) {
      this.stats.stale++;
      return {
        ...entry.value,
        isStale: true
      };
    }

    // Fresh hit
    this.stats.hits++;
    return entry.value;
  }

  /**
   * Set an item in cache
   */
  set(key, value, options) {
    const ttl = options?.ttl || this.DEFAULT_TTL;

    // Use a consistent key format
    const actualKey = key.startsWith('cache:') ? key : `cache:${key}`;
    this.memoryCache.set(actualKey, {
      value,
      timestamp: Date.now(),
      ttl
    });

    // Also store in localStorage if available
    this.setInLocalStorage(actualKey, value, ttl);
  }

  /**
   * Check if an item exists in cache and is not expired
   */
  has(key) {
    // Use a consistent key format
    const actualKey = key.startsWith('cache:') ? key : `cache:${key}`;
    const entry = this.memoryCache.get(actualKey);
    if (!entry) {
      return this.hasInLocalStorage(actualKey);
    }
    const now = Date.now();
    return now - entry.timestamp <= entry.ttl;
  }

  /**
   * Delete an item from cache
   */
  delete(key) {
    // Use a consistent key format
    const actualKey = key.startsWith('cache:') ? key : `cache:${key}`;
    this.memoryCache.delete(actualKey);
    this.deleteFromLocalStorage(actualKey);
  }

  /**
   * Clear the entire cache
   */
  clear() {
    // Get a list of all keys to explicitly delete each one
    // This ensures we properly handle prefix consistency
    const keysToDelete = [];
    for (const key of this.memoryCache.keys()) {
      keysToDelete.push(key);
    }

    // Delete each key individually
    for (const key of keysToDelete) {
      this.delete(key.replace('cache:', ''));
    }

    // Also clear the memory cache and localStorage
    this.memoryCache.clear();
    this.clearLocalStorage();
  }

  /**
   * Get cache statistics
   */
  getStats() {
    return {
      ...this.stats
    };
  }

  /**
   * Clean up expired entries
   */
  cleanupExpiredEntries() {
    const now = Date.now();
    let evictionCount = 0;
    for (const [key, entry] of this.memoryCache.entries()) {
      if (now - entry.timestamp > entry.ttl + this.STALE_TTL) {
        this.memoryCache.delete(key);
        evictionCount++;
      }
    }
    if (evictionCount > 0) {
      this.stats.evictions += evictionCount;
    }
  }

  /**
   * Get an item from localStorage
   */
  getFromLocalStorage(key) {
    try {
      if (typeof localStorage === 'undefined') return null;

      // Key should already be in 'cache:' format
      const storedItem = localStorage.getItem(key);
      if (!storedItem) return null;
      const entry = JSON.parse(storedItem);
      const now = Date.now();
      const age = now - entry.timestamp;

      // If fully expired
      if (age >= entry.ttl + this.STALE_TTL) {
        localStorage.removeItem(key);
        return null;
      }

      // If stale but not fully expired
      if (age > entry.ttl) {
        this.stats.stale++;
        return {
          ...entry.value,
          isStale: true
        };
      }

      // Fresh hit from localStorage
      this.stats.hits++;

      // Also add to memory cache for faster access next time
      this.memoryCache.set(key, entry);
      return entry.value;
    } catch (error) {
      console.error('Error reading from localStorage:', error);
      return null;
    }
  }

  /**
   * Set an item in localStorage
   */
  setInLocalStorage(key, value, ttl) {
    try {
      if (typeof localStorage === 'undefined') return;
      const entry = {
        value,
        timestamp: Date.now(),
        ttl
      };

      // Key should already be in 'cache:' format
      localStorage.setItem(key, JSON.stringify(entry));
    } catch (error) {
      console.error('Error writing to localStorage:', error);
    }
  }

  /**
   * Check if an item exists in localStorage and is not expired
   */
  hasInLocalStorage(key) {
    try {
      if (typeof localStorage === 'undefined') return false;

      // Key should already be in 'cache:' format
      const storedItem = localStorage.getItem(key);
      if (!storedItem) return false;
      const entry = JSON.parse(storedItem);
      const now = Date.now();
      return now - entry.timestamp <= entry.ttl;
    } catch (error) {
      console.error('Error checking localStorage:', error);
      return false;
    }
  }

  /**
   * Delete an item from localStorage
   */
  deleteFromLocalStorage(key) {
    try {
      if (typeof localStorage === 'undefined') return;
      // Key should already be in 'cache:' format
      localStorage.removeItem(key);
    } catch (error) {
      console.error('Error deleting from localStorage:', error);
    }
  }

  /**
   * Clear all cache items from localStorage
   */
  clearLocalStorage() {
    try {
      if (typeof localStorage === 'undefined') return;
      const keysToRemove = [];
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key && key.startsWith('cache:')) {
          keysToRemove.push(key);
        }
      }
      keysToRemove.forEach(key => localStorage.removeItem(key));
    } catch (error) {
      console.error('Error clearing localStorage cache:', error);
    }
  }
}
exports.AnalysisCacheService = AnalysisCacheService;
_AnalysisCacheService = AnalysisCacheService;
AnalysisCacheService.instance = void 0;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,