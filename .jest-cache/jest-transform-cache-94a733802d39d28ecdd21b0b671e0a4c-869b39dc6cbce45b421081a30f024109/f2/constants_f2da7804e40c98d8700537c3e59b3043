6182fefd7da90aa2ecc8e0d53ad0ab8f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VITE_WS_URL = exports.VITE_WS_ENDPOINT = exports.VITE_THEODDS_API_KEY = exports.VITE_SPORTRADAR_API_KEY = exports.VITE_SPORTRADAR_API_ENDPOINT = exports.VITE_SOCIAL_API_ENDPOINT = exports.VITE_SENTIMENT_API_URL = exports.VITE_SENTIMENT_API_KEY = exports.VITE_PRIZEPICKS_API_URL = exports.VITE_PRIZEPICKS_API_KEY = exports.VITE_ODDS_API_ENDPOINT = exports.VITE_ESPN_API_ENDPOINT = exports.VITE_ENABLE_SENTIMENT = exports.VITE_DISABLE_SOCIAL_SENTIMENT = exports.VITE_DAILYFANTASY_API_KEY = exports.VITE_API_URL = void 0;
// Centralized environment variable access with Jest compatibility
// This file provides a safe way to access Vite environment variables in both Vite and Jest environments

// Environment variable defaults for testing
const defaultValues = {
  VITE_API_URL: 'http://localhost:8000',
  VITE_WS_ENDPOINT: 'ws://localhost:8000/ws',
  VITE_WS_URL: 'ws://localhost:8000/ws',
  VITE_THEODDS_API_KEY: undefined,
  VITE_SPORTRADAR_API_KEY: undefined,
  VITE_DAILYFANTASY_API_KEY: undefined,
  VITE_PRIZEPICKS_API_KEY: undefined,
  VITE_PRIZEPICKS_API_URL: undefined,
  VITE_SENTIMENT_API_URL: undefined,
  VITE_SENTIMENT_API_KEY: undefined,
  VITE_ENABLE_SENTIMENT: undefined,
  VITE_DISABLE_SOCIAL_SENTIMENT: undefined,
  VITE_SPORTRADAR_API_ENDPOINT: undefined,
  VITE_ODDS_API_ENDPOINT: undefined,
  VITE_ESPN_API_ENDPOINT: undefined,
  VITE_SOCIAL_API_ENDPOINT: undefined
};

// Function to get environment variables safely
const getEnvVar = key => {
  // Check if we're in a test environment (Jest)
  if (typeof process !== 'undefined' && process.env.NODE_ENV === 'test') {
    return defaultValues[key];
  }

  // Use import.meta.env for Vite environments, fallback to defaults
  if (process.env.NODE_ENV === 'test') {
    // In Jest test environment, use process.env
    return process.env[key] || defaultValues[key];
  }

  // In Vite environment, try to access import.meta.env
  try {
    // Use dynamic evaluation to avoid Jest parsing issues
    const importMeta = new Function('return import.meta')();
    if (importMeta && importMeta.env) {
      return importMeta.env[key] || defaultValues[key];
    }
  } catch (e) {
    // Fallback if import.meta is not available
  }

  // Fallback for environments where import.meta might not be available
  return defaultValues[key];
};
const VITE_API_URL = exports.VITE_API_URL = getEnvVar('VITE_API_URL');
const VITE_WS_ENDPOINT = exports.VITE_WS_ENDPOINT = getEnvVar('VITE_WS_ENDPOINT');
const VITE_WS_URL = exports.VITE_WS_URL = getEnvVar('VITE_WS_URL');
const VITE_THEODDS_API_KEY = exports.VITE_THEODDS_API_KEY = getEnvVar('VITE_THEODDS_API_KEY');
const VITE_SPORTRADAR_API_KEY = exports.VITE_SPORTRADAR_API_KEY = getEnvVar('VITE_SPORTRADAR_API_KEY');
const VITE_DAILYFANTASY_API_KEY = exports.VITE_DAILYFANTASY_API_KEY = getEnvVar('VITE_DAILYFANTASY_API_KEY');
const VITE_PRIZEPICKS_API_KEY = exports.VITE_PRIZEPICKS_API_KEY = getEnvVar('VITE_PRIZEPICKS_API_KEY');
const VITE_PRIZEPICKS_API_URL = exports.VITE_PRIZEPICKS_API_URL = getEnvVar('VITE_PRIZEPICKS_API_URL');
const VITE_SENTIMENT_API_URL = exports.VITE_SENTIMENT_API_URL = getEnvVar('VITE_SENTIMENT_API_URL');
const VITE_SENTIMENT_API_KEY = exports.VITE_SENTIMENT_API_KEY = getEnvVar('VITE_SENTIMENT_API_KEY');
const VITE_ENABLE_SENTIMENT = exports.VITE_ENABLE_SENTIMENT = getEnvVar('VITE_ENABLE_SENTIMENT');
const VITE_DISABLE_SOCIAL_SENTIMENT = exports.VITE_DISABLE_SOCIAL_SENTIMENT = getEnvVar('VITE_DISABLE_SOCIAL_SENTIMENT');
const VITE_SPORTRADAR_API_ENDPOINT = exports.VITE_SPORTRADAR_API_ENDPOINT = getEnvVar('VITE_SPORTRADAR_API_ENDPOINT');
const VITE_ODDS_API_ENDPOINT = exports.VITE_ODDS_API_ENDPOINT = getEnvVar('VITE_ODDS_API_ENDPOINT');
const VITE_ESPN_API_ENDPOINT = exports.VITE_ESPN_API_ENDPOINT = getEnvVar('VITE_ESPN_API_ENDPOINT');
const VITE_SOCIAL_API_ENDPOINT = exports.VITE_SOCIAL_API_ENDPOINT = getEnvVar('VITE_SOCIAL_API_ENDPOINT');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,