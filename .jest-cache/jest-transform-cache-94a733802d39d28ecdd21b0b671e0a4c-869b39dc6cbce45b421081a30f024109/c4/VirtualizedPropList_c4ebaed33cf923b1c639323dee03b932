d6f74fd6b6ff43c7e3c4815ee9d33926
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactVirtual = require("@tanstack/react-virtual");
var _react = _interopRequireDefault(require("react"));
var _CondensedPropCard = _interopRequireDefault(require("./CondensedPropCard"));
var _jsxRuntime = require("react/jsx-runtime");
// Helper functions
const extractTeamFromMatchup = matchup => {
  return matchup.split(' vs ')[0] || matchup.split(' @ ')[0] || matchup;
};
const getGradeFromConfidence = confidence => {
  return confidence >= 80 ? 'A+' : confidence >= 60 ? 'B' : 'C';
};
const getLogoUrl = matchup => {
  return matchup ? `/logos/${matchup.split(' ')[0].toLowerCase()}.png` : '';
};
const getAccentColor = matchup => {
  if (matchup && matchup.toLowerCase().includes('chiefs')) return '#b71c1c';
  if (matchup && matchup.toLowerCase().includes('rams')) return '#0d47a1';
  if (matchup && matchup.toLowerCase().includes('eagles')) return '#004d40';
  return '#222';
};
const VirtualizedPropList = ({
  projections,
  isSelected,
  addProp,
  removeProp,
  expandedRowKey,
  setExpandedRowKey,
  expandedCardRef,
  propAnalystResponses,
  clicksEnabled,
  enhancedAnalysisCache,
  fetchEnhancedAnalysis,
  loadingAnalysis
}) => {
  // Create container ref for the virtualizer
  const containerRef = _react.default.useRef(null);

  // Calculate estimated item height (this should match your CondensedPropCard height)
  const estimateItemHeight = _react.default.useCallback(index => {
    // Base card height
    const baseHeight = 180;

    // If this card is expanded, add space for expanded content
    const isExpanded = projections[index]?.id === expandedRowKey;
    const expandedHeight = isExpanded ? 400 : 0; // Estimate expanded content height

    return baseHeight + expandedHeight;
  }, [projections, expandedRowKey]);

  // Create the virtualizer
  const virtualizer = (0, _reactVirtual.useVirtualizer)({
    count: projections.length,
    getScrollElement: () => containerRef.current,
    estimateSize: estimateItemHeight,
    overscan: 5,
    // Render 5 extra items outside the viewport for smooth scrolling
    measureElement: element => {
      // Measure the actual element height for dynamic sizing
      return element.getBoundingClientRect().height;
    }
  });

  // Debug logging
  _react.default.useEffect(() => {
    console.log('[VirtualizedPropList] Rendering', projections.length, 'items');
    console.log('[VirtualizedPropList] Virtual items:', virtualizer.getVirtualItems().length);
    console.log('[VirtualizedPropList] Total size:', virtualizer.getTotalSize());
  }, [projections.length, virtualizer]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "w-full",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "mb-4 text-sm text-gray-400 bg-slate-800 rounded p-2 border border-slate-700",
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "flex justify-between items-center",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
          children: ["\uD83D\uDCCA Dataset: ", projections.length, " props"]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
          children: ["\uD83D\uDE80 Rendering: ", virtualizer.getVirtualItems().length, " visible"]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
          children: ["\u26A1 Performance:", ' ', (virtualizer.getVirtualItems().length / projections.length * 100).toFixed(1), "% efficiency"]
        })]
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      ref: containerRef,
      className: "h-[800px] overflow-auto",
      style: {
        contain: 'strict'
      },
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        style: {
          height: `${virtualizer.getTotalSize()}px`,
          width: '100%',
          position: 'relative'
        },
        children: virtualizer.getVirtualItems().map(virtualItem => {
          const proj = projections[virtualItem.index];
          const isExpanded = proj.id === expandedRowKey;
          return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            "data-index": virtualItem.index,
            ref: virtualizer.measureElement,
            style: {
              position: 'absolute',
              top: 0,
              left: 0,
              width: '100%',
              transform: `translateY(${virtualItem.start}px)`
            },
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              ref: isExpanded ? expandedCardRef : null,
              className: `transition-all duration-200 ${isExpanded ? 'z-10 relative' : ''}`,
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CondensedPropCard.default, {
                player: proj.player,
                team: extractTeamFromMatchup(proj.matchup || ''),
                stat: proj.stat || 'Unknown',
                line: proj.line || 0,
                confidence: proj.confidence || 0,
                grade: getGradeFromConfidence(proj.confidence || 0),
                logoUrl: getLogoUrl(proj.matchup || ''),
                accentColor: getAccentColor(proj.matchup || ''),
                bookmarked: proj.confidence >= 90,
                matchup: proj.matchup,
                espnPlayerId: proj.espnPlayerId,
                onClick: () => {
                  if (!clicksEnabled) return;
                  setExpandedRowKey(isExpanded ? null : proj.id);
                },
                isExpanded: isExpanded,
                showStatcastMetrics: proj.sport === 'MLB',
                statcastData: proj._originalData,
                alternativeProps: proj.alternativeProps
              }, proj.id)
            })
          }, virtualItem.key);
        })
      })
    }), projections.length > 100 && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "mt-4 text-center",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "text-sm text-gray-400 bg-slate-800 rounded p-3 border border-slate-700",
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex items-center justify-center space-x-4",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            children: "\u26A1 Virtualized rendering active"
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
            children: ["\uD83D\uDCC8 Smooth scrolling for ", projections.length.toLocaleString(), " items"]
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            children: "\uD83D\uDD25 Memory optimized"
          })]
        })
      })
    })]
  });
};
var _default = exports.default = VirtualizedPropList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,