7b9477c5eba8b70b47c78da7d420eb80
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._useTheme = exports._ThemeProvider = void 0;
var _react = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Theme context and provider for managing light/dark mode and toggling theme state.
 *
 * @module contexts/ThemeContext
 */

/**
 * ThemeContextType
 * Provides theme state (dark/light) and toggling for the app.
 * @property {string} theme - Current theme ('light' | 'dark')
 * @property {(theme: string) => void} setTheme - Setter for theme
 * @property {() => void} toggleTheme - Toggle between light and dark mode
 */

/**
 * React context for theme state and toggling.
 */
const _ThemeContext = /*#__PURE__*/(0, _react.createContext)(undefined);

/**
 * ThemeProvider component.
 * Wrap your app with this provider to enable theme state and toggling.
 * @param {object} props - React children.
 * @returns {JSX.Element} The provider component.
 */
const _ThemeProvider = ({
  children
}) => {
  const [theme, setTheme] = (0, _react.useState)(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('theme') || 'light';
    }
    return 'light';
  });
  (0, _react.useEffect)(() => {
    localStorage.setItem('theme', theme);
    document.body.setAttribute('data-theme', theme);
  }, [theme]);
  const _toggleTheme = () => setTheme(t => t === 'light' ? 'dark' : 'light');
  return (
    /*#__PURE__*/
    // Removed unused @ts-expect-error: JSX is supported in this environment
    (0, _jsxRuntime.jsx)(_ThemeContext.Provider, {
      value: {
        theme,
        setTheme,
        toggleTheme: _toggleTheme
      },
      children: children
    })
  );
};

/**
 * useTheme
 * Access the theme context in any component.
 */
exports._ThemeProvider = _ThemeProvider;
const _useTheme = () => {
  const _ctx = (0, _react.useContext)(_ThemeContext);
  if (!_ctx) throw new Error('useTheme must be used within ThemeProvider');
  return _ctx;
};
exports._useTheme = _useTheme;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9UaGVtZUNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwidW5kZWZpbmVkIiwiX1RoZW1lUHJvdmlkZXIiLCJjaGlsZHJlbiIsInRoZW1lIiwic2V0VGhlbWUiLCJ1c2VTdGF0ZSIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJ1c2VFZmZlY3QiLCJzZXRJdGVtIiwiZG9jdW1lbnQiLCJib2R5Iiwic2V0QXR0cmlidXRlIiwiX3RvZ2dsZVRoZW1lIiwianN4IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsInRvZ2dsZVRoZW1lIiwiZXhwb3J0cyIsIl91c2VUaGVtZSIsIl9jdHgiLCJ1c2VDb250ZXh0IiwiRXJyb3IiXSwic291cmNlcyI6WyJUaGVtZUNvbnRleHQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBUaGVtZSBjb250ZXh0IGFuZCBwcm92aWRlciBmb3IgbWFuYWdpbmcgbGlnaHQvZGFyayBtb2RlIGFuZCB0b2dnbGluZyB0aGVtZSBzdGF0ZS5cclxuICpcclxuICogQG1vZHVsZSBjb250ZXh0cy9UaGVtZUNvbnRleHRcclxuICovXHJcbmltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUsIGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcblxyXG4vKipcclxuICogVGhlbWVDb250ZXh0VHlwZVxyXG4gKiBQcm92aWRlcyB0aGVtZSBzdGF0ZSAoZGFyay9saWdodCkgYW5kIHRvZ2dsaW5nIGZvciB0aGUgYXBwLlxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdGhlbWUgLSBDdXJyZW50IHRoZW1lICgnbGlnaHQnIHwgJ2RhcmsnKVxyXG4gKiBAcHJvcGVydHkgeyh0aGVtZTogc3RyaW5nKSA9PiB2b2lkfSBzZXRUaGVtZSAtIFNldHRlciBmb3IgdGhlbWVcclxuICogQHByb3BlcnR5IHsoKSA9PiB2b2lkfSB0b2dnbGVUaGVtZSAtIFRvZ2dsZSBiZXR3ZWVuIGxpZ2h0IGFuZCBkYXJrIG1vZGVcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGhlbWVDb250ZXh0VHlwZSB7XHJcbiAgdGhlbWU6ICdsaWdodCcgfCAnZGFyayc7XHJcbiAgc2V0VGhlbWU6ICh0aGVtZTogJ2xpZ2h0JyB8ICdkYXJrJykgPT4gdm9pZDtcclxuICB0b2dnbGVUaGVtZTogKCkgPT4gdm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlYWN0IGNvbnRleHQgZm9yIHRoZW1lIHN0YXRlIGFuZCB0b2dnbGluZy5cclxuICovXHJcbmNvbnN0IF9UaGVtZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0PFRoZW1lQ29udGV4dFR5cGUgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XHJcblxyXG4vKipcclxuICogVGhlbWVQcm92aWRlciBjb21wb25lbnQuXHJcbiAqIFdyYXAgeW91ciBhcHAgd2l0aCB0aGlzIHByb3ZpZGVyIHRvIGVuYWJsZSB0aGVtZSBzdGF0ZSBhbmQgdG9nZ2xpbmcuXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyAtIFJlYWN0IGNoaWxkcmVuLlxyXG4gKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9IFRoZSBwcm92aWRlciBjb21wb25lbnQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX1RoZW1lUHJvdmlkZXI6IFJlYWN0LkZDPHsgY2hpbGRyZW46IFJlYWN0Tm9kZSB9PiA9ICh7IGNoaWxkcmVuIH0pID0+IHtcclxuICBjb25zdCBbdGhlbWUsIHNldFRoZW1lXSA9IHVzZVN0YXRlPCdsaWdodCcgfCAnZGFyayc+KCgpID0+IHtcclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICByZXR1cm4gKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0aGVtZScpIGFzICdsaWdodCcgfCAnZGFyaycpIHx8ICdsaWdodCc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gJ2xpZ2h0JztcclxuICB9KTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0aGVtZScsIHRoZW1lKTtcclxuICAgIGRvY3VtZW50LmJvZHkuc2V0QXR0cmlidXRlKCdkYXRhLXRoZW1lJywgdGhlbWUpO1xyXG4gIH0sIFt0aGVtZV0pO1xyXG5cclxuICBjb25zdCBfdG9nZ2xlVGhlbWUgPSAoKSA9PiBzZXRUaGVtZSh0ID0+ICh0ID09PSAnbGlnaHQnID8gJ2RhcmsnIDogJ2xpZ2h0JykpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgLy8gUmVtb3ZlZCB1bnVzZWQgQHRzLWV4cGVjdC1lcnJvcjogSlNYIGlzIHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50XHJcbiAgICA8X1RoZW1lQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17eyB0aGVtZSwgc2V0VGhlbWUsIHRvZ2dsZVRoZW1lOiBfdG9nZ2xlVGhlbWUgfX0+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvX1RoZW1lQ29udGV4dC5Qcm92aWRlcj5cclxuICApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIHVzZVRoZW1lXHJcbiAqIEFjY2VzcyB0aGUgdGhlbWUgY29udGV4dCBpbiBhbnkgY29tcG9uZW50LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF91c2VUaGVtZSA9ICgpID0+IHtcclxuICBjb25zdCBfY3R4ID0gdXNlQ29udGV4dChfVGhlbWVDb250ZXh0KTtcclxuICBpZiAoIV9jdHgpIHRocm93IG5ldyBFcnJvcigndXNlVGhlbWUgbXVzdCBiZSB1c2VkIHdp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