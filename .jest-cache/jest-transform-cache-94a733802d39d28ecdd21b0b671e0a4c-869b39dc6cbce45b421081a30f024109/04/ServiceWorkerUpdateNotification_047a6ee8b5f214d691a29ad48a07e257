22f07f06113866a87a2c55223e7e7051
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ServiceWorkerUpdateNotification = void 0;
var _framerMotion = require("framer-motion");
var _react = _interopRequireWildcard(require("react"));
var _serviceWorkerManager = require("../../services/serviceWorkerManager");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); } /**
 * Service Worker Update Component - React 19 Best Practices
 *
 * Features:
 * - useOptimistic for instant UI updates
 * - Modern notification patterns
 * - Smooth animations with Framer Motion
 */
// Action for applying service worker updates
async function applyUpdateAction(previousState, formData) {
  try {
    const {
      serviceWorkerManager
    } = await Promise.resolve().then(() => _interopRequireWildcard(require('../../services/serviceWorkerManager')));
    serviceWorkerManager.applyUpdate();
    return {
      updating: true,
      error: null
    };
  } catch (error) {
    return {
      updating: false,
      error: error instanceof Error ? error.message : 'Update failed'
    };
  }
}
const ServiceWorkerUpdateNotification = ({
  className = ''
}) => {
  const {
    hasUpdate,
    isInstalling,
    error
  } = (0, _serviceWorkerManager.useServiceWorkerUpdate)();

  // Standard optimistic UI state
  const [optimisticState, setOptimisticState] = (0, _react.useState)({
    updating: false,
    error: null
  });

  // React 19: useActionState for form actions
  const [actionState, submitAction, isPending] = (0, _react.useActionState)(applyUpdateAction, {
    updating: false,
    error: null
  });
  const handleUpdate = () => {
    // Optimistically update UI
    setOptimisticState({
      updating: true,
      error: null
    });

    // Submit the actual action
    const formData = new FormData();
    submitAction(formData);
  };
  if (!hasUpdate && !isInstalling && !error) {
    return null;
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.AnimatePresence, {
    children: (hasUpdate || isInstalling || error) && /*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.motion.div, {
      initial: {
        opacity: 0,
        y: -50
      },
      animate: {
        opacity: 1,
        y: 0
      },
      exit: {
        opacity: 0,
        y: -50
      },
      transition: {
        duration: 0.3,
        ease: 'easeInOut'
      },
      className: `fixed top-4 right-4 z-50 max-w-sm ${className}`,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "bg-gradient-to-br from-blue-600 to-purple-700 text-white rounded-lg shadow-lg border border-blue-500/20 backdrop-blur-sm",
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "p-4",
          children: [error && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_framerMotion.motion.div, {
            initial: {
              scale: 0.95
            },
            animate: {
              scale: 1
            },
            className: "flex items-start space-x-3",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: "flex-shrink-0",
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)("svg", {
                className: "w-5 h-5 text-red-400",
                fill: "currentColor",
                viewBox: "0 0 20 20",
                children: /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
                  fillRule: "evenodd",
                  d: "M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z",
                  clipRule: "evenodd"
                })
              })
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "flex-1",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
                className: "text-sm font-medium",
                children: "Service Worker Error"
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                className: "mt-1 text-xs text-white/80",
                children: error
              })]
            })]
          }), isInstalling && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_framerMotion.motion.div, {
            initial: {
              scale: 0.95
            },
            animate: {
              scale: 1
            },
            className: "flex items-start space-x-3",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: "flex-shrink-0",
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.motion.div, {
                animate: {
                  rotate: 360
                },
                transition: {
                  duration: 2,
                  repeat: Infinity,
                  ease: 'linear'
                },
                children: /*#__PURE__*/(0, _jsxRuntime.jsx)("svg", {
                  className: "w-5 h-5 text-blue-400",
                  fill: "none",
                  stroke: "currentColor",
                  viewBox: "0 0 24 24",
                  children: /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
                    strokeLinecap: "round",
                    strokeLinejoin: "round",
                    strokeWidth: 2,
                    d: "M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                  })
                })
              })
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "flex-1",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
                className: "text-sm font-medium",
                children: "Installing Update"
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                className: "mt-1 text-xs text-white/80",
                children: optimisticState.updating ? 'Applying update...' : 'A new version is being installed.'
              })]
            })]
          }), hasUpdate && !isInstalling && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_framerMotion.motion.div, {
            initial: {
              scale: 0.95
            },
            animate: {
              scale: 1
            },
            className: "flex items-start space-x-3",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: "flex-shrink-0",
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)("svg", {
                className: "w-5 h-5 text-green-400",
                fill: "currentColor",
                viewBox: "0 0 20 20",
                children: /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
                  fillRule: "evenodd",
                  d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z",
                  clipRule: "evenodd"
                })
              })
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "flex-1",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
                className: "text-sm font-medium",
                children: "Update Available"
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
                className: "mt-1 text-xs text-white/80",
                children: "A new version with improvements is ready."
              }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "mt-3 flex space-x-2",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.motion.button, {
                  whileHover: {
                    scale: 1.02
                  },
                  whileTap: {
                    scale: 0.98
                  },
                  onClick: handleUpdate,
                  disabled: isPending || optimisticState.updating,
                  className: "px-3 py-1.5 bg-white/20 hover:bg-white/30 rounded-md text-xs font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed",
                  children: isPending || optimisticState.updating ? /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                    className: "flex items-center space-x-1",
                    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.motion.div, {
                      animate: {
                        rotate: 360
                      },
                      transition: {
                        duration: 1,
                        repeat: Infinity,
                        ease: 'linear'
                      },
                      className: "w-3 h-3",
                      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("svg", {
                        fill: "currentColor",
                        viewBox: "0 0 20 20",
                        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
                          fillRule: "evenodd",
                          d: "M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z",
                          clipRule: "evenodd"
                        })
                      })
                    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                      children: "Updating..."
                    })]
                  }) : 'Update Now'
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.motion.button, {
                  whileHover: {
                    scale: 1.02
                  },
                  whileTap: {
                    scale: 0.98
                  },
                  className: "px-3 py-1.5 bg-white/10 hover:bg-white/20 rounded-md text-xs font-medium transition-colors",
                  children: "Later"
                })]
              })]
            })]
          })]
        })
      })
    })
  });
};
exports.ServiceWorkerUpdateNotification = ServiceWorkerUpdateNotification;
var _default = exports.default = ServiceWorkerUpdateNotification;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,