6ce4c8480c9a5ad20f7571674ff23e44
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PropList = void 0;
var _react = _interopRequireWildcard(require("react"));
var _CondensedPropCard = _interopRequireDefault(require("../CondensedPropCard"));
var _VirtualizedPropList = _interopRequireDefault(require("../VirtualizedPropList"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * PropList Component - Displays the list of props with virtualization support
 *
 * Handles both standard and virtualized rendering based on performance settings
 */
const PropListComponent = /*#__PURE__*/_react.default.memo(({
  props,
  loading,
  expandedRowKey,
  onExpandToggle,
  onAnalysisRequest,
  enhancedAnalysisCache,
  loadingAnalysis,
  sortBy,
  searchTerm,
  useVirtualization,
  forceVirtualization = false
}) => {
  console.count('[PropList] RENDER');
  // Auto-virtualization for large datasets
  const shouldVirtualize = (0, _react.useMemo)(() => useVirtualization || forceVirtualization || props.length > 100, [useVirtualization, forceVirtualization, props.length]);

  // Filter props based on search term
  const filteredProps = _react.default.useMemo(() => {
    if (!searchTerm.trim()) return props;
    const term = searchTerm.toLowerCase();
    return props.filter(prop => prop.player && prop.player.toLowerCase().includes(term) || prop.matchup && prop.matchup.toLowerCase().includes(term));
  }, [props, searchTerm]);

  // Show loading state
  if (loading && props.length === 0) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "flex items-center justify-center h-64",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "text-lg text-gray-600",
        children: "Loading props..."
      })
    });
  }

  // Show empty state
  if (!loading && filteredProps.length === 0) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "flex flex-col items-center justify-center h-64 text-gray-500",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "text-xl mb-2",
        children: "No props found"
      }), searchTerm && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "text-sm",
        children: "Try adjusting your search or filters"
      })]
    });
  }

  // Render with virtualization if needed
  if (shouldVirtualize) {
    console.log('âš¡ Virtualized rendering active for', filteredProps.length, 'props');
    // Wrap onExpandToggle to accept string|null
    const handleSetExpandedRowKey = key => {
      if (key !== null) onExpandToggle(key);
    };
    // Provide required props for VirtualizedPropList
    const noop = () => {};
    const noopIsSelected = () => false;
    const noopAsync = async () => {};
    const expandedCardRef = _react.default.useRef(null);
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "props-list-container",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "mb-4 text-sm text-gray-600",
        children: ["Showing ", filteredProps.length, " props (virtualized for performance)"]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualizedPropList.default, {
        projections: filteredProps,
        fetchEnhancedAnalysis: onAnalysisRequest,
        enhancedAnalysisCache: enhancedAnalysisCache,
        loadingAnalysis: loadingAnalysis,
        expandedRowKey: expandedRowKey,
        setExpandedRowKey: handleSetExpandedRowKey,
        isSelected: noopIsSelected,
        addProp: noopAsync,
        removeProp: noop,
        expandedCardRef: expandedCardRef,
        propAnalystResponses: {},
        clicksEnabled: false
      })]
    });
  }

  // Standard rendering for smaller datasets
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "props-list-container",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "mb-4 text-sm text-gray-600",
      children: ["Showing ", filteredProps.length, " props"]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "space-y-4",
      children: filteredProps.map(prop => /*#__PURE__*/(0, _jsxRuntime.jsx)(_CondensedPropCard.default, {
        player: prop.player,
        team: prop.matchup?.split(' ')[0] || '',
        stat: prop.stat,
        line: prop.line,
        confidence: prop.confidence,
        matchup: prop.matchup,
        espnPlayerId: prop.espnPlayerId,
        onClick: () => onExpandToggle(prop.id),
        isExpanded: expandedRowKey === prop.id
      }, prop.id))
    })]
  });
});
// Auto-virtualization for large datasets

// Exporting the PropListComponent as default
var _default = exports.default = PropListComponent;
const PropList = exports.PropList = /*#__PURE__*/_react.default.memo(PropListComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,