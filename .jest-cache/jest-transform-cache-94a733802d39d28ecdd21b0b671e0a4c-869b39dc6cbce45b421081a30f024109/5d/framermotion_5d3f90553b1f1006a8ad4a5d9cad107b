89deaad22cc6ecbc8a8614b6f1bcdbeb
"use strict";

var React = _interopRequireWildcard(require("react"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const actual = jest.requireActual('framer-motion');
function custom(Component) {
  return /*#__PURE__*/React.forwardRef((props, ref) => {
    const regularProps = Object.entries(props || {}).reduce((acc, [key, value]) => {
      if (!actual.isValidMotionProp || !actual.isValidMotionProp(key)) {
        acc[key] = value;
      }
      return acc;
    }, {});
    return /*#__PURE__*/React.createElement(Component, {
      ref,
      ...regularProps
    });
  });
}
const componentCache = new Map();
const motion = new Proxy(custom, {
  get: (_target, key) => {
    if (!componentCache.has(key)) {
      componentCache.set(key, custom(key));
    }
    return componentCache.get(key);
  }
});
const AnimatePresence = ({
  children
}) => /*#__PURE__*/React.createElement(React.Fragment, null, children);
module.exports = {
  ...actual,
  AnimatePresence,
  motion
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImFjdHVhbCIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiY3VzdG9tIiwiQ29tcG9uZW50IiwiZm9yd2FyZFJlZiIsInByb3BzIiwicmVmIiwicmVndWxhclByb3BzIiwiZW50cmllcyIsInJlZHVjZSIsImFjYyIsImtleSIsInZhbHVlIiwiaXNWYWxpZE1vdGlvblByb3AiLCJjcmVhdGVFbGVtZW50IiwiY29tcG9uZW50Q2FjaGUiLCJNYXAiLCJtb3Rpb24iLCJQcm94eSIsIl90YXJnZXQiLCJBbmltYXRlUHJlc2VuY2UiLCJjaGlsZHJlbiIsIkZyYWdtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImZyYW1lci1tb3Rpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiIFxyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5jb25zdCBhY3R1YWwgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ2ZyYW1lci1tb3Rpb24nKTtcclxuXHJcbmZ1bmN0aW9uIGN1c3RvbShDb21wb25lbnQ6IHN0cmluZyB8IFJlYWN0LkNvbXBvbmVudFR5cGU8YW55Pikge1xyXG4gIHJldHVybiBSZWFjdC5mb3J3YXJkUmVmKChwcm9wczogYW55LCByZWY6IGFueSkgPT4ge1xyXG4gICAgY29uc3QgcmVndWxhclByb3BzID0gT2JqZWN0LmVudHJpZXMocHJvcHMgfHwge30pLnJlZHVjZSgoYWNjOiBhbnksIFtrZXksIHZhbHVlXSkgPT4ge1xyXG4gICAgICBpZiAoIWFjdHVhbC5pc1ZhbGlkTW90aW9uUHJvcCB8fCAhYWN0dWFsLmlzVmFsaWRNb3Rpb25Qcm9wKGtleSkpIHtcclxuICAgICAgICBhY2Nba2V5XSA9IHZhbHVlO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBhY2M7XHJcbiAgICB9LCB7fSk7XHJcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHsgcmVmLCAuLi5yZWd1bGFyUHJvcHMgfSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmNvbnN0IGNvbXBvbmVudENhY2hlID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcclxuY29uc3QgbW90aW9uID0gbmV3IFByb3h5KGN1c3RvbSwge1xyXG4gIGdldDogKF90YXJnZXQsIGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICBpZiAoIWNvbXBvbmVudENhY2hlLmhhcyhrZXkpKSB7XHJcbiAgICAgIGNvbXBvbmVudENhY2hlLnNldChrZXksIGN1c3RvbShrZXkpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb21wb25lbnRDYWNoZS5nZXQoa2V5KSE7XHJcbiAgfSxcclxufSk7XHJcblxyXG5jb25zdCBBbmltYXRlUHJlc2VuY2UgPSAoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkgPT5cclxuICBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbik7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAuLi5hY3R1YWwsXHJcbiAgQW5pbWF0ZVByZXNlbmNlLFxyXG4gIG1vdGlvbixcclxufTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUNBLElBQUFBLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUErQixTQUFBRCx3QkFBQUUsQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUosdUJBQUEsWUFBQUEsQ0FBQUUsQ0FBQSxF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