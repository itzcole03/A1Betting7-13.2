4abad471848e1c51fd38b1d38a886fad
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const PlayerAvatar = ({
  playerName,
  playerId,
  size = 'md',
  className = ''
}) => {
  const [imageState, setImageState] = (0, _react.useState)('loading');
  const [currentSrc, setCurrentSrc] = (0, _react.useState)(null);

  // Define size classes
  const sizeClasses = {
    sm: 'w-8 h-8 text-sm',
    md: 'w-10 h-10 text-lg',
    lg: 'w-16 h-16 text-xl'
  };

  // URL formats to try in order of preference
  const getImageUrls = id => {
    return [
    // MLB static format (confirmed working via curl test)
    `https://midfield.mlbstatic.com/v1/people/${id}/spots/120`,
    // Try larger resolution as backup
    `https://midfield.mlbstatic.com/v1/people/${id}/spots/240`,
    // Generic player silhouette as final fallback
    `https://midfield.mlbstatic.com/v1/people/generic/spots/120`];
  };

  // Get player initials for fallback
  const getInitials = name => {
    return name.split(' ').map(part => part.charAt(0)).join('').toUpperCase().slice(0, 2);
  };

  // Test image URLs sequentially
  (0, _react.useEffect)(() => {
    if (!playerId) {
      setImageState('error');
      return;
    }
    const testImage = (urls, index = 0) => {
      if (index >= urls.length) {
        console.log(`[PlayerAvatar] All image URLs failed for ${playerName} (ID: ${playerId})`);
        setImageState('error');
        return;
      }
      const img = new Image();
      const url = urls[index];
      img.onload = () => {
        console.log(`[PlayerAvatar] ‚úÖ Image loaded successfully for ${playerName} (ID: ${playerId}) from: ${url}`);
        setCurrentSrc(url);
        setImageState('loaded');
      };
      img.onerror = () => {
        console.log(`[PlayerAvatar] ‚ùå Image failed to load for ${playerName} (ID: ${playerId}) from: ${url}`);
        // Try next URL
        testImage(urls, index + 1);
      };
      console.log(`[PlayerAvatar] üîÑ Testing image URL for ${playerName} (ID: ${playerId}): ${url}`);
      img.src = url;
    };
    setImageState('loading');
    const urls = getImageUrls(playerId);
    testImage(urls);
  }, [playerId, playerName]);
  const baseClasses = `${sizeClasses[size]} rounded-full flex-shrink-0 ${className}`;

  // Show image if loaded successfully
  if (imageState === 'loaded' && currentSrc) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
      src: currentSrc,
      alt: playerName,
      className: `${baseClasses} object-cover border-2 border-green-500`,
      onError: () => {
        console.log(`[PlayerAvatar] ‚ùå Image error during display for ${playerName}`);
        setImageState('error');
      },
      title: `${playerName} (ID: ${playerId}) - Image loaded`
    });
  }

  // Show loading state
  if (imageState === 'loading') {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: `${baseClasses} bg-blue-600 flex items-center justify-center text-white font-bold animate-pulse border-2 border-blue-400`,
      title: `${playerName} (ID: ${playerId}) - Loading image...`,
      children: getInitials(playerName)
    });
  }

  // Show fallback with initials (error state)
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: `${baseClasses} bg-gray-700 flex items-center justify-center text-white font-bold border-2 border-gray-500`,
    title: `${playerName} (ID: ${playerId || 'N/A'}) - No image available`,
    children: getInitials(playerName)
  });
};
var _default = exports.default = PlayerAvatar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,