8bab3cf8e1bd7a24e97969904339a6bd
"use strict";

// Mock the custom hooks to control data, loading, and error states
_getJestObj().mock('../../../hooks/useEnhancedBets', () => ({
  __esModule: true,
  useEnhancedBets: jest.fn()
}));
_getJestObj().mock('../../../hooks/usePortfolioOptimization', () => ({
  __esModule: true,
  usePortfolioOptimization: jest.fn()
}));
_getJestObj().mock('../../../hooks/useAIInsights', () => ({
  __esModule: true,
  useAIInsights: jest.fn()
}));

// Mock window.scrollTo to prevent jsdom errors
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactQuery = require("@tanstack/react-query");
require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _react2 = _interopRequireDefault(require("react"));
var _useAIInsights = require("../../../hooks/useAIInsights");
var _useEnhancedBets = require("../../../hooks/useEnhancedBets");
var _usePortfolioOptimization = require("../../../hooks/usePortfolioOptimization");
var _ComprehensiveAdminDashboard = _interopRequireDefault(require("../ComprehensiveAdminDashboard"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
beforeAll(() => {
  window.scrollTo = jest.fn();
});

// Reset and set up default mocks before each test
beforeEach(() => {
  _useEnhancedBets.useEnhancedBets.mockReset();
  _usePortfolioOptimization.usePortfolioOptimization.mockReset();
  _useAIInsights.useAIInsights.mockReset();
  _useEnhancedBets.useEnhancedBets.mockImplementation(() => ({
    isLoading: false,
    isError: false,
    data: {
      enhanced_bets: [{
        bet_id: '1',
        player_name: 'John Doe',
        sport: 'NBA',
        stat_type: 'PTS',
        line: 25.5,
        confidence: 92.1,
        recommendation: 'Over'
      }, {
        bet_id: '2',
        player_name: 'Jane Smith',
        sport: 'NBA',
        stat_type: 'REB',
        line: 10.5,
        confidence: 85.3,
        recommendation: 'Under'
      }]
    },
    error: null,
    refetch: jest.fn()
  }));
  _usePortfolioOptimization.usePortfolioOptimization.mockImplementation(() => ({
    isLoading: false,
    isError: false,
    data: {},
    error: null,
    refetch: jest.fn()
  }));
  _useAIInsights.useAIInsights.mockImplementation(() => ({
    isLoading: false,
    isError: false,
    data: {
      ai_insights: []
    },
    error: null,
    refetch: jest.fn()
  }));
});
const _queryClient = new _reactQuery.QueryClient();
describe('ComprehensiveAdminDashboard', () => {
  // For debugging: log the DOM after clicking the bet

  // @ts-ignore

  // console.log(document.body.innerHTML);
  it('renders dashboard data and panels when loaded', async () => {
    _useEnhancedBets.useEnhancedBets.mockImplementation(() => ({
      isLoading: false,
      isError: false,
      data: {
        enhanced_bets: [{
          bet_id: '1',
          player_name: 'John Doe',
          sport: 'NBA',
          stat_type: 'PTS',
          line: 25.5,
          confidence: 92.1,
          recommendation: 'Over'
        }, {
          bet_id: '2',
          player_name: 'Jane Smith',
          sport: 'NBA',
          stat_type: 'REB',
          line: 10.5,
          confidence: 85.3,
          recommendation: 'Under'
        }]
      },
      error: null,
      refetch: jest.fn()
    }));
    _usePortfolioOptimization.usePortfolioOptimization.mockImplementation(() => ({
      isLoading: false,
      isError: false,
      data: {},
      error: null,
      refetch: jest.fn()
    }));
    _useAIInsights.useAIInsights.mockImplementation(() => ({
      isLoading: false,
      isError: false,
      data: {
        ai_insights: [{
          bet_id: '1',
          player_name: 'John Doe',
          quantum_analysis: 'AI sees strong upside for John Doe.'
        }, {
          bet_id: '2',
          player_name: 'Jane Smith',
          quantum_analysis: 'Jane Smith likely to underperform rebounds.'
        }]
      },
      error: null,
      refetch: jest.fn()
    }));
    const Wrapper = () => /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactQuery.QueryClientProvider, {
      client: _queryClient,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ComprehensiveAdminDashboard.default, {})
    });
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapper, {}));
    await (0, _react.waitFor)(() => {
      expect(_react.screen.getByText('Enhanced Bets')).toBeInTheDocument();
    });
    expect(_react.screen.getAllByText(/John Doe/i).length).toBeGreaterThan(0);
    expect(_react.screen.getAllByText(/Jane Smith/i).length).toBeGreaterThan(0);
    expect(_react.screen.getAllByText(/PTS/i).length).toBeGreaterThan(0);
    expect(_react.screen.getAllByText(/REB/i).length).toBeGreaterThan(0);
    expect(_react.screen.getAllByText(/92\.1/).length).toBeGreaterThan(0);
    expect(_react.screen.getAllByText(/85\.3/).length).toBeGreaterThan(0);
    expect(_react.screen.getAllByText(/Over/i).length).toBeGreaterThan(0);
    expect(_react.screen.getAllByText(/Under/i).length).toBeGreaterThan(0);

    // Use within to target the bet selector container
    const betSelector = _react.screen.getByText('Select Bet for Analysis').closest('div');
    expect(betSelector).toBeDefined();
    const johnDoeBet = (0, _react.within)(betSelector).getAllByText(/John Doe/i)[0];
    await _userEvent.default.click(johnDoeBet);
    // Debug: log the DOM after clicking the bet

    console.log(document.body.innerHTML);

    // Wait for the AI insight text to appear
    const johnDoeInsights = await _react.screen.findAllByText((_, node) => node?.textContent?.includes('AI sees strong upside for John Doe.') ?? false);
    expect(johnDoeInsights.length).toBeGreaterThan(0);

    // Optionally, select the second bet and check its insight
    const janeSmithBet = (0, _react.within)(betSelector).getAllByText(/Jane Smith/i)[0];
    await _userEvent.default.click(janeSmithBet);
    const janeSmithInsights = await _react.screen.findAllByText((_, node) => node?.textContent?.includes('Jane Smith likely to underperform rebounds.') ?? false);
    expect(janeSmithInsights.length).toBeGreaterThan(0);
  });
  it('shows loading state', async () => {
    _useEnhancedBets.useEnhancedBets.mockImplementation(() => ({
      isLoading: true,
      isError: false
    }));
    _usePortfolioOptimization.usePortfolioOptimization.mockImplementation(() => ({
      isLoading: true,
      isError: false
    }));
    _useAIInsights.useAIInsights.mockImplementation(() => ({
      isLoading: true,
      isError: false
    }));
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactQuery.QueryClientProvider, {
      client: _queryClient,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ComprehensiveAdminDashboard.default, {})
    }));
    await (0, _react.waitFor)(() => {
      expect(_react.screen.getByText(/Loading AI-powered betting intelligence/i)).toBeInTheDocument();
    });
  });
  it('shows error state', async () => {
    // imports moved to top level
    _useEnhancedBets.useEnhancedBets.mockImplementation(() => ({
      isLoading: false,
      isError: true
    }));
    _usePortfolioOptimization.usePortfolioOptimization.mockImplementation(() => ({
      isLoading: false,
      isError: true
    }));
    _useAIInsights.useAIInsights.mockImplementation(() => ({
      isLoading: false,
      isError: true
    }));
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactQuery.QueryClientProvider, {
      client: _queryClient,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ComprehensiveAdminDashboard.default, {})
    }));
    await (0, _react.waitFor)(() => {
      expect(_react.screen.getByText(/Error loading data/i)).toBeInTheDocument();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,