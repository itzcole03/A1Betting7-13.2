c0ae15b1aa94e9b77356c45c1fde6a4a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOptimizedServiceHealth = exports.useOptimizedPlayerSearch = exports.useOptimizedPlayerData = void 0;
var _react = require("react");
var _enhancedLogger = require("../utils/enhancedLogger");
var _RealTimePlayerDataService = require("../services/RealTimePlayerDataService");
/**
 * Optimized Player Data Hook
 * Integrates with the new OptimizedRealTimeDataService to provide
 * high-performance, real-time player data with intelligent caching
 * 
 * Addresses key findings from the A1Betting analysis:
 * - Real-time data streaming
 * - Intelligent error handling and fallback
 * - Performance optimization with caching
 * - Circuit breaker pattern implementation
 * - Data quality validation
 */

const useOptimizedPlayerData = options => {
  const {
    playerId,
    sport = 'MLB',
    enableRealTimeUpdates = true,
    forceRefresh = false,
    fallbackToCache = true
  } = options;

  // State management
  const [player, setPlayer] = (0, _react.useState)(null);
  const [loading, setLoading] = (0, _react.useState)(false);
  const [error, setError] = (0, _react.useState)(null);
  const [isStale, setIsStale] = (0, _react.useState)(false);
  const [isRealTime, setIsRealTime] = (0, _react.useState)(false);
  const [lastUpdated, setLastUpdated] = (0, _react.useState)(null);
  const [dataQuality, setDataQuality] = (0, _react.useState)('unknown');
  const [dataSources, setDataSources] = (0, _react.useState)([]);
  const [responseTime, setResponseTime] = (0, _react.useState)(null);
  const [cacheHit, setCacheHit] = (0, _react.useState)(false);

  // Refs for cleanup and real-time subscriptions
  const unsubscribeRef = (0, _react.useRef)(null);
  const abortControllerRef = (0, _react.useRef)(null);
  const loadingTimeoutRef = (0, _react.useRef)(null);

  // Stable references to prevent infinite loops - initialized after function definitions
  const loadPlayerDataRef = (0, _react.useRef)(null);
  const subscribeToUpdatesRef = (0, _react.useRef)(null);
  const unsubscribeFromUpdatesRef = (0, _react.useRef)(null);

  /**
   * Load player data with optimized performance and error handling
   */
  const loadPlayerData = (0, _react.useCallback)(async (forceRefresh = false) => {
    if (!playerId) {
      setPlayer(null);
      setError(null);
      setLoading(false);
      return;
    }

    // Cancel any pending requests
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }
    abortControllerRef.current = new AbortController();
    const startTime = Date.now();
    setLoading(true);
    setError(null);
    setCacheHit(false);

    // Set loading timeout to prevent infinite loading states
    loadingTimeoutRef.current = setTimeout(() => {
      setError('Request timeout - data may be unavailable');
      setLoading(false);
    }, 10000);
    try {
      _enhancedLogger.enhancedLogger.info('useOptimizedPlayerData', 'Load', `Loading data for ${playerId} (force: ${forceRefresh})`);

      // Get player data from optimized service
      const playerData = await _RealTimePlayerDataService.realTimePlayerDataService.getPlayerData(playerId, sport);
      if (abortControllerRef.current?.signal.aborted) {
        return; // Request was cancelled
      }
      const endTime = Date.now();
      setResponseTime(endTime - startTime);
      if (playerData) {
        setPlayer(playerData);
        setLastUpdated(new Date());
        setError(null);

        // Extract metadata from response
        setDataSources(playerData._sources || ['unknown']);
        setDataQuality(determineDataQuality(playerData));
        setCacheHit(endTime - startTime < 100); // Assume cache hit if very fast

        // Check if data is stale
        const fetchedAt = playerData._fetched_at;
        if (fetchedAt) {
          const fetchTime = new Date(fetchedAt);
          const ageInMinutes = (Date.now() - fetchTime.getTime()) / (1000 * 60);
          setIsStale(ageInMinutes > 5); // Consider stale after 5 minutes
        }
        _enhancedLogger.enhancedLogger.info('useOptimizedPlayerData', 'Load', `Successfully loaded ${playerId} from sources: ${playerData._sources?.join(', ')}`);
      } else {
        setPlayer(null);
        setError('Player data not found');
        setDataQuality('unknown');
      }
    } catch (err) {
      _enhancedLogger.enhancedLogger.error('useOptimizedPlayerData', 'Load', `Failed to load ${playerId}`, {
        error: err
      });
      if (!abortControllerRef.current?.signal.aborted) {
        setError(err instanceof Error ? err.message : 'Failed to load player data');

        // If fallback to cache is enabled, try to get cached data
        if (fallbackToCache && !forceRefresh) {
          try {
            const cachedData = await _RealTimePlayerDataService.realTimePlayerDataService.getPlayerData(playerId, sport);
            if (cachedData) {
              setPlayer(cachedData);
              setIsStale(true);
              setDataQuality('low');
              setCacheHit(true);
              _enhancedLogger.enhancedLogger.debug('useOptimizedPlayerData', 'Cache', `Using cached data for ${playerId}`);
            }
          } catch (cacheError) {
            _enhancedLogger.enhancedLogger.warn('useOptimizedPlayerData', 'Cache', 'Cache fallback also failed', {
              error: cacheError
            });
          }
        }
      }
    } finally {
      if (loadingTimeoutRef.current) {
        clearTimeout(loadingTimeoutRef.current);
        loadingTimeoutRef.current = null;
      }
      setLoading(false);
    }
  }, [playerId, sport, fallbackToCache]);

  /**
   * Subscribe to real-time updates for the current player
   */
  const subscribeToUpdates = (0, _react.useCallback)(() => {
    if (!playerId || !enableRealTimeUpdates) return;

    // Unsubscribe from previous subscription
    if (unsubscribeRef.current) {
      unsubscribeRef.current();
    }
    _enhancedLogger.enhancedLogger.info('useOptimizedPlayerData', 'Subscription', `Subscribing to real-time updates for ${playerId}`);
    unsubscribeRef.current = _RealTimePlayerDataService.realTimePlayerDataService.subscribeToPlayer(playerId, updateData => {
      _enhancedLogger.enhancedLogger.debug('useOptimizedPlayerData', 'Subscription', `Received real-time update for ${playerId}`, {
        updateData
      });
      const update = updateData;

      // Handle different types of updates
      if (update.type === 'player_stats') {
        setPlayer(prevPlayer => {
          if (!prevPlayer) return null;
          return {
            ...prevPlayer,
            season_stats: {
              ...prevPlayer.season_stats,
              ...update.data
            },
            _updated_at: new Date().toISOString()
          };
        });
        setLastUpdated(new Date());
        setIsRealTime(true);
        setIsStale(false);
      } else if (update.type === 'injury_update') {
        setPlayer(prevPlayer => {
          if (!prevPlayer) return null;
          return {
            ...prevPlayer,
            injury_status: update.data?.injury_status,
            active: update.data?.active !== false
          };
        });
      } else if (update.type === 'lineup_change' || update.type === 'trade') {
        // Major changes require full refresh
        if (loadPlayerDataRef.current) {
          loadPlayerDataRef.current(true);
        }
      }
    });
    setIsRealTime(true);
  }, [playerId, enableRealTimeUpdates]);

  /**
   * Unsubscribe from real-time updates
   */
  const unsubscribeFromUpdates = (0, _react.useCallback)(() => {
    if (unsubscribeRef.current) {
      _enhancedLogger.enhancedLogger.info('useOptimizedPlayerData', 'Subscription', `Unsubscribing from real-time updates`);
      unsubscribeRef.current();
      unsubscribeRef.current = null;
      setIsRealTime(false);
    }
  }, []);

  /**
   * Refresh player data
   */
  const refresh = (0, _react.useCallback)(async () => {
    if (loadPlayerDataRef.current) {
      await loadPlayerDataRef.current(true);
    }
  }, []);

  /**
   * Clear error state
   */
  const clearError = (0, _react.useCallback)(() => {
    setError(null);
  }, []);

  // Update stable references after function definitions
  loadPlayerDataRef.current = loadPlayerData;
  subscribeToUpdatesRef.current = subscribeToUpdates;
  unsubscribeFromUpdatesRef.current = unsubscribeFromUpdates;

  /**
   * Determine data quality based on player data completeness and freshness
   */
  const determineDataQuality = playerData => {
    if (!playerData) return 'unknown';
    let qualityScore = 0;
    let maxScore = 0;

    // Check required fields
    const requiredFields = ['id', 'name', 'team', 'position'];
    requiredFields.forEach(field => {
      maxScore += 1;
      if (playerData[field]) {
        qualityScore += 1;
      }
    });

    // Check season stats completeness
    const stats = playerData.season_stats;
    if (stats) {
      const importantStats = ['games_played', 'batting_average', 'home_runs', 'rbis'];
      importantStats.forEach(stat => {
        maxScore += 1;
        if (stats[stat] !== undefined && stats[stat] !== null) {
          qualityScore += 1;
        }
      });
    } else {
      maxScore += 4; // Penalty for missing stats
    }

    // Check data freshness
    const fetchedAt = playerData._fetched_at;
    if (fetchedAt) {
      maxScore += 1;
      const fetchTime = new Date(fetchedAt);
      const ageInMinutes = (Date.now() - fetchTime.getTime()) / (1000 * 60);
      if (ageInMinutes < 10) {
        qualityScore += 1;
      }
    }

    // Check data sources
    const sources = playerData._sources || [];
    if (sources.length > 1) {
      qualityScore += 0.5; // Bonus for multiple sources
    }
    const qualityRatio = qualityScore / maxScore;
    if (qualityRatio >= 0.9) return 'high';
    if (qualityRatio >= 0.7) return 'medium';
    return 'low';
  };

  // Effect for initial data loading
  (0, _react.useEffect)(() => {
    if (playerId && loadPlayerDataRef.current) {
      loadPlayerDataRef.current(forceRefresh);
    } else {
      setPlayer(null);
      setError(null);
      setLoading(false);
    }
  }, [playerId, sport, forceRefresh]);

  // Effect for real-time subscription management
  (0, _react.useEffect)(() => {
    if (playerId && enableRealTimeUpdates && subscribeToUpdatesRef.current) {
      subscribeToUpdatesRef.current();
    } else if (unsubscribeFromUpdatesRef.current) {
      unsubscribeFromUpdatesRef.current();
    }
    return () => {
      if (unsubscribeFromUpdatesRef.current) {
        unsubscribeFromUpdatesRef.current();
      }
    };
  }, [playerId, enableRealTimeUpdates]);

  // Cleanup effect
  (0, _react.useEffect)(() => {
    return () => {
      // Cleanup on unmount
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }
      if (loadingTimeoutRef.current) {
        clearTimeout(loadingTimeoutRef.current);
      }
      if (unsubscribeFromUpdatesRef.current) {
        unsubscribeFromUpdatesRef.current();
      }
    };
  }, []);

  // Performance monitoring effect
  (0, _react.useEffect)(() => {
    if (responseTime !== null) {
      _enhancedLogger.enhancedLogger.debug('useOptimizedPlayerData', 'Performance', `Response time for ${playerId}: ${responseTime}ms (cache hit: ${cacheHit})`);

      // Log slow responses
      if (responseTime > 3000) {
        _enhancedLogger.enhancedLogger.warn('useOptimizedPlayerData', 'Performance', `Slow response detected: ${responseTime}ms for ${playerId}`);
      }
    }
  }, [responseTime, cacheHit, playerId]);
  return {
    player,
    loading,
    error,
    isStale,
    isRealTime,
    lastUpdated,
    dataQuality,
    dataSources,
    refresh,
    clearError,
    subscribeToUpdates,
    unsubscribeFromUpdates,
    responseTime,
    cacheHit
  };
};

/**
 * Hook for optimized player search with real-time capabilities
 */
exports.useOptimizedPlayerData = useOptimizedPlayerData;
const useOptimizedPlayerSearch = () => {
  const [searchResults, setSearchResults] = (0, _react.useState)([]);
  const [searchLoading, setSearchLoading] = (0, _react.useState)(false);
  const [searchError, setSearchError] = (0, _react.useState)(null);
  const abortControllerRef = (0, _react.useRef)(null);
  const searchPlayers = (0, _react.useCallback)(async (query, sport = 'MLB', limit = 10) => {
    if (query.length < 2) {
      setSearchResults([]);
      setSearchError(null);
      return;
    }

    // Cancel previous search
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }
    abortControllerRef.current = new AbortController();
    setSearchLoading(true);
    setSearchError(null);
    try {
      _enhancedLogger.enhancedLogger.debug('useOptimizedPlayerSearch', 'search', `Searching for: ${query}`);
      const results = await _RealTimePlayerDataService.realTimePlayerDataService.searchPlayers(query, sport, limit);
      if (!abortControllerRef.current?.signal.aborted) {
        setSearchResults(results);
        _enhancedLogger.enhancedLogger.debug('useOptimizedPlayerSearch', 'search', `Found ${results.length} results for: ${query}`);
      }
    } catch (err) {
      if (!abortControllerRef.current?.signal.aborted) {
        _enhancedLogger.enhancedLogger.error('useOptimizedPlayerSearch', 'search', 'Search failed', undefined, err);
        setSearchError(err instanceof Error ? err.message : 'Search failed');
        setSearchResults([]);
      }
    } finally {
      if (!abortControllerRef.current?.signal.aborted) {
        setSearchLoading(false);
      }
    }
  }, []);
  const clearSearch = (0, _react.useCallback)(() => {
    setSearchResults([]);
    setSearchError(null);
    setSearchLoading(false);
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }
  }, []);

  // Cleanup on unmount
  (0, _react.useEffect)(() => {
    return () => {
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }
    };
  }, []);
  return {
    searchResults,
    searchLoading,
    searchError,
    searchPlayers,
    clearSearch
  };
};

/**
 * Hook for monitoring service health and performance
 */
exports.useOptimizedPlayerSearch = useOptimizedPlayerSearch;
const useOptimizedServiceHealth = () => {
  const [healthMetrics, setHealthMetrics] = (0, _react.useState)(new Map());
  const [overallHealth, setOverallHealth] = (0, _react.useState)('healthy');
  (0, _react.useEffect)(() => {
    const updateHealth = () => {
      const metrics = _RealTimePlayerDataService.realTimePlayerDataService.getHealthMetrics();
      setHealthMetrics(metrics);

      // Determine overall health
      const healthValues = Array.from(metrics.values());
      const unhealthyServices = healthValues.filter(m => m.consecutiveFailures > 3).length;
      if (healthValues.length === 0) {
        setOverallHealth('offline');
      } else if (unhealthyServices > healthValues.length * 0.5) {
        setOverallHealth('degraded');
      } else {
        setOverallHealth('healthy');
      }
    };

    // Update immediately
    updateHealth();

    // Update every 30 seconds
    const interval = setInterval(updateHealth, 30000);
    return () => clearInterval(interval);
  }, []);
  return {
    healthMetrics,
    overallHealth
  };
};
exports.useOptimizedServiceHealth = useOptimizedServiceHealth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,