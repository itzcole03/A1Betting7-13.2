{"version":3,"names":["_react","require","_enhancedLogger","_RealTimePlayerDataService","useOptimizedPlayerData","options","playerId","sport","enableRealTimeUpdates","forceRefresh","fallbackToCache","player","setPlayer","useState","loading","setLoading","error","setError","isStale","setIsStale","isRealTime","setIsRealTime","lastUpdated","setLastUpdated","dataQuality","setDataQuality","dataSources","setDataSources","responseTime","setResponseTime","cacheHit","setCacheHit","unsubscribeRef","useRef","abortControllerRef","loadingTimeoutRef","loadPlayerDataRef","subscribeToUpdatesRef","unsubscribeFromUpdatesRef","loadPlayerData","useCallback","current","abort","AbortController","startTime","Date","now","setTimeout","enhancedLogger","info","playerData","realTimePlayerDataService","getPlayerData","signal","aborted","endTime","_sources","determineDataQuality","fetchedAt","_fetched_at","fetchTime","ageInMinutes","getTime","join","err","Error","message","cachedData","debug","cacheError","warn","clearTimeout","subscribeToUpdates","subscribeToPlayer","updateData","update","type","prevPlayer","season_stats","data","_updated_at","toISOString","injury_status","active","unsubscribeFromUpdates","refresh","clearError","qualityScore","maxScore","requiredFields","forEach","field","stats","importantStats","stat","undefined","sources","length","qualityRatio","useEffect","exports","useOptimizedPlayerSearch","searchResults","setSearchResults","searchLoading","setSearchLoading","searchError","setSearchError","searchPlayers","query","limit","results","clearSearch","useOptimizedServiceHealth","healthMetrics","setHealthMetrics","Map","overallHealth","setOverallHealth","updateHealth","metrics","getHealthMetrics","healthValues","Array","from","values","unhealthyServices","filter","m","consecutiveFailures","interval","setInterval","clearInterval"],"sources":["useOptimizedPlayerData.ts"],"sourcesContent":["/**\n * Optimized Player Data Hook\n * Integrates with the new OptimizedRealTimeDataService to provide\n * high-performance, real-time player data with intelligent caching\n * \n * Addresses key findings from the A1Betting analysis:\n * - Real-time data streaming\n * - Intelligent error handling and fallback\n * - Performance optimization with caching\n * - Circuit breaker pattern implementation\n * - Data quality validation\n */\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { enhancedLogger } from '../utils/enhancedLogger';\nimport { Player } from '../components/player/PlayerDashboardContainer';\nimport { realTimePlayerDataService } from '../services/RealTimePlayerDataService';\n\ninterface UseOptimizedPlayerDataOptions {\n  playerId?: string;\n  sport?: string;\n  enableRealTimeUpdates?: boolean;\n  forceRefresh?: boolean;\n  fallbackToCache?: boolean;\n}\n\ninterface UseOptimizedPlayerDataReturn {\n  player: Player | null;\n  loading: boolean;\n  error: string | null;\n  isStale: boolean;\n  isRealTime: boolean;\n  lastUpdated: Date | null;\n  dataQuality: 'high' | 'medium' | 'low' | 'unknown';\n  dataSources: string[];\n  \n  // Actions\n  refresh: () => Promise<void>;\n  clearError: () => void;\n  \n  // Real-time controls\n  subscribeToUpdates: () => void;\n  unsubscribeFromUpdates: () => void;\n  \n  // Performance metrics\n  responseTime: number | null;\n  cacheHit: boolean;\n}\n\nexport const useOptimizedPlayerData = (\n  options: UseOptimizedPlayerDataOptions\n): UseOptimizedPlayerDataReturn => {\n  const {\n    playerId,\n    sport = 'MLB',\n    enableRealTimeUpdates = true,\n    forceRefresh = false,\n    fallbackToCache = true\n  } = options;\n\n  // State management\n  const [player, setPlayer] = useState<Player | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isStale, setIsStale] = useState(false);\n  const [isRealTime, setIsRealTime] = useState(false);\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\n  const [dataQuality, setDataQuality] = useState<'high' | 'medium' | 'low' | 'unknown'>('unknown');\n  const [dataSources, setDataSources] = useState<string[]>([]);\n  const [responseTime, setResponseTime] = useState<number | null>(null);\n  const [cacheHit, setCacheHit] = useState(false);\n\n  // Refs for cleanup and real-time subscriptions\n  const unsubscribeRef = useRef<(() => void) | null>(null);\n  const abortControllerRef = useRef<AbortController | null>(null);\n  const loadingTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Stable references to prevent infinite loops - initialized after function definitions\n  const loadPlayerDataRef = useRef<((force?: boolean) => Promise<void>) | null>(null);\n  const subscribeToUpdatesRef = useRef<(() => void) | null>(null);\n  const unsubscribeFromUpdatesRef = useRef<(() => void) | null>(null);\n\n  /**\n   * Load player data with optimized performance and error handling\n   */\n  const loadPlayerData = useCallback(async (forceRefresh = false) => {\n    if (!playerId) {\n      setPlayer(null);\n      setError(null);\n      setLoading(false);\n      return;\n    }\n\n    // Cancel any pending requests\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    \n    abortControllerRef.current = new AbortController();\n    const startTime = Date.now();\n    \n    setLoading(true);\n    setError(null);\n    setCacheHit(false);\n\n    // Set loading timeout to prevent infinite loading states\n    loadingTimeoutRef.current = setTimeout(() => {\n      setError('Request timeout - data may be unavailable');\n      setLoading(false);\n    }, 10000);\n\n    try {\n  enhancedLogger.info('useOptimizedPlayerData', 'Load', `Loading data for ${playerId} (force: ${forceRefresh})`);\n      \n      // Get player data from optimized service\n      const playerData = await realTimePlayerDataService.getPlayerData(playerId, sport);\n      \n      if (abortControllerRef.current?.signal.aborted) {\n        return; // Request was cancelled\n      }\n\n      const endTime = Date.now();\n      setResponseTime(endTime - startTime);\n\n      if (playerData) {\n        setPlayer(playerData);\n        setLastUpdated(new Date());\n        setError(null);\n        \n        // Extract metadata from response\n        setDataSources(playerData._sources || ['unknown']);\n        setDataQuality(determineDataQuality(playerData));\n        setCacheHit(endTime - startTime < 100); // Assume cache hit if very fast\n        \n        // Check if data is stale\n        const fetchedAt = playerData._fetched_at;\n        if (fetchedAt) {\n          const fetchTime = new Date(fetchedAt);\n          const ageInMinutes = (Date.now() - fetchTime.getTime()) / (1000 * 60);\n          setIsStale(ageInMinutes > 5); // Consider stale after 5 minutes\n        }\n\n  enhancedLogger.info('useOptimizedPlayerData', 'Load', `Successfully loaded ${playerId} from sources: ${playerData._sources?.join(', ')}`);\n      } else {\n        setPlayer(null);\n        setError('Player data not found');\n        setDataQuality('unknown');\n      }\n\n    } catch (err) {\n  enhancedLogger.error('useOptimizedPlayerData', 'Load', `Failed to load ${playerId}`, { error: err });\n      \n      if (!abortControllerRef.current?.signal.aborted) {\n        setError(err instanceof Error ? err.message : 'Failed to load player data');\n        \n        // If fallback to cache is enabled, try to get cached data\n        if (fallbackToCache && !forceRefresh) {\n          try {\n            const cachedData = await realTimePlayerDataService.getPlayerData(playerId, sport);\n            if (cachedData) {\n              setPlayer(cachedData);\n              setIsStale(true);\n              setDataQuality('low');\n              setCacheHit(true);\n              enhancedLogger.debug('useOptimizedPlayerData', 'Cache', `Using cached data for ${playerId}`);\n            }\n          } catch (cacheError) {\n            enhancedLogger.warn('useOptimizedPlayerData', 'Cache', 'Cache fallback also failed', { error: cacheError });\n          }\n        }\n      }\n    } finally {\n      if (loadingTimeoutRef.current) {\n        clearTimeout(loadingTimeoutRef.current);\n        loadingTimeoutRef.current = null;\n      }\n      setLoading(false);\n    }\n  }, [playerId, sport, fallbackToCache]);\n\n  /**\n   * Subscribe to real-time updates for the current player\n   */\n  const subscribeToUpdates = useCallback(() => {\n    if (!playerId || !enableRealTimeUpdates) return;\n\n    // Unsubscribe from previous subscription\n    if (unsubscribeRef.current) {\n      unsubscribeRef.current();\n    }\n\n  enhancedLogger.info('useOptimizedPlayerData', 'Subscription', `Subscribing to real-time updates for ${playerId}`);\n\n    unsubscribeRef.current = realTimePlayerDataService.subscribeToPlayer(\n      playerId,\n      (updateData) => {\n        enhancedLogger.debug('useOptimizedPlayerData', 'Subscription', `Received real-time update for ${playerId}`, { updateData });\n\n        const update = updateData as {\n          type?: 'player_stats' | 'injury_update' | 'lineup_change' | 'trade';\n          data?: Record<string, unknown>;\n        };\n\n        // Handle different types of updates\n        if (update.type === 'player_stats') {\n          setPlayer(prevPlayer => {\n            if (!prevPlayer) return null;\n\n            return {\n              ...prevPlayer,\n              season_stats: {\n                ...prevPlayer.season_stats,\n                ...(update.data as Record<string, unknown>)\n              },\n              _updated_at: new Date().toISOString()\n            };\n          });\n\n          setLastUpdated(new Date());\n          setIsRealTime(true);\n          setIsStale(false);\n\n        } else if (update.type === 'injury_update') {\n          setPlayer(prevPlayer => {\n            if (!prevPlayer) return null;\n\n            return {\n              ...prevPlayer,\n              injury_status: (update.data as Record<string, unknown>)?.injury_status as string | undefined,\n              active: ((update.data as Record<string, unknown>)?.active as boolean) !== false\n            };\n          });\n\n        } else if (update.type === 'lineup_change' || update.type === 'trade') {\n          // Major changes require full refresh\n          if (loadPlayerDataRef.current) {\n            loadPlayerDataRef.current(true);\n          }\n        }\n      }\n    );\n\n    setIsRealTime(true);\n  }, [playerId, enableRealTimeUpdates]);\n\n  /**\n   * Unsubscribe from real-time updates\n   */\n  const unsubscribeFromUpdates = useCallback(() => {\n    if (unsubscribeRef.current) {\n  enhancedLogger.info('useOptimizedPlayerData', 'Subscription', `Unsubscribing from real-time updates`);\n      unsubscribeRef.current();\n      unsubscribeRef.current = null;\n      setIsRealTime(false);\n    }\n  }, []);\n\n  /**\n   * Refresh player data\n   */\n  const refresh = useCallback(async () => {\n    if (loadPlayerDataRef.current) {\n      await loadPlayerDataRef.current(true);\n    }\n  }, []);\n\n  /**\n   * Clear error state\n   */\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  // Update stable references after function definitions\n  loadPlayerDataRef.current = loadPlayerData;\n  subscribeToUpdatesRef.current = subscribeToUpdates;\n  unsubscribeFromUpdatesRef.current = unsubscribeFromUpdates;\n\n  /**\n   * Determine data quality based on player data completeness and freshness\n   */\n  const determineDataQuality = (playerData: Player): 'high' | 'medium' | 'low' | 'unknown' => {\n    if (!playerData) return 'unknown';\n\n    let qualityScore = 0;\n    let maxScore = 0;\n\n    // Check required fields\n    const requiredFields = ['id', 'name', 'team', 'position'];\n    requiredFields.forEach(field => {\n      maxScore += 1;\n      if (playerData[field as keyof Player]) {\n        qualityScore += 1;\n      }\n    });\n\n    // Check season stats completeness\n    const stats = playerData.season_stats;\n    if (stats) {\n      const importantStats = ['games_played', 'batting_average', 'home_runs', 'rbis'];\n      importantStats.forEach(stat => {\n        maxScore += 1;\n        if (stats[stat as keyof typeof stats] !== undefined && stats[stat as keyof typeof stats] !== null) {\n          qualityScore += 1;\n        }\n      });\n    } else {\n      maxScore += 4; // Penalty for missing stats\n    }\n\n    // Check data freshness\n    const fetchedAt = playerData._fetched_at;\n    if (fetchedAt) {\n      maxScore += 1;\n      const fetchTime = new Date(fetchedAt);\n      const ageInMinutes = (Date.now() - fetchTime.getTime()) / (1000 * 60);\n      if (ageInMinutes < 10) {\n        qualityScore += 1;\n      }\n    }\n\n    // Check data sources\n    const sources = playerData._sources || [];\n    if (sources.length > 1) {\n      qualityScore += 0.5; // Bonus for multiple sources\n    }\n\n    const qualityRatio = qualityScore / maxScore;\n    \n    if (qualityRatio >= 0.9) return 'high';\n    if (qualityRatio >= 0.7) return 'medium';\n    return 'low';\n  };\n\n  // Effect for initial data loading\n  useEffect(() => {\n    if (playerId && loadPlayerDataRef.current) {\n      loadPlayerDataRef.current(forceRefresh);\n    } else {\n      setPlayer(null);\n      setError(null);\n      setLoading(false);\n    }\n  }, [playerId, sport, forceRefresh]);\n\n  // Effect for real-time subscription management\n  useEffect(() => {\n    if (playerId && enableRealTimeUpdates && subscribeToUpdatesRef.current) {\n      subscribeToUpdatesRef.current();\n    } else if (unsubscribeFromUpdatesRef.current) {\n      unsubscribeFromUpdatesRef.current();\n    }\n\n    return () => {\n      if (unsubscribeFromUpdatesRef.current) {\n        unsubscribeFromUpdatesRef.current();\n      }\n    };\n  }, [playerId, enableRealTimeUpdates]);\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      // Cleanup on unmount\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n      \n      if (loadingTimeoutRef.current) {\n        clearTimeout(loadingTimeoutRef.current);\n      }\n\n      if (unsubscribeFromUpdatesRef.current) {\n        unsubscribeFromUpdatesRef.current();\n      }\n    };\n  }, []);\n\n  // Performance monitoring effect\n  useEffect(() => {\n    if (responseTime !== null) {\n  enhancedLogger.debug('useOptimizedPlayerData', 'Performance', `Response time for ${playerId}: ${responseTime}ms (cache hit: ${cacheHit})`);\n      \n      // Log slow responses\n      if (responseTime > 3000) {\n  enhancedLogger.warn('useOptimizedPlayerData', 'Performance', `Slow response detected: ${responseTime}ms for ${playerId}`);\n      }\n    }\n  }, [responseTime, cacheHit, playerId]);\n\n  return {\n    player,\n    loading,\n    error,\n    isStale,\n    isRealTime,\n    lastUpdated,\n    dataQuality,\n    dataSources,\n    refresh,\n    clearError,\n    subscribeToUpdates,\n    unsubscribeFromUpdates,\n    responseTime,\n    cacheHit\n  };\n};\n\n/**\n * Hook for optimized player search with real-time capabilities\n */\nexport const useOptimizedPlayerSearch = () => {\n  const [searchResults, setSearchResults] = useState<Player[]>([]);\n  const [searchLoading, setSearchLoading] = useState(false);\n  const [searchError, setSearchError] = useState<string | null>(null);\n  const abortControllerRef = useRef<AbortController | null>(null);\n\n  const searchPlayers = useCallback(async (query: string, sport: string = 'MLB', limit: number = 10) => {\n    if (query.length < 2) {\n      setSearchResults([]);\n      setSearchError(null);\n      return;\n    }\n\n    // Cancel previous search\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n\n    abortControllerRef.current = new AbortController();\n    setSearchLoading(true);\n    setSearchError(null);\n\n    try {\n      enhancedLogger.debug('useOptimizedPlayerSearch', 'search', `Searching for: ${query}`);\n      const results = await realTimePlayerDataService.searchPlayers(query, sport, limit);\n\n      if (!abortControllerRef.current?.signal.aborted) {\n        setSearchResults(results);\n        enhancedLogger.debug('useOptimizedPlayerSearch', 'search', `Found ${results.length} results for: ${query}`);\n      }\n    } catch (err) {\n      if (!abortControllerRef.current?.signal.aborted) {\n        enhancedLogger.error('useOptimizedPlayerSearch', 'search', 'Search failed', undefined, err as unknown as Error);\n        setSearchError(err instanceof Error ? err.message : 'Search failed');\n        setSearchResults([]);\n      }\n    } finally {\n      if (!abortControllerRef.current?.signal.aborted) {\n        setSearchLoading(false);\n      }\n    }\n  }, []);\n\n  const clearSearch = useCallback(() => {\n    setSearchResults([]);\n    setSearchError(null);\n    setSearchLoading(false);\n    \n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n  }, []);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, []);\n\n  return {\n    searchResults,\n    searchLoading,\n    searchError,\n    searchPlayers,\n    clearSearch\n  };\n};\n\n/**\n * Hook for monitoring service health and performance\n */\nexport const useOptimizedServiceHealth = () => {\n  const [healthMetrics, setHealthMetrics] = useState<Map<string, unknown>>(new Map());\n  const [overallHealth, setOverallHealth] = useState<'healthy' | 'degraded' | 'offline'>('healthy');\n\n  useEffect(() => {\n    const updateHealth = () => {\n      const metrics = realTimePlayerDataService.getHealthMetrics();\n      setHealthMetrics(metrics);\n\n      // Determine overall health\n      const healthValues = Array.from(metrics.values());\n      const unhealthyServices = healthValues.filter(m => m.consecutiveFailures > 3).length;\n      \n      if (healthValues.length === 0) {\n        setOverallHealth('offline');\n      } else if (unhealthyServices > healthValues.length * 0.5) {\n        setOverallHealth('degraded');\n      } else {\n        setOverallHealth('healthy');\n      }\n    };\n\n    // Update immediately\n    updateHealth();\n\n    // Update every 30 seconds\n    const interval = setInterval(updateHealth, 30000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return {\n    healthMetrics,\n    overallHealth\n  };\n};\n"],"mappings":"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","ignoreList":[]}