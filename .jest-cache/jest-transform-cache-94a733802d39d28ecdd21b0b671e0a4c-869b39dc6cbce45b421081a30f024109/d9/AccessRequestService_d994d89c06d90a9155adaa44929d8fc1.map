{"version":3,"names":["_constants","require","AccessRequestService","constructor","baseUrl","VITE_API_URL","submitAccessRequest","data","_response","fetch","method","headers","body","JSON","stringify","email","toLowerCase","trim","message","requestedAt","Date","toISOString","userAgent","navigator","timestamp","now","ok","_errorData","json","catch","Error","status","error","console","process","env","NODE_ENV","simulateAccessRequest","checkExistingRequest","encodeURIComponent","getAllAccessRequests","authToken","Authorization","getMockAccessRequests","approveAccessRequest","requestId","adminEmail","approvedBy","approvedAt","success","denyAccessRequest","reason","deniedBy","deniedAt","deniedReason","isValidEmail","_emailRegex","test","generateTempPassword","_chars","_password","_i","charAt","Math","floor","random","length","Promise","resolve","setTimeout","log","notifyAdmin","toString","substr","id","tempPassword","isFirstLogin","_accessRequestService","exports","_default","default"],"sources":["AccessRequestService.ts"],"sourcesContent":["import { VITE_API_URL } from '../constants';\r\n/**\r\n * AccessRequestService - Handles user access requests and approval workflow\r\n */\r\n\r\nexport interface AccessRequest {\r\n  id: string;\r\n  email: string;\r\n  requestedAt: Date;\r\n  status: 'pending' | 'approved' | 'denied';\r\n  approvedBy?: string;\r\n  approvedAt?: Date;\r\n  deniedReason?: string;\r\n  tempPassword?: string;\r\n  isFirstLogin?: boolean;\r\n}\r\n\r\nexport interface AccessRequestSubmission {\r\n  email: string;\r\n  message?: string;\r\n}\r\n\r\nexport interface AccessRequestResponse {\r\n  success: boolean;\r\n  message: string;\r\n  requestId?: string;\r\n}\r\n\r\nclass AccessRequestService {\r\n  private baseUrl: string;\r\n\r\n  constructor() {\r\n    // Use centralized VITE_API_URL for browser-safe environment variables\r\n    this.baseUrl = VITE_API_URL || '/api';\r\n  }\r\n\r\n  /**\r\n   * Submit an access request\r\n   */\r\n  async submitAccessRequest(data: AccessRequestSubmission): Promise<AccessRequestResponse> {\r\n    try {\r\n      const _response = await fetch(`${this.baseUrl}/access-requests`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          email: data.email.toLowerCase().trim(),\r\n          message: data.message?.trim(),\r\n          requestedAt: new Date().toISOString(),\r\n          userAgent: navigator.userAgent,\r\n          timestamp: Date.now(),\r\n        }),\r\n      });\r\n\r\n      if (!_response.ok) {\r\n        const _errorData = await _response.json().catch(() => ({ message: 'Network error' }));\r\n        throw new Error(_errorData.message || `HTTP error! status: ${_response.status}`);\r\n      }\r\n\r\n      return await _response.json();\r\n    } catch (error) {\r\n      console.error('Failed to submit access request:', error);\r\n      // For demo purposes, simulate success\r\n      if (process.env.NODE_ENV === 'development') {\r\n        return this.simulateAccessRequest(data);\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if email already has a pending request\r\n   */\r\n  async checkExistingRequest(email: string): Promise<AccessRequest | null> {\r\n    try {\r\n      const _response = await fetch(\r\n        `${this.baseUrl}/access-requests/check/${encodeURIComponent(email)}`,\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (_response.status === 404) {\r\n        return null; // No existing request\r\n      }\r\n\r\n      if (!_response.ok) {\r\n        throw new Error(`HTTP error! status: ${_response.status}`);\r\n      }\r\n\r\n      return await _response.json();\r\n    } catch (error) {\r\n      console.error('Failed to check existing request:', error);\r\n      // For demo purposes, return null (no existing request)\r\n      if (process.env.NODE_ENV === 'development') {\r\n        return null;\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all access requests (admin only)\r\n   */\r\n  async getAllAccessRequests(authToken: string): Promise<AccessRequest[]> {\r\n    try {\r\n      const _response = await fetch(`${this.baseUrl}/admin/access-requests`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${authToken}`,\r\n        },\r\n      });\r\n\r\n      if (!_response.ok) {\r\n        throw new Error(`HTTP error! status: ${_response.status}`);\r\n      }\r\n\r\n      return await _response.json();\r\n    } catch (error) {\r\n      console.error('Failed to fetch access requests:', error);\r\n      // For demo purposes, return mock data\r\n      if (process.env.NODE_ENV === 'development') {\r\n        return this.getMockAccessRequests();\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Approve an access request (admin only)\r\n   */\r\n  async approveAccessRequest(\r\n    requestId: string,\r\n    authToken: string,\r\n    adminEmail: string\r\n  ): Promise<AccessRequestResponse> {\r\n    try {\r\n      const _response = await fetch(`${this.baseUrl}/admin/access-requests/${requestId}/approve`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${authToken}`,\r\n        },\r\n        body: JSON.stringify({\r\n          approvedBy: adminEmail,\r\n          approvedAt: new Date().toISOString(),\r\n        }),\r\n      });\r\n\r\n      if (!_response.ok) {\r\n        throw new Error(`HTTP error! status: ${_response.status}`);\r\n      }\r\n\r\n      return await _response.json();\r\n    } catch (error) {\r\n      console.error('Failed to approve access request:', error);\r\n      // For demo purposes, simulate success\r\n      if (process.env.NODE_ENV === 'development') {\r\n        return {\r\n          success: true,\r\n          message:\r\n            'Access request approved successfully. User will receive email with login credentials.',\r\n        };\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deny an access request (admin only)\r\n   */\r\n  async denyAccessRequest(\r\n    requestId: string,\r\n    authToken: string,\r\n    adminEmail: string,\r\n    reason?: string\r\n  ): Promise<AccessRequestResponse> {\r\n    try {\r\n      const _response = await fetch(`${this.baseUrl}/admin/access-requests/${requestId}/deny`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${authToken}`,\r\n        },\r\n        body: JSON.stringify({\r\n          deniedBy: adminEmail,\r\n          deniedAt: new Date().toISOString(),\r\n          deniedReason: reason,\r\n        }),\r\n      });\r\n\r\n      if (!_response.ok) {\r\n        throw new Error(`HTTP error! status: ${_response.status}`);\r\n      }\r\n\r\n      return await _response.json();\r\n    } catch (error) {\r\n      console.error('Failed to deny access request:', error);\r\n      // For demo purposes, simulate success\r\n      if (process.env.NODE_ENV === 'development') {\r\n        return {\r\n          success: true,\r\n          message: 'Access request denied. User will be notified via email.',\r\n        };\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate email format\r\n   */\r\n  isValidEmail(email: string): boolean {\r\n    const _emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return _emailRegex.test(email);\r\n  }\r\n\r\n  /**\r\n   * Generate temporary password\r\n   */\r\n  generateTempPassword(): string {\r\n    const _chars = 'ABCDEFGHJKMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789';\r\n    let _password = '';\r\n    for (let _i = 0; _i < 12; _i++) {\r\n      _password += _chars.charAt(Math.floor(Math.random() * _chars.length));\r\n    }\r\n    return _password;\r\n  }\r\n\r\n  /**\r\n   * Demo simulation methods for development\r\n   */\r\n  private async simulateAccessRequest(\r\n    data: AccessRequestSubmission\r\n  ): Promise<AccessRequestResponse> {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    // Simulate sending email notification to admin\r\n    console.log('ðŸ”” [DEMO] Access Request Notification:', {\r\n      email: data.email,\r\n      message: data.message,\r\n      timestamp: new Date().toISOString(),\r\n      notifyAdmin: 'cole@example.com',\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      message:\r\n        'Access request submitted successfully! You will receive an email once your request is reviewed.',\r\n      requestId: `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n    };\r\n  }\r\n\r\n  private getMockAccessRequests(): AccessRequest[] {\r\n    return [\r\n      {\r\n        id: 'req_001',\r\n        email: 'user1@example.com',\r\n        requestedAt: new Date(Date.now() - 86400000), // 1 day ago\r\n        status: 'pending',\r\n      },\r\n      {\r\n        id: 'req_002',\r\n        email: 'user2@example.com',\r\n        requestedAt: new Date(Date.now() - 172800000), // 2 days ago\r\n        status: 'approved',\r\n        approvedBy: 'cole@example.com',\r\n        approvedAt: new Date(Date.now() - 86400000),\r\n        tempPassword: 'TempPass123',\r\n        isFirstLogin: true,\r\n      },\r\n      {\r\n        id: 'req_003',\r\n        email: 'spam@example.com',\r\n        requestedAt: new Date(Date.now() - 259200000), // 3 days ago\r\n        status: 'denied',\r\n        approvedBy: 'cole@example.com',\r\n        approvedAt: new Date(Date.now() - 172800000),\r\n        deniedReason: 'Invalid business email domain',\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const _accessRequestService = new AccessRequestService();\r\n\r\n// Export class for testing\r\nexport default AccessRequestService;\r\n"],"mappings":"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","ignoreList":[]}