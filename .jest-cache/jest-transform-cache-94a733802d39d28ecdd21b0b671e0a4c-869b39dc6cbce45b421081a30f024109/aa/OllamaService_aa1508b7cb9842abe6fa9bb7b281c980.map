{"version":3,"names":["_getEnvVar","require","_OllamaService","OllamaService","constructor","baseUrl","getEnvVar","getInstance","instance","checkHealth","response","fetch","ok","Error","status","json","error","console","warn","ollamaAvailable","availableModels","timestamp","Date","toISOString","streamExplanation","request","method","headers","body","JSON","stringify","context","question","player_ids","playerIds","sport","include_trends","includeTrends","include_matchups","includeMatchups","reader","getReader","decoder","TextDecoder","allowedTypes","isAIResponse","data","obj","type","includes","content","fullContent","undefined","fallback","value","done","read","chunk","decode","lines","split","line","startsWith","parse","slice","parseError","releaseLock","errResp","message","streamPropAnalysis","player_name","playerName","stat_type","statType","odds","recent_performance","recentPerformance","market_context","marketContext","streamPlayerSummary","name","position","team","season_stats","seasonStats","recent_trends","recentTrends","matchup_data","matchupData","getSimpleExplanation","_default","exports","default"],"sources":["OllamaService.ts"],"sourcesContent":["import { getEnvVar } from '../../utils/getEnvVar';\n/**\n * Ollama Service - Frontend service for AI-powered sports analytics\n * Provides streaming AI explanations and analysis via Ollama LLM\n */\n\n// Branded types for player IDs and stat types\nexport type PlayerId = string & { readonly brand: unique symbol };\nexport type StatType = string & { readonly brand: unique symbol };\nexport type SportType = 'MLB' | 'NBA' | 'NFL' | 'NHL';\nexport interface ExplainRequest {\n  context: string;\n  question: string;\n  playerIds?: PlayerId[];\n  sport?: SportType;\n  includeTrends?: boolean;\n  includeMatchups?: boolean;\n}\n\nexport type MarketContext = Record<string, string | number | boolean>;\nexport interface PropAnalysisRequest {\n  playerName: string;\n  statType: StatType;\n  line: number;\n  odds: string;\n  recentPerformance?: string;\n  marketContext?: MarketContext;\n}\n\nexport type SeasonStats = Record<string, number>;\nexport type MatchupData = Record<string, string | number | boolean>;\nexport interface PlayerSummaryRequest {\n  name: string;\n  position: string;\n  team: string;\n  seasonStats: SeasonStats;\n  recentTrends?: string;\n  matchupData?: MatchupData;\n}\n\nexport type AIResponseType = 'start' | 'chunk' | 'complete' | 'error';\nexport interface AIResponse {\n  type: AIResponseType;\n  content: string;\n  fullContent?: string;\n  error?: boolean;\n  fallback?: boolean;\n}\nexport interface AIErrorResponse extends AIResponse {\n  type: 'error';\n  error: true;\n}\n\nexport interface AIHealthStatus {\n  status: string;\n  ollamaAvailable: boolean;\n  availableModels: string[];\n  timestamp: string;\n}\n\nclass OllamaService {\n  private static instance: OllamaService;\n  private baseUrl: string;\n\n  private constructor() {\n    this.baseUrl =\n      getEnvVar('VITE_API_BASE_URL', 'http://localhost:8000') ?? 'http://localhost:8000';\n  }\n\n  static getInstance(): OllamaService {\n    if (!OllamaService.instance) {\n      OllamaService.instance = new OllamaService();\n    }\n    return OllamaService.instance;\n  }\n\n  /**\n   * Check AI service health and availability\n   */\n  async checkHealth(): Promise<AIHealthStatus> {\n    try {\n      const response = await fetch(`${this.baseUrl}/v1/ai/health`);\n      if (!response.ok) {\n        throw new Error(`Health check failed: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.warn('AI health check failed:', error);\n      return {\n        status: 'unavailable',\n        ollamaAvailable: false,\n        availableModels: [],\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Stream AI explanation for player analysis\n   */\n  /**\n   * Stream AI explanation for player analysis with runtime type guard\n   */\n  async *streamExplanation(request: ExplainRequest): AsyncGenerator<AIResponse, void, undefined> {\n    try {\n      const response = await fetch(`${this.baseUrl}/v1/ai/explain`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          context: request.context,\n          question: request.question,\n          player_ids: request.playerIds,\n          sport: request.sport || 'MLB',\n          include_trends: request.includeTrends ?? true,\n          include_matchups: request.includeMatchups ?? true,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Explanation request failed: ${response.status}`);\n      }\n\n      if (!response.body) {\n        throw new Error('No response body received');\n      }\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n\n      // Enhanced runtime type guard for AIResponse\n      const allowedTypes: AIResponseType[] = ['start', 'chunk', 'complete', 'error'];\n      const isAIResponse = (data: unknown): data is AIResponse => {\n        if (typeof data !== 'object' || data === null) return false;\n        const obj = data as Partial<AIResponse>;\n        return (\n          typeof obj.type === 'string' &&\n          allowedTypes.includes(obj.type as AIResponseType) &&\n          typeof obj.content === 'string' &&\n          (obj.fullContent === undefined || typeof obj.fullContent === 'string') &&\n          (obj.error === undefined || typeof obj.error === 'boolean') &&\n          (obj.fallback === undefined || typeof obj.fallback === 'boolean')\n        );\n      };\n\n      try {\n        while (true) {\n          const { value, done } = await reader.read();\n          if (done) break;\n\n          const chunk = decoder.decode(value);\n          const lines = chunk.split('\\n');\n\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              try {\n                const data: unknown = JSON.parse(line.slice(6));\n                if (isAIResponse(data)) {\n                  yield data;\n                } else {\n                  console.warn('Received invalid AIResponse:', data);\n                }\n              } catch (parseError) {\n                console.warn('Failed to parse SSE data:', parseError);\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n    } catch (error) {\n      console.error('Stream explanation error:', error);\n      const errResp: AIErrorResponse = {\n        type: 'error',\n        content: `⚠️ Explanation failed: ${\n          error instanceof Error ? error.message : 'Unknown error'\n        }`,\n        error: true,\n      };\n      yield errResp;\n    }\n  }\n\n  /**\n   * Stream AI analysis for prop betting opportunity\n   */\n  /**\n   * Stream AI analysis for prop betting opportunity with runtime type guard\n   */\n  async *streamPropAnalysis(\n    request: PropAnalysisRequest\n  ): AsyncGenerator<AIResponse, void, undefined> {\n    try {\n      const response = await fetch(`${this.baseUrl}/v1/ai/analyze-prop`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          player_name: request.playerName,\n          stat_type: request.statType,\n          line: request.line,\n          odds: request.odds,\n          recent_performance: request.recentPerformance,\n          market_context: request.marketContext,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Prop analysis request failed: ${response.status}`);\n      }\n\n      if (!response.body) {\n        throw new Error('No response body received');\n      }\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n\n      // Enhanced runtime type guard for AIResponse\n      const allowedTypes: AIResponseType[] = ['start', 'chunk', 'complete', 'error'];\n      const isAIResponse = (data: unknown): data is AIResponse => {\n        if (typeof data !== 'object' || data === null) return false;\n        const obj = data as Partial<AIResponse>;\n        return (\n          typeof obj.type === 'string' &&\n          allowedTypes.includes(obj.type as AIResponseType) &&\n          typeof obj.content === 'string' &&\n          (obj.fullContent === undefined || typeof obj.fullContent === 'string') &&\n          (obj.error === undefined || typeof obj.error === 'boolean') &&\n          (obj.fallback === undefined || typeof obj.fallback === 'boolean')\n        );\n      };\n\n      try {\n        while (true) {\n          const { value, done } = await reader.read();\n          if (done) break;\n\n          const chunk = decoder.decode(value);\n          const lines = chunk.split('\\n');\n\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              try {\n                const data: unknown = JSON.parse(line.slice(6));\n                if (isAIResponse(data)) {\n                  yield data;\n                } else {\n                  console.warn('Received invalid AIResponse:', data);\n                }\n              } catch (parseError) {\n                console.warn('Failed to parse SSE data:', parseError);\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n    } catch (error) {\n      console.error('Stream prop analysis error:', error);\n      const errResp: AIErrorResponse = {\n        type: 'error',\n        content: `⚠️ Prop analysis failed: ${\n          error instanceof Error ? error.message : 'Unknown error'\n        }`,\n        error: true,\n      };\n      yield errResp;\n    }\n  }\n\n  /**\n   * Stream comprehensive player research summary\n   */\n  /**\n   * Stream comprehensive player research summary with runtime type guard\n   */\n  async *streamPlayerSummary(\n    request: PlayerSummaryRequest\n  ): AsyncGenerator<AIResponse, void, undefined> {\n    try {\n      const response = await fetch(`${this.baseUrl}/v1/ai/player-summary`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: request.name,\n          position: request.position,\n          team: request.team,\n          season_stats: request.seasonStats,\n          recent_trends: request.recentTrends,\n          matchup_data: request.matchupData,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Player summary request failed: ${response.status}`);\n      }\n\n      if (!response.body) {\n        throw new Error('No response body received');\n      }\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n\n      // Enhanced runtime type guard for AIResponse\n      const allowedTypes: AIResponseType[] = ['start', 'chunk', 'complete', 'error'];\n      const isAIResponse = (data: unknown): data is AIResponse => {\n        if (typeof data !== 'object' || data === null) return false;\n        const obj = data as Partial<AIResponse>;\n        return (\n          typeof obj.type === 'string' &&\n          allowedTypes.includes(obj.type as AIResponseType) &&\n          typeof obj.content === 'string' &&\n          (obj.fullContent === undefined || typeof obj.fullContent === 'string') &&\n          (obj.error === undefined || typeof obj.error === 'boolean') &&\n          (obj.fallback === undefined || typeof obj.fallback === 'boolean')\n        );\n      };\n\n      try {\n        while (true) {\n          const { value, done } = await reader.read();\n          if (done) break;\n\n          const chunk = decoder.decode(value);\n          const lines = chunk.split('\\n');\n\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              try {\n                const data: unknown = JSON.parse(line.slice(6));\n                if (isAIResponse(data)) {\n                  yield data;\n                } else {\n                  console.warn('Received invalid AIResponse:', data);\n                }\n              } catch (parseError) {\n                console.warn('Failed to parse SSE data:', parseError);\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n    } catch (error) {\n      console.error('Stream player summary error:', error);\n      const errResp: AIErrorResponse = {\n        type: 'error',\n        content: `⚠️ Player summary failed: ${\n          error instanceof Error ? error.message : 'Unknown error'\n        }`,\n        error: true,\n      };\n      yield errResp;\n    }\n  }\n\n  /**\n   * Get simple non-streaming explanation (fallback)\n   */\n  async getSimpleExplanation(request: ExplainRequest): Promise<string> {\n    try {\n      let fullContent = '';\n      for await (const response of this.streamExplanation(request)) {\n        if (response.type === 'complete') {\n          fullContent =\n            typeof response.fullContent === 'string' ? response.fullContent : response.content;\n          break;\n        } else if (response.type === 'error') {\n          throw new Error(\n            typeof response.content === 'string' ? response.content : 'Unknown error'\n          );\n        }\n      }\n      return fullContent || 'No explanation generated';\n    } catch (error) {\n      console.error('Simple explanation error:', error);\n      return `⚠️ Explanation unavailable: ${\n        error instanceof Error ? error.message : 'Unknown error'\n      }`;\n    }\n  }\n}\n\nexport default OllamaService.getInstance();\n"],"mappings":"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","ignoreList":[]}