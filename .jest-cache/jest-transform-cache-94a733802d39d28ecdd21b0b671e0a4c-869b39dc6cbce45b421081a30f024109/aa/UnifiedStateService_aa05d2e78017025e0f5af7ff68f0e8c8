44bf6c211e1a9e7de9719b32a183fda6
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.UnifiedStateService = void 0;
var _BaseService = require("./BaseService");
var _UnifiedStateService;
class UnifiedStateService extends _BaseService.BaseService {
  constructor() {
    // @ts-expect-error TS(2554): Expected 2 arguments, but got 1. BaseService expects two arguments, but only one is provided here for singleton pattern compatibility.
    super('UnifiedStateService');
    this.state = {};
    this.listeners = [];
    this.listenerIdCounter = 0;
    this.initializeDefaultState();
  }
  static getInstance() {
    if (!UnifiedStateService.instance) {
      UnifiedStateService.instance = new UnifiedStateService();
    }
    return UnifiedStateService.instance;
  }
  initializeDefaultState() {
    this.state = {
      user: {
        isAuthenticated: false,
        profile: null,
        preferences: {}
      },
      sports: {
        selectedSport: 'nfl',
        activeFilters: {},
        data: {}
      },
      betting: {
        opportunities: [],
        history: [],
        metrics: {}
      },
      ui: {
        theme: 'cyber-dark',
        sidebarOpen: true,
        notifications: []
      },
      system: {
        isOnline: true,
        lastSync: null,
        errors: []
      }
    };
  }
  get(path, defaultValue) {
    const _keys = path.split('.');
    let _current = this.state;
    for (const _key of _keys) {
      if (_current && typeof _current === 'object' && _key in _current) {
        _current = _current[_key];
      } else {
        return defaultValue;
      }
    }
    return _current;
  }
  set(path, value) {
    const _keys = path.split('.');
    const _lastKey = _keys.pop();
    let _current = this.state;

    // Navigate to the parent object
    for (const _key of _keys) {
      if (!(_key in _current) || typeof _current[_key] !== 'object') {
        _current[_key] = {};
      }
      _current = _current[_key];
    }
    const _oldValue = _current[_lastKey];
    _current[_lastKey] = value;
    this.notifyListeners(path, value, _oldValue);
    this.logger.debug('State updated', {
      path,
      value
    });
  }
  update(path, updater) {
    const _currentValue = this.get(path);
    const _newValue = updater(_currentValue);
    this.set(path, _newValue);
  }
  merge(path, partial) {
    const _currentValue = this.get(path, {});
    const _newValue = {
      ..._currentValue,
      ...partial
    };
    this.set(path, _newValue);
  }
  delete(path) {
    const _keys = path.split('.');
    const _lastKey = _keys.pop();
    let _current = this.state;
    for (const _key of _keys) {
      if (!(_key in _current) || typeof _current[_key] !== 'object') {
        return; // Path doesn't exist
      }
      _current = _current[_key];
    }
    const _oldValue = _current[_lastKey];
    delete _current[_lastKey];
    this.notifyListeners(path, undefined, _oldValue);
    this.logger.debug('State deleted', {
      path
    });
  }
  subscribe(path, callback) {
    const _id = `listener_${++this.listenerIdCounter}`;
    this.listeners.push({
      id: _id,
      path,
      callback
    });
    this.logger.debug('State listener added', {
      id: _id,
      path
    });
    return _id;
  }
  unsubscribe(listenerId) {
    const _index = this.listeners.findIndex(l => l.id === listenerId);
    if (_index >= 0) {
      this.listeners.splice(_index, 1);
      this.logger.debug('State listener removed', {
        listenerId
      });
    }
  }
  notifyListeners(changedPath, newValue, oldValue) {
    for (const _listener of this.listeners) {
      if (this.pathMatches(changedPath, _listener.path)) {
        try {
          _listener.callback(newValue, oldValue);
        } catch (error) {
          this.logger.error('State listener error', {
            listenerId: _listener.id,
            path: _listener.path,
            error
          });
        }
      }
    }
  }
  pathMatches(changedPath, listenerPath) {
    // Exact match
    if (changedPath === listenerPath) return true;

    // Parent path change affects child listeners
    if (changedPath.length < listenerPath.length) {
      return listenerPath.startsWith(changedPath + '.');
    }

    // Child path change affects parent listeners
    if (changedPath.length > listenerPath.length) {
      return changedPath.startsWith(listenerPath + '.');
    }
    return false;
  }
  getState() {
    return JSON.parse(JSON.stringify(this.state));
  }
  setState(newState) {
    const _oldState = this.state;
    this.state = newState;

    // Notify all listeners that root state changed
    this.notifyListeners('', newState, _oldState);
    this.logger.info('Full state replaced');
  }
  reset() {
    this.initializeDefaultState();
    this.listeners = [];
    this.logger.info('State reset to defaults');
  }
  persist() {
    try {
      const _serializedState = JSON.stringify(this.state);
      localStorage.setItem('app_state', _serializedState);
      this.logger.debug('State persisted to localStorage');
    } catch (error) {
      this.logger.error('Failed to persist state', error);
    }
  }
  restore() {
    try {
      const _serializedState = localStorage.getItem('app_state');
      if (_serializedState) {
        const _restoredState = JSON.parse(_serializedState);
        this.setState(_restoredState);
        this.logger.info('State restored from localStorage');
      }
    } catch (error) {
      this.logger.error('Failed to restore state', error);
      this.initializeDefaultState();
    }
  }
}
exports.UnifiedStateService = UnifiedStateService;
_UnifiedStateService = UnifiedStateService;
UnifiedStateService.instance = void 0;
var _default = exports.default = UnifiedStateService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,