2d20918b64a50c2543b584ebbcb7b48f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _recharts = require("recharts");
var _jsxRuntime = require("react/jsx-runtime");
const StatcastMetrics = ({
  prop,
  isVisible
}) => {
  // Extract Statcast data from the prop
  const statcastData = _react.default.useMemo(() => {
    // Try to extract from enhanced data or raw prop data
    const data = prop.enhancedData || prop;
    return {
      exit_velocity: data.exit_velocity || data.exitVelocity || Math.random() * 30 + 85,
      // Mock for demo
      launch_angle: data.launch_angle || data.launchAngle || Math.random() * 50 - 10,
      hard_hit_rate: data.hard_hit_rate || data.hardHitRate || Math.random() * 50 + 25,
      barrel_rate: data.barrel_rate || data.barrelRate || Math.random() * 20 + 5,
      expected_batting_avg: data.expected_batting_avg || data.expectedBattingAvg || Math.random() * 0.2 + 0.2,
      expected_slugging: data.expected_slugging || data.expectedSlugging || Math.random() * 0.4 + 0.3,
      sweet_spot_percentage: data.sweet_spot_percentage || data.sweetSpotPercentage || Math.random() * 30 + 10
    };
  }, [prop]);

  // League averages for comparison
  const leagueAverages = {
    exit_velocity: 88.5,
    launch_angle: 12.8,
    hard_hit_rate: 37.2,
    barrel_rate: 8.1,
    expected_batting_avg: 0.248,
    expected_slugging: 0.415,
    sweet_spot_percentage: 33.5
  };

  // Color scheme for charts
  const colors = {
    primary: '#3b82f6',
    secondary: '#8b5cf6',
    success: '#10b981',
    warning: '#f59e0b',
    danger: '#ef4444',
    neutral: '#6b7280'
  };

  // Data for comparison charts
  const comparisonData = [{
    metric: 'Exit Velocity',
    player: statcastData.exit_velocity,
    league: leagueAverages.exit_velocity,
    unit: 'mph'
  }, {
    metric: 'Launch Angle',
    player: statcastData.launch_angle,
    league: leagueAverages.launch_angle,
    unit: 'Â°'
  }, {
    metric: 'Hard Hit%',
    player: statcastData.hard_hit_rate,
    league: leagueAverages.hard_hit_rate,
    unit: '%'
  }, {
    metric: 'Barrel%',
    player: statcastData.barrel_rate,
    league: leagueAverages.barrel_rate,
    unit: '%'
  }];

  // Data for launch angle vs exit velocity scatter plot
  const scatterData = _react.default.useMemo(() => {
    // Generate sample data points around the player's metrics
    const points = [];
    for (let i = 0; i < 20; i++) {
      points.push({
        x: (statcastData.launch_angle || 0) + (Math.random() - 0.5) * 20,
        y: (statcastData.exit_velocity || 0) + (Math.random() - 0.5) * 10,
        isPlayer: i === 0 // First point is the player
      });
    }
    return points;
  }, [statcastData]);

  // Custom tooltip for scatter plot
  const CustomScatterTooltip = ({
    active,
    payload
  }) => {
    if (active && payload && payload.length) {
      const data = payload[0].payload;
      return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "bg-slate-800 border border-slate-600 rounded p-2 text-white text-sm",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          children: data.isPlayer ? `${prop.player}` : 'League Avg'
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
          children: ["Launch Angle: ", data.x?.toFixed(1), "\xB0"]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
          children: ["Exit Velocity: ", data.y?.toFixed(1), " mph"]
        })]
      });
    }
    return null;
  };

  // Custom tooltip for bar chart
  const CustomBarTooltip = ({
    active,
    payload,
    label
  }) => {
    if (active && payload && payload.length) {
      const playerValue = payload.find(p => p.dataKey === 'player')?.value;
      const leagueValue = payload.find(p => p.dataKey === 'league')?.value;
      const unit = payload[0].payload.unit;
      return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "bg-slate-800 border border-slate-600 rounded p-2 text-white text-sm",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          className: "font-semibold",
          children: label
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
          style: {
            color: colors.primary
          },
          children: [prop.player, ": ", playerValue?.toFixed(1), unit]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
          style: {
            color: colors.secondary
          },
          children: ["League Avg: ", leagueValue?.toFixed(1), unit]
        })]
      });
    }
    return null;
  };
  if (!isVisible) return null;
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "bg-slate-900 rounded-lg p-4 mt-4 border border-slate-700",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("h3", {
      className: "text-lg font-bold text-white mb-4 flex items-center",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
        className: "mr-2",
        children: "\u26BE"
      }), "Statcast Analytics for ", prop.player]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "grid grid-cols-2 md:grid-cols-4 gap-4 mb-6",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "bg-slate-800 rounded p-3 border border-slate-600",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "text-sm text-gray-400",
          children: "Exit Velocity"
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-xl font-bold text-white",
          children: [statcastData.exit_velocity?.toFixed(1), " mph"]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: `text-xs ${(statcastData.exit_velocity || 0) > leagueAverages.exit_velocity ? 'text-green-400' : 'text-red-400'}`,
          children: [((statcastData.exit_velocity || 0) - leagueAverages.exit_velocity).toFixed(1), " vs league"]
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "bg-slate-800 rounded p-3 border border-slate-600",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "text-sm text-gray-400",
          children: "Launch Angle"
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-xl font-bold text-white",
          children: [statcastData.launch_angle?.toFixed(1), "\xB0"]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: `text-xs ${Math.abs((statcastData.launch_angle || 0) - leagueAverages.launch_angle) < 5 ? 'text-green-400' : 'text-yellow-400'}`,
          children: [((statcastData.launch_angle || 0) - leagueAverages.launch_angle).toFixed(1), " vs league"]
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "bg-slate-800 rounded p-3 border border-slate-600",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "text-sm text-gray-400",
          children: "Hard Hit%"
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-xl font-bold text-white",
          children: [statcastData.hard_hit_rate?.toFixed(1), "%"]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: `text-xs ${(statcastData.hard_hit_rate || 0) > leagueAverages.hard_hit_rate ? 'text-green-400' : 'text-red-400'}`,
          children: [((statcastData.hard_hit_rate || 0) - leagueAverages.hard_hit_rate).toFixed(1), " vs league"]
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "bg-slate-800 rounded p-3 border border-slate-600",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "text-sm text-gray-400",
          children: "Barrel%"
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-xl font-bold text-white",
          children: [statcastData.barrel_rate?.toFixed(1), "%"]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: `text-xs ${(statcastData.barrel_rate || 0) > leagueAverages.barrel_rate ? 'text-green-400' : 'text-red-400'}`,
          children: [((statcastData.barrel_rate || 0) - leagueAverages.barrel_rate).toFixed(1), " vs league"]
        })]
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "grid grid-cols-1 lg:grid-cols-2 gap-6",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "bg-slate-800 rounded-lg p-4 border border-slate-600",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h4", {
          className: "text-white font-semibold mb-4",
          children: "Player vs League Average"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_recharts.ResponsiveContainer, {
          width: "100%",
          height: 250,
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_recharts.BarChart, {
            data: comparisonData,
            margin: {
              top: 20,
              right: 30,
              left: 20,
              bottom: 5
            },
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_recharts.CartesianGrid, {
              strokeDasharray: "3 3",
              stroke: "#374151"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_recharts.XAxis, {
              dataKey: "metric",
              tick: {
                fill: '#9ca3af',
                fontSize: 12
              },
              axisLine: {
                stroke: '#6b7280'
              }
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_recharts.YAxis, {
              tick: {
                fill: '#9ca3af',
                fontSize: 12
              },
              axisLine: {
                stroke: '#6b7280'
              }
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_recharts.Tooltip, {
              content: /*#__PURE__*/(0, _jsxRuntime.jsx)(CustomBarTooltip, {})
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_recharts.Bar, {
              dataKey: "player",
              fill: colors.primary,
              name: prop.player
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_recharts.Bar, {
              dataKey: "league",
              fill: colors.secondary,
              name: "League Avg"
            })]
          })
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "bg-slate-800 rounded-lg p-4 border border-slate-600",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h4", {
          className: "text-white font-semibold mb-4",
          children: "Launch Angle vs Exit Velocity"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_recharts.ResponsiveContainer, {
          width: "100%",
          height: 250,
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_recharts.ScatterChart, {
            margin: {
              top: 20,
              right: 30,
              left: 20,
              bottom: 5
            },
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_recharts.CartesianGrid, {
              strokeDasharray: "3 3",
              stroke: "#374151"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_recharts.XAxis, {
              type: "number",
              dataKey: "x",
              name: "Launch Angle",
              unit: "\xB0",
              tick: {
                fill: '#9ca3af',
                fontSize: 12
              },
              axisLine: {
                stroke: '#6b7280'
              }
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_recharts.YAxis, {
              type: "number",
              dataKey: "y",
              name: "Exit Velocity",
              unit: " mph",
              tick: {
                fill: '#9ca3af',
                fontSize: 12
              },
              axisLine: {
                stroke: '#6b7280'
              }
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_recharts.Tooltip, {
              content: /*#__PURE__*/(0, _jsxRuntime.jsx)(CustomScatterTooltip, {})
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_recharts.Scatter, {
              data: scatterData.filter(d => !d.isPlayer),
              fill: colors.neutral,
              fillOpacity: 0.6
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_recharts.Scatter, {
              data: scatterData.filter(d => d.isPlayer),
              fill: colors.warning,
              r: 8
            })]
          })
        })]
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "mt-6 grid grid-cols-1 md:grid-cols-3 gap-4",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "bg-slate-800 rounded p-3 border border-slate-600 text-center",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "text-sm text-gray-400",
          children: "Expected BA"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "text-2xl font-bold text-white",
          children: statcastData.expected_batting_avg?.toFixed(3)
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "bg-slate-800 rounded p-3 border border-slate-600 text-center",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "text-sm text-gray-400",
          children: "Expected SLG"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "text-2xl font-bold text-white",
          children: statcastData.expected_slugging?.toFixed(3)
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "bg-slate-800 rounded p-3 border border-slate-600 text-center",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "text-sm text-gray-400",
          children: "Sweet Spot%"
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-2xl font-bold text-white",
          children: [statcastData.sweet_spot_percentage?.toFixed(1), "%"]
        })]
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "mt-4 p-3 bg-slate-800 rounded border border-slate-600",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "text-sm text-gray-400 mb-2",
        children: "Quality Contact Assessment"
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "flex items-center justify-between",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex space-x-2",
          children: [(statcastData.exit_velocity || 0) >= 95 && /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            className: "bg-green-500 text-white px-2 py-1 rounded text-xs",
            children: "High Exit Velo"
          }), (statcastData.barrel_rate || 0) >= 10 && /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            className: "bg-blue-500 text-white px-2 py-1 rounded text-xs",
            children: "High Barrel Rate"
          }), (statcastData.hard_hit_rate || 0) >= 40 && /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            className: "bg-purple-500 text-white px-2 py-1 rounded text-xs",
            children: "High Hard Hit%"
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "text-right",
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "text-xs text-gray-400",
            children: ["Overall Grade:", ' ', /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              className: "text-white font-semibold",
              children: (() => {
                const score = ((statcastData.exit_velocity || 0) >= 90 ? 1 : 0) + ((statcastData.barrel_rate || 0) >= 8 ? 1 : 0) + ((statcastData.hard_hit_rate || 0) >= 37 ? 1 : 0);
                return score >= 3 ? 'A' : score >= 2 ? 'B' : score >= 1 ? 'C' : 'D';
              })()
            })]
          })
        })]
      })]
    })]
  });
};
var _default = exports.default = StatcastMetrics;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,