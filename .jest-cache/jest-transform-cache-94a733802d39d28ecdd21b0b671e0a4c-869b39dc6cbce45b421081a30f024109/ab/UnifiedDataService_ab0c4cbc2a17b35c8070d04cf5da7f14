6fb3dfdeee82bca4606c963b60f15b66
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.UnifiedDataService = void 0;
var _BaseService = require("./BaseService");
var _UnifiedCache = require("./UnifiedCache");
var _UnifiedServiceRegistry = require("./UnifiedServiceRegistry");
var _UnifiedDataService;
function isGameData(obj) {
  return typeof obj === 'object' && obj !== null && typeof obj.gameId === 'string' && typeof obj.homeTeam === 'string' && typeof obj.awayTeam === 'string' && typeof obj.startTime === 'string';
}
function isSportsData(obj) {
  return typeof obj === 'object' && obj !== null && typeof obj.sport === 'string' && Array.isArray(obj.games) && obj.games.every(isGameData);
}
function isPlayerStat(obj) {
  return typeof obj === 'object' && obj !== null && typeof obj.statType === 'string' && typeof obj.value === 'number';
}
function isPlayerStats(obj) {
  return typeof obj === 'object' && obj !== null && typeof obj.playerId === 'string' && Array.isArray(obj.stats) && obj.stats.every(isPlayerStat);
}
function isRosterMember(obj) {
  return typeof obj === 'object' && obj !== null && typeof obj.playerId === 'string' && typeof obj.name === 'string' && typeof obj.position === 'string';
}
function isTeamStat(obj) {
  return typeof obj === 'object' && obj !== null && typeof obj.statType === 'string' && typeof obj.value === 'number';
}
function isTeamData(obj) {
  return typeof obj === 'object' && obj !== null && typeof obj.teamId === 'string' && Array.isArray(obj.roster) && obj.roster.every(isRosterMember) && Array.isArray(obj.stats) && obj.stats.every(isTeamStat);
}
// Type interfaces for returned data

class UnifiedDataService extends _BaseService.BaseService {
  constructor() {
    super('UnifiedDataService', _UnifiedServiceRegistry.UnifiedServiceRegistry.getInstance());
    this.memoryCache = new Map();
    this.unifiedCache = void 0;
    this.unifiedCache = _UnifiedCache.UnifiedCache.getInstance();
  }
  static getInstance() {
    if (!UnifiedDataService.instance) {
      UnifiedDataService.instance = new UnifiedDataService();
    }
    return UnifiedDataService.instance;
  }

  /**
   * Cache data with TTL (Stabilization Fix)
   * Method expected by monitoring services that was missing
   */
  async cacheData(key, value, ttl) {
    this.memoryCache.set(key, value);
    // Also cache in unified cache for compatibility
    this.unifiedCache.set(key, value, ttl);
    this.logger.info('Data cached', {
      key
    });
  }

  /**
   * Get cached data (Stabilization Fix)
   * Method expected by monitoring services that was missing
   */
  async getCachedData(key) {
    const result = this.memoryCache.get(key);
    this.logger.info('Cache accessed', {
      key,
      hit: result !== undefined
    });
    return result;
  }
  async fetchSportsData(sport, date) {
    try {
      const cacheKey = `sports_data_${sport}_${date || 'today'}`;
      const cached = this.unifiedCache.get(cacheKey);
      if (cached && isSportsData(cached)) return cached;
      const response = await this.get(`/api/sports/${sport}${date ? `?date=${date}` : ''}`);
      this.unifiedCache.set(cacheKey, response, 300000); // 5 min cache
      if (isSportsData(response)) return response;
      throw new Error('Invalid sports data response');
    } catch (error) {
      this.logger.error('Failed to fetch sports data', error);
      throw error;
    }
  }
  async fetchPlayerStats(playerId, sport) {
    try {
      const cacheKey = `player_stats_${playerId}_${sport}`;
      const cached = this.unifiedCache.get(cacheKey);
      if (cached && isPlayerStats(cached)) return cached;
      const response = await this.get(`/api/players/${playerId}/stats?sport=${sport}`);
      this.unifiedCache.set(cacheKey, response, 600000); // 10 min cache
      if (isPlayerStats(response)) return response;
      throw new Error('Invalid player stats response');
    } catch (error) {
      this.logger.error('Failed to fetch player stats', error);
      throw error;
    }
  }
  async fetchTeamData(teamId, sport) {
    try {
      const cacheKey = `team_data_${teamId}_${sport}`;
      const cached = this.unifiedCache.get(cacheKey);
      if (cached && isTeamData(cached)) return cached;
      const response = await this.get(`/api/teams/${teamId}?sport=${sport}`);
      this.unifiedCache.set(cacheKey, response, 600000); // 10 min cache
      if (isTeamData(response)) return response;
      throw new Error('Invalid team data response');
    } catch (error) {
      this.logger.error('Failed to fetch team data', error);
      throw error;
    }
  }
  async fetchLiveData(sport) {
    try {
      // No caching for live data
      const response = await this.get(`/api/live/${sport}`);
      if (typeof response !== 'object' || response === null) {
        throw new Error('Invalid live data response');
      }
      return response;
    } catch (error) {
      this.logger.error('Failed to fetch live data', error);
      throw error;
    }
  }
  async searchData(query, filters = {}) {
    try {
      const cacheKey = `search_${query}_${JSON.stringify(filters)}`;
      const cached = this.unifiedCache.get(cacheKey);
      if (cached) return cached;
      const response = await this.post('/api/search', {
        query,
        filters
      });
      if (typeof response !== 'object' || response === null) {
        throw new Error('Invalid search data response');
      }
      this.unifiedCache.set(cacheKey, response, 180000); // 3 min cache
      return response;
    } catch (error) {
      this.logger.error('Failed to search data', error);
      throw error;
    }
  }
  clearCache(pattern) {
    if (pattern) {
      const keys = this.unifiedCache.getKeys().filter(key => key.includes(pattern));
      keys.forEach(key => this.unifiedCache.delete(key));
    } else {
      this.unifiedCache.clear();
    }
    this.logger.info('Cache cleared', {
      pattern
    });
  }
  async get(url) {
    return this.api.get(url).then(response => response.data);
  }
  async post(url, data) {
    return this.api.post(url, data).then(response => response.data);
  }
}
exports.UnifiedDataService = UnifiedDataService;
_UnifiedDataService = UnifiedDataService;
UnifiedDataService.instance = void 0;
var _default = exports.default = UnifiedDataService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,