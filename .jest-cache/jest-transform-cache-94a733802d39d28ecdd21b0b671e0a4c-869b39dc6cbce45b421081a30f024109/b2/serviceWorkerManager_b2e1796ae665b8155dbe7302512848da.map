{"version":3,"names":["_react","_interopRequireDefault","require","_enhancedLogger","ServiceWorkerManager","constructor","registration","updateCallbacks","Set","state","hasUpdate","newWorker","isInstalling","error","register","navigator","enhancedLogger","warn","info","serviceWorker","scope","updateViaCache","setupUpdateHandling","enableBackgroundSync","undefined","updateState","Error","message","setInterval","update","catch","e","addEventListener","installing","controller","window","location","reload","syncManager","sync","applyUpdate","postMessage","type","onUpdate","callback","add","delete","requestNotificationPermission","permission","Notification","requestPermission","subscription","pushManager","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","process","env","VITE_VAPID_PUBLIC_KEY","fetch","method","headers","body","JSON","stringify","getRegistration","updates","forEach","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","serviceWorkerManager","exports","useServiceWorkerUpdate","setUpdateState","React","useState","useEffect","unsubscribe","useCallback","requestNotifications","_default","default"],"sources":["serviceWorkerManager.ts"],"sourcesContent":["/**\r\n * Service Worker Registration - 2025 Best Practices\r\n *\r\n * Features:\r\n * - Automatic registration with update detection\r\n * - User-friendly update prompts\r\n * - Background sync capability\r\n * - Push notification support\r\n */\r\n\r\nimport React from 'react';\r\nimport { enhancedLogger } from '../utils/enhancedLogger';\r\n\r\ninterface ServiceWorkerUpdateState {\r\n  hasUpdate: boolean;\r\n  newWorker: ServiceWorker | null;\r\n  isInstalling: boolean;\r\n  error: string | null;\r\n}\r\n\r\ntype UpdateCallback = (state: ServiceWorkerUpdateState) => void;\r\n\r\nclass ServiceWorkerManager {\r\n  private registration: ServiceWorkerRegistration | null = null;\r\n  private updateCallbacks: Set<UpdateCallback> = new Set();\r\n  private state: ServiceWorkerUpdateState = {\r\n    hasUpdate: false,\r\n    newWorker: null,\r\n    isInstalling: false,\r\n    error: null,\r\n  };\r\n\r\n  /**\r\n   * Register the service worker with automatic update detection\r\n   */\r\n  async register(): Promise<ServiceWorkerRegistration | null> {\r\n    if (!('serviceWorker' in navigator)) {\r\n      enhancedLogger.warn('ServiceWorker', 'register', 'Not supported in this browser');\r\n      return null;\r\n    }\r\n\r\n    try {\r\n  enhancedLogger.info('ServiceWorker', 'register', 'Registering with 2025 best practices...');\r\n\r\n      const registration = await navigator.serviceWorker.register('/sw.js', {\r\n        scope: '/',\r\n        updateViaCache: 'none', // Always check for updates\r\n      });\r\n\r\n      this.registration = registration;\r\n\r\n      // Set up update detection\r\n      this.setupUpdateHandling(registration);\r\n\r\n      // Enable background sync\r\n      this.enableBackgroundSync(registration);\r\n\r\n  // Track registration success\r\n  enhancedLogger.info('ServiceWorker', 'register', 'Registration tracking: success');\r\n\r\n  enhancedLogger.info('ServiceWorker', 'register', 'Successfully registered');\r\n      return registration;\r\n    } catch (error) {\r\n  enhancedLogger.error('ServiceWorker', 'register', 'Registration failed', undefined, error as Error);\r\n  enhancedLogger.warn('ServiceWorker', 'register', 'Registration tracking: error');\r\n\r\n      this.updateState({\r\n        error: `Registration failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      });\r\n\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set up update detection and handling\r\n   */\r\n  private setupUpdateHandling(registration: ServiceWorkerRegistration): void {\r\n    // Check for updates periodically\r\n    setInterval(() => {\r\n  registration.update().catch((e: any) => enhancedLogger.error('ServiceWorker', 'update', 'Update failed', undefined, e as Error));\r\n    }, 60000); // Check every minute\r\n\r\n    // Handle installation of new service worker\r\n    registration.addEventListener('updatefound', () => {\r\n      const newWorker = registration.installing;\r\n      if (!newWorker) return;\r\n\r\n  enhancedLogger.info('ServiceWorker', 'updatefound', 'New version found, installing...');\r\n\r\n      this.updateState({\r\n        isInstalling: true,\r\n        newWorker,\r\n      });\r\n\r\n      newWorker.addEventListener('statechange', () => {\r\n        if (newWorker.state === 'installed') {\r\n          if (navigator.serviceWorker.controller) {\r\n            // New version available\r\n            enhancedLogger.info('ServiceWorker', 'update', 'New version ready');\r\n            this.updateState({\r\n              hasUpdate: true,\r\n              isInstalling: false,\r\n              newWorker,\r\n            });\r\n          } else {\r\n            // First time installation\r\n            enhancedLogger.info('ServiceWorker', 'update', 'App is ready for offline use');\r\n            this.updateState({\r\n              isInstalling: false,\r\n            });\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // Handle controller change (when new SW becomes active)\r\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\r\n  enhancedLogger.info('ServiceWorker', 'controllerchange', 'New version is now controlling the app');\r\n      // Optionally reload the page or show notification\r\n      window.location.reload();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Enable background sync for offline analytics\r\n   */\r\n  private enableBackgroundSync(registration: ServiceWorkerRegistration): void {\r\n    // Check if sync is supported\r\n    if ('sync' in registration) {\r\n      try {\r\n        // Add error handling for sync registration\r\n        const syncManager = (registration as any).sync;\r\n        if (syncManager && typeof syncManager.register === 'function') {\r\n          syncManager.register('analytics-sync').catch((error: any) => {\r\n            enhancedLogger.error('ServiceWorker', 'sync', 'Sync registration failed', undefined, error as Error);\r\n          });\r\n          enhancedLogger.info('ServiceWorker', 'sync', 'Background sync enabled');\r\n        }\r\n        } catch (error) {\r\n          enhancedLogger.warn('ServiceWorker', 'sync', 'Background sync not available', undefined, error as Error);\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply pending service worker update\r\n   */\r\n  applyUpdate(): void {\r\n    if (this.state.newWorker) {\r\n      this.state.newWorker.postMessage({ type: 'SKIP_WAITING' });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribe to update notifications\r\n   */\r\n  onUpdate(callback: UpdateCallback): () => void {\r\n    this.updateCallbacks.add(callback);\r\n\r\n    // Immediately call with current state\r\n    callback(this.state);\r\n\r\n    // Return unsubscribe function\r\n    return () => {\r\n      this.updateCallbacks.delete(callback);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Request permission for push notifications\r\n   */\r\n  async requestNotificationPermission(): Promise<NotificationPermission> {\r\n    if (!('Notification' in window)) {\r\n      throw new Error('Notifications not supported');\r\n    }\r\n\r\n    const permission = await Notification.requestPermission();\r\n\r\n    if (permission === 'granted' && this.registration) {\r\n      // Subscribe to push notifications\r\n      try {\r\n        const subscription = await this.registration.pushManager.subscribe({\r\n          userVisibleOnly: true,\r\n          // Cast to any to accept various BufferSource implementations across browsers\r\n          applicationServerKey: this.urlBase64ToUint8Array(process.env.VITE_VAPID_PUBLIC_KEY || '') as any,\r\n        } as any);\r\n\r\n        // Send subscription to backend\r\n        await fetch('/api/push/subscribe', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(subscription),\r\n        });\r\n\r\n  enhancedLogger.info('ServiceWorker', 'push', 'Push notifications enabled');\r\n      } catch (error) {\r\n  enhancedLogger.error('ServiceWorker', 'push', 'Push subscription failed', undefined, error as Error);\r\n      }\r\n    }\r\n\r\n    return permission;\r\n  }\r\n\r\n  /**\r\n   * Get current registration\r\n   */\r\n  getRegistration(): ServiceWorkerRegistration | null {\r\n    return this.registration;\r\n  }\r\n\r\n  /**\r\n   * Update internal state and notify callbacks\r\n   */\r\n  private updateState(updates: Partial<ServiceWorkerUpdateState>): void {\r\n    this.state = { ...this.state, ...updates };\r\n  this.updateCallbacks.forEach(callback => callback(this.state));\r\n  }\r\n\r\n  /**\r\n   * Convert VAPID key to Uint8Array\r\n   */\r\n  private urlBase64ToUint8Array(base64String: string): Uint8Array {\r\n    const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\r\n    const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\r\n\r\n    const rawData = window.atob(base64);\r\n    const outputArray = new Uint8Array(rawData.length);\r\n\r\n    for (let i = 0; i < rawData.length; ++i) {\r\n      outputArray[i] = rawData.charCodeAt(i);\r\n    }\r\n\r\n    return outputArray;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const serviceWorkerManager = new ServiceWorkerManager();\r\n\r\n/**\r\n * React hook for service worker updates\r\n */\r\nexport function useServiceWorkerUpdate() {\r\n  const [updateState, setUpdateState] = React.useState<ServiceWorkerUpdateState>({\r\n    hasUpdate: false,\r\n    newWorker: null,\r\n    isInstalling: false,\r\n    error: null,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    const unsubscribe = serviceWorkerManager.onUpdate(setUpdateState);\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const applyUpdate = React.useCallback(() => {\r\n    serviceWorkerManager.applyUpdate();\r\n  }, []);\r\n\r\n  const requestNotifications = React.useCallback(() => {\r\n    return serviceWorkerManager.requestNotificationPermission();\r\n  }, []);\r\n\r\n  return {\r\n    ...updateState,\r\n    applyUpdate,\r\n    requestNotifications,\r\n  };\r\n}\r\n\r\nexport default serviceWorkerManager;\r\n"],"mappings":"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","ignoreList":[]}