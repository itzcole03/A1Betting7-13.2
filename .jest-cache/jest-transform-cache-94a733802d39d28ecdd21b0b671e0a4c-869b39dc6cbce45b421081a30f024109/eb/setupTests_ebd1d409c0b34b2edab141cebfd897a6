d36a4bed283fd2b3e853369649e83af9
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__resetLocationMocks = void 0;
// Lightweight test setup for Jest + jsdom
// Note: jest-dom import removed from enhanced setup to avoid resolution issues in test harness
// - Provide a minimal getContext implementation to avoid jsdom "Not implemented: getContext" errors
// - Stub URL.createObjectURL to avoid errors in export CSV tests

// Provide a basic 2D context mock
if (typeof HTMLCanvasElement !== 'undefined' && !HTMLCanvasElement.prototype.getContext) {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  HTMLCanvasElement.prototype.getContext = function (type) {
    if (type === '2d') {
      return {
        fillRect: () => {},
        clearRect: () => {},
        getImageData: (x, y, w, h) => ({
          data: new Array(w * h * 4)
        }),
        putImageData: () => {},
        createImageData: () => [],
        setTransform: () => {},
        drawImage: () => {},
        save: () => {},
        fillText: () => {},
        restore: () => {},
        beginPath: () => {},
        moveTo: () => {},
        lineTo: () => {},
        closePath: () => {},
        stroke: () => {},
        translate: () => {},
        scale: () => {},
        rotate: () => {},
        arc: () => {}
      };
    }
    return null;
  };
}

// Stub createObjectURL and revoke for tests
if (typeof URL !== 'undefined' && !URL.createObjectURL) {
  // @ts-ignore
  URL.createObjectURL = blob => 'blob://test';
  // @ts-ignore
  URL.revokeObjectURL = url => {};
}

// Silence console warnings from navigation/getContext in some jest environments
const _consoleWarn = console.warn;
console.warn = (...args) => {
  const msg = String(args[0] ?? '');
  if (msg.includes('Not implemented: navigation') || msg.includes('Not implemented: HTMLCanvasElement.prototype.getContext')) {
    return;
  }
  _consoleWarn(...args);
};

// Suppress framer-motion DOM prop warnings in tests by filtering props
try {
  // @ts-ignore
  const originalCreateElement = document.createElement;
  // Wrap createElement to remove whileHover/whileTap attributes when added to DOM
  // This is a lightweight compatibility shim for framer-motion in jsdom tests
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  document.createElement = function (tagName, options) {
    const el = originalCreateElement.call(document, tagName, options);
    const originalSetAttribute = el.setAttribute.bind(el);
    el.setAttribute = function (name, value) {
      if (name === 'whilehover' || name === 'whiletap' || name === 'whileHover' || name === 'whileTap') {
        return;
      }
      return originalSetAttribute(name, value);
    };
    return el;
  };
} catch (e) {
  // ignore in environments we cannot patch
}

// Jest environment: mock navigation functions that jsdom doesn't implement
if (typeof window !== 'undefined' && typeof window.location !== 'undefined') {
  // Preserve original descriptors if present
  try {
    // Replace assign and reload with jest.fn() so tests can assert calls without throwing
    // @ts-ignore
    if (!window.location.assign || typeof window.location.assign !== 'function') {
      // @ts-ignore
      window.location.assign = url => {
        // mimic behavior: no-op in test
      };
    }
    // @ts-ignore
    if (!window.location.reload || typeof window.location.reload !== 'function') {
      // @ts-ignore
      window.location.reload = () => {
        // no-op in tests
      };
    }
  } catch (e) {
    // ignore modification errors in some environments
  }
}

// Helper to reset window.location mocks between tests (call from tests if needed)
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const __resetLocationMocks = () => {
  try {
    // @ts-ignore
    if (window?.location?.assign && window.location.assign.mockReset) window.location.assign.mockReset();
    // @ts-ignore
    if (window?.location?.reload && window.location.reload.mockReset) window.location.reload.mockReset();
  } catch (_) {}
};
exports.__resetLocationMocks = __resetLocationMocks;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIVE1MQ2FudmFzRWxlbWVudCIsInByb3RvdHlwZSIsImdldENvbnRleHQiLCJ0eXBlIiwiZmlsbFJlY3QiLCJjbGVhclJlY3QiLCJnZXRJbWFnZURhdGEiLCJ4IiwieSIsInciLCJoIiwiZGF0YSIsIkFycmF5IiwicHV0SW1hZ2VEYXRhIiwiY3JlYXRlSW1hZ2VEYXRhIiwic2V0VHJhbnNmb3JtIiwiZHJhd0ltYWdlIiwic2F2ZSIsImZpbGxUZXh0IiwicmVzdG9yZSIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsImNsb3NlUGF0aCIsInN0cm9rZSIsInRyYW5zbGF0ZSIsInNjYWxlIiwicm90YXRlIiwiYXJjIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiYmxvYiIsInJldm9rZU9iamVjdFVSTCIsInVybCIsIl9jb25zb2xlV2FybiIsImNvbnNvbGUiLCJ3YXJuIiwiYXJncyIsIm1zZyIsIlN0cmluZyIsImluY2x1ZGVzIiwib3JpZ2luYWxDcmVhdGVFbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidGFnTmFtZSIsIm9wdGlvbnMiLCJlbCIsImNhbGwiLCJvcmlnaW5hbFNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImJpbmQiLCJuYW1lIiwidmFsdWUiLCJlIiwid2luZG93IiwibG9jYXRpb24iLCJhc3NpZ24iLCJyZWxvYWQiLCJfX3Jlc2V0TG9jYXRpb25Nb2NrcyIsIm1vY2tSZXNldCIsIl8iLCJleHBvcnRzIl0sInNvdXJjZXMiOlsic2V0dXBUZXN0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWdodHdlaWdodCB0ZXN0IHNldHVwIGZvciBKZXN0ICsganNkb21cclxuLy8gTm90ZTogamVzdC1kb20gaW1wb3J0IHJlbW92ZWQgZnJvbSBlbmhhbmNlZCBzZXR1cCB0byBhdm9pZCByZXNvbHV0aW9uIGlzc3VlcyBpbiB0ZXN0IGhhcm5lc3NcclxuLy8gLSBQcm92aWRlIGEgbWluaW1hbCBnZXRDb250ZXh0IGltcGxlbWVudGF0aW9uIHRvIGF2b2lkIGpzZG9tIFwiTm90IGltcGxlbWVudGVkOiBnZXRDb250ZXh0XCIgZXJyb3JzXHJcbi8vIC0gU3R1YiBVUkwuY3JlYXRlT2JqZWN0VVJMIHRvIGF2b2lkIGVycm9ycyBpbiBleHBvcnQgQ1NWIHRlc3RzXHJcblxyXG4vLyBQcm92aWRlIGEgYmFzaWMgMkQgY29udGV4dCBtb2NrXHJcbmlmICh0eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmICFIVE1MQ2FudmFzRWxlbWVudC5wcm90b3R5cGUuZ2V0Q29udGV4dCkge1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgKEhUTUxDYW52YXNFbGVtZW50LnByb3RvdHlwZSBhcyBhbnkpLmdldENvbnRleHQgPSBmdW5jdGlvbiAodHlwZTogc3RyaW5nKSB7XHJcbiAgICBpZiAodHlwZSA9PT0gJzJkJykge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGZpbGxSZWN0OiAoKSA9PiB7fSxcclxuICAgICAgICBjbGVhclJlY3Q6ICgpID0+IHt9LFxyXG4gICAgICAgIGdldEltYWdlRGF0YTogKHg6IG51bWJlciwgeTogbnVtYmVyLCB3OiBudW1iZXIsIGg6IG51bWJlcikgPT4gKHsgZGF0YTogbmV3IEFycmF5KHcgKiBoICogNCkgfSksXHJcbiAgICAgICAgcHV0SW1hZ2VEYXRhOiAoKSA9PiB7fSxcclxuICAgICAgICBjcmVhdGVJbWFnZURhdGE6ICgpID0+IFtdLFxyXG4gICAgICAgIHNldFRyYW5zZm9ybTogKCkgPT4ge30sXHJcbiAgICAgICAgZHJhd0ltYWdlOiAoKSA9PiB7fSxcclxuICAgICAgICBzYXZlOiAoKSA9PiB7fSxcclxuICAgICAgICBmaWxsVGV4dDogKCkgPT4ge30sXHJcbiAgICAgICAgcmVzdG9yZTogKCkgPT4ge30sXHJcbiAgICAgICAgYmVnaW5QYXRoOiAoKSA9PiB7fSxcclxuICAgICAgICBtb3ZlVG86ICgpID0+IHt9LFxyXG4gICAgICAgIGxpbmVUbzogKCkgPT4ge30sXHJcbiAgICAgICAgY2xvc2VQYXRoOiAoKSA9PiB7fSxcclxuICAgICAgICBzdHJva2U6ICgpID0+IHt9LFxyXG4gICAgICAgIHRyYW5zbGF0ZTogKCkgPT4ge30sXHJcbiAgICAgICAgc2NhbGU6ICgpID0+IHt9LFxyXG4gICAgICAgIHJvdGF0ZTogKCkgPT4ge30sXHJcbiAgICAgICAgYXJjOiAoKSA9PiB7fSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH07XHJcbn1cclxuXHJcbi8vIFN0dWIgY3JlYXRlT2JqZWN0VVJMIGFuZCByZXZva2UgZm9yIHRlc3RzXHJcbmlmICh0eXBlb2YgVVJMICE9PSAndW5kZWZpbmVkJyAmJiAhVVJMLmNyZWF0ZU9iamVjdFVSTCkge1xyXG4gIC8vIEB0cy1pZ25vcmVcclxuICBVUkwuY3JlYXRlT2JqZWN0VVJMID0gKGJsb2I6IEJsb2IpID0+ICdibG9iOi8vdGVzdCc7XHJcbiAgLy8gQHRzLWlnbm9yZVxyXG4gIFVSTC5yZXZva2VPYmplY3RVUkwgPSAodXJsOiBzdHJpbmcpID0+IHt9O1xyXG59XHJcblxyXG4vLyBTaWxlbmNlIGNvbnNvbGUgd2FybmluZ3MgZnJvbSBuYXZpZ2F0aW9uL2dldENvbnRleHQgaW4gc29tZSBqZXN0IGVudmlyb25tZW50c1xyXG5jb25zdCBfY29uc29sZVdhcm4gPSBjb25zb2xlLndhcm47XHJcbmNvbnNvbGUud2FybiA9ICguLi5hcmdzOiB1bmtub3duW10pID0+IHtcclxuICBjb25zdCBtc2cgPSBTdHJpbmcoYXJnc1swXSA/PyAnJyk7XHJcbiAgaWYgKG1zZy5pbmNsdWRlcygnTm90IGltcGxlbWVudGVkOiBuYXZpZ2F0aW9uJykgfHwgbXNnLmluY2x1ZGVzKCdOb3QgaW1wbGVtZW50ZWQ6IEhUTUxDYW52YXNFbGVtZW50LnByb3RvdHlwZS5nZXRDb250ZXh0JykpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgX2NvbnNvbGVXYXJuKC4uLmFyZ3MpO1xyXG59O1xyXG5cclxuLy8gU3VwcHJlc3MgZnJhbWVyLW1vdGlvbiBET00gcHJvcCB3YXJuaW5ncyBpbiB0ZXN0cyBieSBmaWx0ZXJpbmcgcHJvcHNcclxudHJ5IHtcclxuICAvLyBAdHMtaWdub3JlXHJcbiAgY29uc3Qgb3JpZ2luYWxDcmVhdGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudDtcclxuICAvLyBXcmFwIGNyZWF0ZUVsZW1lbnQgdG8gcmVtb3ZlIHdoaWxlSG92ZXIvd2hpbGVUYXAgYXR0cmlidXRlcyB3aGVuIGFkZGVkIHRvIERPTVxyXG4gIC8vIFRoaXMgaXMgYSBsaWdodHdlaWdodCBjb21wYXRpYmlsaXR5IHNoaW0gZm9yIGZyYW1lci1tb3Rpb24gaW4ganNkb20gdGVzdHNcclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gIChkb2N1bWVudCBhcyBhbnkpLmNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAodGFnTmFtZTogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XHJcbiAgICBjb25zdCBlbCA9IG9yaWdpbmFsQ3JlYXRlRWxlbWVudC5jYWxsKGRvY3VtZW50LCB0YWdOYW1lLCBvcHRpb25zKTtcclxuICAgIGNvbnN0IG9yaWdpbmFsU2V0QXR0cmlidXRlID0gZWwuc2V0QXR0cmlidXRlLmJpbmQoZWwpO1xyXG4gICAgZWwuc2V0QXR0cmlidXRlID0gZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xyXG4gICAgICBpZiAobmFtZSA9PT0gJ3doaWxlaG92ZXInIHx8IG5hbWUgPT09ICd3aGlsZXRhcCcgfHwgbmFtZSA9PT0gJ3doaWxlSG92ZXInIHx8IG5hbWUgPT09ICd3aGlsZVRhcCcpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG9yaWdpbmFsU2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZWw7XHJcbiAgfTtcclxufSBjYXRjaCAoZSkge1xyXG4gIC8vIGlnbm9yZSBpbiBlbnZpcm9ubWVudHMgd2UgY2Fubm90IHBhdGNoXHJcbn1cclxuXHJcbi8vIEplc3QgZW52aXJvbm1lbnQ6IG1vY2sgbmF2aWdhdGlvbiBmdW5jdGlvbnMgdGhhdCBqc2RvbSBkb2Vzbid0IGltcGxlbWVudFxyXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5sb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAvLyBQcmVzZXJ2ZSBvcmlnaW5hbCBkZXNjcmlwdG9ycyBpZiBwcmVzZW50XHJcbiAgdHJ5IHtcclxuICAgIC8vIFJlcGxhY2UgYXNzaWduIGFuZCByZWxvYWQgd2l0aCBqZXN0LmZuKCkgc28gdGVzdHMgY2FuIGFzc2VydCBjYWxscyB3aXRob3V0IHRocm93aW5nXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBpZiAoIXdpbmRvdy5sb2NhdGlvbi5hc3NpZ24gfHwgdHlwZW9mIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24gIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduID0gKHVybDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgLy8gbWltaWMgYmVoYXZpb3I6IG5vLW9wIGluIHRlc3RcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGlmICghd2luZG93LmxvY2F0aW9uLnJlbG9hZCB8fCB0eXBlb2Ygd2luZG93LmxvY2F0aW9uLnJlbG9hZCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gbm8tb3AgaW4gdGVzdHNcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICAvLyBpZ25vcmUgbW9kaWZpY2F0aW9uIGVycm9ycyBpbiBzb21lIGVudmlyb25tZW50c1xyXG4gIH1cclxufVxyXG5cclxuLy8gSGVscGVyIHRvIHJlc2V0IHdpbmRvdy5sb2NhdGlvbiBtb2NrcyBiZXR3ZWVuIHRlc3RzIChjYWxsIGZyb20gdGVzdHMgaWYgbmVlZGVkKVxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbmV4cG9ydCBjb25zdCBfX3Jlc2V0TG9jYXRpb25Nb2NrcyA9ICgpID0+IHtcclxuICB0cnkge1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgaWYgKHdpbmRvdz8ubG9jYXRpb24/LmFzc2lnbiAmJiAod2luZG93LmxvY2F0aW9uLmFzc2lnbiBhcyBhbnkpLm1vY2tSZXNldCkgKHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24gYXMgYW55KS5tb2NrUmVzZXQoKTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGlmICh3aW5kb3c/LmxvY2F0aW9uPy5yZWxvYWQgJiYgKHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQgYXMgYW55KS5tb2NrUmVzZXQpICh3aW5kb3cubG9jYXRpb24ucmVsb2FkIGFzIGFueSkubW9ja1Jlc2V0KCk7XHJcbiAgfSBjYXRjaCAoXykge31cclxufTtcclxuXHJcbmV4cG9ydCB7fTtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUksT0FBT0EsaUJBQWlCLEtBQUssV0FBVyxJQUFJLENBQUNBLGlCQUFpQixDQUFDQyxTQUFTLENBQUNDLFVBQVUsRUFBRTtFQUN2RjtFQUNDRixpQkFBaUIsQ0FBQ0MsU0FBUyxDQUFTQyxVQUFVLEdBQUcsVUFBVUMsSUFBWSxFQUFFO0lBQ3hFLElBQUlBLElBQUksS0FBSyxJQUFJLEVBQUU7TUFDakIsT0FBTztRQUNMQyxRQUFR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