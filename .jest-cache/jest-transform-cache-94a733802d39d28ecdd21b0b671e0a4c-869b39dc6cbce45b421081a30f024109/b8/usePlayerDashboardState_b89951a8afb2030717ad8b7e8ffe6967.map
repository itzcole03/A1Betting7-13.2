{"version":3,"names":["_react","require","_MasterServiceRegistry","_interopRequireDefault","_UnifiedLogger","_interopRequireWildcard","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","usePlayerDashboardState","playerId","sport","player","setPlayer","useState","loading","setLoading","error","setError","errorId","setErrorId","correlationId","setCorrelationId","initialized","setInitialized","playerDataService","setPlayerDataService","logger","UnifiedLogger","getInstance","serviceRegistry","MasterServiceRegistry","useEffect","init","console","log","initialize","warn","service","getService","initError","ReferenceError","message","includes","name","stack","loadPlayer","useCallback","id","getPlayer","corrId","Date","now","info","Error","playerData","err","errorMsg","errorDetails","isConnectivityOrMissingDataError","toString","generatedErrorId","UnifiedErrorService","Promise","resolve","then","reportError","context","Math","random","substr","logMessage","JSON","stringify","logError","trim","catch","syncError","reload"],"sources":["usePlayerDashboardState.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\r\nimport type { Player } from '../components/player/PlayerDashboardContainer';\r\nimport MasterServiceRegistry from '../services/MasterServiceRegistry';\r\nimport { UnifiedLogger } from '../services/unified/UnifiedLogger';\r\n\r\ninterface UsePlayerDashboardStateProps {\r\n  playerId: string;\r\n  sport?: string;\r\n}\r\n\r\nexport function usePlayerDashboardState({ playerId, sport = 'MLB' }: UsePlayerDashboardStateProps) {\r\n  const [player, setPlayer] = useState<Player | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [errorId, setErrorId] = useState<string | null>(null);\r\n  const [correlationId, setCorrelationId] = useState<string | null>(null);\r\n  const [initialized, setInitialized] = useState(false);\r\n  const [playerDataService, setPlayerDataService] = useState<any>(null);\r\n\r\n  const logger = UnifiedLogger.getInstance();\r\n  const serviceRegistry = MasterServiceRegistry;\r\n\r\n  useEffect(() => {\n    const init = async () => {\n      try {\n        console.log('[usePlayerDashboardState] Initializing service registry...');\n\n        if (typeof serviceRegistry.initialize === 'function') {\n          await serviceRegistry.initialize();\n          console.log('[usePlayerDashboardState] Service registry initialized successfully');\n        } else {\n          console.warn('[usePlayerDashboardState] Service registry has no initialize method');\n        }\n\n        const service = serviceRegistry.getService('playerData');\n        console.log('[usePlayerDashboardState] PlayerData service retrieved:', !!service);\n\n        setPlayerDataService(service);\n        setInitialized(true);\n      } catch (initError) {\n        console.error('[usePlayerDashboardState] Service initialization failed:', initError);\n\n        // Check if this is the \"item is not defined\" error\n        if (initError instanceof ReferenceError && initError.message.includes('item')) {\n          console.error('[usePlayerDashboardState] ReferenceError detected during service init:', {\n            name: initError.name,\n            message: initError.message,\n            stack: initError.stack\n          });\n        }\n\n        // Still set initialized to true to prevent infinite loops\n        setInitialized(true);\n      }\n    };\n    init();\n  }, [serviceRegistry]);\r\n\r\n  const loadPlayer = useCallback(\r\n    async (id: string) => {\r\n      if (!playerDataService || typeof playerDataService.getPlayer !== 'function') return;\r\n      setLoading(true);\r\n      setError(null);\r\n      const corrId = `${id}-${Date.now()}`;\r\n      setCorrelationId(corrId);\r\n      try {\n        logger.info(`usePlayerDashboardState: Loading player: ${id} [correlationId=${corrId}]`);\n\n        // Add extra safety checks\n        if (!playerDataService || typeof playerDataService.getPlayer !== 'function') {\n          throw new Error('PlayerDataService not available or getPlayer method missing');\n        }\n\n        const playerData = await playerDataService.getPlayer(id, sport);\n\n        // Validate player data\n        if (!playerData) {\n          throw new Error('No player data returned from service');\n        }\n\n        setPlayer(playerData);\n        logger.info(\n          `usePlayerDashboardState: Player loaded: ${playerData.name || 'Unknown'} [correlationId=${corrId}]`\n        );\n        setErrorId(null);\n      } catch (err) {\n        // Capture error information but don't spam for connectivity issues\n        let errorMsg = 'Failed to load player';\n        let errorDetails: any = {};\n\n        const isConnectivityOrMissingDataError = err instanceof Error && (\n          err.message.includes('Failed to fetch') ||\n          err.message.includes('timeout') ||\n          err.message.includes('signal timed out') ||\n          err.message.includes('Network') ||\n          err.message.includes('HTTP 404') ||\n          err.message.includes('Not Found') ||\n          err.message.includes('Player data unavailable')\n        );\n\n        if (err instanceof Error) {\n          errorMsg = err.message;\n          errorDetails = {\n            name: err.name,\n            stack: err.stack,\n            message: err.message\n          };\n\n          // For connectivity/missing data errors, provide user-friendly message\n          if (isConnectivityOrMissingDataError) {\n            errorMsg = 'Player data not found - using sample data';\n          }\n        } else if (typeof err === 'string') {\n          errorMsg = err;\n        } else if (err && typeof err === 'object') {\n          errorMsg = err.toString() || 'Unknown error object';\n          errorDetails = err;\n        }\n\n        setError(errorMsg);\n\n        // Generate errorId - skip error service for connectivity/missing data issues\n        let generatedErrorId = null;\n        if (!isConnectivityOrMissingDataError) {\n          try {\n            const { UnifiedErrorService } = await import('../services/unified/UnifiedErrorService');\n            generatedErrorId = UnifiedErrorService.getInstance().reportError(errorMsg, {\n              correlationId: corrId,\n              context: 'usePlayerDashboardState',\n              playerId: id,\n              sport: sport,\n              errorDetails: errorDetails\n            });\n          } catch (e) {\n            // Fallback: generate a local errorId\n            generatedErrorId = `player_error_${Date.now()}_${Math.random()\n              .toString(36)\n              .substr(2, 6)}`;\n          }\n        } else {\n          // For connectivity/missing data errors, just generate a simple ID\n          generatedErrorId = `missing_data_${Date.now()}`;\n        }\n        setErrorId(generatedErrorId);\n\n        // Log errors appropriately - minimal logging for connectivity/missing data issues\n        try {\n          if (isConnectivityOrMissingDataError) {\n            // Just log missing data issues as info, not errors\n            console.info(`[usePlayerDashboardState] Player data not found for ${id} - using sample data`);\n          } else {\n            // Log actual errors normally\n            const logMessage = generatedErrorId\n              ? `usePlayerDashboardState: ${errorMsg} [correlationId=${corrId}] errorId=${generatedErrorId}`\n              : `usePlayerDashboardState: ${errorMsg} [correlationId=${corrId}] errorId=null`;\n\n            logger.error(logMessage);\n            console.error('[usePlayerDashboardState] Error details:', JSON.stringify({\n              errorMsg,\n              correlationId: corrId,\n              errorId: generatedErrorId,\n              playerId: id,\n              sport: sport,\n              errorDetails: errorDetails\n            }, null, 2));\n          }\n        } catch (logError) {\n          // Fallback logging if there are issues with the logger\n          console.error('[usePlayerDashboardState] Logging error:', logError);\n          console.error('[usePlayerDashboardState] Original error:', errorMsg);\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [playerDataService, sport, logger]\r\n  );\r\n\r\n  useEffect(() => {\n    if (playerId && playerId.trim() !== '' && playerDataService && initialized) {\n      // Wrap in additional try-catch to catch any ReferenceErrors\n      try {\n        loadPlayer(playerId).catch(err => {\n          console.error('[usePlayerDashboardState] useEffect loadPlayer failed:', err);\n          // Log additional details if it's a ReferenceError\n          if (err instanceof ReferenceError) {\n            console.error('[usePlayerDashboardState] ReferenceError details:', {\n              name: err.name,\n              message: err.message,\n              stack: err.stack\n            });\n          }\n        });\n      } catch (syncError) {\n        console.error('[usePlayerDashboardState] Synchronous error in useEffect:', syncError);\n      }\n    }\n  }, [playerId, playerDataService, initialized, loadPlayer]);\r\n\r\n  return {\r\n    player,\r\n    loading,\r\n    error,\r\n    errorId,\r\n    correlationId,\r\n    reload: () => loadPlayer(playerId),\r\n  };\r\n}\n"],"mappings":"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","ignoreList":[]}