debea29156d9882bc3c43cfa46fe93a9
"use strict";

// Mock oneTimeLog to test warning calls
_getJestObj().mock('../oneTimeLog', () => {
  const loggedSignatures = new Set();
  const logFnCalls = [];
  return {
    oneTimeLog: jest.fn((key, logFn, message) => {
      const signature = `${key}:${message || 'generic'}`;
      if (!loggedSignatures.has(signature)) {
        loggedSignatures.add(signature);
        logFn();
        logFnCalls.push(logFn);
      }
    }),
    clearLoggedSignatures: jest.fn(() => {
      loggedSignatures.clear();
      logFnCalls.length = 0;
    }),
    getLogFnCallCount: () => logFnCalls.length
  };
});
var _modelMetricsAccessors = require("../modelMetricsAccessors");
var _oneTimeLog = require("../oneTimeLog");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const mockOneTimeLog = _oneTimeLog.oneTimeLog;
const mockClearLoggedSignatures = _oneTimeLog.clearLoggedSignatures;
beforeEach(() => {
  mockOneTimeLog.mockClear();
  mockClearLoggedSignatures.mockClear();
  // Ensure we're in test environment for warnings
  process.env.NODE_ENV = 'test';
  (0, _oneTimeLog.clearLoggedSignatures)();
});
describe('modelMetricsAccessors', () => {
  describe('getOptimizationLevel', () => {
    it('should get canonical optimization_level', () => {
      const canonical = {
        model: {
          optimization_level: 'Phase 4 Enhanced'
        }
      };
      expect((0, _modelMetricsAccessors.getOptimizationLevel)(canonical)).toBe('Phase 4 Enhanced');
    });
    it('should fall back to legacy optimizationLevel', () => {
      const legacy = {
        optimizationLevel: 'Advanced'
      };
      const result = (0, _modelMetricsAccessors.getOptimizationLevel)(legacy);
      expect(result).toBe('Advanced');
      expect(mockOneTimeLog).toHaveBeenCalledWith('optimization_level', expect.any(Function), 'optimization_level');
    });
    it('should try multiple legacy paths', () => {
      const legacyOptLevel = {
        opt_level: 'Phase 3'
      };
      expect((0, _modelMetricsAccessors.getOptimizationLevel)(legacyOptLevel)).toBe('Phase 3');
      const legacySystemInfo = {
        system_info: {
          optimization_level: 'Phase 2'
        }
      };
      expect((0, _modelMetricsAccessors.getOptimizationLevel)(legacySystemInfo)).toBe('Phase 2');
    });
    it('should return default for missing field', () => {
      expect((0, _modelMetricsAccessors.getOptimizationLevel)({})).toBe('Basic');
      expect((0, _modelMetricsAccessors.getOptimizationLevel)(null)).toBe('Basic');
    });
  });
  describe('getModelName', () => {
    it('should get canonical model name', () => {
      const canonical = {
        model: {
          name: 'GPT-4'
        }
      };
      expect((0, _modelMetricsAccessors.getModelName)(canonical)).toBe('GPT-4');
    });
    it('should fall back to legacy modelName', () => {
      const legacy = {
        modelName: 'Legacy Model'
      };
      expect((0, _modelMetricsAccessors.getModelName)(legacy)).toBe('Legacy Model');
    });
    it('should return default for missing field', () => {
      expect((0, _modelMetricsAccessors.getModelName)({})).toBe('Unknown Model');
    });
  });
  describe('getProvider', () => {
    it('should get canonical provider', () => {
      const canonical = {
        model: {
          provider: 'OpenAI'
        }
      };
      expect((0, _modelMetricsAccessors.getProvider)(canonical)).toBe('OpenAI');
    });
    it('should fall back to legacy provider', () => {
      const legacy = {
        provider: 'Legacy Provider'
      };
      expect((0, _modelMetricsAccessors.getProvider)(legacy)).toBe('Legacy Provider');
    });
  });
  describe('performance metrics accessors', () => {
    it('should get throughput from canonical path', () => {
      const data = {
        performance: {
          throughput_rps: 123.45
        }
      };
      expect((0, _modelMetricsAccessors.getThroughputRps)(data)).toBe(123.45);
    });
    it('should get throughput from legacy path', () => {
      const legacy = {
        throughput: 100
      };
      expect((0, _modelMetricsAccessors.getThroughputRps)(legacy)).toBe(100);
    });
    it('should get latency metrics', () => {
      const data = {
        performance: {
          avg_latency_ms: 50.5,
          p95_latency_ms: 95.2
        }
      };
      expect((0, _modelMetricsAccessors.getAvgLatencyMs)(data)).toBe(50.5);
      expect((0, _modelMetricsAccessors.getP95LatencyMs)(data)).toBe(95.2);
    });
    it('should normalize success rate from percentage', () => {
      const percentageData = {
        performance: {
          success_rate: 85.5
        }
      };

      // Should convert percentage to decimal
      expect((0, _modelMetricsAccessors.getSuccessRate)(percentageData)).toBe(0.855);
    });
    it('should keep decimal success rate as-is', () => {
      const decimalData = {
        performance: {
          success_rate: 0.92
        }
      };
      expect((0, _modelMetricsAccessors.getSuccessRate)(decimalData)).toBe(0.92);
    });
  });
  describe('usage metrics accessors', () => {
    it('should get total requests from canonical path', () => {
      const data = {
        usage: {
          total_requests: 1000
        }
      };
      expect((0, _modelMetricsAccessors.getTotalRequests)(data)).toBe(1000);
    });
    it('should get total requests from legacy path', () => {
      const legacy = {
        total_inferences: 500
      };
      expect((0, _modelMetricsAccessors.getTotalRequests)(legacy)).toBe(500);
    });
    it('should get total tokens', () => {
      const data = {
        usage: {
          total_tokens: 750
        }
      };
      expect((0, _modelMetricsAccessors.getTotalTokens)(data)).toBe(750);
    });
  });
  describe('tuning parameters', () => {
    it('should get temperature from canonical path', () => {
      const data = {
        tuning: {
          temperature: 0.8
        }
      };
      expect((0, _modelMetricsAccessors.getTemperature)(data)).toBe(0.8);
    });
    it('should get temperature from legacy path', () => {
      const legacy = {
        temperature: 0.5
      };
      expect((0, _modelMetricsAccessors.getTemperature)(legacy)).toBe(0.5);
    });
    it('should return default temperature', () => {
      expect((0, _modelMetricsAccessors.getTemperature)({})).toBe(0.7);
    });
  });
  describe('type coercion', () => {
    it('should coerce string numbers to numbers', () => {
      const stringData = {
        performance: {
          throughput_rps: '123.45',
          avg_latency_ms: '67'
        }
      };
      expect((0, _modelMetricsAccessors.getThroughputRps)(stringData)).toBe(123.45);
      expect((0, _modelMetricsAccessors.getAvgLatencyMs)(stringData)).toBe(67);
    });
    it('should coerce numbers to strings', () => {
      const numericData = {
        model: {
          name: 123,
          optimization_level: 456
        }
      };
      expect((0, _modelMetricsAccessors.getModelName)(numericData)).toBe('123');
      expect((0, _modelMetricsAccessors.getOptimizationLevel)(numericData)).toBe('456');
    });
    it('should handle invalid numeric strings', () => {
      const invalidData = {
        performance: {
          throughput_rps: 'not-a-number',
          avg_latency_ms: 'invalid'
        }
      };
      expect((0, _modelMetricsAccessors.getThroughputRps)(invalidData)).toBe(0); // Default fallback
      expect((0, _modelMetricsAccessors.getAvgLatencyMs)(invalidData)).toBe(0); // Default fallback
    });
  });
  describe('safeMetricsAccess utility', () => {
    it('should safely access nested properties', () => {
      const data = {
        deep: {
          nested: {
            value: 'found'
          }
        }
      };
      expect((0, _modelMetricsAccessors.safeMetricsAccess)(data, ['deep', 'nested', 'value'], 'default')).toBe('found');
    });
    it('should return default for missing nested properties', () => {
      const data = {
        some: 'value'
      };
      expect((0, _modelMetricsAccessors.safeMetricsAccess)(data, ['missing', 'nested', 'path'], 'fallback')).toBe('fallback');
    });
    it('should handle null/undefined objects', () => {
      expect((0, _modelMetricsAccessors.safeMetricsAccess)(null, ['any', 'path'], 'default')).toBe('default');
      expect((0, _modelMetricsAccessors.safeMetricsAccess)(undefined, ['any', 'path'], 'default')).toBe('default');
    });
  });
  describe('isNormalizedModelMetrics', () => {
    it('should identify normalized ModelMetricsShape', () => {
      const normalized = {
        model: {
          name: 'Test',
          provider: 'Test',
          optimization_level: 'Basic'
        },
        performance: {
          throughput_rps: 0,
          avg_latency_ms: 0,
          p95_latency_ms: 0,
          success_rate: 0
        },
        usage: {
          total_requests: 0,
          input_tokens: 0,
          output_tokens: 0,
          total_tokens: 0
        }
      };
      expect((0, _modelMetricsAccessors.isNormalizedModelMetrics)(normalized)).toBe(true);
    });
    it('should reject incomplete objects', () => {
      const incomplete = {
        model: {
          name: 'Test'
        }
        // Missing performance and usage
      };
      expect((0, _modelMetricsAccessors.isNormalizedModelMetrics)(incomplete)).toBe(false);
      expect((0, _modelMetricsAccessors.isNormalizedModelMetrics)(null)).toBe(false);
      expect((0, _modelMetricsAccessors.isNormalizedModelMetrics)({})).toBe(false);
    });
  });
  describe('one-time warning behavior', () => {
    it('should warn only once per field', () => {
      const legacyData = {
        optimizationLevel: 'Test'
      };

      // First access should call oneTimeLog
      (0, _modelMetricsAccessors.getOptimizationLevel)(legacyData);
      expect(mockOneTimeLog).toHaveBeenCalledTimes(1);

      // Second access should call oneTimeLog again but not log again
      (0, _modelMetricsAccessors.getOptimizationLevel)(legacyData);
      expect(mockOneTimeLog).toHaveBeenCalledTimes(2);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,