9b4c6ff11a424e827f512d177d1b50b8
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._unifiedConfig = exports.UnifiedConfig = void 0;
var _UnifiedConfig;
class UnifiedConfig {
  constructor() {
    this.config = {};
    this.defaults = {
      api: {
        // Use getEnvVar for robust env access
        baseUrl: (() => {
          try {
            // Use environment variables with fallback
            if (typeof process !== 'undefined' && process.env?.VITE_API_BASE_URL) {
              return process.env.VITE_API_BASE_URL;
            }
            if (typeof window !== 'undefined' && window.__VITE_ENV__?.VITE_API_BASE_URL) {
              return window.__VITE_ENV__.VITE_API_BASE_URL;
            }
            return 'http://localhost:8000'; // Updated default port
          } catch (e) {
            return 'http://localhost:8000';
          }
        })(),
        timeout: 10000,
        retries: 3
      },
      cache: {
        defaultTTL: 300000,
        // 5 minutes
        maxSize: 1000
      },
      logging: {
        level: 'info',
        maxEntries: 1000
      },
      features: {
        realTimeUpdates: true,
        analytics: true,
        notifications: true
      }
    };
    this.config = {
      ...this.defaults
    };
  }
  static getInstance() {
    if (!UnifiedConfig.instance) {
      UnifiedConfig.instance = new UnifiedConfig();
    }
    return UnifiedConfig.instance;
  }
  get(key, defaultValue) {
    const _keys = key.split('.');
    let value = this.config;
    for (const _k of _keys) {
      if (value && typeof value === 'object' && _k in value) {
        value = value[_k];
      } else {
        return defaultValue;
      }
    }
    return value;
  }
  set(key, value) {
    const _keys = key.split('.');
    let current = this.config;
    for (let i = 0; i < _keys.length - 1; i++) {
      const _k = _keys[i];
      if (!(_k in current) || typeof current[_k] !== 'object' || current[_k] === null) {
        current[_k] = {};
      }
      current = current[_k];
    }
    current[_keys[_keys.length - 1]] = value;
  }
  has(key) {
    const _keys = key.split('.');
    let value = this.config;
    for (const _k of _keys) {
      if (value && typeof value === 'object' && _k in value) {
        value = value[_k];
      } else {
        return false;
      }
    }
    return true;
  }
  delete(key) {
    const _keys = key.split('.');
    let current = this.config;
    for (let i = 0; i < _keys.length - 1; i++) {
      const _k = _keys[i];
      if (!(_k in current) || typeof current[_k] !== 'object' || current[_k] === null) {
        return;
      }
      current = current[_k];
    }
    delete current[_keys[_keys.length - 1]];
  }
  reset() {
    this.config = {
      ...this.defaults
    };
  }
  getAll() {
    return {
      ...this.config
    };
  }
  merge(newConfig) {
    this.config = this.deepMerge(this.config, newConfig);
  }
  deepMerge(target, source) {
    const result = {
      ...target
    };
    for (const _key in source) {
      if (source[_key] && typeof source[_key] === 'object' && !Array.isArray(source[_key])) {
        result[_key] = this.deepMerge(result[_key] || {}, source[_key]);
      } else {
        result[_key] = source[_key];
      }
    }
    return result;
  }

  // Add this method to match the d.ts and provide the API base URL
  getApiUrl() {
    return this.get('api.baseUrl', 'http://localhost:3001');
  }
}
exports.UnifiedConfig = UnifiedConfig;
_UnifiedConfig = UnifiedConfig;
UnifiedConfig.instance = void 0;
const _unifiedConfig = exports._unifiedConfig = UnifiedConfig.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVbmlmaWVkQ29uZmlnIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJkZWZhdWx0cyIsImFwaSIsImJhc2VVcmwiLCJwcm9jZXNzIiwiZW52IiwiVklURV9BUElfQkFTRV9VUkwiLCJ3aW5kb3ciLCJfX1ZJVEVfRU5WX18iLCJlIiwidGltZW91dCIsInJldHJpZXMiLCJjYWNoZSIsImRlZmF1bHRUVEwiLCJtYXhTaXplIiwibG9nZ2luZyIsImxldmVsIiwibWF4RW50cmllcyIsImZlYXR1cmVzIiwicmVhbFRpbWVVcGRhdGVzIiwiYW5hbHl0aWNzIiwibm90aWZpY2F0aW9ucyIsImdldEluc3RhbmNlIiwiaW5zdGFuY2UiLCJnZXQiLCJrZXkiLCJkZWZhdWx0VmFsdWUiLCJfa2V5cyIsInNwbGl0IiwidmFsdWUiLCJfayIsInNldCIsImN1cnJlbnQiLCJpIiwibGVuZ3RoIiwiaGFzIiwiZGVsZXRlIiwicmVzZXQiLCJnZXRBbGwiLCJtZXJnZSIsIm5ld0NvbmZpZyIsImRlZXBNZXJnZSIsInRhcmdldCIsInNvdXJjZSIsInJlc3VsdCIsIl9rZXkiLCJBcnJheSIsImlzQXJyYXkiLCJnZXRBcGlVcmwiLCJleHBvcnRzIiwiX1VuaWZpZWRDb25maWciLCJfdW5pZmllZENvbmZpZyJdLCJzb3VyY2VzIjpbIlVuaWZpZWRDb25maWcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW50ZXJmYWNlIENvbmZpZ1N0b3JlIHtcclxuICBba2V5OiBzdHJpbmddOiB1bmtub3duO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVW5pZmllZENvbmZpZyB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFVuaWZpZWRDb25maWc7XHJcbiAgcHJpdmF0ZSBjb25maWc6IENvbmZpZ1N0b3JlID0ge307XHJcbiAgcHJpdmF0ZSBkZWZhdWx0czogQ29uZmlnU3RvcmUgPSB7XHJcbiAgICBhcGk6IHtcclxuICAgICAgLy8gVXNlIGdldEVudlZhciBmb3Igcm9idXN0IGVudiBhY2Nlc3NcclxuICAgICAgYmFzZVVybDogKCgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBVc2UgZW52aXJvbm1lbnQgdmFyaWFibGVzIHdpdGggZmFsbGJhY2tcbiAgICAgICAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52Py5WSVRFX0FQSV9CQVNFX1VSTCkge1xuICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3MuZW52LlZJVEVfQVBJX0JBU0VfVVJMO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgKHdpbmRvdyBhcyBhbnkpLl9fVklURV9FTlZfXz8uVklURV9BUElfQkFTRV9VUkwpIHtcbiAgICAgICAgICAgIHJldHVybiAod2luZG93IGFzIGFueSkuX19WSVRFX0VOVl9fLlZJVEVfQVBJX0JBU0VfVVJMO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMCc7IC8vIFVwZGF0ZWQgZGVmYXVsdCBwb3J0XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMCc7XG4gICAgICAgIH1cclxuICAgICAgfSkoKSxcclxuICAgICAgdGltZW91dDogMTAwMDAsXHJcbiAgICAgIHJldHJpZXM6IDMsXHJcbiAgICB9LFxyXG4gICAgY2FjaGU6IHtcclxuICAgICAgZGVmYXVsdFRUTDogMzAwMDAwLCAvLyA1IG1pbnV0ZXNcclxuICAgICAgbWF4U2l6ZTogMTAwMCxcclxuICAgIH0sXHJcbiAgICBsb2dnaW5nOiB7XHJcbiAgICAgIGxldmVsOiAnaW5mbycsXHJcbiAgICAgIG1heEVudHJpZXM6IDEwMDAsXHJcbiAgICB9LFxyXG4gICAgZmVhdHVyZXM6IHtcclxuICAgICAgcmVhbFRpbWVVcGRhdGVzOiB0cnVlLFxyXG4gICAgICBhbmFseXRpY3M6IHRydWUsXHJcbiAgICAgIG5vdGlmaWNhdGlvbnM6IHRydWUsXHJcbiAgICB9LFxyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmNvbmZpZyA9IHsgLi4udGhpcy5kZWZhdWx0cyB9O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldEluc3RhbmNlKCk6IFVuaWZpZWRDb25maWcge1xyXG4gICAgaWYgKCFVbmlmaWVkQ29uZmlnLmluc3RhbmNlKSB7XHJcbiAgICAgIFVuaWZpZWRDb25maWcuaW5zdGFuY2UgPSBuZXcgVW5pZmllZENvbmZpZygpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFVuaWZpZWRDb25maWcuaW5zdGFuY2U7XHJcbiAgfVxyXG5cclxuICBnZXQ8VD4oa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZT86IFQpOiBUIHtcclxuICAgIGNvbnN0IF9rZXlzID0ga2V5LnNwbGl0KCcuJyk7XHJcbiAgICBsZXQgdmFsdWU6IGFueSA9IHRoaXMuY29uZmlnO1xyXG5cclxuICAgIGZvciAoY29uc3QgX2sgb2YgX2tleXMpIHtcclxuICAgICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgX2sgaW4gdmFsdWUpIHtcclxuICAgICAgICB2YWx1ZSA9IHZhbHVlW19rXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlIGFzIFQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdmFsdWUgYXMgVDtcclxuICB9XHJcblxyXG4gIHNldChrZXk6IHN0cmluZywgdmFsdWU6IHVua25vd24pOiB2b2lkIHtcclxuICAgIGNvbnN0IF9rZXlzID0ga2V5LnNwbGl0KCcuJyk7XHJcbiAgICBsZXQgY3VycmVudDogQ29uZmlnU3RvcmUgPSB0aGlzLmNvbmZpZztcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IF9rZXlzLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICBjb25zdCBfayA9IF9rZXlzW2ldO1xyXG4gICAgICBpZiAoIShfayBpbiBjdXJyZW50KSB8fCB0eXBlb2YgY3VycmVudFtfa10gIT09ICdvYmplY3QnIHx8IGN1cnJlbnRbX2tdID09PSBudWxsKSB7XHJcbiAgICAgICAgY3VycmVudFtfa10gPSB7fTtcclxuICAgICAgfVxyXG4gICAgICBjdXJyZW50ID0gY3VycmVudFtfa10gYXMgQ29uZmlnU3RvcmU7XHJcbiAgICB9XHJcblxyXG4gICAgY3VycmVudFtfa2V5c1tfa2V5cy5sZW5ndGggLSAxXV0gPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIGhhcyhrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgX2tleXMgPSBrZXkuc3BsaXQoJy4nKTtcclxuICAgIGxldCB2YWx1ZSA9IHRoaXMuY29uZmlnO1xyXG5cclxuICAgIGZvciAoY29uc3QgX2sgb2YgX2tleXMpIHtcclxuICAgICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgX2sgaW4gdmFsdWUpIHtcclxuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSBhcyBhbnkpW19rXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZShrZXk6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgY29uc3QgX2tleXMgPSBrZXkuc3BsaXQoJy4nKTtcclxuICAgIGxldCBjdXJyZW50OiBDb25maWdTdG9yZSA9IHRoaXMuY29uZmlnO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgX2tleXMubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IF9rID0gX2tleXNbaV07XHJcbiAgICAgIGlmICghKF9rIGluIGN1cnJlbnQpIHx8IHR5cGVvZiBjdXJyZW50W19rXSAhPT0gJ29iamVjdCcgfHwgY3VycmVudFtfa10gPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgY3VycmVudCA9IGN1cnJlbnRbX2tdIGFzIENvbmZpZ1N0b3JlO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZSBjdXJyZW50W19rZXlzW19rZXlzLmxlbmd0aCAtIDFdXTtcclxuICB9XHJcblxyXG4gIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5jb25maWcgPSB7IC4uLnRoaXMuZGVmYXVsdHMgfTtcclxuICB9XHJcblxyXG4gIGdldEFsbCgpOiBDb25maWdTdG9yZSB7XHJcbiAgICByZXR1cm4geyAuLi50aGlzLmNvbmZpZyB9O1xyXG4gIH1cclxuXHJcbiAgbWVyZ2UobmV3Q29uZmlnOiBDb25maWdTdG9yZSk6IHZvaWQge1xyXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLmRlZXBNZXJnZSh0aGlzLmNvbmZpZywgbmV3Q29uZmlnKSBhcyBDb25maWdTdG9yZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZGVlcE1lcmdlKHRhcmdldDogdW5rbm93biwgc291cmNlOiB1bmtub3duKTogdW5rbm93biB7XHJcbiAgICBjb25zdCByZXN1bHQgPSB7IC4uLih0YXJnZXQgYXMgYW55KSB9O1xyXG5cclxuICAgIGZvciAoY29uc3QgX2tleSBpbiBzb3VyY2UgYXMgYW55KSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICAoc291cmNlIGFzIGFueSlbX2tleV0gJiZcclxuICAgICAgICB0eXBlb2YgKHNvdXJjZSBhcyBhbnkpW19rZXldID09PSAnb2JqZWN0JyAmJlxyXG4gICAgICAgICFBcnJheS5pc0FycmF5KChzb3VyY2UgYXMgYW55KVtfa2V5XSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgcmVzdWx0W19rZXldID0gdGhpcy5kZWVwTWVyZ2UocmVzdWx0W19rZXldIHx8IHt9LCAoc291cmNlIGFzIGFueSlbX2tleV0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc3VsdFtfa2V5XSA9IChzb3VyY2UgYXMgYW55KVtfa2V5XTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICAvLyBBZGQgdGhpcyBtZXRob2QgdG8gbWF0Y2ggdGhlIGQudHMgYW5kIHByb3ZpZGUgdGhlIEFQSSBiYXNlIFVSTFxyXG4gIGdldEFwaVVybCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdhcGkuYmFzZVVybCcsICdodHRwOi8vbG9jYWxob3N0OjMwMDEnKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBfdW5pZmllZENvbmZpZyA9IFVuaWZpZWRDb25maWcuZ2V0SW5zdGFuY2UoKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUlPLE1BQU1BLGFBQWEsQ0FBQztFQXNDakJDLFdBQVdBLENBQUEsRUFBRztJQUFBLEtBcENkQyxNQUFNLEdBQWdCLENBQUMsQ0FBQztJQUFBLEtBQ3hCQyxRQUFRLEdBQWdCO01BQzlCQyxHQUFHLEVBQUU7UUFDSDtRQUNBQyxPQUFPLEVBQUUsQ0FBQyxNQUFNO1VBQ2QsSUFBSTtZQUNGO1lBQ0EsSUFBSSxPQUFPQyxPQUFPLEtBQUssV0FBVyxJQUFJQSxPQUFPLENBQUNDLEdBQUcsRUFBRUMsaUJBQWlCLEVBQUU7Y0FDcEUsT0FBT0YsT0FBTyxDQUFDQyxHQUFHLENBQUNDLGlCQUFpQjtZQUN0QztZQUNBLElBQUksT0FBT0MsTUFBTSxLQUFLLFdBQVcsSUFBS0EsTUFBTSxDQUFTQyxZQUFZLEVBQUVGLGlCQUFpQixFQUFFO2NBQ3BGLE9BQVFDLE1BQU0sQ0FBU0MsWUFBWSxDQUFDRixpQkFBaUI7WUFDdkQ7WUFDQSxPQUFPLHVCQUF1QixDQUFDLENBQUM7VUFDbEMsQ0FBQyxDQUFDLE9BQU9HLENBQUMsRUFBRTtZQUNWLE9BQU8sdUJBQXVCO1VBQ2hDO1FBQ0YsQ0FBQyxFQUFFLENBQUM7UUFDSkMsT0FBTyxFQUFFLEtBQUs7UUFDZEMsT0FBTyxFQUFFO01BQ1gsQ0FBQztNQUNEQyxLQUFLLEVBQUU7UUFDTEMsVUFBVSxF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