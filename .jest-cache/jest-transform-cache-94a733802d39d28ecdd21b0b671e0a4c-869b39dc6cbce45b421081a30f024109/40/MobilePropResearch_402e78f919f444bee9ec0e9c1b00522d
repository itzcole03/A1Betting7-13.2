0d812a571e8da62865af69b2c962c456
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _framerMotion = require("framer-motion");
var _lucideReact = require("lucide-react");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const MobilePropResearch = () => {
  const [opportunities, setOpportunities] = (0, _react.useState)([]);
  const [searchQuery, setSearchQuery] = (0, _react.useState)('');
  const [showFilters, setShowFilters] = (0, _react.useState)(false);
  const [selectedSort, setSelectedSort] = (0, _react.useState)('confidence');
  const [refreshing, setRefreshing] = (0, _react.useState)(false);
  const [expandedCard, setExpandedCard] = (0, _react.useState)(null);

  // Mock data optimized for mobile
  (0, _react.useEffect)(() => {
    const mockData = [{
      id: '1',
      player: 'LeBron James',
      team: 'LAL',
      opponent: 'GSW',
      market: 'Points',
      line: 25.5,
      pick: 'over',
      odds: -110,
      confidence: 94.7,
      edge: 20.8,
      projection: 28.4,
      timeToGame: '2h 15m',
      trend: 'up',
      isBookmarked: true,
      form: [31, 28, 24, 29, 27],
      volume: 847,
      sharpMoney: 'heavy'
    }, {
      id: '2',
      player: 'Luka Dončić',
      team: 'DAL',
      opponent: 'PHX',
      market: 'Assists',
      line: 8.5,
      pick: 'over',
      odds: -120,
      confidence: 91.2,
      edge: 24.8,
      projection: 10.1,
      timeToGame: '4h 30m',
      trend: 'up',
      isBookmarked: false,
      form: [12, 9, 8, 11, 10],
      volume: 632,
      sharpMoney: 'heavy'
    }, {
      id: '3',
      player: 'Jayson Tatum',
      team: 'BOS',
      opponent: 'MIA',
      market: 'Rebounds',
      line: 7.5,
      pick: 'under',
      odds: +105,
      confidence: 87.1,
      edge: 19.6,
      projection: 6.2,
      timeToGame: '1h 45m',
      trend: 'down',
      isBookmarked: false,
      form: [6, 5, 8, 6, 7],
      volume: 423,
      sharpMoney: 'moderate'
    }];
    setOpportunities(mockData);
  }, []);
  const handleRefresh = async () => {
    setRefreshing(true);
    // Simulate refresh delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    setRefreshing(false);
  };
  const toggleBookmark = id => {
    setOpportunities(prev => prev.map(opp => opp.id === id ? {
      ...opp,
      isBookmarked: !opp.isBookmarked
    } : opp));
  };
  const getConfidenceColor = confidence => {
    if (confidence >= 90) return 'text-green-500';
    if (confidence >= 80) return 'text-yellow-500';
    return 'text-orange-500';
  };
  const getSharpMoneyColor = sharpMoney => {
    switch (sharpMoney) {
      case 'heavy':
        return 'bg-red-500';
      case 'moderate':
        return 'bg-yellow-500';
      default:
        return 'bg-blue-500';
    }
  };
  const filteredOpportunities = opportunities.filter(opp => opp.player.toLowerCase().includes(searchQuery.toLowerCase()) || opp.team.toLowerCase().includes(searchQuery.toLowerCase()) || opp.market.toLowerCase().includes(searchQuery.toLowerCase())).sort((a, b) => {
    switch (selectedSort) {
      case 'confidence':
        return b.confidence - a.confidence;
      case 'edge':
        return b.edge - a.edge;
      case 'time':
        return a.timeToGame.localeCompare(b.timeToGame);
      default:
        return 0;
    }
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "min-h-screen bg-gradient-to-br from-slate-950 to-slate-900 text-white",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "sticky top-0 z-50 bg-slate-900/95 backdrop-blur-lg border-b border-slate-800",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "px-4 py-3",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex items-center justify-between mb-3",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "flex items-center space-x-2",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Brain, {
              className: "w-6 h-6 text-cyan-400"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h1", {
              className: "text-lg font-bold",
              children: "Prop Research"
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "flex items-center space-x-2",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
              onClick: handleRefresh,
              disabled: refreshing,
              className: "p-2 text-gray-400 hover:text-white transition-colors",
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.RefreshCw, {
                className: `w-5 h-5 ${refreshing ? 'animate-spin' : ''}`
              })
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
              onClick: () => setShowFilters(!showFilters),
              className: `p-2 rounded-lg transition-colors ${showFilters ? 'bg-cyan-500 text-white' : 'text-gray-400 hover:text-white'}`,
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.SlidersHorizontal, {
                className: "w-5 h-5"
              })
            })]
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "relative",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Search, {
            className: "absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
            type: "text",
            placeholder: "Search players, teams...",
            value: searchQuery,
            onChange: e => setSearchQuery(e.target.value),
            className: "w-full pl-10 pr-4 py-2.5 bg-slate-800 border border-slate-700 rounded-xl text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-1 focus:ring-cyan-400 transition-all"
          })]
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.AnimatePresence, {
        children: showFilters && /*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.motion.div, {
          initial: {
            height: 0,
            opacity: 0
          },
          animate: {
            height: 'auto',
            opacity: 1
          },
          exit: {
            height: 0,
            opacity: 0
          },
          className: "border-t border-slate-800 overflow-hidden",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "px-4 py-3",
            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "flex items-center justify-between",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                className: "text-sm text-gray-400",
                children: "Sort by:"
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                className: "flex space-x-2",
                children: [{
                  key: 'confidence',
                  label: 'Confidence'
                }, {
                  key: 'edge',
                  label: 'Edge'
                }, {
                  key: 'time',
                  label: 'Time'
                }].map(({
                  key,
                  label
                }) => /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                  onClick: () => setSelectedSort(key),
                  className: `px-3 py-1.5 text-xs font-medium rounded-lg transition-all ${selectedSort === key ? 'bg-cyan-500 text-white' : 'bg-slate-800 text-gray-400 hover:text-white'}`,
                  children: label
                }, key))
              })]
            })
          })
        })
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "px-4 py-3 bg-slate-900/50",
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "flex items-center justify-between text-sm",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex items-center space-x-4",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "flex items-center space-x-1",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: "w-2 h-2 bg-green-400 rounded-full animate-pulse"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              className: "text-gray-400",
              children: "Live"
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
            className: "text-gray-400",
            children: [filteredOpportunities.length, " opportunities"]
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-cyan-400 font-medium",
          children: ["Avg: ", (filteredOpportunities.reduce((sum, opp) => sum + opp.confidence, 0) / filteredOpportunities.length || 0).toFixed(1), "%"]
        })]
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "px-4 py-2 space-y-3",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.AnimatePresence, {
        children: filteredOpportunities.map((opp, index) => /*#__PURE__*/(0, _jsxRuntime.jsxs)(_framerMotion.motion.div, {
          initial: {
            opacity: 0,
            y: 20
          },
          animate: {
            opacity: 1,
            y: 0
          },
          exit: {
            opacity: 0,
            y: -20
          },
          transition: {
            delay: index * 0.05
          },
          className: "bg-slate-800/50 backdrop-blur-sm border border-slate-700 rounded-xl overflow-hidden",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "p-4",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "flex items-center justify-between mb-3",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "flex items-center space-x-3",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "w-10 h-10 bg-slate-700 rounded-full flex items-center justify-center",
                  children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                    className: "text-sm font-bold text-white",
                    children: opp.player.split(' ').map(n => n[0]).join('')
                  })
                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
                    className: "font-bold text-white text-sm",
                    children: opp.player
                  }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
                    className: "text-xs text-gray-400",
                    children: [opp.team, " vs ", opp.opponent]
                  })]
                })]
              }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "flex items-center space-x-2",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: `w-2 h-2 rounded-full ${getSharpMoneyColor(opp.sharpMoney)}`
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                  onClick: () => toggleBookmark(opp.id),
                  className: `p-1.5 rounded-lg transition-all ${opp.isBookmarked ? 'text-yellow-400 bg-yellow-500/20' : 'text-gray-400 hover:text-yellow-400'}`,
                  children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Bookmark, {
                    className: "w-4 h-4"
                  })
                })]
              })]
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "flex items-center justify-between mb-3",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "flex items-center space-x-2",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                  className: "text-white font-medium",
                  children: opp.market
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "flex items-center space-x-1 bg-slate-700 px-2 py-1 rounded-full",
                  children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                    className: "text-xs text-cyan-400 font-medium",
                    children: [opp.pick.toUpperCase(), " ", opp.line]
                  })
                })]
              }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "text-right",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                  className: "text-white font-bold",
                  children: [opp.odds > 0 ? '+' : '', opp.odds]
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "text-xs text-gray-400",
                  children: opp.timeToGame
                })]
              })]
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "grid grid-cols-3 gap-3 mb-3",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "bg-slate-900/50 rounded-lg p-2 text-center",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                  className: `text-lg font-bold ${getConfidenceColor(opp.confidence)}`,
                  children: [opp.confidence.toFixed(0), "%"]
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "text-xs text-gray-400",
                  children: "Confidence"
                })]
              }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "bg-slate-900/50 rounded-lg p-2 text-center",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                  className: "text-lg font-bold text-green-400",
                  children: ["+", opp.edge.toFixed(1), "%"]
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "text-xs text-gray-400",
                  children: "Edge"
                })]
              }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "bg-slate-900/50 rounded-lg p-2 text-center",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "text-lg font-bold text-white",
                  children: opp.projection.toFixed(1)
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "text-xs text-gray-400",
                  children: "Projection"
                })]
              })]
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "flex items-center justify-between",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "flex items-center space-x-2",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                  className: "text-xs text-gray-400",
                  children: "Trend:"
                }), opp.trend === 'up' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.TrendingUp, {
                  className: "w-4 h-4 text-green-400"
                }) : opp.trend === 'down' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.TrendingDown, {
                  className: "w-4 h-4 text-red-400"
                }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Minus, {
                  className: "w-4 h-4 text-gray-400"
                })]
              }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "flex items-center space-x-1",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                  className: "text-xs text-gray-400",
                  children: "Form:"
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "flex space-x-0.5",
                  children: opp.form.slice(-5).map((value, i) => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: `w-1.5 h-4 rounded-sm ${value > opp.line ? 'bg-green-400' : 'bg-red-400'}`,
                    style: {
                      opacity: 0.6 + i * 0.1
                    }
                  }, i))
                })]
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                onClick: () => setExpandedCard(expandedCard === opp.id ? null : opp.id),
                className: "p-1 text-gray-400 hover:text-white transition-colors",
                children: expandedCard === opp.id ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.ChevronUp, {
                  className: "w-4 h-4"
                }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.ChevronDown, {
                  className: "w-4 h-4"
                })
              })]
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.AnimatePresence, {
            children: expandedCard === opp.id && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_framerMotion.motion.div, {
              initial: {
                height: 0,
                opacity: 0
              },
              animate: {
                height: 'auto',
                opacity: 1
              },
              exit: {
                height: 0,
                opacity: 0
              },
              className: "border-t border-slate-700 px-4 py-3 bg-slate-900/30",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "grid grid-cols-2 gap-3 mb-3",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "text-xs text-gray-400 mb-1",
                    children: "Volume"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "text-sm font-medium text-white",
                    children: opp.volume.toLocaleString()
                  })]
                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "text-xs text-gray-400 mb-1",
                    children: "Sharp Money"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "text-sm font-medium text-white capitalize",
                    children: opp.sharpMoney
                  })]
                })]
              }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "flex space-x-2",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                  className: "flex-1 bg-gradient-to-r from-cyan-500 to-blue-500 text-white px-3 py-2 rounded-lg text-sm font-medium transition-all hover:scale-[0.98]",
                  children: "View Details"
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                  className: "flex-1 bg-slate-700 text-white px-3 py-2 rounded-lg text-sm font-medium transition-all hover:bg-slate-600",
                  children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Share2, {
                    className: "w-4 h-4 mx-auto"
                  })
                })]
              })]
            })
          })]
        }, opp.id))
      })
    }), filteredOpportunities.length === 0 && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "text-center py-12 px-4",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "w-16 h-16 bg-slate-800 rounded-full flex items-center justify-center mx-auto mb-4",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Search, {
          className: "w-8 h-8 text-gray-400"
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
        className: "text-lg font-bold text-white mb-2",
        children: "No opportunities found"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
        className: "text-gray-400 mb-4",
        children: "Try adjusting your search criteria"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
        onClick: () => setSearchQuery(''),
        className: "px-6 py-3 bg-cyan-500 text-white rounded-xl font-medium hover:bg-cyan-600 transition-colors",
        children: "Clear Search"
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "h-16"
    })]
  });
};
var _default = exports.default = MobilePropResearch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,