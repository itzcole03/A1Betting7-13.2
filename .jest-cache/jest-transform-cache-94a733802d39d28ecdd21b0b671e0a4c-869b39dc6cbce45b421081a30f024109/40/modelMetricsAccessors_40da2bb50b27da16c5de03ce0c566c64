37398c65c1d9b8a33e27e8cbcb46ea4a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTotalTokens = exports.getTotalRequests = exports.getThroughputRps = exports.getTemperature = exports.getSuccessRate = exports.getProvider = exports.getP95LatencyMs = exports.getOptimizationLevel = exports.getModelName = exports.getAvgLatencyMs = void 0;
exports.isNormalizedModelMetrics = isNormalizedModelMetrics;
exports.safeMetricsAccess = safeMetricsAccess;
var _oneTimeLog = require("./oneTimeLog");
// NOTE: All model/inference metric field access must go through these accessors. Do not access raw nested fields directly.

/**
 * Model metrics accessor library to prevent property access crashes
 * Provides safe field access with legacy mapping and dev warnings
 * 
 * @module modelMetricsAccessors
 */

/**
 * Generic field accessor descriptor
 */

/**
 * Creates a safe field accessor with legacy fallback
 */
function createFieldAccessor(descriptor) {
  return obj => {
    // Handle null/undefined objects
    if (!obj || typeof obj !== 'object') {
      return descriptor.default;
    }
    const rawObj = obj;

    // Try to get from canonical ModelMetricsShape first (post-normalization)
    let current = rawObj;
    let foundCanonical = true;
    for (const segment of descriptor.canonical) {
      if (current && typeof current === 'object' && segment in current) {
        current = current[segment];
      } else {
        foundCanonical = false;
        break;
      }
    }
    if (!(foundCanonical && current !== undefined)) {
      // Try legacy paths if canonical not found
      let usedLegacy = false;
      if (descriptor.legacy) {
        for (const legacyPath of descriptor.legacy) {
          let legacyCurrent = rawObj;
          let foundLegacy = true;
          for (const segment of legacyPath) {
            if (legacyCurrent && typeof legacyCurrent === 'object' && segment in legacyCurrent) {
              legacyCurrent = legacyCurrent[segment];
            } else {
              foundLegacy = false;
              break;
            }
          }
          if (foundLegacy && legacyCurrent !== undefined) {
            usedLegacy = true;
            current = legacyCurrent;
            break;
          }
        }
      }

      // Log one-time development warning for legacy usage
      if (usedLegacy) {
        // Check if we're in a development or test environment
        const isDevOrTest = process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test' || typeof jest !== 'undefined';
        if (isDevOrTest) {
          (0, _oneTimeLog.oneTimeLog)(descriptor.name, () => {
            // eslint-disable-next-line no-console
            console.warn(`[AIMetricsCompat] Field "${descriptor.name}" accessed via legacy path. Consider using normalized ModelMetricsShape for consistent access.`);
          }, descriptor.name);
        }
      } // If neither canonical nor legacy path was found, clear current so defaults are returned
      if (!foundCanonical && !usedLegacy) {
        current = undefined;
      }
    } else {
      // canonical found; leave current as-is
    }

    // Apply transform if available
    if (current !== undefined && descriptor.transform) {
      return descriptor.transform(current);
    }

    // Type coercion for direct values (apply for canonical and legacy)
    if (current !== undefined) {
      if (descriptor.type === 'number') {
        const num = Number(current);
        return isFinite(num) ? num : descriptor.default;
      } else {
        return String(current);
      }
    }
    return descriptor.default;
  };
}

/**
 * Safe accessors for model metadata
 */
const getOptimizationLevel = exports.getOptimizationLevel = createFieldAccessor({
  name: 'optimization_level',
  canonical: ['model', 'optimization_level'],
  legacy: [['optimizationLevel'], ['opt_level'], ['optimization_mode'], ['system_info', 'optimization_level'], ['optimizationTier'], ['optTier']],
  type: 'string',
  default: 'Basic'
});
const getModelName = exports.getModelName = createFieldAccessor({
  name: 'model_name',
  canonical: ['model', 'name'],
  legacy: [['modelName'], ['model_name'], ['name']],
  type: 'string',
  default: 'Unknown Model'
});
const getProvider = exports.getProvider = createFieldAccessor({
  name: 'provider',
  canonical: ['model', 'provider'],
  legacy: [['provider'], ['model_provider'], ['modelProvider']],
  type: 'string',
  default: 'Unknown Provider'
});

/**
 * Safe accessors for performance metrics
 */
const getThroughputRps = exports.getThroughputRps = createFieldAccessor({
  name: 'throughput_rps',
  canonical: ['performance', 'throughput_rps'],
  legacy: [['throughput'], ['throughput_per_second'], ['rps']],
  type: 'number',
  default: 0
});
const getAvgLatencyMs = exports.getAvgLatencyMs = createFieldAccessor({
  name: 'avg_latency_ms',
  canonical: ['performance', 'avg_latency_ms'],
  legacy: [['avg_latency'], ['latency_ms'], ['avg_latency_ms']],
  type: 'number',
  default: 0
});
const getP95LatencyMs = exports.getP95LatencyMs = createFieldAccessor({
  name: 'p95_latency_ms',
  canonical: ['performance', 'p95_latency_ms'],
  legacy: [['p95_latency'], ['p95_latency_ms']],
  type: 'number',
  default: 0
});
const getSuccessRate = exports.getSuccessRate = createFieldAccessor({
  name: 'success_rate',
  canonical: ['performance', 'success_rate'],
  legacy: [['success_rate']],
  type: 'number',
  default: 0,
  transform: value => {
    const rate = Number(value);
    if (isFinite(rate)) {
      // Normalize to 0-1 range if it appears to be a percentage
      return rate > 1 ? rate / 100 : rate;
    }
    return 0;
  }
});

/**
 * Safe accessors for usage metrics
 */
const getTotalRequests = exports.getTotalRequests = createFieldAccessor({
  name: 'total_requests',
  canonical: ['usage', 'total_requests'],
  legacy: [['total_requests'], ['total_inferences'], ['totalRequests']],
  type: 'number',
  default: 0
});
const getTotalTokens = exports.getTotalTokens = createFieldAccessor({
  name: 'total_tokens',
  canonical: ['usage', 'total_tokens'],
  legacy: [['total_tokens'], ['totalTokens']],
  type: 'number',
  default: 0,
  transform: value => {
    const tokens = Number(value);
    if (isFinite(tokens) && tokens > 0) {
      return tokens;
    }

    // Try to derive from input + output tokens if total is missing/zero
    // This would require access to the parent object, but for now we'll return the default
    return 0;
  }
});

/**
 * Safe accessors for tuning parameters
 */
const getTemperature = exports.getTemperature = createFieldAccessor({
  name: 'temperature',
  canonical: ['tuning', 'temperature'],
  legacy: [['temperature']],
  type: 'number',
  default: 0.7
});

/**
 * Utility function to safely access nested metrics without crashes
 * Use this for one-off field access that doesn't need a dedicated accessor
 */
function safeMetricsAccess(obj, path, defaultValue) {
  if (!obj || typeof obj !== 'object') {
    return defaultValue;
  }
  let current = obj;
  for (const segment of path) {
    if (current && typeof current === 'object' && segment in current) {
      current = current[segment];
    } else {
      return defaultValue;
    }
  }
  return current !== undefined ? current : defaultValue;
}

/**
 * Helper to check if metrics object has been normalized
 */
function isNormalizedModelMetrics(obj) {
  if (!obj || typeof obj !== 'object') {
    return false;
  }
  const typed = obj;
  return !!(typed.model && typeof typed.model === 'object' && typed.performance && typeof typed.performance === 'object' && typed.usage && typeof typed.usage === 'object');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,