21574b8813cdabcfa7947263544964a5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__resetPerformanceGuardsForTests = __resetPerformanceGuardsForTests;
exports.getNavigationTiming = getNavigationTiming;
exports.initWebVitals = initWebVitals;
var _webVitals = require("web-vitals");
/*
 * Normalized performance metrics utilities (PR1 Performance Metrics Correction)
 * Provides:
 *  - Stable navigation timing (PerformanceNavigationTiming preferred)
 *  - Legacy fallback (performance.timing) with clamped non-negative values
 *  - Single initialization guard for Web Vitals collection
 *  - Consistent totalLoadTime calculation (duration) avoiding mixed time origins
 *  - Safe numeric coercion & validation helpers
 */

// Internal guard flags
let webVitalsInitialized = false;
let lcpRecorded = false; // ensure only first LCP forwarded

// Clamp helper ensuring non-negative finite numbers
function clampNonNegative(value) {
  if (value == null) return undefined;
  if (!Number.isFinite(value)) return undefined;
  return value < 0 ? 0 : value;
}
function getNavigationTiming() {
  try {
    // Prefer modern PerformanceNavigationTiming entries
    const navEntries = performance.getEntriesByType('navigation');
    if (navEntries && navEntries.length > 0) {
      const nav = navEntries[0];
      const totalLoadTime = clampNonNegative(nav.duration) ?? 0;
      const metrics = {
        startTime: nav.startTime,
        // should be 0 for navigation entries
        domContentLoaded: clampNonNegative(nav.domContentLoadedEventEnd - nav.startTime) ?? 0,
        firstPaint: undefined,
        // can be populated if paint entries queried outside
        firstContentfulPaint: undefined,
        totalLoadTime,
        type: nav.type,
        timestamp: Date.now(),
        source: 'navigation-timing'
      };
      return metrics;
    }

    // Legacy fallback using performance.timing (deprecated but still in some browsers)
    // Use indexed access to avoid any cast while acknowledging legacy API
    const perfObj = performance;
    const t = perfObj.timing;
    if (t) {
      const navigationStart = t.navigationStart || 0;
      const domContentLoaded = clampNonNegative(t.domContentLoadedEventEnd - navigationStart) ?? 0;
      const loadEventEnd = clampNonNegative(t.loadEventEnd - navigationStart) ?? 0;
      const metrics = {
        startTime: 0,
        domContentLoaded,
        firstPaint: undefined,
        firstContentfulPaint: undefined,
        totalLoadTime: loadEventEnd,
        type: 'navigate',
        timestamp: Date.now(),
        source: 'legacy-timing'
      };
      return metrics;
    }
    return null;
  } catch {
    return null;
  }
}
// Initialize web vitals a single time; returns true on first init, false otherwise
function initWebVitals(options = {}) {
  if (webVitalsInitialized && !options.force) return false;
  webVitalsInitialized = true;
  if (options.force) {
    // allow tests to reset recording state
    lcpRecorded = false;
  }
  const emit = metric => {
    if (!options.onMetric) return;
    // Safely read navigation entries: mocked getEntriesByType may return undefined
    let navigationType = undefined;
    try {
      const entries = typeof performance.getEntriesByType === 'function' && performance.getEntriesByType('navigation') || [];
      if (Array.isArray(entries) && entries.length > 0 && entries[0] && entries[0].type) {
        navigationType = entries[0].type;
      }
    } catch (e) {
      // ignore and leave navigationType undefined
    }
    const record = {
      name: metric.name,
      value: clampNonNegative(metric.value) ?? 0,
      rating: metric.rating,
      delta: metric.delta,
      id: metric.id,
      navigationType,
      timestamp: Date.now()
    };
    if (record.name === 'LCP') {
      if (lcpRecorded) return; // swallow duplicates
      lcpRecorded = true;
    }
    options.onMetric(record);
  };

  // Register web-vitals listeners
  (0, _webVitals.onCLS)(emit);
  (0, _webVitals.onINP)(emit);
  (0, _webVitals.onLCP)(emit);
  (0, _webVitals.onFCP)(emit);
  (0, _webVitals.onTTFB)(emit);

  // Optional navigation metrics emission
  if (options.includeNavigationMetrics) {
    const nav = getNavigationTiming();
    if (nav && options.onMetric) {
      options.onMetric({
        name: 'navigation-total-load-time',
        value: nav.totalLoadTime,
        timestamp: nav.timestamp
      });
      options.onMetric({
        name: 'navigation-dom-content-loaded',
        value: nav.domContentLoaded,
        timestamp: nav.timestamp
      });
    }
  }
  return true;
}

// Exposed for tests to reset state safely
function __resetPerformanceGuardsForTests() {
  webVitalsInitialized = false;
  lcpRecorded = false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,