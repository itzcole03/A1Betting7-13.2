{"version":3,"names":["_healthAccessors","require","_ensureHealthShape","consoleWarnSpy","originalNodeEnv","process","env","NODE_ENV","beforeEach","jest","spyOn","console","mockImplementation","afterEach","mockRestore","describe","it","health","performance","cache_hit_rate","expect","getCacheHitRate","toBe","not","toHaveBeenCalled","hit_rate","toHaveBeenCalledWith","infrastructure","cache","hit_rate_percent","cache_performance","undefined","uptime","hasPerformanceSection","metrics","type","invalid","result","safeIterateCacheMetrics","m","toEqual","messyHealth","normalizedHealth","ensureHealthShape","cache_type","getCacheType"],"sources":["healthAccessors.test.ts"],"sourcesContent":["/**\r\n * Regression tests for hit_rate runtime error fixes\r\n * Ensures unified accessors handle various hit_rate data structures safely\r\n */\r\n\r\nimport { getCacheHitRate, hasPerformanceSection, safeIterateCacheMetrics, debugHealthStructure, getCacheType } from '../healthAccessors';\r\nimport { ensureHealthShape } from '../ensureHealthShape';\r\n\r\n// Suppress console warnings during tests and mock NODE_ENV\r\nlet consoleWarnSpy: jest.SpyInstance;\r\nconst originalNodeEnv = process.env.NODE_ENV;\r\n\r\nbeforeEach(() => {\r\n  consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation(() => {});\r\n  // Set NODE_ENV to development for warning tests\r\n  process.env.NODE_ENV = 'development';\r\n});\r\n\r\nafterEach(() => {\r\n  consoleWarnSpy.mockRestore();\r\n  process.env.NODE_ENV = originalNodeEnv;\r\n});\r\n\r\ndescribe('getCacheHitRate', () => {\r\n  describe('Priority 1: Canonical cache_hit_rate', () => {\r\n    it('should return cache_hit_rate when present', () => {\r\n      const health = {\r\n        performance: { cache_hit_rate: 85.5 },\r\n      };\r\n      \r\n      expect(getCacheHitRate(health)).toBe(85.5);\r\n      expect(consoleWarnSpy).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Priority 2: Legacy performance.hit_rate', () => {\r\n    it('should return performance.hit_rate and warn when cache_hit_rate missing', () => {\r\n      const health = {\r\n        performance: { hit_rate: 72.3 }\r\n      };\r\n\r\n      expect(getCacheHitRate(health)).toBe(72.3);\r\n      expect(consoleWarnSpy).toHaveBeenCalledWith(\r\n        '[HealthCompat] Using legacy performance.hit_rate, consider migrating to cache_hit_rate'\r\n      );\r\n    });\r\n\r\n    it('should prefer cache_hit_rate over hit_rate when both exist', () => {\r\n      const health = {\r\n        performance: { \r\n          cache_hit_rate: 90.5, \r\n          hit_rate: 75.2 \r\n        }\r\n      };\r\n\r\n      expect(getCacheHitRate(health)).toBe(90.5);\r\n      expect(consoleWarnSpy).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Priority 3: Phase 3 infrastructure structure', () => {\r\n    it('should return infrastructure.cache.hit_rate_percent and warn', () => {\r\n      const health = {\r\n        infrastructure: {\r\n          cache: { hit_rate_percent: 88.7 }\r\n        }\r\n      };\r\n\r\n      expect(getCacheHitRate(health)).toBe(88.7);\r\n      expect(consoleWarnSpy).toHaveBeenCalledWith(\r\n        '[HealthCompat] Using infrastructure.cache.hit_rate_percent, consider migrating to performance.cache_hit_rate'\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Priority 4: Metrics structure', () => {\r\n    it('should return cache_performance.hit_rate', () => {\r\n      const health = {\r\n        cache_performance: { hit_rate: 92.1 }\r\n      };\r\n\r\n      expect(getCacheHitRate(health)).toBe(92.1);\r\n      expect(consoleWarnSpy).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Priority 5: Flat legacy structure', () => {\r\n    it('should return flat hit_rate and warn', () => {\r\n      const health = {\r\n        hit_rate: 78.9\r\n      };\r\n\r\n      expect(getCacheHitRate(health)).toBe(78.9);\r\n      expect(consoleWarnSpy).toHaveBeenCalledWith(\r\n        '[HealthCompat] Using flat hit_rate, consider migrating to performance.cache_hit_rate'\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Default cases', () => {\r\n    it('should return 0 for null/undefined', () => {\r\n      expect(getCacheHitRate(null)).toBe(0);\r\n      expect(getCacheHitRate(undefined)).toBe(0);\r\n      expect(consoleWarnSpy).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should return 0 when no hit_rate fields present', () => {\r\n      const health = {\r\n        performance: { uptime: 3600 }\r\n      };\r\n\r\n      expect(getCacheHitRate(health)).toBe(0);\r\n      expect(consoleWarnSpy).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('hasPerformanceSection', () => {\r\n  it('should return true for canonical performance section', () => {\r\n    const health = { performance: { cache_hit_rate: 85 } };\r\n    expect(hasPerformanceSection(health)).toBe(true);\r\n  });\r\n\r\n  it('should return true for infrastructure section', () => {\r\n    const health = { infrastructure: { cache: { hit_rate_percent: 90 } } };\r\n    expect(hasPerformanceSection(health)).toBe(true);\r\n  });\r\n\r\n  it('should return true for cache_performance section', () => {\r\n    const health = { cache_performance: { hit_rate: 88 } };\r\n    expect(hasPerformanceSection(health)).toBe(true);\r\n  });\r\n\r\n  it('should return true for flat hit_rate', () => {\r\n    const health = { hit_rate: 75 };\r\n    expect(hasPerformanceSection(health)).toBe(true);\r\n  });\r\n\r\n  it('should return false for empty objects', () => {\r\n    expect(hasPerformanceSection({})).toBe(false);\r\n    expect(hasPerformanceSection(null)).toBe(false);\r\n    expect(hasPerformanceSection(undefined)).toBe(false);\r\n  });\r\n});\r\n\r\ndescribe('safeIterateCacheMetrics', () => {\r\n  it('should filter valid metrics and return mapped results', () => {\r\n    const metrics = [\r\n      { hit_rate: 85.5, type: 'memory' },\r\n      { hit_rate: 92.1, type: 'redis' },\r\n      { invalid: 'data' },\r\n      null\r\n    ];\r\n\r\n    const result = safeIterateCacheMetrics(metrics, (m) => m.type);\r\n    expect(result).toEqual(['memory', 'redis']);\r\n  });\r\n\r\n  it('should return empty array for null/undefined input', () => {\r\n    expect(safeIterateCacheMetrics(null, (m) => m)).toEqual([]);\r\n    expect(safeIterateCacheMetrics(undefined, (m) => m)).toEqual([]);\r\n  });\r\n\r\n  it('should return empty array for non-array input', () => {\r\n    expect(safeIterateCacheMetrics('not-array', (m) => m)).toEqual([]);\r\n    expect(safeIterateCacheMetrics({}, (m) => m)).toEqual([]);\r\n  });\r\n});\r\n\r\ndescribe('Integration with ensureHealthShape', () => {\r\n  it('should work with ensureHealthShape output', () => {\r\n    const messyHealth = {\r\n      performance: { hit_rate: 78.9 }\r\n    };\r\n    \r\n    const normalizedHealth = ensureHealthShape(messyHealth);\r\n    const result = getCacheHitRate(normalizedHealth);\r\n    \r\n    expect(result).toBe(78.9);\r\n  });\r\n});\r\n\r\ndescribe('getCacheType', () => {\r\n  it('should return performance.cache_type when present', () => {\r\n    const health = {\r\n      performance: { cache_type: 'Redis' }\r\n    };\r\n    \r\n    expect(getCacheType(health)).toBe('Redis');\r\n  });\r\n\r\n  it('should return flat cache_type when performance missing', () => {\r\n    const health = {\r\n      cache_type: 'Memory'\r\n    };\r\n    \r\n    expect(getCacheType(health)).toBe('Memory');\r\n  });\r\n\r\n  it('should prefer performance.cache_type over flat cache_type', () => {\r\n    const health = {\r\n      performance: { cache_type: 'Redis' },\r\n      cache_type: 'Memory'\r\n    };\r\n    \r\n    expect(getCacheType(health)).toBe('Redis');\r\n  });\r\n\r\n  it('should return \"Unknown\" for null/undefined', () => {\r\n    expect(getCacheType(null)).toBe('Unknown');\r\n    expect(getCacheType(undefined)).toBe('Unknown');\r\n  });\r\n\r\n  it('should return \"Unknown\" when no cache_type fields present', () => {\r\n    const health = {\r\n      performance: { cache_hit_rate: 85 }\r\n    };\r\n    \r\n    expect(getCacheType(health)).toBe('Unknown');\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}