835bfa56207b2514b3d640cce07d4397
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _enhancedLogger = require("../../utils/enhancedLogger");
var _HttpClient = require("../../services/HttpClient");
var _BetSlipComponent = require("../betting/BetSlipComponent");
var _DirectDataFetchTest = _interopRequireDefault(require("../debug/DirectDataFetchTest"));
var _FeaturedPropsServiceTest = _interopRequireDefault(require("../debug/FeaturedPropsServiceTest"));
var _SimpleDirectAPITest = _interopRequireDefault(require("../debug/SimpleDirectAPITest"));
var _SimplePropOllamaDebugContainer = _interopRequireDefault(require("../debug/SimplePropOllamaDebugContainer"));
var _EnhancedErrorBoundary = _interopRequireDefault(require("../EnhancedErrorBoundary"));
var _PropFilters = require("../filters/PropFilters");
var _usePropOllamaState = require("../hooks/usePropOllamaState");
var _PropList = require("../lists/PropList");
var _LoadingOverlay = _interopRequireDefault(require("../LoadingOverlay"));
var _PerformancePanel = require("../performance/PerformancePanel");
var _PropSorting = require("../sorting/PropSorting");
var _GameStatsPanel = require("../stats/GameStatsPanel");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * Main PropOllama Container - Replaces the monolithic PropOllamaUnified component
 *
 * This is the new modular architecture that breaks down the massive 2427-line component
 * into manageable, reusable pieces with proper separation of concerns.
 */const PropOllamaContainer = () => {
  _enhancedLogger.enhancedLogger.debug('PropOllamaContainer', 'render', 'Component render');

  // Make a test API call to verify the component is actually running
  _react.default.useEffect(() => {
    _enhancedLogger.enhancedLogger.debug('PropOllamaContainer', 'healthCheck', 'useEffect running - making test call');
    (0, _HttpClient.httpFetch)('/api/v2/health').then(response => response.json()).then(data => {
      _enhancedLogger.enhancedLogger.info('PropOllamaContainer', 'healthCheck', 'Test call success', {
        data
      });
    }).catch(error => {
      _enhancedLogger.enhancedLogger.error('PropOllamaContainer', 'healthCheck', 'Test call failed', undefined, error);
    });
  }, []);

  // State and actions hooks
  const [state, actions] = (0, _usePropOllamaState.usePropOllamaState)();

  // Derive BetSlipItem[] from SelectedProp[] to satisfy BetSlipComponent props
  const betSlipItems = _react.default.useMemo(() => {
    try {
      return (state.selectedProps || []).map(sp => ({
        opportunityId: sp.id ?? sp.opportunityId ?? String(sp?.playerId ?? sp?.key ?? ''),
        opportunity: sp,
        stake: typeof sp.stake === 'number' ? sp.stake : state.entryAmount || 0,
        potentialPayout: typeof sp.potentialPayout === 'number' ? sp.potentialPayout : 0,
        addedAt: sp.addedAt ?? Date.now()
      }));
    } catch (e) {
      return [];
    }
  }, [state.selectedProps, state.entryAmount]);

  // Memoized handlers for children
  const handleFiltersChange = _react.default.useCallback(actions.updateFilters, [actions]);
  const handleSortingChange = _react.default.useCallback(actions.updateSorting, [actions]);
  const handleGameSelect = _react.default.useCallback(game => {
    if (game) actions.setSelectedGame(game);
  }, [actions]);
  const handleStatsGameSelect = _react.default.useCallback(gameId => {
    const game = state.upcomingGames.find(g => g.game_id === gameId);
    if (game) {
      actions.setSelectedGame({
        game_id: gameId,
        home: game.home,
        away: game.away
      });
    }
  }, [actions, state.upcomingGames]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_EnhancedErrorBoundary.default, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "prop-ollama-container text-white",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "header-section",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h1", {
          className: "text-3xl font-bold mb-6 text-center text-white",
          children: "AI Sports Analytics & Prop Generation"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformancePanel.PerformancePanel, {
          connectionHealth: {
            status: state.connectionHealth.isHealthy ? 'healthy' : 'error',
            latency: state.connectionHealth.latency,
            lastCheck: new Date(state.connectionHealth.lastChecked)
          },
          performanceMetrics: {}
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "debug-section mb-8",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "grid grid-cols-1 lg:grid-cols-3 gap-4 mb-6",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_DirectDataFetchTest.default, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_FeaturedPropsServiceTest.default, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_SimpleDirectAPITest.default, {})]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_SimplePropOllamaDebugContainer.default, {})]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "control-panel grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "filters-section bg-slate-800/50 backdrop-blur-sm p-6 rounded-lg border border-slate-600",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_PropFilters.PropFilters, {
            filters: state.filters,
            onFiltersChange: handleFiltersChange,
            sports: ['All', 'NBA', 'NFL', 'NHL', 'MLB'],
            statTypes: ['All', 'Points', 'Rebounds', 'Assists', 'Home Runs', 'RBIs', 'Hits'],
            upcomingGames: state.upcomingGames,
            selectedGame: state.selectedGame,
            onGameSelect: handleGameSelect
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "sorting-section bg-slate-800/50 backdrop-blur-sm p-6 rounded-lg border border-slate-600",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_PropSorting.PropSorting, {
            sorting: state.sorting,
            onSortingChange: handleSortingChange
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "stats-section bg-slate-800/50 backdrop-blur-sm p-6 rounded-lg border border-slate-600",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_GameStatsPanel.GameStatsPanel, {
            selectedGameId: state.selectedGame?.game_id || null,
            onGameSelect: handleStatsGameSelect,
            games: state.upcomingGames,
            loading: state.isLoading
          })
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "main-content grid grid-cols-1 xl:grid-cols-4 gap-6",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "props-section xl:col-span-3 bg-slate-800/30 backdrop-blur-sm rounded-lg border border-slate-600 overflow-hidden",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_PropList.PropList, {
            props: state.projections,
            loading: state.isLoading,
            expandedRowKey: state.displayOptions.expandedRowKey,
            onExpandToggle: key => actions.updateDisplayOptions({
              expandedRowKey: key
            }),
            onAnalysisRequest: async prop => {
              _enhancedLogger.enhancedLogger.info('PropOllamaContainer', 'onAnalysisRequest', 'Analysis requested for prop', {
                prop
              });
              return Promise.resolve();
            },
            enhancedAnalysisCache: state.enhancedAnalysisCache,
            loadingAnalysis: state.loadingAnalysis,
            sortBy: state.sorting.sortBy,
            searchTerm: state.filters.searchTerm,
            useVirtualization: state.displayOptions.useVirtualization,
            forceVirtualization: false
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "betslip-section xl:col-span-1 bg-slate-800/50 backdrop-blur-sm rounded-lg border border-slate-600 p-6",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_BetSlipComponent.BetSlipComponent, {
            selectedProps: betSlipItems,
            entryAmount: state.entryAmount,
            onRemoveProp: actions.removeSelectedProp,
            onEntryAmountChange: actions.setEntryAmount,
            onClearSlip: () => actions.setSelectedProps([]),
            onPlaceBet: () => {
              _enhancedLogger.enhancedLogger.info('PropOllamaContainer', 'onPlaceBet', 'Placing bet', {
                selectedProps: state.selectedProps
              });
            }
          })
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoadingOverlay.default, {
        isVisible: !!state.isLoading,
        stage: state.loadingStage?.stage === 'filtering' || state.loadingStage?.stage === 'sorting' ? 'processing' : state.loadingStage?.stage === 'rendering' || state.loadingStage?.stage === 'complete' ? 'processing' : state.loadingStage?.stage || 'fetching',
        sport: state.filters.selectedSport,
        message: state.loadingMessage
      })]
    })
  });
};
var _default = exports.default = PropOllamaContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,