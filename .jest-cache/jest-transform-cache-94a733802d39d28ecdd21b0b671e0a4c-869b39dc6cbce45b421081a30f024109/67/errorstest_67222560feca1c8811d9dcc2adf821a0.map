{"version":3,"names":["_errors","require","describe","test","error","PropOllamaError","networkError","expect","type","toBe","PropOllamaErrorType","NETWORK_ERROR","message","retryable","fallbackAvailable","timeoutError","TIMEOUT_ERROR","llmUnavailableError","LLM_UNAVAILABLE","dataFetchError","DATA_FETCH_ERROR","insufficientDataError","INSUFFICIENT_DATA","parsingError","PARSING_ERROR","unknownError","UNKNOWN_ERROR","genericError","Error","propError","fromError","toBeInstanceOf","axiosError","isAxiosError","response","status","data","detail","undefined","code","url","statusCode","details","toEqual","originalError","convertedError"],"sources":["errors.test.ts"],"sourcesContent":["import { PropOllamaError, PropOllamaErrorType } from '../errors';\r\n\r\ndescribe('PropOllamaError', () => {\r\n  test('creates network error', () => {\r\n    const error = PropOllamaError.networkError('Network error');\r\n    \r\n    expect(error.type).toBe(PropOllamaErrorType.NETWORK_ERROR);\r\n    expect(error.message).toBe('Network error');\r\n    expect(error.retryable).toBe(true);\r\n    expect(error.fallbackAvailable).toBe(true);\r\n  });\r\n  \r\n  test('creates timeout error', () => {\r\n    const error = PropOllamaError.timeoutError('Timeout error');\r\n    \r\n    expect(error.type).toBe(PropOllamaErrorType.TIMEOUT_ERROR);\r\n    expect(error.message).toBe('Timeout error');\r\n    expect(error.retryable).toBe(true);\r\n    expect(error.fallbackAvailable).toBe(true);\r\n  });\r\n  \r\n  test('creates LLM unavailable error', () => {\r\n    const error = PropOllamaError.llmUnavailableError('LLM service is unavailable');\r\n    \r\n    expect(error.type).toBe(PropOllamaErrorType.LLM_UNAVAILABLE);\r\n    expect(error.message).toBe('LLM service is unavailable');\r\n    expect(error.retryable).toBe(true);\r\n    expect(error.fallbackAvailable).toBe(true);\r\n  });\r\n  \r\n  test('creates data fetch error', () => {\r\n    const error = PropOllamaError.dataFetchError('Failed to fetch data');\r\n    \r\n    expect(error.type).toBe(PropOllamaErrorType.DATA_FETCH_ERROR);\r\n    expect(error.message).toBe('Failed to fetch data');\r\n    expect(error.retryable).toBe(true);\r\n    expect(error.fallbackAvailable).toBe(true);\r\n  });\r\n  \r\n  test('creates insufficient data error', () => {\r\n    const error = PropOllamaError.insufficientDataError('Not enough data');\r\n    \r\n    expect(error.type).toBe(PropOllamaErrorType.INSUFFICIENT_DATA);\r\n    expect(error.message).toBe('Not enough data');\r\n    expect(error.retryable).toBe(false);\r\n    expect(error.fallbackAvailable).toBe(true);\r\n  });\r\n  \r\n  test('creates parsing error', () => {\r\n    const error = PropOllamaError.parsingError('Failed to parse response');\r\n    \r\n    expect(error.type).toBe(PropOllamaErrorType.PARSING_ERROR);\r\n    expect(error.message).toBe('Failed to parse response');\r\n    expect(error.retryable).toBe(false);\r\n    expect(error.fallbackAvailable).toBe(true);\r\n  });\r\n  \r\n  test('creates unknown error', () => {\r\n    const error = PropOllamaError.unknownError('Unknown error');\r\n    \r\n    expect(error.type).toBe(PropOllamaErrorType.UNKNOWN_ERROR);\r\n    expect(error.message).toBe('Unknown error');\r\n    expect(error.retryable).toBe(false);\r\n    expect(error.fallbackAvailable).toBe(true);\r\n  });\r\n  \r\n  test('converts generic error to PropOllamaError', () => {\r\n    const genericError = new Error('Generic error');\r\n    const propError = PropOllamaError.fromError(genericError);\r\n    \r\n    expect(propError).toBeInstanceOf(PropOllamaError);\r\n    expect(propError.type).toBe(PropOllamaErrorType.UNKNOWN_ERROR);\r\n    expect(propError.message).toBe('Generic error');\r\n  });\r\n  \r\n  test('converts Axios error to PropOllamaError', () => {\r\n    const axiosError = {\r\n      isAxiosError: true,\r\n      response: {\r\n        status: 500,\r\n        data: {\r\n          detail: 'Internal Server Error',\r\n        },\r\n      },\r\n      message: 'Request failed with status code 500',\r\n    };\r\n    \r\n    const propError = PropOllamaError.fromError(axiosError);\r\n    \r\n    expect(propError).toBeInstanceOf(PropOllamaError);\r\n    expect(propError.type).toBe(PropOllamaErrorType.LLM_UNAVAILABLE);\r\n    expect(propError.message).toBe('LLM service is unavailable');\r\n  });\r\n  \r\n  test('converts Axios network error to PropOllamaError', () => {\r\n    const axiosError = {\r\n      isAxiosError: true,\r\n      response: undefined,\r\n      message: 'Network Error',\r\n    };\r\n    \r\n    const propError = PropOllamaError.fromError(axiosError);\r\n    \r\n    expect(propError).toBeInstanceOf(PropOllamaError);\r\n    expect(propError.type).toBe(PropOllamaErrorType.NETWORK_ERROR);\r\n    expect(propError.message).toBe('Network error: Unable to connect to the server');\r\n  });\r\n  \r\n  test('converts Axios timeout error to PropOllamaError', () => {\r\n    const axiosError = {\r\n      isAxiosError: true,\r\n      code: 'ECONNABORTED',\r\n      message: 'timeout of 10000ms exceeded',\r\n    };\r\n    \r\n    const propError = PropOllamaError.fromError(axiosError);\r\n    \r\n    expect(propError).toBeInstanceOf(PropOllamaError);\r\n    expect(propError.type).toBe(PropOllamaErrorType.TIMEOUT_ERROR);\r\n    expect(propError.message).toBe('Request timed out');\r\n  });\r\n  \r\n  test('handles error with details', () => {\r\n    const error = PropOllamaError.networkError('Network error', { \r\n      url: 'https://api.example.com',\r\n      statusCode: 404 \r\n    });\r\n    \r\n    expect(error.details).toEqual({ \r\n      url: 'https://api.example.com',\r\n      statusCode: 404 \r\n    });\r\n  });\r\n  \r\n  test('preserves PropOllamaError when converting from error', () => {\r\n    const originalError = PropOllamaError.dataFetchError('Original error');\r\n    const convertedError = PropOllamaError.fromError(originalError);\r\n    \r\n    expect(convertedError).toBe(originalError);\r\n    expect(convertedError.type).toBe(PropOllamaErrorType.DATA_FETCH_ERROR);\r\n    expect(convertedError.message).toBe('Original error');\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}