6feefe29245d7180efcfc23f0ed068e1
"use strict";

var _websocketBuilder = require("../../utils/websocketBuilder.mock");
/**
 * WebSocket URL Legacy Elimination Tests
 * Ensures legacy 'client_/ws' path cannot be constructed
 */

// Mock global window if it doesn't exist
if (typeof global.window === 'undefined') {
  global.window = {
    localStorage: global.localStorage,
    location: {
      protocol: 'http:',
      hostname: 'localhost',
      port: '5173'
    }
  };
} else {
  // If window exists, ensure localStorage is available
  if (typeof global.window.localStorage === 'undefined') {
    global.window.localStorage = global.localStorage;
  }
}
describe('WebSocket Legacy Elimination', () => {
  beforeEach(() => {
    // Clear localStorage between tests
    global.localStorage.clear();
    // Clear environment
    (0, _websocketBuilder.setMockEnv)({
      VITE_WS_URL: undefined
    });
    // Mock console methods to avoid noise in tests
    jest.spyOn(console, 'log').mockImplementation();
    jest.spyOn(console, 'warn').mockImplementation();
    jest.spyOn(console, 'error').mockImplementation();
  });
  afterEach(() => {
    jest.restoreAllMocks();
  });
  describe('buildWebSocketUrl canonical builder', () => {
    test('never returns URL containing client_/ws', () => {
      // Test with various configurations
      const testCases = [{}, {
        clientId: 'test123'
      }, {
        baseUrl: 'ws://localhost:8000'
      }, {
        baseUrl: 'wss://production.com'
      }, {
        clientId: 'custom',
        role: 'admin',
        version: 2
      }];
      testCases.forEach(options => {
        const url = (0, _websocketBuilder.buildWebSocketUrl)(options);
        expect(url).not.toContain('client_/ws');
        expect((0, _websocketBuilder.validateWebSocketUrl)(url)).toBe(true);
        expect(url).toMatch(/\/ws\/client\?/); // Should contain canonical path
      });
    });
    test('throws in development when legacy path detected', () => {
      // Ensure we're in development mode
      (0, _websocketBuilder.setMockEnv)({
        VITE_WS_URL: undefined,
        DEV: true
      });

      // Verify DEV is set
      expect(_websocketBuilder.mockEnv.DEV).toBe(true);

      // Mock the URL constructor to throw an error to trigger fallback
      const originalURL = global.URL;
      const mockURL = jest.fn().mockImplementation(() => {
        throw new Error('Mock URL constructor error');
      });
      global.URL = mockURL;
      try {
        // Pass a baseUrl that contains legacy path - this will trigger fallback with legacy path
        const result = (0, _websocketBuilder.buildWebSocketUrl)({
          clientId: 'test',
          baseUrl: 'ws://localhost:8000/client_/ws'
        });
        console.log('Function returned:', result);
        // The function should have detected the legacy path in fallback and thrown an error
        // If we get here, something went wrong
        expect(result).toContain('client_/ws'); // This should show us what was actually returned
      } catch (error) {
        expect(error.message).toContain('Legacy websocket path constructed');
      } finally {
        global.URL = originalURL;
      }
    });
    test('generates correct canonical URLs', () => {
      const url = (0, _websocketBuilder.buildWebSocketUrl)({
        clientId: 'test123',
        role: 'frontend',
        version: 1,
        baseUrl: 'ws://localhost:8000'
      });
      expect(url).toBe('ws://localhost:8000/ws/client?client_id=test123&version=1&role=frontend');
      expect(url).toContain('/ws/client?');
      expect(url).not.toContain('client_/ws');
    });
  });
  describe('Environment variable sanitization', () => {
    test('sanitizes legacy path from VITE_WS_URL environment', () => {
      // Set environment with legacy path
      (0, _websocketBuilder.setMockEnv)({
        VITE_WS_URL: 'ws://localhost:8000/ws/client_/legacy'
      });
      const baseUrl = (0, _websocketBuilder.resolveWebSocketBase)();
      expect(baseUrl).not.toContain('client_/ws');
      expect(baseUrl).toBe('ws://localhost:8000');

      // Should log warning about legacy environment
      expect(console.warn).toHaveBeenCalledWith(expect.stringContaining('[EnvDiag][LegacyInEnv]'), 'ws://localhost:8000/ws/client_/legacy');
    });
    test('handles environment without legacy path correctly', () => {
      (0, _websocketBuilder.setMockEnv)({
        VITE_WS_URL: 'ws://localhost:8000'
      });
      const baseUrl = (0, _websocketBuilder.resolveWebSocketBase)();
      expect(baseUrl).toBe('ws://localhost:8000');
      expect(console.warn).not.toHaveBeenCalled();
    });
  });
  describe('Client ID persistence', () => {
    test('creates and persists new client ID when none exists', () => {
      const clientId = (0, _websocketBuilder.getOrPersistClientId)('test_key');
      expect(clientId).toMatch(/^client_[a-zA-Z0-9]{9}$/);
      expect(global.localStorage.getItem('test_key')).toBe(clientId);

      // Should log diagnostic info in dev mode
      expect(console.log).toHaveBeenCalledWith('[ClientIdDiag]', expect.objectContaining({
        initialFromStorage: false,
        passedIn: false,
        finalClientId: clientId
      }));
    });
    test('reuses existing client ID from storage', () => {
      global.localStorage.setItem('existing_key', 'stored_client_id');
      const clientId = (0, _websocketBuilder.getOrPersistClientId)('existing_key');
      expect(clientId).toBe('stored_client_id');
      expect(console.log).toHaveBeenCalledWith('[ClientIdDiag]', expect.objectContaining({
        initialFromStorage: true,
        passedIn: false,
        finalClientId: 'stored_client_id'
      }));
    });
    test('prefers passed client ID but still persists it', () => {
      const passedId = 'custom_client_123';
      const clientId = (0, _websocketBuilder.getOrPersistClientId)('persist_key', passedId);
      expect(clientId).toBe(passedId);
      expect(global.localStorage.getItem('persist_key')).toBe(passedId);
    });
  });
  describe('URL validation', () => {
    test('validateWebSocketUrl correctly identifies legacy URLs', () => {
      expect((0, _websocketBuilder.validateWebSocketUrl)('ws://localhost:8000/ws/client')).toBe(true);
      expect((0, _websocketBuilder.validateWebSocketUrl)('ws://localhost:8000/client_/ws/test')).toBe(false);
      expect((0, _websocketBuilder.validateWebSocketUrl)('wss://prod.com/ws/client?id=123')).toBe(true);
      expect((0, _websocketBuilder.validateWebSocketUrl)('ws://dev.local/some/client_/ws/path')).toBe(false);
    });
  });
  describe('Reconnection backoff capping integration', () => {
    test('mock reconnection delay sequence caps at expected max', () => {
      // This test mocks the backoff strategy to verify max delay
      const expectedMax = 16000;

      // Simulate sequential failures
      let currentDelay = 1000;
      const delaySequence = [];

      // Mock exponential backoff with cap
      for (let attempt = 0; attempt < 8; attempt++) {
        delaySequence.push(currentDelay);
        currentDelay = Math.min(currentDelay * 2, expectedMax);
      }

      // Verify sequence caps correctly
      expect(delaySequence).toEqual([1000, 2000, 4000, 8000, 16000, 16000, 16000, 16000]);
      expect(Math.max(...delaySequence)).toBe(expectedMax);
    });
  });
  describe('Integration with legacy detection', () => {
    test('full URL construction flow prevents legacy path', () => {
      // Test complete flow: env resolution → client ID → URL building → validation
      (0, _websocketBuilder.setMockEnv)({
        VITE_WS_URL: 'ws://localhost:8000'
      }); // Clean environment

      const url = (0, _websocketBuilder.buildWebSocketUrl)();
      expect((0, _websocketBuilder.validateWebSocketUrl)(url)).toBe(true);
      expect(url).toMatch(/^ws:\/\/localhost:8000\/ws\/client\?client_id=client_[a-zA-Z0-9]{9}&version=1&role=frontend$/);
      expect(url).not.toContain('client_/ws');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,