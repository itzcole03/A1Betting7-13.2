189b20f996291918e195716c50b9620e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getActiveHttpRequests = getActiveHttpRequests;
exports.getHttpRequestHistory = getHttpRequestHistory;
exports.getHttpSpanSummary = getHttpSpanSummary;
exports.getHttpTelemetryStats = getHttpTelemetryStats;
exports.httpFetch = httpFetch;
var _RequestContextService = require("./RequestContextService");
var _apiConfig = require("../config/apiConfig");
// HttpClient.ts - Enhanced fetch abstraction with request ID, logging, timing, and telemetry

class HttpTelemetry {
  constructor() {
    this.requestHistory = [];
    this.maxHistorySize = 100;
    this.activeRequests = new Map();
  }
  startRequest(requestId, url, method, span_name, tags) {
    const telemetry = {
      requestId,
      url,
      method,
      startTime: performance.now(),
      success: false,
      span_name,
      tags
    };
    this.activeRequests.set(requestId, telemetry);
    return telemetry;
  }
  finishRequest(requestId, status, error, responseSize, requestSize) {
    const telemetry = this.activeRequests.get(requestId);
    if (!telemetry) return;
    const endTime = performance.now();
    telemetry.endTime = endTime;
    telemetry.duration = endTime - telemetry.startTime;
    telemetry.status = status;
    telemetry.success = !error && (!status || status >= 200 && status < 300);
    telemetry.error = error;
    telemetry.responseSize = responseSize;
    telemetry.requestSize = requestSize;

    // Move to history
    this.activeRequests.delete(requestId);
    this.requestHistory.push(telemetry);

    // Maintain history size
    if (this.requestHistory.length > this.maxHistorySize) {
      this.requestHistory.shift();
    }
  }
  getRequestHistory() {
    return [...this.requestHistory];
  }
  getActiveRequests() {
    return Array.from(this.activeRequests.values());
  }
  getRequestStats() {
    const total = this.requestHistory.length;
    const active = this.activeRequests.size;
    const successful = this.requestHistory.filter(r => r.success).length;
    const success_rate = total > 0 ? successful / total * 100 : 0;
    const durations = this.requestHistory.filter(r => r.duration !== undefined).map(r => r.duration);
    const avg_duration = durations.length > 0 ? durations.reduce((a, b) => a + b, 0) / durations.length : 0;
    const errors = this.requestHistory.filter(r => r.error);
    const error_count = errors.length;
    const recent_errors = errors.slice(-5).map(r => r.error);
    return {
      total,
      active,
      success_rate: Math.round(success_rate * 100) / 100,
      avg_duration: Math.round(avg_duration * 100) / 100,
      error_count,
      recent_errors
    };
  }

  // Get span-based request grouping
  getSpanSummary() {
    const spans = {};
    this.requestHistory.forEach(req => {
      const span = req.span_name || 'default';
      if (!spans[span]) spans[span] = [];
      spans[span].push(req);
    });
    const summary = {};
    Object.entries(spans).forEach(([spanName, requests]) => {
      const durations = requests.filter(r => r.duration).map(r => r.duration);
      const successful = requests.filter(r => r.success).length;
      summary[spanName] = {
        count: requests.length,
        avg_duration: durations.length > 0 ? Math.round(durations.reduce((a, b) => a + b, 0) / durations.length * 100) / 100 : 0,
        success_rate: Math.round(successful / requests.length * 100 * 100) / 100,
        recent_requests: requests.slice(-3)
      };
    });
    return summary;
  }
}

// Global telemetry instance
const httpTelemetry = new HttpTelemetry();
async function httpFetch(url, options = {}) {
  const {
    version,
    logLabel,
    span_name,
    tags,
    ...fetchOptions
  } = options;
  // Explicitly type headers as Record<string, string> for safe indexing
  const headers = {
    ...(fetchOptions.headers || {}),
    ...(0, _RequestContextService.getRequestContext)(version)
  };
  const label = logLabel || 'HttpClient';
  const requestId = headers['X-Request-ID'];
  const method = fetchOptions.method || 'GET';

  // Always prepend base URL to relative paths (starting with '/') that are not already absolute
  let finalUrl = url;
  if (url.startsWith('/') && !/^https?:\/\//.test(url)) {
    const base = _apiConfig.API_BASE_URL;
    finalUrl = base.replace(/\/$/, '') + url;
  }

  // Calculate request size (approximate)
  let requestSize = 0;
  if (fetchOptions.body) {
    if (typeof fetchOptions.body === 'string') {
      requestSize = new Blob([fetchOptions.body]).size;
    } else if (fetchOptions.body instanceof FormData) {
      requestSize = 0; // FormData size is difficult to calculate
    } else {
      requestSize = 0; // Other body types
    }
  }

  // Start telemetry tracking
  const telemetry = httpTelemetry.startRequest(requestId, finalUrl, method, span_name, tags);

  // Enhanced logging with span context
  const logPrefix = `[${label}] [${requestId}]`;
  const spanInfo = span_name ? ` [${span_name}]` : '';
  const isTest = typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test';
  if (!isTest) {
    // eslint-disable-next-line no-console
    console.log(`${logPrefix}${spanInfo} Request:`, finalUrl, fetchOptions);
  }
  try {
    const response = await fetch(finalUrl, {
      ...fetchOptions,
      headers
    });

    // Calculate response size from content-length header
    const responseSize = response.headers.get('content-length') ? parseInt(response.headers.get('content-length'), 10) : undefined;

    // Finish telemetry tracking
    httpTelemetry.finishRequest(requestId, response.status, undefined, responseSize, requestSize);
    if (!isTest) {
      // eslint-disable-next-line no-console
      console.log(`${logPrefix}${spanInfo} Response:`, finalUrl, `Status: ${response.status}`, `Duration: ${telemetry.duration?.toFixed(1)}ms`, responseSize ? `Size: ${responseSize}b` : '');
    }
    return response;
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);

    // Finish telemetry tracking with error
    httpTelemetry.finishRequest(requestId, undefined, errorMessage, undefined, requestSize);

    // Suppress "Failed to fetch" errors to avoid console noise when backend unavailable
    if (!isTest) {
      if (error instanceof Error && error.message.includes('Failed to fetch')) {
        // Only log as warning instead of error to reduce console noise
        // eslint-disable-next-line no-console
        console.warn(`${logPrefix}${spanInfo} Backend unavailable:`, finalUrl, `Duration: ${telemetry.duration?.toFixed(1)}ms`);
      } else {
        // eslint-disable-next-line no-console
        console.error(`${logPrefix}${spanInfo} Error:`, finalUrl, error, `Duration: ${telemetry.duration?.toFixed(1)}ms`);
      }
    }
    throw error;
  }
}

// Telemetry access functions for debugging and monitoring
function getHttpTelemetryStats() {
  return httpTelemetry.getRequestStats();
}
function getHttpRequestHistory() {
  return httpTelemetry.getRequestHistory();
}
function getActiveHttpRequests() {
  return httpTelemetry.getActiveRequests();
}
function getHttpSpanSummary() {
  return httpTelemetry.getSpanSummary();
}

// Global telemetry access for debugging in browser console
if (typeof window !== 'undefined') {
  window.httpTelemetry = {
    stats: getHttpTelemetryStats,
    history: getHttpRequestHistory,
    active: getActiveHttpRequests,
    spans: getHttpSpanSummary
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,