{"version":3,"names":["_RequestContextService","require","_apiConfig","HttpTelemetry","constructor","requestHistory","maxHistorySize","activeRequests","Map","startRequest","requestId","url","method","span_name","tags","telemetry","startTime","performance","now","success","set","finishRequest","status","error","responseSize","requestSize","get","endTime","duration","delete","push","length","shift","getRequestHistory","getActiveRequests","Array","from","values","getRequestStats","total","active","size","successful","filter","r","success_rate","durations","undefined","map","avg_duration","reduce","a","b","errors","error_count","recent_errors","slice","Math","round","getSpanSummary","spans","forEach","req","span","summary","Object","entries","spanName","requests","count","recent_requests","httpTelemetry","httpFetch","options","version","logLabel","fetchOptions","headers","getRequestContext","label","finalUrl","startsWith","test","base","API_BASE_URL","replace","body","Blob","FormData","logPrefix","spanInfo","isTest","process","env","NODE_ENV","console","log","response","fetch","parseInt","toFixed","errorMessage","Error","message","String","includes","warn","getHttpTelemetryStats","getHttpRequestHistory","getActiveHttpRequests","getHttpSpanSummary","window","stats","history"],"sources":["HttpClient.ts"],"sourcesContent":["// HttpClient.ts - Enhanced fetch abstraction with request ID, logging, timing, and telemetry\nimport { getRequestContext } from './RequestContextService';\nimport { API_BASE_URL } from '../config/apiConfig';\n\nexport interface HttpRequestOptions extends RequestInit {\n  version?: string;\n  logLabel?: string;\n  span_name?: string;  // For span tracking\n  tags?: Record<string, string | number | boolean>;  // For request tagging\n}\n\nexport interface RequestTelemetry {\n  requestId: string;\n  url: string;\n  method: string;\n  startTime: number;\n  endTime?: number;\n  duration?: number;\n  status?: number;\n  success: boolean;\n  error?: string;\n  span_name?: string;\n  tags?: Record<string, string | number | boolean>;\n  responseSize?: number;\n  requestSize?: number;\n}\n\nclass HttpTelemetry {\n  private requestHistory: RequestTelemetry[] = [];\n  private maxHistorySize = 100;\n  private activeRequests = new Map<string, RequestTelemetry>();\n\n  startRequest(\n    requestId: string,\n    url: string,\n    method: string,\n    span_name?: string,\n    tags?: Record<string, string | number | boolean>\n  ): RequestTelemetry {\n    const telemetry: RequestTelemetry = {\n      requestId,\n      url,\n      method,\n      startTime: performance.now(),\n      success: false,\n      span_name,\n      tags\n    };\n\n    this.activeRequests.set(requestId, telemetry);\n    return telemetry;\n  }\n\n  finishRequest(\n    requestId: string,\n    status?: number,\n    error?: string,\n    responseSize?: number,\n    requestSize?: number\n  ): void {\n    const telemetry = this.activeRequests.get(requestId);\n    if (!telemetry) return;\n\n    const endTime = performance.now();\n    telemetry.endTime = endTime;\n    telemetry.duration = endTime - telemetry.startTime;\n    telemetry.status = status;\n    telemetry.success = !error && (!status || (status >= 200 && status < 300));\n    telemetry.error = error;\n    telemetry.responseSize = responseSize;\n    telemetry.requestSize = requestSize;\n\n    // Move to history\n    this.activeRequests.delete(requestId);\n    this.requestHistory.push(telemetry);\n\n    // Maintain history size\n    if (this.requestHistory.length > this.maxHistorySize) {\n      this.requestHistory.shift();\n    }\n  }\n\n  getRequestHistory(): RequestTelemetry[] {\n    return [...this.requestHistory];\n  }\n\n  getActiveRequests(): RequestTelemetry[] {\n    return Array.from(this.activeRequests.values());\n  }\n\n  getRequestStats(): {\n    total: number;\n    active: number;\n    success_rate: number;\n    avg_duration: number;\n    error_count: number;\n    recent_errors: string[];\n  } {\n    const total = this.requestHistory.length;\n    const active = this.activeRequests.size;\n    const successful = this.requestHistory.filter(r => r.success).length;\n    const success_rate = total > 0 ? (successful / total) * 100 : 0;\n    \n    const durations = this.requestHistory\n      .filter(r => r.duration !== undefined)\n      .map(r => r.duration!);\n    const avg_duration = durations.length > 0 \n      ? durations.reduce((a, b) => a + b, 0) / durations.length \n      : 0;\n    \n    const errors = this.requestHistory.filter(r => r.error);\n    const error_count = errors.length;\n    const recent_errors = errors.slice(-5).map(r => r.error!);\n\n    return {\n      total,\n      active,\n      success_rate: Math.round(success_rate * 100) / 100,\n      avg_duration: Math.round(avg_duration * 100) / 100,\n      error_count,\n      recent_errors\n    };\n  }\n\n  // Get span-based request grouping\n  getSpanSummary(): Record<string, {\n    count: number;\n    avg_duration: number;\n    success_rate: number;\n    recent_requests: RequestTelemetry[];\n  }> {\n    const spans: Record<string, RequestTelemetry[]> = {};\n    \n    this.requestHistory.forEach(req => {\n      const span = req.span_name || 'default';\n      if (!spans[span]) spans[span] = [];\n      spans[span].push(req);\n    });\n\n    const summary: Record<string, {\n      count: number;\n      avg_duration: number;\n      success_rate: number;\n      recent_requests: RequestTelemetry[];\n    }> = {};\n    Object.entries(spans).forEach(([spanName, requests]) => {\n      const durations = requests.filter(r => r.duration).map(r => r.duration!);\n      const successful = requests.filter(r => r.success).length;\n      \n      summary[spanName] = {\n        count: requests.length,\n        avg_duration: durations.length > 0 \n          ? Math.round((durations.reduce((a, b) => a + b, 0) / durations.length) * 100) / 100\n          : 0,\n        success_rate: Math.round((successful / requests.length) * 100 * 100) / 100,\n        recent_requests: requests.slice(-3)\n      };\n    });\n\n    return summary;\n  }\n}\n\n// Global telemetry instance\nconst httpTelemetry = new HttpTelemetry();\n\nexport async function httpFetch(url: string, options: HttpRequestOptions = {}): Promise<Response> {\n  const { version, logLabel, span_name, tags, ...fetchOptions } = options;\n  // Explicitly type headers as Record<string, string> for safe indexing\n  const headers: Record<string, string> = {\n    ...((fetchOptions.headers as Record<string, string>) || {}),\n    ...getRequestContext(version),\n  };\n  const label = logLabel || 'HttpClient';\n  const requestId = headers['X-Request-ID'];\n  const method = fetchOptions.method || 'GET';\n\n  // Always prepend base URL to relative paths (starting with '/') that are not already absolute\n  let finalUrl = url;\n  if (url.startsWith('/') && !/^https?:\\/\\//.test(url)) {\n    const base = API_BASE_URL;\n    finalUrl = base.replace(/\\/$/, '') + url;\n  }\n\n  // Calculate request size (approximate)\n  let requestSize = 0;\n  if (fetchOptions.body) {\n    if (typeof fetchOptions.body === 'string') {\n      requestSize = new Blob([fetchOptions.body]).size;\n    } else if (fetchOptions.body instanceof FormData) {\n      requestSize = 0; // FormData size is difficult to calculate\n    } else {\n      requestSize = 0; // Other body types\n    }\n  }\n\n  // Start telemetry tracking\n  const telemetry = httpTelemetry.startRequest(\n    requestId,\n    finalUrl,\n    method,\n    span_name,\n    tags\n  );\n\n  // Enhanced logging with span context\n  const logPrefix = `[${label}] [${requestId}]`;\n  const spanInfo = span_name ? ` [${span_name}]` : '';\n    const isTest = typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test';\n    if (!isTest) {\n      // eslint-disable-next-line no-console\n      console.log(`${logPrefix}${spanInfo} Request:`, finalUrl, fetchOptions);\n    }\n\n  try {\n    const response = await fetch(finalUrl, { ...fetchOptions, headers });\n    \n    // Calculate response size from content-length header\n    const responseSize = response.headers.get('content-length') \n      ? parseInt(response.headers.get('content-length')!, 10)\n      : undefined;\n\n    // Finish telemetry tracking\n    httpTelemetry.finishRequest(\n      requestId,\n      response.status,\n      undefined,\n      responseSize,\n      requestSize\n    );\n\n    if (!isTest) {\n      // eslint-disable-next-line no-console\n      console.log(\n        `${logPrefix}${spanInfo} Response:`,\n        finalUrl,\n        `Status: ${response.status}`,\n        `Duration: ${telemetry.duration?.toFixed(1)}ms`,\n        responseSize ? `Size: ${responseSize}b` : ''\n      );\n    }\n\n    return response;\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    \n    // Finish telemetry tracking with error\n    httpTelemetry.finishRequest(\n      requestId,\n      undefined,\n      errorMessage,\n      undefined,\n      requestSize\n    );\n\n    // Suppress \"Failed to fetch\" errors to avoid console noise when backend unavailable\n    if (!isTest) {\n      if (error instanceof Error && error.message.includes('Failed to fetch')) {\n        // Only log as warning instead of error to reduce console noise\n        // eslint-disable-next-line no-console\n        console.warn(\n          `${logPrefix}${spanInfo} Backend unavailable:`,\n          finalUrl,\n          `Duration: ${telemetry.duration?.toFixed(1)}ms`\n        );\n      } else {\n        // eslint-disable-next-line no-console\n        console.error(\n          `${logPrefix}${spanInfo} Error:`,\n          finalUrl,\n          error,\n          `Duration: ${telemetry.duration?.toFixed(1)}ms`\n        );\n      }\n    }\n    throw error;\n  }\n}\n\n// Telemetry access functions for debugging and monitoring\nexport function getHttpTelemetryStats() {\n  return httpTelemetry.getRequestStats();\n}\n\nexport function getHttpRequestHistory() {\n  return httpTelemetry.getRequestHistory();\n}\n\nexport function getActiveHttpRequests() {\n  return httpTelemetry.getActiveRequests();\n}\n\nexport function getHttpSpanSummary() {\n  return httpTelemetry.getSpanSummary();\n}\n\n// Global telemetry access for debugging in browser console\nif (typeof window !== 'undefined') {\n  (window as unknown as {\n    httpTelemetry: {\n      stats: () => ReturnType<typeof getHttpTelemetryStats>;\n      history: () => RequestTelemetry[];\n      active: () => RequestTelemetry[];\n      spans: () => ReturnType<typeof getHttpSpanSummary>;\n    };\n  }).httpTelemetry = {\n    stats: getHttpTelemetryStats,\n    history: getHttpRequestHistory,\n    active: getActiveHttpRequests,\n    spans: getHttpSpanSummary\n  };\n}\n"],"mappings":"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","ignoreList":[]}