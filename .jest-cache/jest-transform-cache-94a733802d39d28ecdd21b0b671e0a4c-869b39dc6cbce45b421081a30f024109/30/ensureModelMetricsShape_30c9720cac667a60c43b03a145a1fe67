1234d727e10a233577c3d5153691566f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureModelMetricsShape = ensureModelMetricsShape;
/**
 * Model metrics normalization to prevent "Cannot read properties of undefined (reading 'optimization_level')" errors
 * Provides shape normalization and legacy field mapping for AI/ML model metrics
 * 
 * @module ensureModelMetricsShape
 */

// Guard to prevent multiple logging
let hasLoggedMissingFields = false;
/**
 * Legacy key mapping table for reference
 * 
 * optimizationLevel -> model.optimization_level
 * opt_level -> model.optimization_level  
 * optimization_mode -> model.optimization_mode
 * optimizationTier -> model.optimization_level
 * modelName -> model.name
 * model_name -> model.name
 * avg_latency -> performance.avg_latency_ms
 * latency_ms -> performance.avg_latency_ms
 * throughput -> performance.throughput_rps
 * throughput_per_second -> performance.throughput_rps
 * success_requests -> derived success_rate
 * total_inferences -> usage.total_requests
 */

/**
 * Safe stringify for logging
 */
const safeStringify = obj => {
  try {
    return JSON.stringify(obj, null, 2);
  } catch {
    return String(obj);
  }
};

/**
 * Safely coerce value to number with fallback
 */
const coerceToNumber = (value, fallback = 0) => {
  if (typeof value === 'number') {
    if (!isFinite(value)) {
      return fallback;
    }
    return value;
  }
  if (typeof value === 'boolean') {
    return value ? 1 : 0;
  }
  if (typeof value === 'string') {
    const parsed = parseFloat(value);
    if (!isNaN(parsed)) {
      return parsed;
    }
  }
  return fallback;
};

/**
 * Safely coerce value to string with fallback
 */
const coerceToString = (value, fallback = '') => {
  if (typeof value === 'string') {
    return value;
  }
  if (typeof value === 'number' || typeof value === 'boolean') {
    return String(value);
  }
  return fallback;
};

/**
 * Extract nested value using path segments
 */
const extractNestedValue = (obj, path) => {
  let current = obj;
  for (const segment of path) {
    if (current && typeof current === 'object' && segment in current) {
      current = current[segment];
    } else {
      return undefined;
    }
  }
  return current;
};

/**
 * Get value with legacy fallback mapping
 */
const getValueWithLegacyFallback = (rawObj, canonicalPath, legacyPaths, type, defaultValue) => {
  // Try canonical path first
  const canonicalValue = extractNestedValue(rawObj, canonicalPath);
  if (canonicalValue !== undefined) {
    const coerced = type === 'number' ? coerceToNumber(canonicalValue, defaultValue) : coerceToString(canonicalValue, defaultValue);
    return {
      value: coerced,
      usedLegacy: false
    };
  }

  // Try legacy paths
  for (const legacyPath of legacyPaths) {
    const legacyValue = extractNestedValue(rawObj, legacyPath);
    if (legacyValue !== undefined) {
      const coerced = type === 'number' ? coerceToNumber(legacyValue, defaultValue) : coerceToString(legacyValue, defaultValue);
      return {
        value: coerced,
        usedLegacy: true
      };
    }
  }
  return {
    value: defaultValue,
    usedLegacy: false
  };
};

/**
 * Derive total_tokens if missing
 */
const deriveTotalTokens = usage => {
  const inputTokens = coerceToNumber(usage.input_tokens || usage.inputTokens, 0);
  const outputTokens = coerceToNumber(usage.output_tokens || usage.outputTokens, 0);
  return inputTokens + outputTokens;
};

/**
 * Derive success_rate if missing but success/total available
 */
const deriveSuccessRate = rawObj => {
  const successRequests = coerceToNumber(rawObj.success_requests || rawObj.successful_requests, 0);
  const totalRequests = coerceToNumber(rawObj.total_requests || rawObj.total_inferences, 0);
  if (totalRequests > 0) {
    return successRequests / totalRequests;
  }
  return 0;
};

/**
 * Ensures model metrics data conforms to ModelMetricsShape with safe defaults
 * 
 * Features:
 * - Normalizes missing nested objects to safe defaults
 * - Maps legacy fields to canonical structure  
 * - Coerces numeric fields to numbers and strings to strings
 * - Derives computed fields (total_tokens, success_rate)
 * - Adds development metadata in originFlags
 * - One-time logging for missing fields and legacy usage
 */
function ensureModelMetricsShape(raw) {
  const originFlags = {};

  // Type guard for raw data
  const rawObj = raw && typeof raw === 'object' ? raw : {};
  let usedLegacyFields = false;

  // Build model section with legacy mapping
  const modelName = getValueWithLegacyFallback(rawObj, ['model', 'name'], [['modelName'], ['model_name'], ['name']], 'string', 'Unknown Model');
  if (modelName.usedLegacy) usedLegacyFields = true;
  const provider = getValueWithLegacyFallback(rawObj, ['model', 'provider'], [['provider'], ['model_provider'], ['modelProvider']], 'string', 'Unknown Provider');
  if (provider.usedLegacy) usedLegacyFields = true;
  const optimizationLevel = getValueWithLegacyFallback(rawObj, ['model', 'optimization_level'], [['optimizationLevel'], ['opt_level'], ['optimization_mode'], ['system_info', 'optimization_level'], ['optimizationTier'], ['optTier']], 'string', 'Basic');
  if (optimizationLevel.usedLegacy) usedLegacyFields = true;
  const version = getValueWithLegacyFallback(rawObj, ['model', 'version'], [['version'], ['model_version']], 'string', '');
  const optimizationMode = getValueWithLegacyFallback(rawObj, ['model', 'optimization_mode'], [['optimization_mode'], ['optimizationMode']], 'string', '');

  // Build performance section
  const throughputRps = getValueWithLegacyFallback(rawObj, ['performance', 'throughput_rps'], [['throughput'], ['throughput_per_second'], ['rps']], 'number', 0);
  if (throughputRps.usedLegacy) usedLegacyFields = true;
  const avgLatencyMs = getValueWithLegacyFallback(rawObj, ['performance', 'avg_latency_ms'], [['avg_latency'], ['latency_ms'], ['avg_latency_ms']], 'number', 0);
  if (avgLatencyMs.usedLegacy) usedLegacyFields = true;
  const p95LatencyMs = getValueWithLegacyFallback(rawObj, ['performance', 'p95_latency_ms'], [['p95_latency'], ['p95_latency_ms']], 'number', 0);
  if (p95LatencyMs.usedLegacy) usedLegacyFields = true;

  // Try to derive success_rate or use direct value
  let successRate;
  const directSuccessRate = extractNestedValue(rawObj, ['performance', 'success_rate']);
  if (directSuccessRate !== undefined) {
    successRate = coerceToNumber(directSuccessRate, 0);
  } else {
    successRate = deriveSuccessRate(rawObj);
    if (successRate > 0) usedLegacyFields = true;
  }

  // Build usage section
  const totalRequests = getValueWithLegacyFallback(rawObj, ['usage', 'total_requests'], [['total_requests'], ['total_inferences'], ['totalRequests']], 'number', 0);
  if (totalRequests.usedLegacy) usedLegacyFields = true;
  const inputTokens = getValueWithLegacyFallback(rawObj, ['usage', 'input_tokens'], [['input_tokens'], ['inputTokens']], 'number', 0);
  if (inputTokens.usedLegacy) usedLegacyFields = true;
  const outputTokens = getValueWithLegacyFallback(rawObj, ['usage', 'output_tokens'], [['output_tokens'], ['outputTokens']], 'number', 0);
  if (outputTokens.usedLegacy) usedLegacyFields = true;

  // Derive total_tokens
  let totalTokens = getValueWithLegacyFallback(rawObj, ['usage', 'total_tokens'], [['total_tokens'], ['totalTokens']], 'number', 0).value;
  if (totalTokens === 0 && (inputTokens.value > 0 || outputTokens.value > 0)) {
    totalTokens = deriveTotalTokens({
      input_tokens: inputTokens.value,
      output_tokens: outputTokens.value
    });
  }
  const cacheHits = getValueWithLegacyFallback(rawObj, ['usage', 'cache_hits'], [['cache_hits'], ['cacheHits']], 'number', 0);
  const cacheHitRate = getValueWithLegacyFallback(rawObj, ['usage', 'cache_hit_rate'], [['cache_hit_rate'], ['cacheHitRate']], 'number', 0);

  // Build optional tuning section
  let tuning;
  const temperature = extractNestedValue(rawObj, ['tuning', 'temperature']) || rawObj.temperature;
  if (temperature !== undefined || rawObj.top_p !== undefined || rawObj.max_tokens !== undefined) {
    tuning = {
      temperature: coerceToNumber(temperature, 0.7),
      top_p: rawObj.top_p !== undefined ? coerceToNumber(rawObj.top_p, undefined) : undefined,
      max_tokens: rawObj.max_tokens !== undefined ? coerceToNumber(rawObj.max_tokens, undefined) : undefined,
      presence_penalty: rawObj.presence_penalty !== undefined ? coerceToNumber(rawObj.presence_penalty, undefined) : undefined,
      frequency_penalty: rawObj.frequency_penalty !== undefined ? coerceToNumber(rawObj.frequency_penalty, undefined) : undefined
    };
  }

  // Set origin flags
  if (usedLegacyFields) {
    originFlags.mappedLegacy = true;
  }
  const hasModelSection = rawObj.model && typeof rawObj.model === 'object';
  const hasPerformanceSection = rawObj.performance && typeof rawObj.performance === 'object';
  const hasUsageSection = rawObj.usage && typeof rawObj.usage === 'object';
  if (!hasModelSection || !hasPerformanceSection || !hasUsageSection) {
    originFlags.partialPayload = true;
  }

  // One-time development logging
  const missingFields = [];
  if (!raw) missingFields.push('entire model metrics object');
  if (!hasModelSection) missingFields.push('model section');
  if (!hasPerformanceSection) missingFields.push('performance section');
  if (!hasUsageSection) missingFields.push('usage section');
  if ((process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test' || typeof jest !== 'undefined') && (missingFields.length > 0 || originFlags.mappedLegacy) && !hasLoggedMissingFields) {
    hasLoggedMissingFields = true;
    if (missingFields.length > 0) {
      // eslint-disable-next-line no-console
      console.warn('[ModelMetricsGuard] Missing model metrics fields detected:', missingFields.join(', '), '\nRaw data sample:', safeStringify(rawObj)?.substring(0, 500) + '...');
    }
    if (originFlags.mappedLegacy) {
      // eslint-disable-next-line no-console
      console.warn('[ModelMetricsGuard] Using legacy model metrics fields:', 'optimizationLevel, opt_level, model_name, throughput_per_second, etc.', 'Consider migrating to canonical structure');
    }
  }

  // Build normalized model metrics object
  const normalized = {
    model: {
      name: modelName.value,
      provider: provider.value,
      optimization_level: optimizationLevel.value,
      ...(version.value && version.value !== '' ? {
        version: version.value
      } : {}),
      ...(optimizationMode.value && optimizationMode.value !== '' ? {
        optimization_mode: optimizationMode.value
      } : {})
    },
    performance: {
      throughput_rps: throughputRps.value,
      avg_latency_ms: avgLatencyMs.value,
      p95_latency_ms: p95LatencyMs.value,
      success_rate: successRate
    },
    usage: {
      total_requests: totalRequests.value,
      input_tokens: inputTokens.value,
      output_tokens: outputTokens.value,
      total_tokens: totalTokens,
      ...(cacheHits.value > 0 ? {
        cache_hits: cacheHits.value
      } : {}),
      ...(cacheHitRate.value > 0 ? {
        cache_hit_rate: cacheHitRate.value
      } : {})
    },
    ...(tuning ? {
      tuning
    } : {}),
    originFlags
  };
  return normalized;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,