2cc2945f7ec462e84c4d01ce9bcccb5c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _enhancedLogger = require("../../utils/enhancedLogger");
var _lucideReact = require("lucide-react");
var _reactVirtual = require("@tanstack/react-virtual");
var _usePropFinderData = require("../../hooks/usePropFinderData");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// Debounce hook for search optimization
function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = _react.default.useState(value);
  _react.default.useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);
  return debouncedValue;
}

// Utility functions
const formatOdds = odds => {
  return odds > 0 ? `+${odds}` : `${odds}`;
};
const getConfidenceColor = confidence => {
  if (confidence >= 80) return 'bg-green-500';
  if (confidence >= 70) return 'bg-blue-500';
  if (confidence >= 60) return 'bg-yellow-500';
  return 'bg-red-500';
};
const getEdgeColor = edge => {
  if (edge >= 8) return 'text-green-400';
  if (edge >= 5) return 'text-blue-400';
  if (edge >= 0) return 'text-yellow-400';
  return 'text-red-400';
};
const getSportIcon = sport => {
  switch (sport) {
    case 'NBA':
      return '🏀';
    case 'MLB':
      return '⚾';
    case 'NFL':
      return '🏈';
    case 'NHL':
      return '🏒';
    default:
      return '🎯';
  }
};

// Main PropFinder Dashboard Component
const PropFinderDashboard = () => {
  const [searchQuery, setSearchQuery] = (0, _react.useState)('');
  const [selectedSports, setSelectedSports] = (0, _react.useState)(['NBA', 'MLB']);
  const [confidenceRange, setConfidenceRange] = (0, _react.useState)([60, 100]);
  const [edgeRange, setEdgeRange] = (0, _react.useState)([0, 20]);
  const [showFilters, setShowFilters] = (0, _react.useState)(false);
  const [selectedPreset, setSelectedPreset] = (0, _react.useState)('');

  // Phase 1.2 specific filters
  const [showArbitrageOnly, setShowArbitrageOnly] = (0, _react.useState)(false);
  const [minBookmakers, setMinBookmakers] = (0, _react.useState)(1);
  const [selectedSharpMoney, setSelectedSharpMoney] = (0, _react.useState)([]);

  // Real data integration using our enhanced hook
  const {
    opportunities,
    stats,
    loading,
    error,
    bookmarkOpportunity,
    refreshData,
    isAutoRefreshEnabled,
    toggleAutoRefresh
  } = (0, _usePropFinderData.usePropFinderData)({
    autoRefresh: true,
    refreshInterval: 30,
    initialFilters: {
      sports: selectedSports,
      confidence_min: confidenceRange[0],
      confidence_max: confidenceRange[1],
      edge_min: edgeRange[0],
      edge_max: edgeRange[1]
    }
  });

  // Quick filter presets for Phase 4.1
  const filterPresets = [{
    name: 'High Value',
    icon: _lucideReact.Star,
    confidenceMin: 80,
    edgeMin: 8,
    description: 'Elite opportunities'
  }, {
    name: 'Premium Only',
    icon: _lucideReact.DollarSign,
    confidenceMin: 70,
    edgeMin: 5,
    description: 'Premium confidence'
  }, {
    name: 'Value Plays',
    icon: _lucideReact.Target,
    confidenceMin: 60,
    edgeMin: 2,
    description: 'Value opportunities'
  }, {
    name: 'Arbitrage',
    icon: _lucideReact.TrendingUp,
    confidenceMin: 50,
    edgeMin: 0,
    description: 'Arbitrage opportunities',
    arbitrageOnly: true
  }];

  // Debounced search query for Phase 4.1
  const debouncedSearchQuery = useDebounce(searchQuery, 300);

  // Filter opportunities based on current filters
  const filteredOpportunities = (0, _react.useMemo)(() => {
    return opportunities.filter(opp => {
      const matchesSearch = !debouncedSearchQuery || opp.player.toLowerCase().includes(debouncedSearchQuery.toLowerCase()) || opp.market.toLowerCase().includes(debouncedSearchQuery.toLowerCase()) || opp.team.toLowerCase().includes(debouncedSearchQuery.toLowerCase());
      const matchesSports = selectedSports.length === 0 || selectedSports.includes(opp.sport);
      const matchesConfidence = opp.confidence >= confidenceRange[0] && opp.confidence <= confidenceRange[1];
      const matchesEdge = opp.edge >= edgeRange[0] && opp.edge <= edgeRange[1];
      const matchesArbitrage = !showArbitrageOnly || opp.hasArbitrage;
      const matchesBookmakers = !opp.numBookmakers || opp.numBookmakers >= minBookmakers;
      const matchesSharpMoney = selectedSharpMoney.length === 0 || selectedSharpMoney.includes(opp.sharpMoney);
      return matchesSearch && matchesSports && matchesConfidence && matchesEdge && matchesArbitrage && matchesBookmakers && matchesSharpMoney;
    });
  }, [opportunities, debouncedSearchQuery, selectedSports, confidenceRange, edgeRange, showArbitrageOnly, minBookmakers, selectedSharpMoney]);

  // Virtualization setup
  const parentRef = (0, _react.useRef)(null);
  const VIRTUALIZATION_THRESHOLD = 20;
  const shouldVirtualize = filteredOpportunities.length > VIRTUALIZATION_THRESHOLD;
  const virtualizer = (0, _reactVirtual.useVirtualizer)({
    count: filteredOpportunities.length,
    getScrollElement: () => parentRef.current,
    estimateSize: () => 120,
    enabled: shouldVirtualize
  });

  // Handle preset application
  const applyPreset = preset => {
    setSelectedPreset(preset.name);
    setConfidenceRange([preset.confidenceMin, 100]);
    setEdgeRange([preset.edgeMin, 20]);
    if ('arbitrageOnly' in preset && preset.arbitrageOnly) {
      setShowArbitrageOnly(true);
    }
  };

  // Handle bookmark toggle
  const handleBookmarkToggle = async (opportunityId, isBookmarked) => {
    try {
      const opportunity = opportunities.find(o => o.id === opportunityId);
      if (!opportunity) return;
      await bookmarkOpportunity(opportunityId, opportunity, !isBookmarked);
    } catch (error) {
      // Log error for debugging in development
      if (process.env.NODE_ENV === 'development') {
        _enhancedLogger.enhancedLogger.error('PropFinderDashboard', 'handleBookmarkToggle', 'Failed to toggle bookmark', undefined, error);
      }
    }
  };
  if (loading) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "flex items-center justify-center min-h-screen bg-gray-900",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "text-white text-xl",
        children: "Loading PropFinder opportunities..."
      })
    });
  }
  if (error) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "flex flex-col items-center justify-center min-h-screen bg-gray-900",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "text-red-400 text-xl mb-4",
        children: ["Error: ", error]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
        onClick: refreshData,
        className: "px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700",
        children: "Retry"
      })]
    });
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: "min-h-screen bg-gray-900 text-white p-6",
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "max-w-7xl mx-auto",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "mb-8",
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex justify-between items-start",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("h1", {
              className: "text-4xl font-bold mb-2 flex items-center gap-3",
              "data-testid": "propfinder-killer-heading",
              children: ["PropFinder", /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                className: "text-2xl",
                children: "\uD83C\uDFAF"
              }), isAutoRefreshEnabled && /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                className: "text-sm bg-green-600 px-2 py-1 rounded-full",
                children: "LIVE"
              })]
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              className: "text-gray-400",
              children: "Elite prop betting opportunities with multi-bookmaker best lines"
            })]
          }), stats && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "grid grid-cols-3 gap-4 text-center",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "bg-gray-800 p-3 rounded-lg",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                className: "text-2xl font-bold text-blue-400",
                children: stats.total_opportunities
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                className: "text-xs text-gray-400",
                children: "Total Opps"
              })]
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "bg-gray-800 p-3 rounded-lg",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "text-2xl font-bold text-green-400",
                children: [stats.avg_confidence.toFixed(1), "%"]
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                className: "text-xs text-gray-400",
                children: "Avg Confidence"
              })]
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "bg-gray-800 p-3 rounded-lg",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "text-2xl font-bold text-yellow-400",
                children: [stats.max_edge.toFixed(1), "%"]
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                className: "text-xs text-gray-400",
                children: "Max Edge"
              })]
            })]
          })]
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "mb-6 space-y-4",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex flex-wrap gap-4",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "relative flex-1 min-w-64",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Search, {
              className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
              type: "text",
              placeholder: "Search players, markets, or teams...",
              value: searchQuery,
              onChange: e => setSearchQuery(e.target.value),
              className: "w-full pl-10 pr-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("button", {
            onClick: () => setShowFilters(!showFilters),
            className: "px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg hover:bg-gray-700 transition-colors flex items-center gap-2",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Filter, {
              className: "w-4 h-4"
            }), "Filters"]
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: toggleAutoRefresh,
            className: `px-4 py-2 rounded-lg transition-colors flex items-center gap-2 ${isAutoRefreshEnabled ? 'bg-green-600 hover:bg-green-700' : 'bg-gray-800 border border-gray-700 hover:bg-gray-700'}`,
            children: "\uD83D\uDD04 Auto Refresh"
          })]
        }), showFilters && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "bg-gray-800 p-6 rounded-lg border border-gray-700 space-y-6",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
              className: "block text-sm font-medium mb-3",
              children: "Quick Filters"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: "flex flex-wrap gap-3",
              children: filterPresets.map(preset => {
                const IconComponent = preset.icon;
                return /*#__PURE__*/(0, _jsxRuntime.jsxs)("button", {
                  onClick: () => applyPreset(preset),
                  className: `flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${selectedPreset === preset.name ? 'bg-blue-600 text-white' : 'bg-gray-700 hover:bg-gray-600 text-gray-300'}`,
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(IconComponent, {
                    className: "w-4 h-4"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                    className: "text-sm font-medium",
                    children: preset.name
                  }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                    className: "text-xs text-gray-400",
                    children: ["(", preset.description, ")"]
                  })]
                }, preset.name);
              })
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                className: "block text-sm font-medium mb-2",
                children: "Sports"
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                className: "space-y-2",
                children: ['NBA', 'MLB', 'NFL', 'NHL'].map(sport => /*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                  className: "flex items-center gap-2",
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                    type: "checkbox",
                    checked: selectedSports.includes(sport),
                    onChange: e => {
                      if (e.target.checked) {
                        setSelectedSports([...selectedSports, sport]);
                      } else {
                        setSelectedSports(selectedSports.filter(s => s !== sport));
                      }
                    },
                    className: "rounded bg-gray-700 border-gray-600"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                    className: "text-sm",
                    children: [getSportIcon(sport), " ", sport]
                  })]
                }, sport))
              })]
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                className: "block text-sm font-medium mb-2",
                children: ["Confidence: ", confidenceRange[0], "% - ", confidenceRange[1], "%"]
              }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "space-y-2",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                  type: "range",
                  min: "0",
                  max: "100",
                  step: "5",
                  value: confidenceRange[0],
                  onChange: e => setConfidenceRange([Number(e.target.value), confidenceRange[1]]),
                  className: "w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                  type: "range",
                  min: "0",
                  max: "100",
                  step: "5",
                  value: confidenceRange[1],
                  onChange: e => setConfidenceRange([confidenceRange[0], Number(e.target.value)]),
                  className: "w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
                })]
              })]
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                className: "block text-sm font-medium mb-2",
                children: ["Edge: ", edgeRange[0], "% - ", edgeRange[1], "%"]
              }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "space-y-2",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                  type: "range",
                  min: "-5",
                  max: "20",
                  step: "1",
                  value: edgeRange[0],
                  onChange: e => setEdgeRange([Number(e.target.value), edgeRange[1]]),
                  className: "w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                  type: "range",
                  min: "-5",
                  max: "20",
                  step: "1",
                  value: edgeRange[1],
                  onChange: e => setEdgeRange([edgeRange[0], Number(e.target.value)]),
                  className: "w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
                })]
              })]
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "grid grid-cols-1 md:grid-cols-3 gap-6 pt-4 border-t border-gray-700",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                className: "flex items-center gap-2",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                  type: "checkbox",
                  checked: showArbitrageOnly,
                  onChange: e => setShowArbitrageOnly(e.target.checked),
                  className: "rounded bg-gray-700 border-gray-600"
                }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                  className: "text-sm font-medium",
                  children: "\uD83C\uDFAF Arbitrage Opportunities Only"
                })]
              })
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                className: "block text-sm font-medium mb-2",
                children: ["Min Bookmakers: ", minBookmakers]
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                type: "range",
                min: "1",
                max: "5",
                step: "1",
                value: minBookmakers,
                onChange: e => setMinBookmakers(Number(e.target.value)),
                className: "w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
              })]
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                className: "block text-sm font-medium mb-2",
                children: "Sharp Money"
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                className: "space-y-1",
                children: ['heavy', 'moderate', 'light'].map(level => /*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
                  className: "flex items-center gap-2",
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                    type: "checkbox",
                    checked: selectedSharpMoney.includes(level),
                    onChange: e => {
                      if (e.target.checked) {
                        setSelectedSharpMoney([...selectedSharpMoney, level]);
                      } else {
                        setSelectedSharpMoney(selectedSharpMoney.filter(l => l !== level));
                      }
                    },
                    className: "rounded bg-gray-700 border-gray-600"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                    className: "text-xs capitalize",
                    children: level
                  })]
                }, level))
              })]
            })]
          })]
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "mb-4 flex justify-between items-center",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
          className: "text-gray-400",
          children: ["Showing ", filteredOpportunities.length, " of ", opportunities.length, " opportunities"]
        }), shouldVirtualize && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-sm text-blue-400 flex items-center gap-1",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Zap, {
            className: "w-4 h-4"
          }), "Virtualized rendering active"]
        })]
      }), filteredOpportunities.length === 0 ? /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "text-center py-12 text-gray-400",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Target, {
          className: "w-16 h-16 mx-auto mb-4 text-gray-600"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "text-xl mb-2",
          children: "No opportunities match your current filters"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "text-sm",
          children: "Try adjusting your filters or search criteria"
        })]
      }) : /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "grid grid-cols-8 gap-4 px-4 py-3 bg-gray-800 border-b border-gray-700 text-sm font-medium text-gray-300",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            children: "Player"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            children: "Market & Line"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            children: "Best Odds"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            children: "Confidence"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            children: "Edge/Value"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            children: "Bookmakers"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            children: "Insights"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            children: "Actions"
          })]
        }), shouldVirtualize ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          ref: parentRef,
          className: "h-96 overflow-auto",
          style: {
            contain: 'strict'
          },
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            style: {
              height: `${virtualizer.getTotalSize()}px`,
              width: '100%',
              position: 'relative'
            },
            children: virtualizer.getVirtualItems().map(virtualItem => {
              const opportunity = filteredOpportunities[virtualItem.index];
              return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                style: {
                  position: 'absolute',
                  top: 0,
                  left: 0,
                  width: '100%',
                  height: `${virtualItem.size}px`,
                  transform: `translateY(${virtualItem.start}px)`
                },
                className: "grid grid-cols-8 gap-4 px-4 py-3 hover:bg-gray-800 transition-colors items-center border-b border-gray-700",
                children: /*#__PURE__*/(0, _jsxRuntime.jsx)(OpportunityRow, {
                  opportunity: opportunity,
                  onBookmarkToggle: handleBookmarkToggle
                })
              }, virtualItem.key);
            })
          })
        }) : /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "divide-y divide-gray-700",
          children: filteredOpportunities.map(opportunity => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "grid grid-cols-8 gap-4 px-4 py-3 hover:bg-gray-800 transition-colors items-center",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(OpportunityRow, {
              opportunity: opportunity,
              onBookmarkToggle: handleBookmarkToggle
            })
          }, opportunity.id))
        })]
      })]
    })
  });
};

// Enhanced Opportunity row component with Phase 1.2 features
const OpportunityRow = ({
  opportunity,
  onBookmarkToggle
}) => {
  const [isFavorited, setIsFavorited] = (0, _react.useState)(opportunity.isBookmarked || false);
  const handleBookmarkClick = () => {
    const newState = !isFavorited;
    setIsFavorited(newState);
    onBookmarkToggle(opportunity.id, opportunity.isBookmarked);
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "flex items-center space-x-3",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "relative",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "w-12 h-12 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center text-white text-sm font-bold shadow-lg",
          children: opportunity.player.split(' ').map(n => n[0]).join('')
        }), opportunity.alertTriggered && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "absolute -top-1 -right-1 w-5 h-5 bg-orange-500 rounded-full flex items-center justify-center",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.AlertTriangle, {
            className: "w-3 h-3 text-white"
          })
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "font-medium text-white",
          children: opportunity.player
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-xs text-gray-400 flex items-center gap-1",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            children: getSportIcon(opportunity.sport)
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            children: opportunity.team
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            className: "mx-1",
            children: "vs"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            children: opportunity.opponent
          })]
        })]
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "space-y-1",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "font-medium text-white",
        children: opportunity.market
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "text-sm text-blue-400",
        children: [opportunity.pick.toUpperCase(), " ", opportunity.line]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "text-xs text-gray-400",
        children: opportunity.timeToGame
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "space-y-1",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "font-bold text-lg text-white",
        children: formatOdds(opportunity.odds)
      }), opportunity.bestBookmaker && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "text-xs text-green-400",
        children: ["Best: ", opportunity.bestBookmaker]
      }), opportunity.oddsSpread && opportunity.oddsSpread > 10 && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "text-xs text-yellow-400",
        children: ["Spread: ", opportunity.oddsSpread]
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "space-y-1",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "flex items-center gap-2",
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: `w-10 h-10 rounded-full flex items-center justify-center text-xs font-bold text-white ${getConfidenceColor(opportunity.confidence)}`,
          children: [Math.round(opportunity.confidence), "%"]
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "text-xs text-gray-400",
        children: ["AI: ", opportunity.aiProbability.toFixed(1), "%"]
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "space-y-1",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: `font-bold text-lg ${getEdgeColor(opportunity.edge)}`,
        children: [opportunity.edge > 0 ? '+' : '', opportunity.edge.toFixed(1), "%"]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "text-xs text-gray-400",
        children: ["Value: $", opportunity.projectedValue.toFixed(2)]
      }), opportunity.hasArbitrage && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "text-xs bg-green-600 text-white px-2 py-1 rounded-full font-bold",
        children: ["ARB ", opportunity.arbitrageProfitPct?.toFixed(1), "%"]
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "space-y-1",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "flex items-center gap-1",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Users, {
          className: "w-4 h-4 text-gray-400"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
          className: "text-sm font-medium",
          children: opportunity.numBookmakers || opportunity.bookmakers?.length || 1
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "text-xs text-gray-400",
        children: [opportunity.bookmakers?.slice(0, 2).map(book => book.name).join(', '), (opportunity.bookmakers?.length || 0) > 2 && '...']
      }), opportunity.lineSpread && opportunity.lineSpread > 0.5 && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "text-xs text-yellow-400",
        children: ["Line Spread: ", opportunity.lineSpread.toFixed(1)]
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "space-y-1",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "flex flex-wrap gap-1",
        children: opportunity.tags?.slice(0, 2).map(tag => /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
          className: "text-xs bg-gray-700 text-gray-300 px-2 py-1 rounded",
          children: tag
        }, tag))
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "text-xs text-gray-400",
        children: ["Sharp: ", opportunity.sharpMoney]
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "flex items-center gap-2",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Heart, {
        onClick: handleBookmarkClick,
        className: `w-5 h-5 cursor-pointer transition-colors ${isFavorited ? 'fill-red-500 text-red-500' : 'text-gray-400 hover:text-red-400'}`
      }), opportunity.edge > 10 && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "text-xs bg-yellow-600 text-white px-2 py-1 rounded-full font-bold",
        children: "\uD83D\uDD25 HOT"
      }), opportunity.hasArbitrage && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "text-xs bg-green-600 text-white px-2 py-1 rounded-full font-bold",
        children: "\uD83D\uDC8E ARB"
      })]
    })]
  });
};
var _default = exports.default = PropFinderDashboard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,