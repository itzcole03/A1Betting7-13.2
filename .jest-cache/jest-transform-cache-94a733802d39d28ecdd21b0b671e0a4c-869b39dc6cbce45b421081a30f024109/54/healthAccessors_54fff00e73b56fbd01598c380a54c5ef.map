{"version":3,"names":["hasWarnedLegacyHitRate","hasWarnedFlatHitRate","hasWarnedInfrastructure","getCacheHitRate","obj","healthObj","performance","cache_hit_rate","hit_rate","process","env","NODE_ENV","console","warn","infrastructure","cache","hit_rate_percent","cache_performance","hasPerformanceSection","safeIterateCacheMetrics","metrics","callback","Array","isArray","filter","metric","map","debugHealthStructure","label","cacheHitRate","hasPerf","rawPresence","debug","extractedCacheHitRate","getCacheType","cache_type"],"sources":["healthAccessors.ts"],"sourcesContent":["/**\r\n * Unified health data accessors to prevent runtime errors from hit_rate variations\r\n * Handles legacy field mappings and provides safe defaults\r\n * \r\n * @module healthAccessors\r\n */\r\n\r\n/**\r\n * Unified health data accessors to prevent runtime errors from hit_rate variations\r\n * Handles legacy field mappings and provides safe defaults\r\n * \r\n * @module healthAccessors\r\n */\r\n\r\n// Health-like object types for better type safety\r\ninterface HealthLikeObject {\r\n  performance?: {\r\n    cache_hit_rate?: number;\r\n    hit_rate?: number;\r\n  };\r\n  infrastructure?: {\r\n    cache?: {\r\n      hit_rate_percent?: number;\r\n    };\r\n  };\r\n  cache_performance?: {\r\n    hit_rate?: number;\r\n  };\r\n  hit_rate?: number;\r\n}\r\n\r\n// Module-scoped warning flags to prevent spam\r\nlet hasWarnedLegacyHitRate = false;\r\nlet hasWarnedFlatHitRate = false;\r\nlet hasWarnedInfrastructure = false;\r\n\r\n/**\r\n * Safely extract cache hit rate from various health/metrics object structures\r\n * \r\n * Priority order:\r\n * 1. obj?.performance?.cache_hit_rate (canonical)\r\n * 2. obj?.performance?.hit_rate (legacy mapping)\r\n * 3. obj?.infrastructure?.cache?.hit_rate_percent (Phase 3 structure)\r\n * 4. obj?.cache_performance?.hit_rate (metrics structure)\r\n * 5. obj?.hit_rate (flat legacy)\r\n * 6. Default: 0\r\n */\r\nexport function getCacheHitRate(obj: unknown): number {\r\n  if (!obj || typeof obj !== 'object') {\r\n    return 0;\r\n  }\r\n\r\n  const healthObj = obj as HealthLikeObject;\r\n\r\n  // Priority 1: Canonical cache_hit_rate\r\n  if (typeof healthObj?.performance?.cache_hit_rate === 'number') {\r\n    return healthObj.performance.cache_hit_rate;\r\n  }\r\n\r\n  // Priority 2: Legacy performance.hit_rate\r\n  if (typeof healthObj?.performance?.hit_rate === 'number') {\r\n    if (!hasWarnedLegacyHitRate && process.env.NODE_ENV === 'development') {\r\n      hasWarnedLegacyHitRate = true;\r\n      // eslint-disable-next-line no-console\r\n      console.warn('[HealthCompat] Using legacy performance.hit_rate, consider migrating to cache_hit_rate');\r\n    }\r\n    return healthObj.performance.hit_rate;\r\n  }\r\n\r\n  // Priority 3: Phase 3 infrastructure structure\r\n  if (typeof healthObj?.infrastructure?.cache?.hit_rate_percent === 'number') {\r\n    if (!hasWarnedInfrastructure && process.env.NODE_ENV === 'development') {\r\n      hasWarnedInfrastructure = true;\r\n      // eslint-disable-next-line no-console\r\n      console.warn('[HealthCompat] Using infrastructure.cache.hit_rate_percent, consider migrating to performance.cache_hit_rate');\r\n    }\r\n    return healthObj.infrastructure.cache.hit_rate_percent;\r\n  }\r\n\r\n  // Priority 4: Metrics structure (for PerformanceMonitoringDashboard)\r\n  if (typeof healthObj?.cache_performance?.hit_rate === 'number') {\r\n    return healthObj.cache_performance.hit_rate;\r\n  }\r\n\r\n  // Priority 5: Flat legacy structure\r\n  if (typeof healthObj?.hit_rate === 'number') {\r\n    if (!hasWarnedFlatHitRate && process.env.NODE_ENV === 'development') {\r\n      hasWarnedFlatHitRate = true;\r\n      // eslint-disable-next-line no-console\r\n      console.warn('[HealthCompat] Using flat hit_rate, consider migrating to performance.cache_hit_rate');\r\n    }\r\n    return healthObj.hit_rate;\r\n  }\r\n\r\n  // Default: 0\r\n  return 0;\r\n}\r\n\r\n/**\r\n * Check if object has a performance section (any variant)\r\n */\r\nexport function hasPerformanceSection(obj: unknown): boolean {\r\n  if (!obj || typeof obj !== 'object') {\r\n    return false;\r\n  }\r\n\r\n  const healthObj = obj as HealthLikeObject;\r\n\r\n  return !!(\r\n    healthObj.performance ||\r\n    healthObj.infrastructure?.cache ||\r\n    healthObj.cache_performance ||\r\n    typeof healthObj.hit_rate === 'number'\r\n  );\r\n}\r\n\r\n/**\r\n * Safe iteration over cache metrics arrays\r\n * Filters out undefined/null entries and ensures hit_rate exists\r\n */\r\nexport function safeIterateCacheMetrics<T>(\r\n  metrics: T[] | undefined | null,\r\n  callback: (metric: T & { hit_rate: number }, index: number) => unknown\r\n): unknown[] {\r\n  if (!Array.isArray(metrics)) {\r\n    return [];\r\n  }\r\n\r\n  return metrics\r\n    .filter((metric): metric is T & { hit_rate: number } => {\r\n      return metric != null && \r\n             typeof metric === 'object' && \r\n             typeof (metric as { hit_rate?: number }).hit_rate === 'number';\r\n    })\r\n    .map(callback);\r\n}\r\n\r\n/**\r\n * DEV-only diagnostic helper for debugging health data structures\r\n */\r\nexport function debugHealthStructure(obj: unknown, label: string = 'Health'): void {\r\n  if (process.env.NODE_ENV !== 'development') {\r\n    return;\r\n  }\r\n\r\n  const cacheHitRate = getCacheHitRate(obj);\r\n  const hasPerf = hasPerformanceSection(obj);\r\n  const healthObj = obj as HealthLikeObject;\r\n  \r\n  const rawPresence = {\r\n    'performance.cache_hit_rate': typeof healthObj?.performance?.cache_hit_rate === 'number',\r\n    'performance.hit_rate': typeof healthObj?.performance?.hit_rate === 'number',\r\n    'infrastructure.cache.hit_rate_percent': typeof healthObj?.infrastructure?.cache?.hit_rate_percent === 'number',\r\n    'cache_performance.hit_rate': typeof healthObj?.cache_performance?.hit_rate === 'number',\r\n    'flat.hit_rate': typeof healthObj?.hit_rate === 'number'\r\n  };\r\n\r\n  // eslint-disable-next-line no-console\r\n  console.debug(`[HealthDiag] ${label}:`, {\r\n    extractedCacheHitRate: cacheHitRate,\r\n    hasPerformanceSection: hasPerf,\r\n    rawPresence\r\n  });\r\n}\r\n\r\n/**\r\n * Safely extract cache type from health/metrics objects with fallback\r\n */\r\nexport function getCacheType(obj: unknown): string {\r\n  if (!obj || typeof obj !== 'object') {\r\n    return 'Unknown';\r\n  }\r\n\r\n  const healthObj = obj as HealthLikeObject & { \r\n    performance?: { cache_type?: string };\r\n    cache_type?: string;\r\n  };\r\n\r\n  // Try performance.cache_type first\r\n  if (typeof healthObj?.performance?.cache_type === 'string') {\r\n    return healthObj.performance.cache_type;\r\n  }\r\n\r\n  // Fall back to flat cache_type\r\n  if (typeof healthObj?.cache_type === 'string') {\r\n    return healthObj.cache_type;\r\n  }\r\n\r\n  return 'Unknown';\r\n}"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAiBA;AACA,IAAIA,sBAAsB,GAAG,KAAK;AAClC,IAAIC,oBAAoB,GAAG,KAAK;AAChC,IAAIC,uBAAuB,GAAG,KAAK;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,eAAeA,CAACC,GAAY,EAAU;EACpD,IAAI,CAACA,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACnC,OAAO,CAAC;EACV;EAEA,MAAMC,SAAS,GAAGD,GAAuB;;EAEzC;EACA,IAAI,OAAOC,SAAS,EAAEC,WAAW,EAAEC,cAAc,KAAK,QAAQ,EAAE;IAC9D,OAAOF,SAAS,CAACC,WAAW,CAACC,cAAc;EAC7C;;EAEA;EACA,IAAI,OAAOF,SAAS,EAAEC,WAAW,EAAEE,QAAQ,KAAK,QAAQ,EAAE;IACxD,IAAI,CAACR,sBAAsB,IAAIS,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;MACrEX,sBAAsB,GAAG,IAAI;MAC7B;MACAY,OAAO,CAACC,IAAI,CAAC,wFAAwF,CAAC;IACxG;IACA,OAAOR,SAAS,CAACC,WAAW,CAACE,QAAQ;EACvC;;EAEA;EACA,IAAI,OAAOH,SAAS,EAAES,cAAc,EAAEC,KAAK,EAAEC,gBAAgB,KAAK,QAAQ,EAAE;IAC1E,IAAI,CAACd,uBAAuB,IAAIO,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;MACtET,uBAAuB,GAAG,IAAI;MAC9B;MACAU,OAAO,CAACC,IAAI,CAAC,8GAA8G,CAAC;IAC9H;IACA,OAAOR,SAAS,CAACS,cAAc,CAACC,KAAK,CAACC,gBAAgB;EACxD;;EAEA;EACA,IAAI,OAAOX,SAAS,EAAEY,iBAAiB,EAAET,QAAQ,KAAK,QAAQ,EAAE;IAC9D,OAAOH,SAAS,CAACY,iBAAiB,CAACT,QAAQ;EAC7C;;EAEA;EACA,IAAI,OAAOH,SAAS,EAAEG,QAAQ,KAAK,QAAQ,EAAE;IAC3C,IAAI,CAACP,oBAAoB,IAAIQ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;MACnEV,oBAAoB,GAAG,IAAI;MAC3B;MACAW,OAAO,CAACC,IAAI,CAAC,sFAAsF,CAAC;IACtG;IACA,OAAOR,SAAS,CAACG,QAAQ;EAC3B;;EAEA;EACA,OAAO,CAAC;AACV;;AAEA;AACA;AACA;AACO,SAASU,qBAAqBA,CAACd,GAAY,EAAW;EAC3D,IAAI,CAACA,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACnC,OAAO,KAAK;EACd;EAEA,MAAMC,SAAS,GAAGD,GAAuB;EAEzC,OAAO,CAAC,EACNC,SAAS,CAACC,WAAW,IACrBD,SAAS,CAACS,cAAc,EAAEC,KAAK,IAC/BV,SAAS,CAACY,iBAAiB,IAC3B,OAAOZ,SAAS,CAACG,QAAQ,KAAK,QAAQ,CACvC;AACH;;AAEA;AACA;AACA;AACA;AACO,SAASW,uBAAuBA,CACrCC,OAA+B,EAC/BC,QAAsE,EAC3D;EACX,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,OAAO,CAAC,EAAE;IAC3B,OAAO,EAAE;EACX;EAEA,OAAOA,OAAO,CACXI,MAAM,CAAEC,MAAM,IAAyC;IACtD,OAAOA,MAAM,IAAI,IAAI,IACd,OAAOA,MAAM,KAAK,QAAQ,IAC1B,OAAQA,MAAM,CAA2BjB,QAAQ,KAAK,QAAQ;EACvE,CAAC,CAAC,CACDkB,GAAG,CAACL,QAAQ,CAAC;AAClB;;AAEA;AACA;AACA;AACO,SAASM,oBAAoBA,CAACvB,GAAY,EAAEwB,KAAa,GAAG,QAAQ,EAAQ;EACjF,IAAInB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAC1C;EACF;EAEA,MAAMkB,YAAY,GAAG1B,eAAe,CAACC,GAAG,CAAC;EACzC,MAAM0B,OAAO,GAAGZ,qBAAqB,CAACd,GAAG,CAAC;EAC1C,MAAMC,SAAS,GAAGD,GAAuB;EAEzC,MAAM2B,WAAW,GAAG;IAClB,4BAA4B,EAAE,OAAO1B,SAAS,EAAEC,WAAW,EAAEC,cAAc,KAAK,QAAQ;IACxF,sBAAsB,EAAE,OAAOF,SAAS,EAAEC,WAAW,EAAEE,QAAQ,KAAK,QAAQ;IAC5E,uCAAuC,EAAE,OAAOH,SAAS,EAAES,cAAc,EAAEC,KAAK,EAAEC,gBAAgB,KAAK,QAAQ;IAC/G,4BAA4B,EAAE,OAAOX,SAAS,EAAEY,iBAAiB,EAAET,QAAQ,KAAK,QAAQ;IACxF,eAAe,EAAE,OAAOH,SAAS,EAAEG,QAAQ,KAAK;EAClD,CAAC;;EAED;EACAI,OAAO,CAACoB,KAAK,CAAC,gBAAgBJ,KAAK,GAAG,EAAE;IACtCK,qBAAqB,EAAEJ,YAAY;IACnCX,qBAAqB,EAAEY,OAAO;IAC9BC;EACF,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACO,SAASG,YAAYA,CAAC9B,GAAY,EAAU;EACjD,IAAI,CAACA,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACnC,OAAO,SAAS;EAClB;EAEA,MAAMC,SAAS,GAAGD,GAGjB;;EAED;EACA,IAAI,OAAOC,SAAS,EAAEC,WAAW,EAAE6B,UAAU,KAAK,QAAQ,EAAE;IAC1D,OAAO9B,SAAS,CAACC,WAAW,CAAC6B,UAAU;EACzC;;EAEA;EACA,IAAI,OAAO9B,SAAS,EAAE8B,UAAU,KAAK,QAAQ,EAAE;IAC7C,OAAO9B,SAAS,CAAC8B,UAAU;EAC7B;EAEA,OAAO,SAAS;AAClB","ignoreList":[]}