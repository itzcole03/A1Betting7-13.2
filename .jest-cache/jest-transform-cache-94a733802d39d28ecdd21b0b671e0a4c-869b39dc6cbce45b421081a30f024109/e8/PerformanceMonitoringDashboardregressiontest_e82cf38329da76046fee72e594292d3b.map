{"version":3,"names":["_getJestObj","mock","motion","div","props","_jsxRuntime","jsx","button","_interopRequireDefault","require","_react","_react2","_PerformanceMonitoringDashboard","_robustApi","jest","mockFetchHealthData","fetchHealthData","mockFetchPerformanceStats","fetchPerformanceStats","describe","beforeEach","clearAllMocks","it","mockHealth","status","services","api","cache","database","performance","hit_rate","cache_type","uptime_seconds","mockMetrics","api_performance","cache_performance","hits","misses","errors","total_requests","system_info","optimization_level","caching_strategy","monitoring","mockResolvedValue","data","render","default","screen","findByText","expect","getByText","toBeInTheDocument","hitRateElements","findAllByText","length","toBeGreaterThanOrEqual","queryByText","not","zeroRateElements","infrastructure","hit_rate_percent","infraRateElements"],"sources":["PerformanceMonitoringDashboard.regression.test.tsx"],"sourcesContent":["/**\r\n * Regression tests for hit_rate runtime error fixes\r\n * Ensures components handle various hit_rate data structures safely\r\n */\r\n\r\nimport React from 'react';\r\nimport { render, screen } from '@testing-library/react';\r\nimport PerformanceMonitoringDashboard from '../phase4/PerformanceMonitoringDashboard';\r\nimport { fetchHealthData, fetchPerformanceStats } from '../../utils/robustApi';\r\n\r\n// Mock the API calls\r\njest.mock('../../utils/robustApi');\r\nconst mockFetchHealthData = fetchHealthData as jest.MockedFunction<typeof fetchHealthData>;\r\nconst mockFetchPerformanceStats = fetchPerformanceStats as jest.MockedFunction<typeof fetchPerformanceStats>;\r\n\r\n// Mock framer-motion to avoid animation issues in tests\r\njest.mock('framer-motion', () => ({\r\n  motion: {\r\n    div: (props: any) => <div {...props} />,\r\n    button: (props: any) => <button {...props} />\r\n  }\r\n}));\r\n\r\ndescribe('PerformanceMonitoringDashboard - hit_rate regression tests', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should handle health data with performance.hit_rate only', async () => {\r\n    const mockHealth = {\r\n      status: 'healthy',\r\n      services: { api: 'operational', cache: 'operational', database: 'operational' },\r\n      performance: { hit_rate: 75.5, cache_type: 'memory' },\r\n      uptime_seconds: 3600\r\n    };\r\n\r\n    const mockMetrics = {\r\n      api_performance: {},\r\n      cache_performance: {\r\n        cache_type: 'memory',\r\n        hits: 100,\r\n        misses: 25,\r\n        errors: 0,\r\n        hit_rate: 80.0,\r\n        total_requests: 125\r\n      },\r\n      system_info: {\r\n        optimization_level: 'Test',\r\n        caching_strategy: 'Test Mode',\r\n        monitoring: 'Test'\r\n      }\r\n    };\r\n\r\n    mockFetchHealthData.mockResolvedValue(mockHealth as any);\r\n    mockFetchPerformanceStats.mockResolvedValue({ data: mockMetrics });\r\n\r\n    render(<PerformanceMonitoringDashboard />);\r\n\r\n    // Wait for data to load and check that percentages are displayed\r\n    await screen.findByText('75.5%'); // Health cache hit rate\r\n    expect(screen.getByText('80.0%')).toBeInTheDocument(); // Metrics cache hit rate\r\n  });\r\n\r\n  it('should handle health data with flat hit_rate structure', async () => {\r\n    const mockHealth = {\r\n      status: 'healthy',\r\n      services: { api: 'operational', cache: 'operational', database: 'operational' },\r\n      hit_rate: 66.0, // Flat structure\r\n      uptime_seconds: 3600\r\n    };\r\n\r\n    const mockMetrics = {\r\n      api_performance: {},\r\n      cache_performance: {\r\n        cache_type: 'memory',\r\n        hits: 100,\r\n        misses: 51,\r\n        errors: 0,\r\n        hit_rate: 66.0,\r\n        total_requests: 151\r\n      },\r\n      system_info: {\r\n        optimization_level: 'Test',\r\n        caching_strategy: 'Test Mode',\r\n        monitoring: 'Test'\r\n      }\r\n    };\r\n\r\n    mockFetchHealthData.mockResolvedValue(mockHealth as any);\r\n    mockFetchPerformanceStats.mockResolvedValue({ data: mockMetrics });\r\n\r\n    render(<PerformanceMonitoringDashboard />);\r\n\r\n    // Should not crash and should display the hit rates\r\n    const hitRateElements = await screen.findAllByText('66.0%');\r\n    expect(hitRateElements.length).toBeGreaterThanOrEqual(1);\r\n    expect(screen.queryByText('Cannot read properties of undefined')).not.toBeInTheDocument();\r\n  });\r\n\r\n  it('should handle empty health data gracefully', async () => {\r\n    const mockHealth = {\r\n      status: 'healthy',\r\n      services: { api: 'operational', cache: 'operational', database: 'operational' },\r\n      uptime_seconds: 3600\r\n      // No performance or hit_rate data\r\n    };\r\n\r\n    const mockMetrics = {\r\n      api_performance: {},\r\n      cache_performance: {\r\n        cache_type: 'memory',\r\n        hits: 0,\r\n        misses: 1,\r\n        errors: 0,\r\n        total_requests: 1\r\n        // No hit_rate field\r\n      },\r\n      system_info: {\r\n        optimization_level: 'Test',\r\n        caching_strategy: 'Test Mode',\r\n        monitoring: 'Test'\r\n      }\r\n    };\r\n\r\n    mockFetchHealthData.mockResolvedValue(mockHealth as any);\r\n    mockFetchPerformanceStats.mockResolvedValue({ data: mockMetrics });\r\n\r\n    render(<PerformanceMonitoringDashboard />);\r\n\r\n    // Should display 0.0% instead of crashing\r\n    const zeroRateElements = await screen.findAllByText('0.0%');\r\n    expect(zeroRateElements.length).toBeGreaterThanOrEqual(1);\r\n    expect(screen.queryByText('Cannot read properties of undefined')).not.toBeInTheDocument();\r\n  });\r\n\r\n  it('should handle infrastructure cache structure (Phase 3)', async () => {\r\n    const mockHealth = {\r\n      status: 'healthy',\r\n      services: { api: 'operational', cache: 'operational', database: 'operational' },\r\n      infrastructure: {\r\n        cache: { hit_rate_percent: 89.2 }\r\n      },\r\n      uptime_seconds: 3600\r\n    };\r\n\r\n    const mockMetrics = {\r\n      api_performance: {},\r\n      cache_performance: {\r\n        cache_type: 'memory',\r\n        hits: 892,\r\n        misses: 108,\r\n        errors: 0,\r\n        hit_rate: 89.2,\r\n        total_requests: 1000\r\n      },\r\n      system_info: {\r\n        optimization_level: 'Phase 3',\r\n        caching_strategy: 'Infrastructure Mode',\r\n        monitoring: 'Phase 3'\r\n      }\r\n    };\r\n\r\n    mockFetchHealthData.mockResolvedValue(mockHealth as any);\r\n    mockFetchPerformanceStats.mockResolvedValue({ data: mockMetrics });\r\n\r\n    render(<PerformanceMonitoringDashboard />);\r\n\r\n    // Should correctly map infrastructure.cache.hit_rate_percent\r\n    const infraRateElements = await screen.findAllByText('89.2%');\r\n    expect(infraRateElements.length).toBeGreaterThanOrEqual(1);\r\n    expect(screen.queryByText('Cannot read properties of undefined')).not.toBeInTheDocument();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}