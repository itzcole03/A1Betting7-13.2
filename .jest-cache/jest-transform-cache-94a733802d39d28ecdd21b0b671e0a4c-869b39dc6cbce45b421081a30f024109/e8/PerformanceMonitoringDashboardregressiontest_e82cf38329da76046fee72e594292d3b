fb461be04df4b2a1126abbc76dd271ed
"use strict";

// Mock the API calls
_getJestObj().mock('../../utils/robustApi');
// Mock framer-motion to avoid animation issues in tests
_getJestObj().mock('framer-motion', () => ({
  motion: {
    div: props => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      ...props
    }),
    button: props => /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
      ...props
    })
  }
}));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _PerformanceMonitoringDashboard = _interopRequireDefault(require("../phase4/PerformanceMonitoringDashboard"));
var _robustApi = require("../../utils/robustApi");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * Regression tests for hit_rate runtime error fixes
 * Ensures components handle various hit_rate data structures safely
 */
const mockFetchHealthData = _robustApi.fetchHealthData;
const mockFetchPerformanceStats = _robustApi.fetchPerformanceStats;
describe('PerformanceMonitoringDashboard - hit_rate regression tests', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });
  it('should handle health data with performance.hit_rate only', async () => {
    const mockHealth = {
      status: 'healthy',
      services: {
        api: 'operational',
        cache: 'operational',
        database: 'operational'
      },
      performance: {
        hit_rate: 75.5,
        cache_type: 'memory'
      },
      uptime_seconds: 3600
    };
    const mockMetrics = {
      api_performance: {},
      cache_performance: {
        cache_type: 'memory',
        hits: 100,
        misses: 25,
        errors: 0,
        hit_rate: 80.0,
        total_requests: 125
      },
      system_info: {
        optimization_level: 'Test',
        caching_strategy: 'Test Mode',
        monitoring: 'Test'
      }
    };
    mockFetchHealthData.mockResolvedValue(mockHealth);
    mockFetchPerformanceStats.mockResolvedValue({
      data: mockMetrics
    });
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceMonitoringDashboard.default, {}));

    // Wait for data to load and check that percentages are displayed
    await _react2.screen.findByText('75.5%'); // Health cache hit rate
    expect(_react2.screen.getByText('80.0%')).toBeInTheDocument(); // Metrics cache hit rate
  });
  it('should handle health data with flat hit_rate structure', async () => {
    const mockHealth = {
      status: 'healthy',
      services: {
        api: 'operational',
        cache: 'operational',
        database: 'operational'
      },
      hit_rate: 66.0,
      // Flat structure
      uptime_seconds: 3600
    };
    const mockMetrics = {
      api_performance: {},
      cache_performance: {
        cache_type: 'memory',
        hits: 100,
        misses: 51,
        errors: 0,
        hit_rate: 66.0,
        total_requests: 151
      },
      system_info: {
        optimization_level: 'Test',
        caching_strategy: 'Test Mode',
        monitoring: 'Test'
      }
    };
    mockFetchHealthData.mockResolvedValue(mockHealth);
    mockFetchPerformanceStats.mockResolvedValue({
      data: mockMetrics
    });
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceMonitoringDashboard.default, {}));

    // Should not crash and should display the hit rates
    const hitRateElements = await _react2.screen.findAllByText('66.0%');
    expect(hitRateElements.length).toBeGreaterThanOrEqual(1);
    expect(_react2.screen.queryByText('Cannot read properties of undefined')).not.toBeInTheDocument();
  });
  it('should handle empty health data gracefully', async () => {
    const mockHealth = {
      status: 'healthy',
      services: {
        api: 'operational',
        cache: 'operational',
        database: 'operational'
      },
      uptime_seconds: 3600
      // No performance or hit_rate data
    };
    const mockMetrics = {
      api_performance: {},
      cache_performance: {
        cache_type: 'memory',
        hits: 0,
        misses: 1,
        errors: 0,
        total_requests: 1
        // No hit_rate field
      },
      system_info: {
        optimization_level: 'Test',
        caching_strategy: 'Test Mode',
        monitoring: 'Test'
      }
    };
    mockFetchHealthData.mockResolvedValue(mockHealth);
    mockFetchPerformanceStats.mockResolvedValue({
      data: mockMetrics
    });
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceMonitoringDashboard.default, {}));

    // Should display 0.0% instead of crashing
    const zeroRateElements = await _react2.screen.findAllByText('0.0%');
    expect(zeroRateElements.length).toBeGreaterThanOrEqual(1);
    expect(_react2.screen.queryByText('Cannot read properties of undefined')).not.toBeInTheDocument();
  });
  it('should handle infrastructure cache structure (Phase 3)', async () => {
    const mockHealth = {
      status: 'healthy',
      services: {
        api: 'operational',
        cache: 'operational',
        database: 'operational'
      },
      infrastructure: {
        cache: {
          hit_rate_percent: 89.2
        }
      },
      uptime_seconds: 3600
    };
    const mockMetrics = {
      api_performance: {},
      cache_performance: {
        cache_type: 'memory',
        hits: 892,
        misses: 108,
        errors: 0,
        hit_rate: 89.2,
        total_requests: 1000
      },
      system_info: {
        optimization_level: 'Phase 3',
        caching_strategy: 'Infrastructure Mode',
        monitoring: 'Phase 3'
      }
    };
    mockFetchHealthData.mockResolvedValue(mockHealth);
    mockFetchPerformanceStats.mockResolvedValue({
      data: mockMetrics
    });
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceMonitoringDashboard.default, {}));

    // Should correctly map infrastructure.cache.hit_rate_percent
    const infraRateElements = await _react2.screen.findAllByText('89.2%');
    expect(infraRateElements.length).toBeGreaterThanOrEqual(1);
    expect(_react2.screen.queryByText('Cannot read properties of undefined')).not.toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,