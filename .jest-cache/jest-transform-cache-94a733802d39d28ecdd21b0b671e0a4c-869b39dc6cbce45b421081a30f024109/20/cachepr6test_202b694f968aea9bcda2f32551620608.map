{"version":3,"names":["_react","_interopRequireDefault","require","_react2","_useCacheStats","_CacheStatsPanel","_jsxRuntime","mockFetch","jest","fn","global","fetch","mockCacheStats","cache_version","total_keys","hit_count","miss_count","hit_ratio","average_get_latency_ms","total_operations","rebuild_events","stampede_preventions","namespaced_counts","tier_breakdown","latency_percentiles","p50","p90","p95","p99","uptime_seconds","active_locks","timestamp","Date","toISOString","mockCacheHealth","healthy","operations","get","set","delete","stats_snapshot","describe","it","expect","formatCacheStats","hitRatio","toBe","latency","uptime","count","beforeEach","clearAllMocks","mockImplementation","Promise","render","jsx","default","screen","getByText","toBeInTheDocument","mockResolvedValueOnce","ok","json","waitFor","getAllByText","mockRejectedValueOnce","Error","onError","getByRole","name","retryButton","fireEvent","click","mock","calls","length","toBeGreaterThanOrEqual","showNamespaceBreakdown","showLatencyMetrics","showHealthIndicator","onStatsUpdate","toHaveBeenCalledWith","keysHeaders","tableKeysHeader","find","el","tagName","customClass","container","className","firstChild","toHaveClass","queryByText","not","refreshInterval"],"sources":["cache-pr6.test.tsx"],"sourcesContent":["/**\r\n * Frontend Component Tests for PR6 Cache Observability\r\n * \r\n * Test Coverage:\r\n * - useCacheStats hook: polling, error handling, retry logic, environment detection\r\n * - CacheStatsPanel component: rendering, error states, interactions\r\n * - formatCacheStats utility functions\r\n * \r\n * Run with: npm test -- --testPathPattern=cache-pr6\r\n */\r\n\r\nimport React from 'react';\r\nimport { render, screen, waitFor, fireEvent } from '@testing-library/react';\r\nimport '@testing-library/jest-dom';\r\n\r\n// Mock fetch for testing\r\nconst mockFetch = jest.fn();\r\nglobal.fetch = mockFetch;\r\n\r\n// Import components and hooks to test\r\nimport { \r\n  formatCacheStats,\r\n  type CacheStats,\r\n  type CacheHealth\r\n} from '../cache/useCacheStats';\r\nimport CacheStatsPanel from '../diagnostics/CacheStatsPanel';\r\n\r\n// Mock data for tests\r\nconst mockCacheStats: CacheStats = {\r\n  cache_version: \"v1\",\r\n  total_keys: 1500,\r\n  hit_count: 850,\r\n  miss_count: 150,\r\n  hit_ratio: 0.85,\r\n  average_get_latency_ms: 2.3,\r\n  total_operations: 1000,\r\n  rebuild_events: 12,\r\n  stampede_preventions: 3,\r\n  namespaced_counts: {\r\n    \"user:profile\": 450,\r\n    \"game:data\": 680,\r\n    \"api:responses\": 370\r\n  },\r\n  tier_breakdown: {\r\n    \"raw_provider\": { \"total\": 500, \"active\": 450 },\r\n    \"analytics\": { \"total\": 750, \"active\": 600 },\r\n    \"temp\": { \"total\": 250, \"active\": 150 }\r\n  },\r\n  latency_percentiles: {\r\n    p50: 1.8,\r\n    p90: 4.2,\r\n    p95: 6.1,\r\n    p99: 12.5\r\n  },\r\n  uptime_seconds: 86400,\r\n  active_locks: 2,\r\n  timestamp: new Date().toISOString()\r\n};\r\n\r\nconst mockCacheHealth: CacheHealth = {\r\n  healthy: true,\r\n  operations: {\r\n    get: true,\r\n    set: true,\r\n    delete: true\r\n  },\r\n  stats_snapshot: {\r\n    total_operations: 1000,\r\n    hit_ratio: 0.85\r\n  }\r\n};\r\n\r\ndescribe('formatCacheStats Utility Functions', () => {\r\n  it('should format hit ratio correctly', () => {\r\n    expect(formatCacheStats.hitRatio(0.856)).toBe('85.6%');\r\n    expect(formatCacheStats.hitRatio(1.0)).toBe('100.0%');\r\n    expect(formatCacheStats.hitRatio(0)).toBe('0.0%');\r\n  });\r\n\r\n  it('should format latency with appropriate units', () => {\r\n    expect(formatCacheStats.latency(0.5)).toBe('500Î¼s');\r\n    expect(formatCacheStats.latency(2.3)).toBe('2.3ms');\r\n    expect(formatCacheStats.latency(1500)).toBe('1.5s');\r\n  });\r\n\r\n  it('should format uptime duration', () => {\r\n    expect(formatCacheStats.uptime(3661)).toBe('1h 1m'); // 1 hour, 1 minute, 1 second\r\n    expect(formatCacheStats.uptime(90061)).toBe('1d 1h 1m'); // 1 day, 1 hour, 1 minute\r\n    expect(formatCacheStats.uptime(3600)).toBe('1h 0m'); // exactly 1 hour\r\n    expect(formatCacheStats.uptime(300)).toBe('5m'); // 5 minutes\r\n  });\r\n\r\n  it('should format large numbers with appropriate units', () => {\r\n    expect(formatCacheStats.count(999)).toBe('999');\r\n    expect(formatCacheStats.count(1500)).toBe('1.5K');\r\n    expect(formatCacheStats.count(1500000)).toBe('1.5M');\r\n  });\r\n});\r\n\r\ndescribe('CacheStatsPanel Component', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should render loading state initially', () => {\r\n    mockFetch.mockImplementation(() => new Promise(() => {})); // Never resolves\r\n\r\n    render(<CacheStatsPanel />);\r\n\r\n    expect(screen.getByText('Loading cache statistics...')).toBeInTheDocument();\r\n  });\r\n\r\n  it('should render cache statistics when data is loaded', async () => {\r\n    mockFetch\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheStats,\r\n      })\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheHealth,\r\n      });\r\n\r\n    render(<CacheStatsPanel />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Cache Statistics')).toBeInTheDocument();\r\n    });\r\n\r\n    // Check key metrics are displayed - use getAllByText for multiple instances\r\n    expect(screen.getAllByText('85.0%')[0]).toBeInTheDocument(); // Hit ratio\r\n    expect(screen.getByText('1.5K')).toBeInTheDocument(); // Total keys\r\n    expect(screen.getByText('2.3ms')).toBeInTheDocument(); // Latency\r\n  });\r\n\r\n  it('should render error state with retry button', async () => {\r\n    mockFetch.mockRejectedValueOnce(new Error('API Error'));\r\n\r\n    const onError = jest.fn();\r\n    render(<CacheStatsPanel onError={onError} />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Failed to load cache statistics')).toBeInTheDocument();\r\n    });\r\n\r\n    expect(screen.getByText('API Error')).toBeInTheDocument();\r\n    expect(screen.getByRole('button', { name: 'Retry' })).toBeInTheDocument();\r\n  });\r\n\r\n  it('should handle retry button click', async () => {\r\n    mockFetch\r\n      .mockRejectedValueOnce(new Error('First error'))\r\n      .mockRejectedValueOnce(new Error('Health error'))\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheStats,\r\n      })\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheHealth,\r\n      });\r\n\r\n    render(<CacheStatsPanel />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Failed to load cache statistics')).toBeInTheDocument();\r\n    });\r\n\r\n    // Click retry button\r\n    const retryButton = screen.getByRole('button', { name: 'Retry' });\r\n    fireEvent.click(retryButton);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Cache Statistics')).toBeInTheDocument();\r\n    });\r\n\r\n    // Allow for additional retry attempts from exponential backoff - just check it's called at least 4 times\r\n    expect(mockFetch.mock.calls.length).toBeGreaterThanOrEqual(4);\r\n  });\r\n\r\n  it('should render namespace breakdown table', async () => {\r\n    mockFetch\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheStats,\r\n      })\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheHealth,\r\n      });\r\n\r\n    render(<CacheStatsPanel showNamespaceBreakdown={true} />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Namespace Breakdown')).toBeInTheDocument();\r\n    });\r\n\r\n    // Check namespace entries are displayed\r\n    expect(screen.getByText('user:profile')).toBeInTheDocument();\r\n    expect(screen.getByText('game:data')).toBeInTheDocument();\r\n    expect(screen.getByText('api:responses')).toBeInTheDocument();\r\n  });\r\n\r\n  it('should render latency metrics when enabled', async () => {\r\n    mockFetch\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheStats,\r\n      })\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheHealth,\r\n      });\r\n\r\n    render(<CacheStatsPanel showLatencyMetrics={true} />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Latency Percentiles')).toBeInTheDocument();\r\n    });\r\n\r\n    // Check percentile labels\r\n    expect(screen.getByText('P50 (Median)')).toBeInTheDocument();\r\n    expect(screen.getByText('P90')).toBeInTheDocument();\r\n    expect(screen.getByText('P95')).toBeInTheDocument();\r\n    expect(screen.getByText('P99')).toBeInTheDocument();\r\n  });\r\n\r\n  it('should show health indicator when enabled', async () => {\r\n    mockFetch\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheStats,\r\n      })\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheHealth,\r\n      });\r\n\r\n    render(<CacheStatsPanel showHealthIndicator={true} />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Healthy')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('should call onStatsUpdate when stats are received', async () => {\r\n    const onStatsUpdate = jest.fn();\r\n\r\n    mockFetch\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheStats,\r\n      })\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheHealth,\r\n      });\r\n\r\n    render(\r\n      <CacheStatsPanel \r\n        onStatsUpdate={onStatsUpdate}\r\n      />\r\n    );\r\n\r\n    await waitFor(() => {\r\n      expect(onStatsUpdate).toHaveBeenCalledWith(mockCacheStats);\r\n    });\r\n  });\r\n\r\n  it('should handle namespace table sorting', async () => {\r\n    mockFetch\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheStats,\r\n      })\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheHealth,\r\n      });\r\n\r\n    render(<CacheStatsPanel showNamespaceBreakdown={true} />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Namespace Breakdown')).toBeInTheDocument();\r\n    });\r\n\r\n    // Click on the Keys column header to sort - use getAllByText to get the table header\r\n    const keysHeaders = screen.getAllByText(/Keys/);\r\n    const tableKeysHeader = keysHeaders.find(el => el.tagName === 'TH');\r\n    if (tableKeysHeader) {\r\n      fireEvent.click(tableKeysHeader);\r\n    }\r\n\r\n    // Should re-render with sorted data (testing interaction works)\r\n    expect(screen.getByText('user:profile')).toBeInTheDocument();\r\n  });\r\n\r\n  it('should respect custom className prop', async () => {\r\n    const customClass = 'custom-cache-panel';\r\n\r\n    mockFetch\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheStats,\r\n      })\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheHealth,\r\n      });\r\n\r\n    const { container } = render(\r\n      <CacheStatsPanel className={customClass} />\r\n    );\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Cache Statistics')).toBeInTheDocument();\r\n    });\r\n\r\n    expect(container.firstChild).toHaveClass(customClass);\r\n  });\r\n\r\n  it('should disable features based on props', async () => {\r\n    mockFetch\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheStats,\r\n      })\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheHealth,\r\n      });\r\n\r\n    render(\r\n      <CacheStatsPanel \r\n        showNamespaceBreakdown={false}\r\n        showLatencyMetrics={false}\r\n        showHealthIndicator={false}\r\n      />\r\n    );\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Cache Statistics')).toBeInTheDocument();\r\n    });\r\n\r\n    // These sections should not be rendered\r\n    expect(screen.queryByText('Namespace Breakdown')).not.toBeInTheDocument();\r\n    expect(screen.queryByText('Latency Percentiles')).not.toBeInTheDocument();\r\n    expect(screen.queryByText('Healthy')).not.toBeInTheDocument();\r\n  });\r\n\r\n  it('should handle complete cache stats workflow', async () => {\r\n    // Mock successful stats and health responses\r\n    mockFetch\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheStats,\r\n      })\r\n      .mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCacheHealth,\r\n      });\r\n\r\n    const onStatsUpdate = jest.fn();\r\n    const onError = jest.fn();\r\n\r\n    render(\r\n      <CacheStatsPanel \r\n        onStatsUpdate={onStatsUpdate}\r\n        onError={onError}\r\n        refreshInterval={1000}\r\n        showNamespaceBreakdown={true}\r\n        showLatencyMetrics={true}\r\n        showHealthIndicator={true}\r\n      />\r\n    );\r\n\r\n    // Wait for initial load\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Cache Statistics')).toBeInTheDocument();\r\n    });\r\n\r\n    // Verify all sections are rendered\r\n    expect(screen.getByText('Cache Statistics')).toBeInTheDocument();\r\n    expect(screen.getByText('Namespace Breakdown')).toBeInTheDocument();\r\n    expect(screen.getByText('Latency Percentiles')).toBeInTheDocument();\r\n    expect(screen.getByText('Healthy')).toBeInTheDocument();\r\n\r\n    // Verify callbacks were called\r\n    expect(onStatsUpdate).toHaveBeenCalledWith(mockCacheStats);\r\n\r\n    // Verify key metrics are displayed correctly - use getAllByText for multiple instances\r\n    expect(screen.getAllByText('85.0%')[0]).toBeInTheDocument(); // Hit ratio\r\n    expect(screen.getByText('1.5K')).toBeInTheDocument(); // Total keys formatted\r\n    expect(screen.getByText('2.3ms')).toBeInTheDocument(); // Latency formatted\r\n\r\n    // Verify cache version is displayed\r\n    expect(screen.getByText(/Cache Version: v1/)).toBeInTheDocument();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}