43625e4c3ba1a3fae360230e0d532a0d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom");
var _useCacheStats = require("../cache/useCacheStats");
var _CacheStatsPanel = _interopRequireDefault(require("../diagnostics/CacheStatsPanel"));
var _jsxRuntime = require("react/jsx-runtime");
/**
 * Frontend Component Tests for PR6 Cache Observability
 * 
 * Test Coverage:
 * - useCacheStats hook: polling, error handling, retry logic, environment detection
 * - CacheStatsPanel component: rendering, error states, interactions
 * - formatCacheStats utility functions
 * 
 * Run with: npm test -- --testPathPattern=cache-pr6
 */

// Mock fetch for testing
const mockFetch = jest.fn();
global.fetch = mockFetch;

// Import components and hooks to test

// Mock data for tests
const mockCacheStats = {
  cache_version: "v1",
  total_keys: 1500,
  hit_count: 850,
  miss_count: 150,
  hit_ratio: 0.85,
  average_get_latency_ms: 2.3,
  total_operations: 1000,
  rebuild_events: 12,
  stampede_preventions: 3,
  namespaced_counts: {
    "user:profile": 450,
    "game:data": 680,
    "api:responses": 370
  },
  tier_breakdown: {
    "raw_provider": {
      "total": 500,
      "active": 450
    },
    "analytics": {
      "total": 750,
      "active": 600
    },
    "temp": {
      "total": 250,
      "active": 150
    }
  },
  latency_percentiles: {
    p50: 1.8,
    p90: 4.2,
    p95: 6.1,
    p99: 12.5
  },
  uptime_seconds: 86400,
  active_locks: 2,
  timestamp: new Date().toISOString()
};
const mockCacheHealth = {
  healthy: true,
  operations: {
    get: true,
    set: true,
    delete: true
  },
  stats_snapshot: {
    total_operations: 1000,
    hit_ratio: 0.85
  }
};
describe('formatCacheStats Utility Functions', () => {
  it('should format hit ratio correctly', () => {
    expect(_useCacheStats.formatCacheStats.hitRatio(0.856)).toBe('85.6%');
    expect(_useCacheStats.formatCacheStats.hitRatio(1.0)).toBe('100.0%');
    expect(_useCacheStats.formatCacheStats.hitRatio(0)).toBe('0.0%');
  });
  it('should format latency with appropriate units', () => {
    expect(_useCacheStats.formatCacheStats.latency(0.5)).toBe('500Î¼s');
    expect(_useCacheStats.formatCacheStats.latency(2.3)).toBe('2.3ms');
    expect(_useCacheStats.formatCacheStats.latency(1500)).toBe('1.5s');
  });
  it('should format uptime duration', () => {
    expect(_useCacheStats.formatCacheStats.uptime(3661)).toBe('1h 1m'); // 1 hour, 1 minute, 1 second
    expect(_useCacheStats.formatCacheStats.uptime(90061)).toBe('1d 1h 1m'); // 1 day, 1 hour, 1 minute
    expect(_useCacheStats.formatCacheStats.uptime(3600)).toBe('1h 0m'); // exactly 1 hour
    expect(_useCacheStats.formatCacheStats.uptime(300)).toBe('5m'); // 5 minutes
  });
  it('should format large numbers with appropriate units', () => {
    expect(_useCacheStats.formatCacheStats.count(999)).toBe('999');
    expect(_useCacheStats.formatCacheStats.count(1500)).toBe('1.5K');
    expect(_useCacheStats.formatCacheStats.count(1500000)).toBe('1.5M');
  });
});
describe('CacheStatsPanel Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });
  it('should render loading state initially', () => {
    mockFetch.mockImplementation(() => new Promise(() => {})); // Never resolves

    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_CacheStatsPanel.default, {}));
    expect(_react2.screen.getByText('Loading cache statistics...')).toBeInTheDocument();
  });
  it('should render cache statistics when data is loaded', async () => {
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheStats
    }).mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheHealth
    });
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_CacheStatsPanel.default, {}));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Cache Statistics')).toBeInTheDocument();
    });

    // Check key metrics are displayed - use getAllByText for multiple instances
    expect(_react2.screen.getAllByText('85.0%')[0]).toBeInTheDocument(); // Hit ratio
    expect(_react2.screen.getByText('1.5K')).toBeInTheDocument(); // Total keys
    expect(_react2.screen.getByText('2.3ms')).toBeInTheDocument(); // Latency
  });
  it('should render error state with retry button', async () => {
    mockFetch.mockRejectedValueOnce(new Error('API Error'));
    const onError = jest.fn();
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_CacheStatsPanel.default, {
      onError: onError
    }));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Failed to load cache statistics')).toBeInTheDocument();
    });
    expect(_react2.screen.getByText('API Error')).toBeInTheDocument();
    expect(_react2.screen.getByRole('button', {
      name: 'Retry'
    })).toBeInTheDocument();
  });
  it('should handle retry button click', async () => {
    mockFetch.mockRejectedValueOnce(new Error('First error')).mockRejectedValueOnce(new Error('Health error')).mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheStats
    }).mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheHealth
    });
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_CacheStatsPanel.default, {}));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Failed to load cache statistics')).toBeInTheDocument();
    });

    // Click retry button
    const retryButton = _react2.screen.getByRole('button', {
      name: 'Retry'
    });
    _react2.fireEvent.click(retryButton);
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Cache Statistics')).toBeInTheDocument();
    });

    // Allow for additional retry attempts from exponential backoff - just check it's called at least 4 times
    expect(mockFetch.mock.calls.length).toBeGreaterThanOrEqual(4);
  });
  it('should render namespace breakdown table', async () => {
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheStats
    }).mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheHealth
    });
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_CacheStatsPanel.default, {
      showNamespaceBreakdown: true
    }));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Namespace Breakdown')).toBeInTheDocument();
    });

    // Check namespace entries are displayed
    expect(_react2.screen.getByText('user:profile')).toBeInTheDocument();
    expect(_react2.screen.getByText('game:data')).toBeInTheDocument();
    expect(_react2.screen.getByText('api:responses')).toBeInTheDocument();
  });
  it('should render latency metrics when enabled', async () => {
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheStats
    }).mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheHealth
    });
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_CacheStatsPanel.default, {
      showLatencyMetrics: true
    }));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Latency Percentiles')).toBeInTheDocument();
    });

    // Check percentile labels
    expect(_react2.screen.getByText('P50 (Median)')).toBeInTheDocument();
    expect(_react2.screen.getByText('P90')).toBeInTheDocument();
    expect(_react2.screen.getByText('P95')).toBeInTheDocument();
    expect(_react2.screen.getByText('P99')).toBeInTheDocument();
  });
  it('should show health indicator when enabled', async () => {
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheStats
    }).mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheHealth
    });
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_CacheStatsPanel.default, {
      showHealthIndicator: true
    }));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Healthy')).toBeInTheDocument();
    });
  });
  it('should call onStatsUpdate when stats are received', async () => {
    const onStatsUpdate = jest.fn();
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheStats
    }).mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheHealth
    });
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_CacheStatsPanel.default, {
      onStatsUpdate: onStatsUpdate
    }));
    await (0, _react2.waitFor)(() => {
      expect(onStatsUpdate).toHaveBeenCalledWith(mockCacheStats);
    });
  });
  it('should handle namespace table sorting', async () => {
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheStats
    }).mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheHealth
    });
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_CacheStatsPanel.default, {
      showNamespaceBreakdown: true
    }));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Namespace Breakdown')).toBeInTheDocument();
    });

    // Click on the Keys column header to sort - use getAllByText to get the table header
    const keysHeaders = _react2.screen.getAllByText(/Keys/);
    const tableKeysHeader = keysHeaders.find(el => el.tagName === 'TH');
    if (tableKeysHeader) {
      _react2.fireEvent.click(tableKeysHeader);
    }

    // Should re-render with sorted data (testing interaction works)
    expect(_react2.screen.getByText('user:profile')).toBeInTheDocument();
  });
  it('should respect custom className prop', async () => {
    const customClass = 'custom-cache-panel';
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheStats
    }).mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheHealth
    });
    const {
      container
    } = (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_CacheStatsPanel.default, {
      className: customClass
    }));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Cache Statistics')).toBeInTheDocument();
    });
    expect(container.firstChild).toHaveClass(customClass);
  });
  it('should disable features based on props', async () => {
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheStats
    }).mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheHealth
    });
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_CacheStatsPanel.default, {
      showNamespaceBreakdown: false,
      showLatencyMetrics: false,
      showHealthIndicator: false
    }));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Cache Statistics')).toBeInTheDocument();
    });

    // These sections should not be rendered
    expect(_react2.screen.queryByText('Namespace Breakdown')).not.toBeInTheDocument();
    expect(_react2.screen.queryByText('Latency Percentiles')).not.toBeInTheDocument();
    expect(_react2.screen.queryByText('Healthy')).not.toBeInTheDocument();
  });
  it('should handle complete cache stats workflow', async () => {
    // Mock successful stats and health responses
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheStats
    }).mockResolvedValueOnce({
      ok: true,
      json: async () => mockCacheHealth
    });
    const onStatsUpdate = jest.fn();
    const onError = jest.fn();
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_CacheStatsPanel.default, {
      onStatsUpdate: onStatsUpdate,
      onError: onError,
      refreshInterval: 1000,
      showNamespaceBreakdown: true,
      showLatencyMetrics: true,
      showHealthIndicator: true
    }));

    // Wait for initial load
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Cache Statistics')).toBeInTheDocument();
    });

    // Verify all sections are rendered
    expect(_react2.screen.getByText('Cache Statistics')).toBeInTheDocument();
    expect(_react2.screen.getByText('Namespace Breakdown')).toBeInTheDocument();
    expect(_react2.screen.getByText('Latency Percentiles')).toBeInTheDocument();
    expect(_react2.screen.getByText('Healthy')).toBeInTheDocument();

    // Verify callbacks were called
    expect(onStatsUpdate).toHaveBeenCalledWith(mockCacheStats);

    // Verify key metrics are displayed correctly - use getAllByText for multiple instances
    expect(_react2.screen.getAllByText('85.0%')[0]).toBeInTheDocument(); // Hit ratio
    expect(_react2.screen.getByText('1.5K')).toBeInTheDocument(); // Total keys formatted
    expect(_react2.screen.getByText('2.3ms')).toBeInTheDocument(); // Latency formatted

    // Verify cache version is displayed
    expect(_react2.screen.getByText(/Cache Version: v1/)).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,