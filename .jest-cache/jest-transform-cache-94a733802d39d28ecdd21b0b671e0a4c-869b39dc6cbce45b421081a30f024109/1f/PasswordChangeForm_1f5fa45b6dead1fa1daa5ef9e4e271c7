441672dd6f296bf70de0178af159779e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const framer_motion_1 = require("framer-motion");
const lucide_react_1 = require("lucide-react");
const react_1 = __importStar(require("react"));
const PasswordChangeForm = ({ onPasswordChange, loading = false, error, isFirstLogin = false, userEmail, }) => {
    const [currentPassword, setCurrentPassword] = (0, react_1.useState)('');
    const [newPassword, setNewPassword] = (0, react_1.useState)('');
    const [confirmPassword, setConfirmPassword] = (0, react_1.useState)('');
    const [showCurrentPassword, setShowCurrentPassword] = (0, react_1.useState)(false);
    const [showNewPassword, setShowNewPassword] = (0, react_1.useState)(false);
    const [showConfirmPassword, setShowConfirmPassword] = (0, react_1.useState)(false);
    const [validationError, setValidationError] = (0, react_1.useState)(null);
    const validatePassword = (password) => {
        const checks = {
            length: password.length >= 8,
            uppercase: /[A-Z]/.test(password),
            lowercase: /[a-z]/.test(password),
            number: /\d/.test(password),
            special: /[!@#$%^&*(),.?":{}|<>]/.test(password),
        };
        return checks;
    };
    const passwordChecks = validatePassword(newPassword);
    const isPasswordValid = Object.values(passwordChecks).every(Boolean);
    const handleSubmit = async (e) => {
        e.preventDefault();
        setValidationError(null);
        // Validation
        if (!currentPassword.trim()) {
            setValidationError('Current password is required');
            return;
        }
        if (!newPassword.trim()) {
            setValidationError('New password is required');
            return;
        }
        if (!confirmPassword.trim()) {
            setValidationError('Password confirmation is required');
            return;
        }
        if (newPassword !== confirmPassword) {
            setValidationError('New passwords do not match');
            return;
        }
        if (!isPasswordValid) {
            setValidationError('New password does not meet security requirements');
            return;
        }
        if (newPassword === currentPassword) {
            setValidationError('New password must be different from current password');
            return;
        }
        if (onPasswordChange) {
            try {
                await onPasswordChange(currentPassword, newPassword, confirmPassword);
            }
            catch (err) {
                // Error is handled by parent component
            }
        }
    };
    const displayError = error || validationError;
    return ((0, jsx_runtime_1.jsx)(framer_motion_1.motion.div, { initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, className: 'max-w-md mx-auto', children: (0, jsx_runtime_1.jsxs)("div", { className: 'bg-slate-800/50 backdrop-blur-lg border border-slate-700/50 rounded-xl p-8', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'text-center mb-8', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-16 h-16 mx-auto mb-4 bg-gradient-to-r from-amber-500 to-orange-500 rounded-full flex items-center justify-center', children: isFirstLogin ? ((0, jsx_runtime_1.jsx)(lucide_react_1.Key, { className: 'w-8 h-8 text-white' })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.Lock, { className: 'w-8 h-8 text-white' })) }), (0, jsx_runtime_1.jsx)("h2", { className: 'text-2xl font-bold text-white mb-2', children: isFirstLogin ? 'First Time Setup' : 'Change Password' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-400', children: isFirstLogin
                                ? 'Please create a secure password for your account'
                                : 'Update your password for enhanced security' }), userEmail && (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-cyber-primary mt-2', children: userEmail })] }), isFirstLogin && ((0, jsx_runtime_1.jsx)(framer_motion_1.motion.div, { initial: { opacity: 0, scale: 0.95 }, animate: { opacity: 1, scale: 1 }, className: 'bg-blue-500/10 border border-blue-500/30 rounded-lg p-4 mb-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start space-x-3', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Shield, { className: 'w-5 h-5 text-blue-400 mt-0.5 flex-shrink-0' }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-blue-300 font-medium text-sm', children: "Welcome to A1 Betting Platform!" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-blue-200/80 text-xs mt-1', children: "For security, you must create a new password before accessing your account." })] })] }) })), (0, jsx_runtime_1.jsxs)("form", { onSubmit: handleSubmit, className: 'space-y-6', children: [displayError && ((0, jsx_runtime_1.jsx)(framer_motion_1.motion.div, { initial: { opacity: 0, scale: 0.95 }, animate: { opacity: 1, scale: 1 }, className: 'bg-red-500/10 border border-red-500/50 rounded-lg p-4', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-3', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertCircle, { className: 'w-5 h-5 text-red-400 flex-shrink-0' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-red-300 text-sm', children: displayError })] }) })), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: 'current-password', className: 'block text-sm font-medium text-gray-300 mb-2', children: isFirstLogin ? 'Temporary Password' : 'Current Password' }), (0, jsx_runtime_1.jsxs)("div", { className: 'relative', children: [(0, jsx_runtime_1.jsx)("input", { id: 'current-password', type: showCurrentPassword ? 'text' : 'password', value: currentPassword, onChange: e => setCurrentPassword(e.target.value), placeholder: isFirstLogin ? 'Enter your temporary password' : 'Enter current password', className: 'w-full px-4 py-3 pr-12 bg-slate-700/50 border border-slate-600/50 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-cyber-primary focus:ring-2 focus:ring-cyber-primary/20 transition-all', disabled: loading, required: true, autoComplete: 'current-password' }), (0, jsx_runtime_1.jsx)("button", { type: 'button', onClick: () => setShowCurrentPassword(!showCurrentPassword), className: 'absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors', disabled: loading, children: showCurrentPassword ? (0, jsx_runtime_1.jsx)(lucide_react_1.EyeOff, { className: 'w-5 h-5' }) : (0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'w-5 h-5' }) })] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: 'new-password', className: 'block text-sm font-medium text-gray-300 mb-2', children: "New Password" }), (0, jsx_runtime_1.jsxs)("div", { className: 'relative', children: [(0, jsx_runtime_1.jsx)("input", { id: 'new-password', type: showNewPassword ? 'text' : 'password', value: newPassword, onChange: e => setNewPassword(e.target.value), placeholder: 'Enter your new password', className: 'w-full px-4 py-3 pr-12 bg-slate-700/50 border border-slate-600/50 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-cyber-primary focus:ring-2 focus:ring-cyber-primary/20 transition-all', disabled: loading, required: true, autoComplete: 'new-password' }), (0, jsx_runtime_1.jsx)("button", { type: 'button', onClick: () => setShowNewPassword(!showNewPassword), className: 'absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors', disabled: loading, children: showNewPassword ? (0, jsx_runtime_1.jsx)(lucide_react_1.EyeOff, { className: 'w-5 h-5' }) : (0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'w-5 h-5' }) })] }), newPassword && ((0, jsx_runtime_1.jsxs)(framer_motion_1.motion.div, { initial: { opacity: 0, height: 0 }, animate: { opacity: 1, height: 'auto' }, className: 'mt-3 p-3 bg-slate-700/30 rounded-lg', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-xs font-medium text-gray-300 mb-2', children: "Password Requirements:" }), (0, jsx_runtime_1.jsx)("div", { className: 'space-y-1', children: [
                                                { key: 'length', label: 'At least 8 characters', check: passwordChecks.length },
                                                {
                                                    key: 'uppercase',
                                                    label: 'One uppercase letter',
                                                    check: passwordChecks.uppercase,
                                                },
                                                {
                                                    key: 'lowercase',
                                                    label: 'One lowercase letter',
                                                    check: passwordChecks.lowercase,
                                                },
                                                { key: 'number', label: 'One number', check: passwordChecks.number },
                                                {
                                                    key: 'special',
                                                    label: 'One special character',
                                                    check: passwordChecks.special,
                                                },
                                            ].map(({ key, label, check }) => ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle, { className: `w-3 h-3 ${check ? 'text-green-400' : 'text-gray-500'}` }), (0, jsx_runtime_1.jsx)("span", { className: `text-xs ${check ? 'text-green-300' : 'text-gray-400'}`, children: label })] }, key))) })] }))] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: 'confirm-password', className: 'block text-sm font-medium text-gray-300 mb-2', children: "Confirm New Password" }), (0, jsx_runtime_1.jsxs)("div", { className: 'relative', children: [(0, jsx_runtime_1.jsx)("input", { id: 'confirm-password', type: showConfirmPassword ? 'text' : 'password', value: confirmPassword, onChange: e => setConfirmPassword(e.target.value), placeholder: 'Confirm your new password', className: 'w-full px-4 py-3 pr-12 bg-slate-700/50 border border-slate-600/50 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-cyber-primary focus:ring-2 focus:ring-cyber-primary/20 transition-all', disabled: loading, required: true, autoComplete: 'new-password' }), (0, jsx_runtime_1.jsx)("button", { type: 'button', onClick: () => setShowConfirmPassword(!showConfirmPassword), className: 'absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors', disabled: loading, children: showConfirmPassword ? (0, jsx_runtime_1.jsx)(lucide_react_1.EyeOff, { className: 'w-5 h-5' }) : (0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'w-5 h-5' }) })] }), confirmPassword && ((0, jsx_runtime_1.jsx)(framer_motion_1.motion.div, { initial: { opacity: 0 }, animate: { opacity: 1 }, className: 'mt-2', children: newPassword === confirmPassword ? ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-2 text-green-400', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle, { className: 'w-4 h-4' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-xs', children: "Passwords match" })] })) : ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-2 text-red-400', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertCircle, { className: 'w-4 h-4' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-xs', children: "Passwords do not match" })] })) }))] }), (0, jsx_runtime_1.jsx)("button", { type: 'submit', disabled: loading || !isPasswordValid || newPassword !== confirmPassword || !currentPassword, className: 'w-full flex items-center justify-center space-x-2 px-6 py-3 bg-gradient-to-r from-cyber-primary to-cyber-accent hover:from-cyber-secondary hover:to-cyber-primary rounded-lg text-slate-900 font-medium transition-all disabled:opacity-50 disabled:cursor-not-allowed', children: loading ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-5 h-5 border-2 border-slate-900/30 border-t-slate-900 rounded-full animate-spin' }), (0, jsx_runtime_1.jsx)("span", { children: "Updating Password..." })] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Lock, { className: 'w-5 h-5' }), (0, jsx_runtime_1.jsx)("span", { children: isFirstLogin ? 'Complete Setup' : 'Update Password' })] })) })] }), isFirstLogin && ((0, jsx_runtime_1.jsx)("div", { className: 'mt-6 pt-6 border-t border-slate-700/50 text-center', children: (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-500', children: "By completing setup, you agree to our terms of service and privacy policy." }) }))] }) }));
};
exports.default = PasswordChangeForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,