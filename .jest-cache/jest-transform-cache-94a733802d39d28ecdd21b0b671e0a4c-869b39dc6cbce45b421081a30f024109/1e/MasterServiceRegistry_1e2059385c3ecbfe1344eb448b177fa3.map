{"version":3,"names":["_enhancedLogger","require","_UnifiedRegistryAdapter","_interopRequireDefault","_MasterServiceRegistry","MasterServiceRegistry","constructor","services","Map","serviceHealth","serviceMetrics","configuration","verboseLogging","process","env","NODE_ENV","isInitialized","enableCaching","enableRetries","maxRetries","timeout","enableMetrics","enableLogging","logLevel","getInstance","instance","initialize","log","registerService","name","service","set","totalRequests","successRate","averageResponseTime","errorsLast24h","cacheHitRate","dataQuality","status","responseTime","lastCheck","Date","errorCount","uptime","getService","get","getAllServices","api","analytics","betting","data","cache","logger","notifications","executeAcrossServices","methodName","args","results","svc","entries","res","success","err","error","message","refreshAllData","clearAllCaches","updateConfiguration","config","Object","assign","getConfiguration","getSystemStatistics","health","Array","from","values","metrics","totalServices","length","healthyServices","filter","h","degradedServices","downServices","reduce","s","Math","max","m","overallSuccessRate","level","component","action","metadata","undefined","enhancedLogger","debug","info","warn","shutdown","clear","updateServiceHealth","existing","updated","toUnifiedRegistry","adapter","UnifiedRegistryAdapter","unifiedLike","register","has","unregister","getServiceHealth","thisAsUnifiedRegistry","exports","_masterServiceRegistry","_getService","_services","_default","default","createUnifiedServiceRegistryAdapter"],"sources":["MasterServiceRegistry.ts"],"sourcesContent":["/**\r\n * Minimal MasterServiceRegistry\r\n * - Keeps API surface used across the frontend\r\n * - Uses `any` for external service types to avoid large refactors\r\n * - Uses `enhancedLogger` for logging\r\n */\r\n\r\nimport { enhancedLogger } from '../utils/enhancedLogger';\r\n// UnifiedServiceRegistryExternal import removed: we return a loose `unknown`\r\n// adapter from `toUnifiedRegistry()` to avoid private-constructor type errors.\r\nimport UnifiedRegistryAdapter from './UnifiedRegistryAdapter';\r\n\r\n// Local interface matching the public surface of the external\r\n// `UnifiedServiceRegistry` class. Using an interface avoids TypeScript's\r\n// private/member class-compatibility checks when we provide a runtime\r\n// adapter object to legacy unified services.\r\nexport interface ExternalUnifiedServiceRegistry {\r\n  register(name: string, service: unknown): void;\r\n  get<T = unknown>(name: string): T | undefined;\r\n  has(name: string): boolean;\r\n  unregister(name: string): boolean;\r\n  getAllServices(): Map<string, unknown>;\r\n  clear(): void;\r\n  services?: Map<string, unknown>;\r\n}\r\n\r\nexport interface ServiceHealth {\r\n  name: string;\r\n  status: 'healthy' | 'degraded' | 'down';\r\n  responseTime: number;\r\n  lastCheck: Date;\r\n  errorCount: number;\r\n  uptime: number;\r\n}\r\n\r\nexport interface ServiceMetrics {\r\n  totalRequests: number;\r\n  successRate: number;\r\n  averageResponseTime: number;\r\n  errorsLast24h: number;\r\n  cacheHitRate: number;\r\n  dataQuality: number;\r\n}\r\n\r\nexport interface ServiceConfiguration {\r\n  enableCaching: boolean;\r\n  enableRetries: boolean;\r\n  maxRetries: number;\r\n  timeout: number;\r\n  enableMetrics: boolean;\r\n  enableLogging: boolean;\r\n  logLevel: 'debug' | 'info' | 'warn' | 'error';\r\n}\r\n\r\nclass MasterServiceRegistry {\r\n  private static instance: MasterServiceRegistry;\r\n  private services: Map<string, unknown> = new Map();\r\n  private serviceHealth: Map<string, ServiceHealth> = new Map();\r\n  private serviceMetrics: Map<string, ServiceMetrics> = new Map();\r\n  public readonly configuration: ServiceConfiguration;\r\n  public verboseLogging: boolean = process.env.NODE_ENV === 'development';\r\n  private isInitialized = false;\r\n\r\n  private constructor() {\r\n    this.configuration = {\r\n      enableCaching: true,\r\n      enableRetries: true,\r\n      maxRetries: 3,\r\n      timeout: 30000,\r\n      enableMetrics: true,\r\n      enableLogging: true,\r\n      logLevel: 'info',\r\n    };\r\n  }\r\n\r\n\r\n  static getInstance(): MasterServiceRegistry {\r\n    if (!MasterServiceRegistry.instance) {\r\n      MasterServiceRegistry.instance = new MasterServiceRegistry();\r\n    }\r\n    return MasterServiceRegistry.instance;\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    if (this.isInitialized) return;\r\n    // For now, initialization is lightweight. Services can register themselves.\r\n    this.isInitialized = true;\r\n    this.log('info', 'MasterServiceRegistry initialized');\r\n  }\r\n\r\n  public registerService(name: string, service: unknown): void {\r\n    this.services.set(name, service);\r\n    this.serviceMetrics.set(name, {\r\n      totalRequests: 0,\r\n      successRate: 100,\r\n      averageResponseTime: 0,\r\n      errorsLast24h: 0,\r\n      cacheHitRate: 0,\r\n      dataQuality: 100,\r\n    });\r\n    this.serviceHealth.set(name, {\r\n      name,\r\n      status: 'healthy',\r\n      responseTime: 0,\r\n      lastCheck: new Date(),\r\n      errorCount: 0,\r\n      uptime: 100,\r\n    });\r\n  }\r\n\r\n  getService<T = unknown>(name: string): T | null {\r\n    return (this.services.get(name) as T) || null;\r\n  }\r\n\r\n  getAllServices(): Map<string, unknown> {\r\n    return new Map(this.services);\r\n  }\r\n\r\n  // Convenience getters return `any` to avoid introducing large type changes here\r\n  get api(): unknown {\r\n    return this.getService('api');\r\n  }\r\n\r\n  get analytics(): unknown {\r\n    return this.getService('analytics');\r\n  }\r\n\r\n  get betting(): unknown {\r\n    return this.getService('betting');\r\n  }\r\n\r\n  get data(): unknown {\r\n    return this.getService('data');\r\n  }\r\n\r\n  get cache(): unknown {\r\n    return this.getService('cache');\r\n  }\r\n\r\n  get logger(): unknown {\r\n    return this.getService('logger');\r\n  }\r\n\r\n  get notifications(): unknown {\r\n    return this.getService('notifications');\r\n  }\r\n\r\n  // Execute a method across all registered services if present\r\n  async executeAcrossServices(methodName: string, ...args: unknown[]): Promise<Map<string, unknown>> {\r\n    const results = new Map<string, unknown>();\r\n    for (const [name, svc] of this.services.entries()) {\r\n  const service = svc as unknown as Record<string, unknown>;\r\n      if (service && typeof service[methodName] === 'function') {\r\n        try {\r\n          const res = await service[methodName](...args);\r\n          results.set(name, { success: true, data: res });\r\n        } catch (err) {\r\n          results.set(name, { success: false, error: (err as Error).message });\r\n          this.log('error', `Service ${name} failed to execute ${methodName}`, err as Error);\r\n        }\r\n      }\r\n    }\r\n    return results;\r\n  }\r\n\r\n  async refreshAllData(): Promise<void> {\r\n    await this.executeAcrossServices('refresh');\r\n  }\r\n\r\n  async clearAllCaches(): Promise<void> {\r\n    await this.executeAcrossServices('clearCache');\r\n  }\r\n\r\n  updateConfiguration(config: Partial<ServiceConfiguration>): void {\r\n    Object.assign(this.configuration, config);\r\n    for (const [name, svc] of this.services.entries()) {\r\n  const service = svc as unknown as Record<string, unknown>;\r\n      if (service && typeof service.updateConfiguration === 'function') {\r\n        try {\r\n          service.updateConfiguration(this.configuration);\r\n        } catch (err) {\r\n          this.log('warn', `Failed to update configuration for ${name}`, err as Error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getConfiguration(): ServiceConfiguration {\r\n    return { ...this.configuration };\r\n  }\r\n\r\n  getSystemStatistics() {\r\n    const health = Array.from(this.serviceHealth.values());\r\n    const metrics = Array.from(this.serviceMetrics.values());\r\n    const totalServices = health.length;\r\n    const healthyServices = health.filter(h => h.status === 'healthy').length;\r\n    const degradedServices = health.filter(h => h.status === 'degraded').length;\r\n    const downServices = health.filter(h => h.status === 'down').length;\r\n    const averageResponseTime = totalServices ? health.reduce((s, h) => s + Math.max(0, h.responseTime), 0) / totalServices : 0;\r\n    const totalRequests = metrics.reduce((s, m) => s + (m.totalRequests || 0), 0);\r\n    const overallSuccessRate = metrics.length ? metrics.reduce((s, m) => s + (m.successRate || 0), 0) / metrics.length : 100;\r\n    return {\r\n      totalServices,\r\n      healthyServices,\r\n      degradedServices,\r\n      downServices,\r\n      averageResponseTime,\r\n      totalRequests,\r\n      overallSuccessRate,\r\n    };\r\n  }\r\n\r\n  private log(level: 'debug' | 'info' | 'warn' | 'error', message: string, err?: unknown): void {\r\n    if (!this.configuration.enableLogging) return;\r\n    try {\r\n  const logger = this.getService('logger') as unknown as Record<string, unknown> | null;\r\n      if (logger && typeof logger[level] === 'function') {\r\n        logger[level](message, err);\r\n        return;\r\n      }\r\n    } catch {\r\n      // fall through to enhancedLogger\r\n    }\r\n\r\n    // enhancedLogger expects: (component, action, message, metadata?, error?)\r\n    const component = 'MasterServiceRegistry';\r\n    const action = '';\r\n    const metadata = undefined as unknown as Record<string, unknown> | undefined;\r\n\r\n    switch (level) {\r\n      case 'debug':\r\n        enhancedLogger.debug(component, action, message, metadata, err as Error | undefined);\r\n        break;\r\n      case 'info':\r\n        enhancedLogger.info(component, action, message);\r\n        break;\r\n      case 'warn':\r\n        enhancedLogger.warn(component, action, message, metadata, err as Error | undefined);\r\n        break;\r\n      case 'error':\r\n        enhancedLogger.error(component, action, message, metadata, err as Error | undefined);\r\n        break;\r\n    }\r\n  }\r\n\r\n  async shutdown(): Promise<void> {\r\n    for (const [name, svc] of this.services.entries()) {\r\n  const service = svc as unknown as Record<string, unknown>;\r\n      try {\r\n        if (service && typeof service.shutdown === 'function') {\r\n          await service.shutdown();\r\n        }\r\n      } catch (err) {\r\n        this.log('error', `Failed to shutdown service: ${name}`, err as Error);\r\n      }\r\n    }\r\n    this.services.clear();\r\n    this.serviceHealth.clear();\r\n    this.serviceMetrics.clear();\r\n    this.isInitialized = false;\r\n  }\r\n\r\n  // Test helper: update a service health entry (used by E2E tests)\r\n  // Minimal, safe surface that mirrors how tests expect to simulate health updates.\r\n  public updateServiceHealth(name: string, status: ServiceHealth['status'], responseTime: number): void {\r\n    const existing = this.serviceHealth.get(name) || {\r\n      name,\r\n      status: 'healthy' as ServiceHealth['status'],\r\n      responseTime: 0,\r\n      lastCheck: new Date(),\r\n      errorCount: 0,\r\n      uptime: 100,\r\n    };\r\n    const updated: ServiceHealth = {\r\n      ...existing,\r\n      status,\r\n      responseTime: Math.max(0, responseTime),\r\n      lastCheck: new Date(),\r\n    };\r\n    this.serviceHealth.set(name, updated);\r\n  }\r\n\r\n  /**\r\n   * Provide a lightweight adapter that matches the external UnifiedServiceRegistry\r\n   * shape. We return it with a cast to the external type to minimize refactor scope.\r\n   */\r\n  // Return a runtime-compatible adapter but expose it with a loose type to\r\n  // avoid TypeScript private-member/class-compatibility errors when passing\r\n  // this adapter into existing unified services. Call sites may cast when\r\n  // they require the concrete `UnifiedServiceRegistry` type.\r\n  public toUnifiedRegistry(): ExternalUnifiedServiceRegistry & { services: Map<string, unknown>; getAllServices(): Map<string, unknown> } {\r\n    const adapter = new UnifiedRegistryAdapter(this);\r\n\r\n    // Create a plain object that matches the public shape of the external\r\n    // `UnifiedServiceRegistry` so TypeScript structural checks succeed.\r\n  const unifiedLike = {\r\n      register: (name: string, service: unknown) => adapter.register(name, service),\r\n      get: <T = unknown>(name: string) => adapter.get<T>(name),\r\n      has: (name: string) => adapter.has(name),\r\n      unregister: (name: string) => adapter.unregister(name),\r\n      getAllServices: () => adapter.getAllServices(),\r\n      clear: () => adapter.clear(),\r\n      services: adapter.services,\r\n  } as unknown as ExternalUnifiedServiceRegistry & { services: Map<string, unknown>; getAllServices(): Map<string, unknown> };\r\n\r\n    return unifiedLike;\r\n  }\r\n\r\n  // Expose service health map as a read-only snapshot for tests and diagnostics\r\n  public getServiceHealth(name: string): ServiceHealth | null {\r\n    return this.serviceHealth.get(name) || null;\r\n  }\r\n\r\n  // Provide a temporary alias for use by legacy unified services that expect\r\n  // the external `UnifiedServiceRegistry` shape. This is intentionally loose\r\n  // while we migrate callers; we'll tighten types in a follow-up.\r\n  // Return the runtime adapter cast to the external `UnifiedServiceRegistry` shape.\r\n  // We cast via `unknown` to avoid private-constructor/class-compatibility checks\r\n  // while keeping the getter typed as the external interface for call sites.\r\n  // Loosen to `any` temporarily to avoid private-member/class incompatibility\r\n  // when passing the runtime adapter to legacy unified services. This is\r\n  // intentionally narrow and will be tightened after remaining call-sites\r\n  // are migrated or explicitly cast.\r\n  private get thisAsUnifiedRegistry(): any {\r\n  // Return the adapter but keep callers type-stable by allowing a local cast\r\n  // at the call-site. Some legacy unified services require the concrete\r\n  // external class-type; callers should cast like:\r\n  //   this.thisAsUnifiedRegistry as unknown as ExternalUnifiedServiceRegistry\r\n  return this.toUnifiedRegistry() as unknown as ExternalUnifiedServiceRegistry & { services: Map<string, unknown>; getAllServices(): Map<string, unknown> };\r\n  }\r\n}\r\n\r\n// Adapter class removed — use `toUnifiedRegistry()` to provide a compatible wrapper.\r\n\r\n\r\nexport const _masterServiceRegistry = MasterServiceRegistry.getInstance();\r\n\r\nexport const _getService = <T = unknown>(name: string): T | null => {\r\n  return _masterServiceRegistry.getService<T>(name);\r\n};\r\n\r\nexport const _services = {\r\n  get api() {\r\n    return _masterServiceRegistry.api;\r\n  },\r\n  get analytics() {\r\n    return _masterServiceRegistry.analytics;\r\n  },\r\n  get betting() {\r\n    return _masterServiceRegistry.betting;\r\n  },\r\n  get data() {\r\n    return _masterServiceRegistry.data;\r\n  },\r\n  get cache() {\r\n    return _masterServiceRegistry.cache;\r\n  },\r\n  get logger() {\r\n    return _masterServiceRegistry.logger;\r\n  },\r\n  get notifications() {\r\n    return _masterServiceRegistry.notifications;\r\n  },\r\n};\r\n\r\nexport { MasterServiceRegistry };\r\nexport default _masterServiceRegistry;\r\n\r\n// Provide a minimal adapter shape expected by some legacy callers.\r\n// Keep this local and narrow to avoid a large refactor.\r\n// Adapter that implements the project's external UnifiedServiceRegistry class\r\n// The UnifiedServiceRegistryAdapter class has been removed as it incorrectly extended a class with a private constructor.\r\n\r\n// Compatibility exports for legacy callers that reference `UnifiedServiceRegistryAdapter`.\r\nexport type UnifiedServiceRegistryAdapter = ExternalUnifiedServiceRegistry & { services: Map<string, unknown>; getAllServices(): Map<string, unknown> };\r\n\r\n// Return `any` here to avoid propagating structural-check issues to legacy callers.\r\n// Callers that need concrete typing can cast locally to the exact external type.\r\nexport function createUnifiedServiceRegistryAdapter(): UnifiedServiceRegistryAdapter {\r\n  return _masterServiceRegistry.toUnifiedRegistry() as unknown as UnifiedServiceRegistryAdapter;\r\n}\r\n"],"mappings":"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","ignoreList":[]}