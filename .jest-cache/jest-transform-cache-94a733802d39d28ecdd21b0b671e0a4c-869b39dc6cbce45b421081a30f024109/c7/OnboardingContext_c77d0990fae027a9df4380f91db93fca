6cd638d8c289f5bd7f047a97646ac273
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OnboardingProvider = void 0;
exports.useOnboarding = useOnboarding;
var _react = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const steps = ['welcome', 'profile', 'preferences', 'security', 'features', 'complete'];
const OnboardingContext = /*#__PURE__*/(0, _react.createContext)(undefined);
const OnboardingProvider = ({
  children
}) => {
  const [currentStep, setCurrentStep] = (0, _react.useState)('welcome');
  const [completedSteps, setCompletedSteps] = (0, _react.useState)([]);
  const onCurrentStepChange = (0, _react.useCallback)(step => {
    setCurrentStep(step);
    const prevIdx = steps.indexOf(step) - 1;
    if (prevIdx >= 0) {
      const previousStep = steps[prevIdx];
      if (!completedSteps.includes(previousStep)) {
        setCompletedSteps(prev => [...prev, previousStep]);
      }
    }
  }, [completedSteps]);
  const isNextStepDisabled = (0, _react.useMemo)(() => {
    if (currentStep === 'profile' && !completedSteps.includes('welcome')) {
      return 'Please complete Welcome step.';
    }
    // Add more validation as needed
    return false;
  }, [currentStep, completedSteps]);
  const finishOnboarding = (0, _react.useCallback)(() => {
    setCompletedSteps([...steps]);
    setCurrentStep('complete');
    localStorage.setItem('onboardingComplete', 'true');
  }, []);
  const value = {
    currentStep,
    completedSteps,
    isNextStepDisabled,
    setCurrentStep: onCurrentStepChange,
    finishOnboarding
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(OnboardingContext.Provider, {
    value: value,
    children: children
  });
};
exports.OnboardingProvider = OnboardingProvider;
function useOnboarding() {
  const context = (0, _react.useContext)(OnboardingContext);
  if (!context) throw new Error('OnboardingContext not found');
  return context;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInN0ZXBzIiwiT25ib2FyZGluZ0NvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwidW5kZWZpbmVkIiwiT25ib2FyZGluZ1Byb3ZpZGVyIiwiY2hpbGRyZW4iLCJjdXJyZW50U3RlcCIsInNldEN1cnJlbnRTdGVwIiwidXNlU3RhdGUiLCJjb21wbGV0ZWRTdGVwcyIsInNldENvbXBsZXRlZFN0ZXBzIiwib25DdXJyZW50U3RlcENoYW5nZSIsInVzZUNhbGxiYWNrIiwic3RlcCIsInByZXZJZHgiLCJpbmRleE9mIiwicHJldmlvdXNTdGVwIiwiaW5jbHVkZXMiLCJwcmV2IiwiaXNOZXh0U3RlcERpc2FibGVkIiwidXNlTWVtbyIsImZpbmlzaE9uYm9hcmRpbmciLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwidmFsdWUiLCJqc3giLCJQcm92aWRlciIsImV4cG9ydHMiLCJ1c2VPbmJvYXJkaW5nIiwiY29udGV4dCIsInVzZUNvbnRleHQiLCJFcnJvciJdLCJzb3VyY2VzIjpbIk9uYm9hcmRpbmdDb250ZXh0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdXNlQ2FsbGJhY2ssIHVzZUNvbnRleHQsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IHR5cGUgT25ib2FyZGluZ1N0ZXAgPVxyXG4gIHwgJ3dlbGNvbWUnXHJcbiAgfCAncHJvZmlsZSdcclxuICB8ICdwcmVmZXJlbmNlcydcclxuICB8ICdzZWN1cml0eSdcclxuICB8ICdmZWF0dXJlcydcclxuICB8ICdjb21wbGV0ZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE9uYm9hcmRpbmdTdGF0ZSB7XHJcbiAgY3VycmVudFN0ZXA6IE9uYm9hcmRpbmdTdGVwO1xyXG4gIGNvbXBsZXRlZFN0ZXBzOiBPbmJvYXJkaW5nU3RlcFtdO1xyXG4gIGlzTmV4dFN0ZXBEaXNhYmxlZDogc3RyaW5nIHwgZmFsc2U7XHJcbiAgc2V0Q3VycmVudFN0ZXA6IChzdGVwOiBPbmJvYXJkaW5nU3RlcCkgPT4gdm9pZDtcclxuICBmaW5pc2hPbmJvYXJkaW5nOiAoKSA9PiB2b2lkO1xyXG59XHJcblxyXG5jb25zdCBzdGVwczogT25ib2FyZGluZ1N0ZXBbXSA9IFtcclxuICAnd2VsY29tZScsXHJcbiAgJ3Byb2ZpbGUnLFxyXG4gICdwcmVmZXJlbmNlcycsXHJcbiAgJ3NlY3VyaXR5JyxcclxuICAnZmVhdHVyZXMnLFxyXG4gICdjb21wbGV0ZScsXHJcbl07XHJcblxyXG5jb25zdCBPbmJvYXJkaW5nQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8T25ib2FyZGluZ1N0YXRlIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xyXG5cclxuZXhwb3J0IGNvbnN0IE9uYm9hcmRpbmdQcm92aWRlcjogUmVhY3QuRkM8eyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0+ID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xyXG4gIGNvbnN0IFtjdXJyZW50U3RlcCwgc2V0Q3VycmVudFN0ZXBdID0gdXNlU3RhdGU8T25ib2FyZGluZ1N0ZXA+KCd3ZWxjb21lJyk7XHJcbiAgY29uc3QgW2NvbXBsZXRlZFN0ZXBzLCBzZXRDb21wbGV0ZWRTdGVwc10gPSB1c2VTdGF0ZTxPbmJvYXJkaW5nU3RlcFtdPihbXSk7XHJcblxyXG4gIGNvbnN0IG9uQ3VycmVudFN0ZXBDaGFuZ2UgPSB1c2VDYWxsYmFjayhcclxuICAgIChzdGVwOiBPbmJvYXJkaW5nU3RlcCkgPT4ge1xyXG4gICAgICBzZXRDdXJyZW50U3RlcChzdGVwKTtcclxuICAgICAgY29uc3QgcHJldklkeCA9IHN0ZXBzLmluZGV4T2Yoc3RlcCkgLSAxO1xyXG4gICAgICBpZiAocHJldklkeCA+PSAwKSB7XHJcbiAgICAgICAgY29uc3QgcHJldmlvdXNTdGVwID0gc3RlcHNbcHJldklkeF07XHJcbiAgICAgICAgaWYgKCFjb21wbGV0ZWRTdGVwcy5pbmNsdWRlcyhwcmV2aW91c1N0ZXApKSB7XHJcbiAgICAgICAgICBzZXRDb21wbGV0ZWRTdGVwcyhwcmV2ID0+IFsuLi5wcmV2LCBwcmV2aW91c1N0ZXBdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBbY29tcGxldGVkU3RlcHNdXHJcbiAgKTtcclxuXHJcbiAgY29uc3QgaXNOZXh0U3RlcERpc2FibGVkID0gdXNlTWVtbygoKSA9PiB7XHJcbiAgICBpZiAoY3VycmVudFN0ZXAgPT09ICdwcm9maWxlJyAmJiAhY29tcGxldGVkU3RlcHMuaW5jbHVkZXMoJ3dlbGNvbWUnKSkge1xyXG4gICAgICByZXR1cm4gJ1BsZWFzZSBjb21wbGV0ZSBXZWxjb21lIHN0ZXAuJztcclxuICAgIH1cclxuICAgIC8vIEFkZCBtb3JlIHZhbGlkYXRpb24gYXMgbmVlZGVkXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfSwgW2N1cnJlbnRTdGVwLCBjb21wbGV0ZWRTdGVwc10pO1xyXG5cclxuICBjb25zdCBmaW5pc2hPbmJvYXJkaW5nID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgc2V0Q29tcGxldGVkU3RlcHMoWy4uLnN0ZXBzXSk7XHJcbiAgICBzZXRDdXJyZW50U3RlcCgnY29tcGxldGUnKTtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdvbmJvYXJkaW5nQ29tcGxldGUnLCAndHJ1ZScpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgY29uc3QgdmFsdWU6IE9uYm9hcmRpbmdTdGF0ZSA9IHtcclxuICAgIGN1cnJlbnRTdGVwLFxyXG4gICAgY29tcGxldGVkU3RlcHMsXHJcbiAgICBpc05leHRTdGVwRGlzYWJsZWQsXHJcbiAgICBzZXRDdXJyZW50U3RlcDogb25DdXJyZW50U3RlcENoYW5nZSxcclxuICAgIGZpbmlzaE9uYm9hcmRpbmcsXHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIDxPbmJvYXJkaW5nQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17dmFsdWV9PntjaGlsZHJlbn08L09uYm9hcmRpbmdDb250ZXh0LlByb3ZpZGVyPjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VPbmJvYXJkaW5nKCkge1xyXG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KE9uYm9hcmRpbmdDb250ZXh0KTtcclxuICBpZiAoIWNvbnRleHQpIHRocm93IG5ldyBFcnJvcignT25ib2FyZGluZ0NvbnRleHQgbm90IGZvdW5kJyk7XHJcbiAgcmV0dXJuIGNvbnRleHQ7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQXlGLElBQUFDLFdBQUEsR0FBQUQsT0FBQTtBQUFBLFNBQUFELHdCQUFBRyxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBTCx1QkFBQSxZQUFBQSxDQUFBRyxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGdCQUFBUCxDQUFBLElBQUFELENBQUEsZ0JBQUFDLENBQUEsT0FBQWEsY0FBQSxDQUFBQyxJQUFBLENBQUFmLENBQUEsRUFBQUMsQ0FBQSxPQUFBTSxDQUFBLElBQUFELENBQUEsR0FBQVUsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQWxCLENBQUEsRUFBQUMsQ0FBQSxPQUFBTSxDQUFBLENBQUFLLEdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxHQUFBLElBQUFQLENBQUEsQ0FBQUUsQ0FBQSxFQUFBUCxDQUFBLEVBQUFNLENBQUEsSUFBQUMsQ0FBQSxDQUFBUCxDQUFBLElBQUFELENBQUEsQ0FBQUMsQ0FBQSxXQUFBTyxDQUFBLEtBQUFSLENBQUEsRUFBQUMsQ0FBQTtBQWtCekYsTUFBTWtCLEtBQXVCLEdBQUcsQ0FDOUIsU0FBUyxFQUNULFNBQVMsRUFDVCxhQUFhLEVBQ2IsVUFBVSxFQUNWLFVBQVUsRUFDVixVQUFVLENBQ1g7QUFFRCxNQUFNQyxpQkFBaUIsZ0JBQUcsSUFBQUMsb0JBQWEsRUFBOEJDLFNBQVMsQ0FBQztBQUV4RSxNQUFNQyxrQkFBMkQsR0FBR0EsQ0FBQztFQUFFQztBQUFTLENBQUMsS0FBSztFQUMzRixNQUFNLENBQUNDLFdBQVcsRUFBRUMsY0FBYyxDQUFDLEdBQUcsSUFBQUMsZUFBUSxFQUFpQixTQUFTLENBQUM7RUFDekUsTUFBTSxDQUFDQyxjQUFjLEVBQUVDLGlCQUFpQixDQUFDLEdBQUcsSUFBQUYsZUFBUSxFQUFtQixFQUFFLENBQUM7RUFFMUUsTUFBTUcsbUJBQW1CLEdBQUcsSUFBQUMsa0JBQVcsRUFDcENDLElBQW9CLElBQUs7SUFDeEJOLGNBQWMsQ0FBQ00sSUFBSSxDQUFDO0lBQ3BCLE1BQU1DLE9BQU8sR0FBR2QsS0FBSyxDQUFDZSxPQUFPLENBQUNGLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDdkMsSUFBSUMsT0FBTyxJQUFJLENBQUMsRUFBRTtNQUNoQixNQUFNRSxZQUFZLEdBQUdoQixLQUFLLENBQUNjLE9BQU8sQ0FBQztNQUNuQyxJQUFJLENBQUNMLGNBQWMsQ0FBQ1EsUUFBUSxDQUFDRCxZQUFZLENBQUMsRUFBRTtRQUMxQ04saUJBQWlCLENBQUNRLElBQUksSUFBSSxDQUFDLEdBQUdBLElBQUksRUFBRUYsWUFBWSxDQUFDLENBQUM7TUFDcEQ7SUFDRjtFQUNGLENBQUMsRUFDRCxDQUFDUCxjQUFjLENBQ2pCLENBQUM7RUFFRCxNQUFNVSxrQkFBa0IsR0FBRyxJQUFBQyxjQUFPLEVBQUMsTUFBTTtJQUN2QyxJQUFJZCxXQUFXLEtBQUssU0FBUyxJQUFJLENBQUNHLGNBQWMsQ0FBQ1EsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO01BQ3BFLE9BQU8sK0JBQStCO0lBQ3hDO0lBQ0E7SUFDQSxPQUFPLEtBQUs7RUFDZCxDQUFDLEVBQUUsQ0FBQ1gsV0FBVyxFQUFFRyxjQUFjLENBQUMsQ0FBQztFQUVqQyxNQUFNWSxnQkFBZ0IsR0FBRyxJQUFBVCxrQkFBVyxFQUFDLE1BQU07SUFDekNGLGlCQUFpQixDQUFDLENBQUMsR0FBR1YsS0FBSyxDQUFDLENBQUM7SUFDN0JPLGNBQWMsQ0FBQyxVQUFVLENBQUM7SUFDMUJlLFlBQVksQ0FBQ0MsT0FBTyxDQUFDLG9CQUFvQixFQUFFLE1BQU0sQ0FBQztFQUNwRCxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBRU4sTUFBTUMsS0FBc0IsR0FBRztJQUM3QmxCLFdBQVc7SUFDWEcsY0FBYztJQUNkVSxrQkFBa0I7SUFDbEJaLGNBQWMsRUFBRUksbUJBQW1CO0lBQ25DVTtFQUNGLENBQUM7RUFFRCxvQkFBTyxJQUFBekMsV0FBQSxDQUFBNkMsR0FBQSxFQUFDeEIsaUJBQWlCLENBQUN5QixRQUFRO0lBQUNGLEtBQUssRUFBRUEsS0FBTTtJQUFBbkIsUUFBQSxFQUFFQTtFQUFRLENBQTZCLENBQUM7QUFDMUYsQ0FBQztBQUFDc0IsT0FBQSxDQUFBdkIsa0JBQUEsR0FBQUEsa0JBQUE7QUFFSyxTQUFTd0IsYUFBYUEsQ0FBQSxFQUFHO0VBQzlCLE1BQU1DLE9BQU8sR0FBRyxJQUFBQyxpQkFBVSxFQUFDN0IsaUJBQWlCLENBQUM7RUFDN0MsSUFBSSxDQUFDNEIsT0FBTyxFQUFFLE1BQU0sSUFBSUUsS0FBSyxDQUFDLDZCQUE2QixDQUFDO0VBQzVELE9BQU9GLE9BQU87QUFDaEIiLCJpZ25vcmVMaXN0IjpbXX0=