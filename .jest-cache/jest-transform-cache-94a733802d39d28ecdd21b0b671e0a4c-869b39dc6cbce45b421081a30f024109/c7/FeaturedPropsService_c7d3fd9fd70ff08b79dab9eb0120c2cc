b7ed85f796248710a4458f6610804b18
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearPropsCache = clearPropsCache;
exports.fetchBatchPredictions = fetchBatchPredictions;
exports.fetchEnhancedPropAnalysis = fetchEnhancedPropAnalysis;
exports.fetchFeaturedProps = fetchFeaturedProps;
exports.getDataManagerMetrics = getDataManagerMetrics;
exports.prefetchPropsData = prefetchPropsData;
exports.subscribeToPropsUpdates = subscribeToPropsUpdates;
var _DebugEnhancedDataManager = require("../DebugEnhancedDataManager");
var _EnhancedDataManager = require("../EnhancedDataManager");
var _enhancedLogger = require("../../utils/enhancedLogger");
/**
 * MLB Odds & AI Insights Mapping Logic (A1Betting7-13.2)
 * Enhanced with intelligent data management and real-time capabilities
 *
 * This file is responsible for fetching, mapping, and surfacing MLB odds and AI insights
 * in the frontend analytics table using the enhanced data manager.
 */

/**
 * Enhanced batch prediction using backend-side batching and intelligent caching
 */
async function fetchBatchPredictions(props) {
  try {
    // Use original raw data for backend if available, otherwise convert props to backend format
    const propsForBackend = props.map(prop => {
      // If we have original data, use it (this preserves the exact format the backend expects)
      if (prop._originalData) {
        return prop._originalData;
      }

      // Fallback: convert FeaturedProp format to backend format
      return {
        id: prop.id,
        player: prop.player,
        stat: prop.stat,
        line: prop.line,
        overOdds: prop.overOdds,
        underOdds: prop.underOdds,
        confidence: prop.confidence,
        sport: prop.sport,
        gameTime: prop.gameTime,
        pickType: prop.pickType
      };
    });

    // Create a single batch request for all props
    const batchRequest = {
      id: 'batch_predictions',
      endpoint: '/api/unified/batch-predictions',
      // The Unified fetchBatch expects params to be an object. Wrap array in an `items` field.
      params: {
        items: propsForBackend
      },
      priority: 'high'
    };

    // Process batch with intelligent caching
    // Call fetchBatch with the correctly shaped params object
    const results = await _EnhancedDataManager.enhancedDataManager.fetchBatch([batchRequest]);

    // Extract predictions from batch results
    const batchResult = results['batch_predictions'];
    let backendPredictions = [];
    if (batchResult) {
      // Handle backend response format: { predictions: [...], errors: [...] }
      if (typeof batchResult === 'object' && batchResult !== null && 'predictions' in batchResult && Array.isArray(batchResult.predictions)) {
        backendPredictions = batchResult.predictions;
      } else if (Array.isArray(batchResult)) {
        backendPredictions = batchResult;
      } else if (typeof batchResult === 'object') {
        backendPredictions = [batchResult];
      }
    }
    _enhancedLogger.enhancedLogger.info('FeaturedPropsService', 'fetchBatchPredictions', `Backend predictions received`, {
      received: Array.isArray(backendPredictions) ? backendPredictions.length : 0,
      requested: props.length
    });

    // Transform backend predictions back to FeaturedProp format with enhanced data
    const enhancedProps = props.map((originalProp, index) => {
      const backendPrediction = backendPredictions[index];
      const bp = backendPrediction;
      if (!bp || bp.error) {
        // If prediction failed, return original prop
        _enhancedLogger.enhancedLogger.warn('FeaturedPropsService', 'fetchBatchPredictions', `No prediction for prop`, {
          index,
          propId: originalProp.id
        });
        return originalProp;
      }

      // Merge original prop structure with enhanced prediction data
      const enhancedProp = {
        ...originalProp,
        // Update confidence from backend prediction
        confidence: bp.confidence || originalProp.confidence,
        // Add enhanced data as custom properties (will be available for enhanced analysis)
        ...(bp.recommendation && {
          recommendation: bp.recommendation
        }),
        ...(bp.quantum_confidence && {
          quantumConfidence: bp.quantum_confidence
        }),
        ...(bp.neural_score && {
          neuralScore: bp.neural_score
        }),
        ...(bp.kelly_fraction && {
          kellyFraction: bp.kelly_fraction
        }),
        ...(bp.expected_value && {
          expectedValue: bp.expected_value
        }),
        ...(bp.shap_explanation && {
          shapExplanation: bp.shap_explanation
        }),
        ...(bp.risk_assessment && {
          riskAssessment: bp.risk_assessment
        }),
        ...(bp.optimal_stake && {
          optimalStake: bp.optimal_stake
        })
      };
      return enhancedProp;
    });
    _enhancedLogger.enhancedLogger.info('FeaturedPropsService', 'fetchBatchPredictions', `Enhanced props created`, {
      enhancedCount: enhancedProps.length
    });
    return enhancedProps;
  } catch (error) {
    _enhancedLogger.enhancedLogger.error('FeaturedPropsService', 'fetchBatchPredictions', 'Batch predictions failed', undefined, error);
    // Return original props if batch enhancement fails
    return props;
  }
}

/**
 * Enhanced props fetching with intelligent caching and real-time updates
 */
async function fetchFeaturedProps(sport, marketType, options = {}) {
  const {
    useCache = true,
    realtime = false,
    priority = 'high',
    statTypes,
    limit = 50,
    offset = 0
  } = options;
  try {
    if (sport === 'MLB') {
      _enhancedLogger.enhancedLogger.info('FeaturedPropsService', 'fetchFeaturedProps', `Fetching ${sport} props with enhanced data manager`);
      try {
        // Try to use enhanced data manager for optimized MLB data fetching
        _enhancedLogger.enhancedLogger.debug('FeaturedPropsService', 'fetchFeaturedProps', 'Calling enhancedDataManager.fetchSportsProps with params', {
          sport,
          marketType: marketType || 'player',
          statTypes,
          limit,
          offset,
          useCache,
          realtime
        });
        const props = await _EnhancedDataManager.enhancedDataManager.fetchSportsProps(sport, marketType || 'player', {
          useCache,
          // Re-enable caching now that testing is complete
          realtime,
          consolidate: true,
          // Enable smart consolidation
          statTypes,
          // Pass statTypes for filtering
          limit,
          // Pass limit for pagination
          offset // Pass offset for pagination
        });
        _enhancedLogger.enhancedLogger.info('FeaturedPropsService', 'fetchFeaturedProps', `Enhanced fetch completed: ${props.length} props`, {
          count: props.length
        });
        return props;
      } catch (enhancedError) {
        _enhancedLogger.enhancedLogger.warn('FeaturedPropsService', 'fetchFeaturedProps', 'Enhanced manager failed, trying debug manager', undefined, enhancedError);

        // Try debug manager as second fallback
        try {
          _enhancedLogger.enhancedLogger.debug('FeaturedPropsService', 'fetchFeaturedProps', 'Trying debug manager...');
          const debugProps = await _DebugEnhancedDataManager.debugEnhancedDataManager.fetchSportsProps(sport, marketType || 'player', {
            statTypes,
            limit,
            offset
          });
          _enhancedLogger.enhancedLogger.info('FeaturedPropsService', 'fetchFeaturedProps', `Debug manager succeeded: ${debugProps.length} props`, {
            count: debugProps.length
          });
          return debugProps;
        } catch (debugError) {
          _enhancedLogger.enhancedLogger.warn('FeaturedPropsService', 'fetchFeaturedProps', 'Debug manager also failed, falling back to direct API', undefined, debugError);
        }

        // Fallback to direct API call with absolute URL
        const endpoint = `http://localhost:8000/mlb/odds-comparison/`;
        const params = {
          market_type: marketType === 'player' ? 'playerprops' : 'regular',
          ...(statTypes && statTypes.length > 0 && {
            stat_types: statTypes.join(',')
          }),
          limit,
          offset
        };
        const data = await _EnhancedDataManager.enhancedDataManager.fetchData(endpoint, params, {
          cache: useCache,
          ttl: 300000,
          // 5 minutes
          priority
        });

        // Map to FeaturedProp interface
        const responseData = data;
        const mappedProps = mapToFeaturedProps(responseData?.odds || [], sport);
        _enhancedLogger.enhancedLogger.info('FeaturedPropsService', 'fetchFeaturedProps', `Fallback fetch completed: ${mappedProps.length} props`, {
          count: mappedProps.length
        });
        return mappedProps;
      }
    } else {
      // Fallback for other sports using enhanced data manager with absolute URL
      const endpoint = `http://localhost:8000/api/props/${sport || 'general'}`;
      const params = {
        market_type: marketType === 'player' ? 'playerprops' : 'regular'
      };
      const data = await _EnhancedDataManager.enhancedDataManager.fetchData(endpoint, params, {
        cache: useCache,
        ttl: 300000,
        // 5 minutes
        priority
      });

      // Map to FeaturedProp interface
      return mapToFeaturedProps(Array.isArray(data) ? data : [], sport);
    }
  } catch (error) {
    _enhancedLogger.enhancedLogger.error('FeaturedPropsService', 'fetchFeaturedProps', `Failed to fetch ${sport || 'general'} props`, undefined, error);

    // Try to get cached data as fallback
    if (useCache) {
      try {
        const fallbackProps = await _EnhancedDataManager.enhancedDataManager.fetchSportsProps(sport || 'general', marketType || 'player', {
          useCache: true,
          realtime: false
        });
        _enhancedLogger.enhancedLogger.warn('FeaturedPropsService', 'fetchFeaturedProps', `Using fallback cached data: ${fallbackProps.length} props`);
        return fallbackProps;
      } catch (fallbackError) {
        _enhancedLogger.enhancedLogger.error('FeaturedPropsService', 'fetchFeaturedProps', 'Fallback also failed', undefined, fallbackError);
      }
    }

    // Check if this is a connectivity issue (including axios errors)
    const isConnectivityError = error instanceof Error && (error.message.includes('Failed to fetch') || error.message.includes('Network Error') || error.message.includes('timeout') || error.message.includes('signal timed out') || error.name === 'NetworkError' || error.code === 'ERR_NETWORK');
    if (isConnectivityError) {
      _enhancedLogger.enhancedLogger.warn('FeaturedPropsService', 'fetchFeaturedProps', `Backend unavailable for ${sport} - using mock data`);

      // Return mock data when backend is unavailable
      const mockProps = [{
        id: 'mock-aaron-judge-hr',
        player: 'Aaron Judge',
        matchup: 'Yankees vs Red Sox',
        stat: 'Home Runs',
        line: 1.5,
        overOdds: 120,
        underOdds: -110,
        confidence: 85,
        sport: sport || 'MLB',
        gameTime: new Date().toISOString(),
        pickType: 'over'
      }, {
        id: 'mock-mike-trout-hits',
        player: 'Mike Trout',
        matchup: 'Angels vs Astros',
        stat: 'Hits',
        line: 1.5,
        overOdds: -105,
        underOdds: -115,
        confidence: 78,
        sport: sport || 'MLB',
        gameTime: new Date().toISOString(),
        pickType: 'over'
      }, {
        id: 'mock-mookie-betts-rbis',
        player: 'Mookie Betts',
        matchup: 'Dodgers vs Giants',
        stat: 'RBIs',
        line: 0.5,
        overOdds: 110,
        underOdds: -130,
        confidence: 82,
        sport: sport || 'MLB',
        gameTime: new Date().toISOString(),
        pickType: 'over'
      }];
      return mockProps;
    }
    throw error;
  }
}

/**
 * Enhanced prop analysis fetching with intelligent caching
 */
async function fetchEnhancedPropAnalysis(propId, player, stat, options = {}) {
  const {
    useCache = true,
    priority = 'normal'
  } = options;
  try {
    return await _EnhancedDataManager.enhancedDataManager.fetchPropAnalysis(propId, player, stat, {
      useCache,
      priority
    });
  } catch (error) {
    _enhancedLogger.enhancedLogger.error('FeaturedPropsService', 'fetchEnhancedPropAnalysis', `Enhanced analysis failed for ${player} ${stat}`, undefined, error);
    throw error;
  }
}

/**
 * Subscribe to real-time prop updates
 */
function subscribeToPropsUpdates(sport, callback, options = {}) {
  const {
    marketType = 'player',
    prefetch = true
  } = options;
  return _EnhancedDataManager.enhancedDataManager.subscribe(`sports:${sport}:${marketType}`, data => {
    // Transform real-time data to FeaturedProp format
    const props = mapToFeaturedProps(Array.isArray(data) ? data : [data], sport);
    callback(props);
  }, {
    realtime: true,
    prefetch,
    priority: 'high'
  });
}

/**
 * Get data manager performance metrics
 */
function getDataManagerMetrics() {
  return _EnhancedDataManager.enhancedDataManager.getMetrics();
}

/**
 * Clear all cached data
 */
function clearPropsCache() {
  _EnhancedDataManager.enhancedDataManager.clearCache();
}

/**
 * Prefetch likely needed data based on user patterns
 */
async function prefetchPropsData(sport, patterns = []) {
  for (const pattern of patterns) {
    await _EnhancedDataManager.enhancedDataManager.prefetchData(`${sport}:${pattern}`);
  }
}

// Helper function to map raw data to FeaturedProp interface
function mapToFeaturedProps(rawData, sport) {
  return rawData.map(item => {
    const it = item || {};
    // Handle MLB odds data structure
    const player = String(it.player ?? it.player_name ?? it.away_team ?? it.home_team ?? 'Unknown');
    const matchup = String(it.matchup ?? it.event_name ?? `${String(it.away_team ?? 'Team A')} vs ${String(it.home_team ?? 'Team B')}`);
    const stat = String(it.stat ?? it.stat_type ?? it.market_type ?? 'Unknown');
    const id = String(it.id ?? it.event_id ?? `${player}-${stat}`);
    return {
      id,
      player,
      matchup,
      stat,
      line: parseFloat(String(it.line ?? it.line_score ?? 0)),
      overOdds: parseFloat(String(it.overOdds ?? it.over_odds ?? it.value ?? 0)),
      underOdds: parseFloat(String(it.underOdds ?? it.under_odds ?? it.value ?? 0)),
      confidence: parseFloat(String(it.confidence ?? 75)),
      // Default confidence for real games
      sport: String(sport ?? it.sport ?? 'MLB'),
      // Use passed sport parameter first
      gameTime: String(it.gameTime ?? it.start_time ?? new Date().toISOString()),
      pickType: String(it.pickType ?? stat ?? 'prop'),
      // Important: This is the player_id field from the MLB API that powers the headshot URLs
      // The headshots are loaded from: https://midfield.mlbstatic.com/v1/people/{player_id}/spots/120
      espnPlayerId: typeof (it.espnPlayerId ?? it.player_id ?? it.playerId) === 'string' ? it.espnPlayerId ?? it.player_id ?? it.playerId : undefined,
      // Preserve original raw data for backend processing
      _originalData: it
    };
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfRGVidWdFbmhhbmNlZERhdGFNYW5hZ2VyIiwicmVxdWlyZSIsIl9FbmhhbmNlZERhdGFNYW5hZ2VyIiwiX2VuaGFuY2VkTG9nZ2VyIiwiZmV0Y2hCYXRjaFByZWRpY3Rpb25zIiwicHJvcHMiLCJwcm9wc0ZvckJhY2tlbmQiLCJtYXAiLCJwcm9wIiwiX29yaWdpbmFsRGF0YSIsImlkIiwicGxheWVyIiwic3RhdCIsImxpbmUiLCJvdmVyT2RkcyIsInVuZGVyT2RkcyIsImNvbmZpZGVuY2UiLCJzcG9ydCIsImdhbWVUaW1lIiwicGlja1R5cGUiLCJiYXRjaFJlcXVlc3QiLCJlbmRwb2ludCIsInBhcmFtcyIsIml0ZW1zIiwicHJpb3JpdHkiLCJyZXN1bHRzIiwiZW5oYW5jZWREYXRhTWFuYWdlciIsImZldGNoQmF0Y2giLCJiYXRjaFJlc3VsdCIsImJhY2tlbmRQcmVkaWN0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsInByZWRpY3Rpb25zIiwiZW5oYW5jZWRMb2dnZXIiLCJpbmZvIiwicmVjZWl2ZWQiLCJsZW5ndGgiLCJyZXF1ZXN0ZWQiLCJlbmhhbmNlZFByb3BzIiwib3JpZ2luYWxQcm9wIiwiaW5kZXgiLCJiYWNrZW5kUHJlZGljdGlvbiIsImJwIiwiZXJyb3IiLCJ3YXJuIiwicHJvcElkIiwiZW5oYW5jZWRQcm9wIiwicmVjb21tZW5kYXRpb24iLCJxdWFudHVtX2NvbmZpZGVuY2UiLCJxdWFudHVtQ29uZmlkZW5jZSIsIm5ldXJhbF9zY29yZSIsIm5ldXJhbFNjb3JlIiwia2VsbHlfZnJhY3Rpb24iLCJrZWxseUZyYWN0aW9uIiwiZXhwZWN0ZWRfdmFsdWUiLCJleHBlY3RlZFZhbHVlIiwic2hhcF9leHBsYW5hdGlvbiIsInNoYXBFeHBsYW5hdGlvbiIsInJpc2tfYXNzZXNzbWVudCIsInJpc2tBc3Nlc3NtZW50Iiwib3B0aW1hbF9zdGFrZSIsIm9wdGltYWxTdGFrZSIsImVuaGFuY2VkQ291bnQiLCJ1bmRlZmluZWQiLCJmZXRjaEZlYXR1cmVkUHJvcHMiLCJtYXJrZXRUeXBlIiwib3B0aW9ucyIsInVzZUNhY2hlIiwicmVhbHRpbWUiLCJzdGF0VHlwZXMiLCJsaW1pdCIsIm9mZnNldCIsImRlYnVnIiwiZmV0Y2hTcG9ydHNQcm9wcyIsImNvbnNvbGlkYXRlIiwiY291bnQiLCJlbmhhbmNlZEVycm9yIiwiZGVidWdQcm9wcyIsImRlYnVnRW5oYW5jZWREYXRhTWFuYWdlciIsImRlYnVnRXJyb3IiLCJtYXJrZXRfdHlwZSIsInN0YXRfdHlwZXMiLCJqb2luIiwiZGF0YSIsImZldGNoRGF0YSIsImNhY2hlIiwidHRsIiwicmVzcG9uc2VEYXRhIiwibWFwcGVkUHJvcHMiLCJtYXBUb0ZlYXR1cmVkUHJvcHMiLCJvZGRzIiwiZmFsbGJhY2tQcm9wcyIsImZhbGxiYWNrRXJyb3IiLCJpc0Nvbm5lY3Rpdml0eUVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwiaW5jbHVkZXMiLCJuYW1lIiwiY29kZSIsIm1vY2tQcm9wcyIsIm1hdGNodXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJmZXRjaEVuaGFuY2VkUHJvcEFuYWx5c2lzIiwiZmV0Y2hQcm9wQW5hbHlzaXMiLCJzdWJzY3JpYmVUb1Byb3BzVXBkYXRlcyIsImNhbGxiYWNrIiwicHJlZmV0Y2giLCJzdWJzY3JpYmUiLCJnZXREYXRhTWFuYWdlck1ldHJpY3MiLCJnZXRNZXRyaWNzIiwiY2xlYXJQcm9wc0NhY2hlIiwiY2xlYXJDYWNoZSIsInByZWZldGNoUHJvcHNEYXRhIiwicGF0dGVybnMiLCJwYXR0ZXJuIiwicHJlZmV0Y2hEYXRhIiwicmF3RGF0YSIsIml0ZW0iLCJpdCIsIlN0cmluZyIsInBsYXllcl9uYW1lIiwiYXdheV90ZWFtIiwiaG9tZV90ZWFtIiwiZXZlbnRfbmFtZSIsInN0YXRfdHlwZSIsImV2ZW50X2lkIiwicGFyc2VGbG9hdCIsImxpbmVfc2NvcmUiLCJvdmVyX29kZHMiLCJ2YWx1ZSIsInVuZGVyX29kZHMiLCJzdGFydF90aW1lIiwiZXNwblBsYXllcklkIiwicGxheWVyX2lkIiwicGxheWVySWQiXSwic291cmNlcyI6WyJGZWF0dXJlZFByb3BzU2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogTUxCIE9kZHMgJiBBSSBJbnNpZ2h0cyBNYXBwaW5nIExvZ2ljIChBMUJldHRpbmc3LTEzLjIpXHJcbiAqIEVuaGFuY2VkIHdpdGggaW50ZWxsaWdlbnQgZGF0YSBtYW5hZ2VtZW50IGFuZCByZWFsLXRpbWUgY2FwYWJpbGl0aWVzXHJcbiAqXHJcbiAqIFRoaXMgZmlsZSBpcyByZXNwb25zaWJsZSBmb3IgZmV0Y2hpbmcsIG1hcHBpbmcsIGFuZCBzdXJmYWNpbmcgTUxCIG9kZHMgYW5kIEFJIGluc2lnaHRzXHJcbiAqIGluIHRoZSBmcm9udGVuZCBhbmFseXRpY3MgdGFibGUgdXNpbmcgdGhlIGVuaGFuY2VkIGRhdGEgbWFuYWdlci5cclxuICovXHJcblxyXG5pbXBvcnQgeyBkZWJ1Z0VuaGFuY2VkRGF0YU1hbmFnZXIgfSBmcm9tICcuLi9EZWJ1Z0VuaGFuY2VkRGF0YU1hbmFnZXInO1xyXG5pbXBvcnQgeyBlbmhhbmNlZERhdGFNYW5hZ2VyIH0gZnJvbSAnLi4vRW5oYW5jZWREYXRhTWFuYWdlcic7XHJcbmltcG9ydCB7IGVuaGFuY2VkTG9nZ2VyIH0gZnJvbSAnLi4vLi4vdXRpbHMvZW5oYW5jZWRMb2dnZXInO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGZWF0dXJlZFByb3Age1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgcGxheWVyOiBzdHJpbmc7XHJcbiAgbWF0Y2h1cDogc3RyaW5nO1xyXG4gIHN0YXQ6IHN0cmluZztcclxuICBsaW5lOiBudW1iZXI7XHJcbiAgb3Zlck9kZHM6IG51bWJlcjtcclxuICB1bmRlck9kZHM6IG51bWJlcjtcclxuICBjb25maWRlbmNlOiBudW1iZXI7XHJcbiAgc3BvcnQ6IHN0cmluZztcclxuICBnYW1lVGltZTogc3RyaW5nO1xyXG4gIHBpY2tUeXBlOiBzdHJpbmc7XHJcbiAgZXNwblBsYXllcklkPzogc3RyaW5nO1xyXG4gIC8vIFByZXNlcnZlIG9yaWdpbmFsIHJhdyBkYXRhIGZvciBiYWNrZW5kIHByb2Nlc3NpbmdcclxuICBfb3JpZ2luYWxEYXRhPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFbmhhbmNlZCBiYXRjaCBwcmVkaWN0aW9uIHVzaW5nIGJhY2tlbmQtc2lkZSBiYXRjaGluZyBhbmQgaW50ZWxsaWdlbnQgY2FjaGluZ1xyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoQmF0Y2hQcmVkaWN0aW9ucyhwcm9wczogRmVhdHVyZWRQcm9wW10pOiBQcm9taXNlPEZlYXR1cmVkUHJvcFtdPiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIFVzZSBvcmlnaW5hbCByYXcgZGF0YSBmb3IgYmFja2VuZCBpZiBhdmFpbGFibGUsIG90aGVyd2lzZSBjb252ZXJ0IHByb3BzIHRvIGJhY2tlbmQgZm9ybWF0XHJcbiAgICBjb25zdCBwcm9wc0ZvckJhY2tlbmQgPSBwcm9wcy5tYXAocHJvcCA9PiB7XHJcbiAgICAgIC8vIElmIHdlIGhhdmUgb3JpZ2luYWwgZGF0YSwgdXNlIGl0ICh0aGlzIHByZXNlcnZlcyB0aGUgZXhhY3QgZm9ybWF0IHRoZSBiYWNrZW5kIGV4cGVjdHMpXHJcbiAgICAgIGlmIChwcm9wLl9vcmlnaW5hbERhdGEpIHtcclxuICAgICAgICByZXR1cm4gcHJvcC5fb3JpZ2luYWxEYXRhO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBGYWxsYmFjazogY29udmVydCBGZWF0dXJlZFByb3AgZm9ybWF0IHRvIGJhY2tlbmQgZm9ybWF0XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgaWQ6IHByb3AuaWQsXHJcbiAgICAgICAgcGxheWVyOiBwcm9wLnBsYXllcixcclxuICAgICAgICBzdGF0OiBwcm9wLnN0YXQsXHJcbiAgICAgICAgbGluZTogcHJvcC5saW5lLFxyXG4gICAgICAgIG92ZXJPZGRzOiBwcm9wLm92ZXJPZGRzLFxyXG4gICAgICAgIHVuZGVyT2RkczogcHJvcC51bmRlck9kZHMsXHJcbiAgICAgICAgY29uZmlkZW5jZTogcHJvcC5jb25maWRlbmNlLFxyXG4gICAgICAgIHNwb3J0OiBwcm9wLnNwb3J0LFxyXG4gICAgICAgIGdhbWVUaW1lOiBwcm9wLmdhbWVUaW1lLFxyXG4gICAgICAgIHBpY2tUeXBlOiBwcm9wLnBpY2tUeXBlLFxyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgc2luZ2xlIGJhdGNoIHJlcXVlc3QgZm9yIGFsbCBwcm9wc1xyXG4gICAgY29uc3QgYmF0Y2hSZXF1ZXN0ID0ge1xyXG4gICAgICBpZDogJ2JhdGNoX3ByZWRpY3Rpb25zJyxcclxuICAgICAgZW5kcG9pbnQ6ICcvYXBpL3VuaWZpZWQvYmF0Y2gtcHJlZGljdGlvbnMnLFxyXG4gICAgICAvLyBUaGUgVW5pZmllZCBmZXRjaEJhdGNoIGV4cGVjdHMgcGFyYW1zIHRvIGJlIGFuIG9iamVjdC4gV3JhcCBhcnJheSBpbiBhbiBgaXRlbXNgIGZpZWxkLlxyXG4gICAgICBwYXJhbXM6IHsgaXRlbXM6IHByb3BzRm9yQmFja2VuZCB9IGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxyXG4gICAgICBwcmlvcml0eTogJ2hpZ2gnIGFzIGNvbnN0LFxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBQcm9jZXNzIGJhdGNoIHdpdGggaW50ZWxsaWdlbnQgY2FjaGluZ1xyXG4gIC8vIENhbGwgZmV0Y2hCYXRjaCB3aXRoIHRoZSBjb3JyZWN0bHkgc2hhcGVkIHBhcmFtcyBvYmplY3RcclxuICBjb25zdCByZXN1bHRzID0gYXdhaXQgZW5oYW5jZWREYXRhTWFuYWdlci5mZXRjaEJhdGNoKFtiYXRjaFJlcXVlc3RdKTtcclxuXHJcbiAgICAvLyBFeHRyYWN0IHByZWRpY3Rpb25zIGZyb20gYmF0Y2ggcmVzdWx0c1xyXG4gICAgY29uc3QgYmF0Y2hSZXN1bHQgPSByZXN1bHRzWydiYXRjaF9wcmVkaWN0aW9ucyddO1xyXG4gIGxldCBiYWNrZW5kUHJlZGljdGlvbnM6IHVua25vd25bXSA9IFtdO1xyXG5cclxuICAgIGlmIChiYXRjaFJlc3VsdCkge1xyXG4gICAgICAvLyBIYW5kbGUgYmFja2VuZCByZXNwb25zZSBmb3JtYXQ6IHsgcHJlZGljdGlvbnM6IFsuLi5dLCBlcnJvcnM6IFsuLi5dIH1cclxuICAgICAgaWYgKFxyXG4gICAgICAgIHR5cGVvZiBiYXRjaFJlc3VsdCA9PT0gJ29iamVjdCcgJiZcclxuICAgICAgICBiYXRjaFJlc3VsdCAhPT0gbnVsbCAmJlxyXG4gICAgICAgICdwcmVkaWN0aW9ucycgaW4gYmF0Y2hSZXN1bHQgJiZcclxuICAgICAgICBBcnJheS5pc0FycmF5KChiYXRjaFJlc3VsdCBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikucHJlZGljdGlvbnMpXHJcbiAgICAgICkge1xyXG4gICAgICAgIGJhY2tlbmRQcmVkaWN0aW9ucyA9IChiYXRjaFJlc3VsdCBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikucHJlZGljdGlvbnMgYXMgdW5rbm93bltdO1xyXG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYmF0Y2hSZXN1bHQpKSB7XHJcbiAgICAgICAgYmFja2VuZFByZWRpY3Rpb25zID0gYmF0Y2hSZXN1bHQ7XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGJhdGNoUmVzdWx0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGJhY2tlbmRQcmVkaWN0aW9ucyA9IFtiYXRjaFJlc3VsdF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlbmhhbmNlZExvZ2dlci5pbmZvKCdGZWF0dXJlZFByb3BzU2VydmljZScsICdmZXRjaEJhdGNoUHJlZGljdGlvbnMnLCBgQmFja2VuZCBwcmVkaWN0aW9ucyByZWNlaXZlZGAsIHtcclxuICAgICAgcmVjZWl2ZWQ6IEFycmF5LmlzQXJyYXkoYmFja2VuZFByZWRpY3Rpb25zKSA/IGJhY2tlbmRQcmVkaWN0aW9ucy5sZW5ndGggOiAwLFxyXG4gICAgICByZXF1ZXN0ZWQ6IHByb3BzLmxlbmd0aCxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFRyYW5zZm9ybSBiYWNrZW5kIHByZWRpY3Rpb25zIGJhY2sgdG8gRmVhdHVyZWRQcm9wIGZvcm1hdCB3aXRoIGVuaGFuY2VkIGRhdGFcclxuICAgIGNvbnN0IGVuaGFuY2VkUHJvcHM6IEZlYXR1cmVkUHJvcFtdID0gcHJvcHMubWFwKChvcmlnaW5hbFByb3AsIGluZGV4KSA9PiB7XHJcbiAgICAgIGNvbnN0IGJhY2tlbmRQcmVkaWN0aW9uID0gYmFja2VuZFByZWRpY3Rpb25zW2luZGV4XTtcclxuXHJcbiAgICAgIGNvbnN0IGJwID0gYmFja2VuZFByZWRpY3Rpb24gYXMgUmVjb3JkPHN0cmluZywgYW55PiB8IHVuZGVmaW5lZDtcclxuICAgICAgaWYgKCFicCB8fCBicC5lcnJvcikge1xyXG4gICAgICAgIC8vIElmIHByZWRpY3Rpb24gZmFpbGVkLCByZXR1cm4gb3JpZ2luYWwgcHJvcFxyXG4gICAgICAgIGVuaGFuY2VkTG9nZ2VyLndhcm4oJ0ZlYXR1cmVkUHJvcHNTZXJ2aWNlJywgJ2ZldGNoQmF0Y2hQcmVkaWN0aW9ucycsIGBObyBwcmVkaWN0aW9uIGZvciBwcm9wYCwgeyBpbmRleCwgcHJvcElkOiBvcmlnaW5hbFByb3AuaWQgfSk7XHJcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUHJvcDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gTWVyZ2Ugb3JpZ2luYWwgcHJvcCBzdHJ1Y3R1cmUgd2l0aCBlbmhhbmNlZCBwcmVkaWN0aW9uIGRhdGFcclxuICAgICAgY29uc3QgZW5oYW5jZWRQcm9wOiBGZWF0dXJlZFByb3AgPSB7XHJcbiAgICAgICAgLi4ub3JpZ2luYWxQcm9wLFxyXG4gICAgICAgIC8vIFVwZGF0ZSBjb25maWRlbmNlIGZyb20gYmFja2VuZCBwcmVkaWN0aW9uXHJcbiAgY29uZmlkZW5jZTogYnAuY29uZmlkZW5jZSB8fCBvcmlnaW5hbFByb3AuY29uZmlkZW5jZSxcclxuICAvLyBBZGQgZW5oYW5jZWQgZGF0YSBhcyBjdXN0b20gcHJvcGVydGllcyAod2lsbCBiZSBhdmFpbGFibGUgZm9yIGVuaGFuY2VkIGFuYWx5c2lzKVxyXG4gIC4uLihicC5yZWNvbW1lbmRhdGlvbiAmJiB7IHJlY29tbWVuZGF0aW9uOiBicC5yZWNvbW1lbmRhdGlvbiB9KSxcclxuICAuLi4oYnAucXVhbnR1bV9jb25maWRlbmNlICYmIHsgcXVhbnR1bUNvbmZpZGVuY2U6IGJwLnF1YW50dW1fY29uZmlkZW5jZSB9KSxcclxuICAuLi4oYnAubmV1cmFsX3Njb3JlICYmIHsgbmV1cmFsU2NvcmU6IGJwLm5ldXJhbF9zY29yZSB9KSxcclxuICAuLi4oYnAua2VsbHlfZnJhY3Rpb24gJiYgeyBrZWxseUZyYWN0aW9uOiBicC5rZWxseV9mcmFjdGlvbiB9KSxcclxuICAuLi4oYnAuZXhwZWN0ZWRfdmFsdWUgJiYgeyBleHBlY3RlZFZhbHVlOiBicC5leHBlY3RlZF92YWx1ZSB9KSxcclxuICAuLi4oYnAuc2hhcF9leHBsYW5hdGlvbiAmJiB7IHNoYXBFeHBsYW5hdGlvbjogYnAuc2hhcF9leHBsYW5hdGlvbiB9KSxcclxuICAuLi4oYnAucmlza19hc3Nlc3NtZW50ICYmIHsgcmlza0Fzc2Vzc21lbnQ6IGJwLnJpc2tfYXNzZXNzbWVudCB9KSxcclxuICAuLi4oYnAub3B0aW1hbF9zdGFrZSAmJiB7IG9wdGltYWxTdGFrZTogYnAub3B0aW1hbF9zdGFrZSB9KSxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJldHVybiBlbmhhbmNlZFByb3A7XHJcbiAgICB9KTtcclxuXHJcbiAgZW5oYW5jZWRMb2dnZXIuaW5mbygnRmVhdHVyZWRQcm9wc1NlcnZpY2UnLCAnZmV0Y2hCYXRjaFByZWRpY3Rpb25zJywgYEVuaGFuY2VkIHByb3BzIGNyZWF0ZWRgLCB7IGVuaGFuY2VkQ291bnQ6IGVuaGFuY2VkUHJvcHMubGVuZ3RoIH0pO1xyXG5cclxuICAgIHJldHVybiBlbmhhbmNlZFByb3BzO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBlbmhhbmNlZExvZ2dlci5lcnJvcignRmVhdHVyZWRQcm9wc1NlcnZpY2UnLCAnZmV0Y2hCYXRjaFByZWRpY3Rpb25zJywgJ0JhdGNoIHByZWRpY3Rpb25zIGZhaWxlZCcsIHVuZGVmaW5lZCwgZXJyb3IgYXMgRXJyb3IpO1xyXG4gICAgLy8gUmV0dXJuIG9yaWdpbmFsIHByb3BzIGlmIGJhdGNoIGVuaGFuY2VtZW50IGZhaWxzXHJcbiAgICByZXR1cm4gcHJvcHM7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogRW5oYW5jZWQgcHJvcHMgZmV0Y2hpbmcgd2l0aCBpbnRlbGxpZ2VudCBjYWNoaW5nIGFuZCByZWFsLXRpbWUgdXBkYXRlc1xyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoRmVhdHVyZWRQcm9wcyhcclxuICBzcG9ydD86IHN0cmluZyxcclxuICBtYXJrZXRUeXBlPzogc3RyaW5nLFxyXG4gIG9wdGlvbnM6IHtcclxuICAgIHVzZUNhY2hlPzogYm9vbGVhbjtcclxuICAgIHJlYWx0aW1lPzogYm9vbGVhbjtcclxuICAgIHByaW9yaXR5PzogJ2hpZ2gnIHwgJ25vcm1hbCcgfCAnbG93JztcclxuICAgIHN0YXRUeXBlcz86IHN0cmluZ1tdOyAvLyBBZGQgc3RhdCB0eXBlcyBmaWx0ZXJpbmdcclxuICAgIGxpbWl0PzogbnVtYmVyOyAvLyBBZGQgcGFnaW5hdGlvbiBzdXBwb3J0XHJcbiAgICBvZmZzZXQ/OiBudW1iZXI7XHJcbiAgfSA9IHt9XHJcbik6IFByb21pc2U8RmVhdHVyZWRQcm9wW10+IHtcclxuICBjb25zdCB7XHJcbiAgICB1c2VDYWNoZSA9IHRydWUsXHJcbiAgICByZWFsdGltZSA9IGZhbHNlLFxyXG4gICAgcHJpb3JpdHkgPSAnaGlnaCcsXHJcbiAgICBzdGF0VHlwZXMsXHJcbiAgICBsaW1pdCA9IDUwLFxyXG4gICAgb2Zmc2V0ID0gMCxcclxuICB9ID0gb3B0aW9ucztcclxuXHJcbiAgdHJ5IHtcclxuICAgIGlmIChzcG9ydCA9PT0gJ01MQicpIHtcclxuICBlbmhhbmNlZExvZ2dlci5pbmZvKCdGZWF0dXJlZFByb3BzU2VydmljZScsICdmZXRjaEZlYXR1cmVkUHJvcHMnLCBgRmV0Y2hpbmcgJHtzcG9ydH0gcHJvcHMgd2l0aCBlbmhhbmNlZCBkYXRhIG1hbmFnZXJgKTtcclxuXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgLy8gVHJ5IHRvIHVzZSBlbmhhbmNlZCBkYXRhIG1hbmFnZXIgZm9yIG9wdGltaXplZCBNTEIgZGF0YSBmZXRjaGluZ1xyXG4gICAgICAgIGVuaGFuY2VkTG9nZ2VyLmRlYnVnKCdGZWF0dXJlZFByb3BzU2VydmljZScsICdmZXRjaEZlYXR1cmVkUHJvcHMnLCAnQ2FsbGluZyBlbmhhbmNlZERhdGFNYW5hZ2VyLmZldGNoU3BvcnRzUHJvcHMgd2l0aCBwYXJhbXMnLCB7XHJcbiAgICAgICAgICBzcG9ydCxcclxuICAgICAgICAgIG1hcmtldFR5cGU6IG1hcmtldFR5cGUgfHwgJ3BsYXllcicsXHJcbiAgICAgICAgICBzdGF0VHlwZXMsXHJcbiAgICAgICAgICBsaW1pdCxcclxuICAgICAgICAgIG9mZnNldCxcclxuICAgICAgICAgIHVzZUNhY2hlLFxyXG4gICAgICAgICAgcmVhbHRpbWUsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHByb3BzID0gYXdhaXQgZW5oYW5jZWREYXRhTWFuYWdlci5mZXRjaFNwb3J0c1Byb3BzKHNwb3J0LCBtYXJrZXRUeXBlIHx8ICdwbGF5ZXInLCB7XHJcbiAgICAgICAgICB1c2VDYWNoZSwgLy8gUmUtZW5hYmxlIGNhY2hpbmcgbm93IHRoYXQgdGVzdGluZyBpcyBjb21wbGV0ZVxyXG4gICAgICAgICAgcmVhbHRpbWUsXHJcbiAgICAgICAgICBjb25zb2xpZGF0ZTogdHJ1ZSwgLy8gRW5hYmxlIHNtYXJ0IGNvbnNvbGlkYXRpb25cclxuICAgICAgICAgIHN0YXRUeXBlcywgLy8gUGFzcyBzdGF0VHlwZXMgZm9yIGZpbHRlcmluZ1xyXG4gICAgICAgICAgbGltaXQsIC8vIFBhc3MgbGltaXQgZm9yIHBhZ2luYXRpb25cclxuICAgICAgICAgIG9mZnNldCwgLy8gUGFzcyBvZmZzZXQgZm9yIHBhZ2luYXRpb25cclxuICAgICAgICB9KTtcclxuXHJcbiAgZW5oYW5jZWRMb2dnZXIuaW5mbygnRmVhdHVyZWRQcm9wc1NlcnZpY2UnLCAnZmV0Y2hGZWF0dXJlZFByb3BzJywgYEVuaGFuY2VkIGZldGNoIGNvbXBsZXRlZDogJHtwcm9wcy5sZW5ndGh9IHByb3BzYCwgeyBjb3VudDogcHJvcHMubGVuZ3RoIH0pO1xyXG4gICAgICAgIHJldHVybiBwcm9wcztcclxuICAgICAgfSBjYXRjaCAoZW5oYW5jZWRFcnJvcikge1xyXG4gIGVuaGFuY2VkTG9nZ2VyLndhcm4oJ0ZlYXR1cmVkUHJvcHNTZXJ2aWNlJywgJ2ZldGNoRmVhdHVyZWRQcm9wcycsICdFbmhhbmNlZCBtYW5hZ2VyIGZhaWxlZCwgdHJ5aW5nIGRlYnVnIG1hbmFnZXInLCB1bmRlZmluZWQsIGVuaGFuY2VkRXJyb3IgYXMgRXJyb3IpO1xyXG5cclxuICAgICAgICAvLyBUcnkgZGVidWcgbWFuYWdlciBhcyBzZWNvbmQgZmFsbGJhY2tcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgZW5oYW5jZWRMb2dnZXIuZGVidWcoJ0ZlYXR1cmVkUHJvcHNTZXJ2aWNlJywgJ2ZldGNoRmVhdHVyZWRQcm9wcycsICdUcnlpbmcgZGVidWcgbWFuYWdlci4uLicpO1xyXG4gICAgICAgICAgY29uc3QgZGVidWdQcm9wcyA9IGF3YWl0IGRlYnVnRW5oYW5jZWREYXRhTWFuYWdlci5mZXRjaFNwb3J0c1Byb3BzKFxyXG4gICAgICAgICAgICBzcG9ydCxcclxuICAgICAgICAgICAgbWFya2V0VHlwZSB8fCAncGxheWVyJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHN0YXRUeXBlcyxcclxuICAgICAgICAgICAgICBsaW1pdCxcclxuICAgICAgICAgICAgICBvZmZzZXQsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBlbmhhbmNlZExvZ2dlci5pbmZvKCdGZWF0dXJlZFByb3BzU2VydmljZScsICdmZXRjaEZlYXR1cmVkUHJvcHMnLCBgRGVidWcgbWFuYWdlciBzdWNjZWVkZWQ6ICR7ZGVidWdQcm9wcy5sZW5ndGh9IHByb3BzYCwgeyBjb3VudDogZGVidWdQcm9wcy5sZW5ndGggfSk7XHJcbiAgICAgICAgICByZXR1cm4gZGVidWdQcm9wcztcclxuICAgICAgICB9IGNhdGNoIChkZWJ1Z0Vycm9yKSB7XHJcbiAgICAgICAgICBlbmhhbmNlZExvZ2dlci53YXJuKCdGZWF0dXJlZFByb3BzU2VydmljZScsICdmZXRjaEZlYXR1cmVkUHJvcHMnLCAnRGVidWcgbWFuYWdlciBhbHNvIGZhaWxlZCwgZmFsbGluZyBiYWNrIHRvIGRpcmVjdCBBUEknLCB1bmRlZmluZWQsIGRlYnVnRXJyb3IgYXMgRXJyb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRmFsbGJhY2sgdG8gZGlyZWN0IEFQSSBjYWxsIHdpdGggYWJzb2x1dGUgVVJMXHJcbiAgICAgICAgY29uc3QgZW5kcG9pbnQgPSBgaHR0cDovL2xvY2FsaG9zdDo4MDAwL21sYi9vZGRzLWNvbXBhcmlzb24vYDtcclxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XHJcbiAgICAgICAgICBtYXJrZXRfdHlwZTogbWFya2V0VHlwZSA9PT0gJ3BsYXllcicgPyAncGxheWVycHJvcHMnIDogJ3JlZ3VsYXInLFxyXG4gICAgICAgICAgLi4uKHN0YXRUeXBlcyAmJiBzdGF0VHlwZXMubGVuZ3RoID4gMCAmJiB7IHN0YXRfdHlwZXM6IHN0YXRUeXBlcy5qb2luKCcsJykgfSksXHJcbiAgICAgICAgICBsaW1pdCxcclxuICAgICAgICAgIG9mZnNldCxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZW5oYW5jZWREYXRhTWFuYWdlci5mZXRjaERhdGEoZW5kcG9pbnQsIHBhcmFtcywge1xyXG4gICAgICAgICAgY2FjaGU6IHVzZUNhY2hlLFxyXG4gICAgICAgICAgdHRsOiAzMDAwMDAsIC8vIDUgbWludXRlc1xyXG4gICAgICAgICAgcHJpb3JpdHksXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIE1hcCB0byBGZWF0dXJlZFByb3AgaW50ZXJmYWNlXHJcbiAgY29uc3QgcmVzcG9uc2VEYXRhID0gZGF0YSBhcyB1bmtub3duO1xyXG4gIGNvbnN0IG1hcHBlZFByb3BzID0gbWFwVG9GZWF0dXJlZFByb3BzKCgocmVzcG9uc2VEYXRhIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KT8ub2RkcyBhcyB1bmtub3duW10pIHx8IFtdLCBzcG9ydCk7XHJcbiAgZW5oYW5jZWRMb2dnZXIuaW5mbygnRmVhdHVyZWRQcm9wc1NlcnZpY2UnLCAnZmV0Y2hGZWF0dXJlZFByb3BzJywgYEZhbGxiYWNrIGZldGNoIGNvbXBsZXRlZDogJHttYXBwZWRQcm9wcy5sZW5ndGh9IHByb3BzYCwgeyBjb3VudDogbWFwcGVkUHJvcHMubGVuZ3RoIH0pO1xyXG4gICAgICAgIHJldHVybiBtYXBwZWRQcm9wcztcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gRmFsbGJhY2sgZm9yIG90aGVyIHNwb3J0cyB1c2luZyBlbmhhbmNlZCBkYXRhIG1hbmFnZXIgd2l0aCBhYnNvbHV0ZSBVUkxcclxuICAgICAgY29uc3QgZW5kcG9pbnQgPSBgaHR0cDovL2xvY2FsaG9zdDo4MDAwL2FwaS9wcm9wcy8ke3Nwb3J0IHx8ICdnZW5lcmFsJ31gO1xyXG4gICAgICBjb25zdCBwYXJhbXMgPSB7XHJcbiAgICAgICAgbWFya2V0X3R5cGU6IG1hcmtldFR5cGUgPT09ICdwbGF5ZXInID8gJ3BsYXllcnByb3BzJyA6ICdyZWd1bGFyJyxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBlbmhhbmNlZERhdGFNYW5hZ2VyLmZldGNoRGF0YShlbmRwb2ludCwgcGFyYW1zLCB7XHJcbiAgICAgICAgY2FjaGU6IHVzZUNhY2hlLFxyXG4gICAgICAgIHR0bDogMzAwMDAwLCAvLyA1IG1pbnV0ZXNcclxuICAgICAgICBwcmlvcml0eSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBNYXAgdG8gRmVhdHVyZWRQcm9wIGludGVyZmFjZVxyXG4gICAgICByZXR1cm4gbWFwVG9GZWF0dXJlZFByb3BzKEFycmF5LmlzQXJyYXkoZGF0YSkgPyBkYXRhIDogW10sIHNwb3J0KTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gIGVuaGFuY2VkTG9nZ2VyLmVycm9yKCdGZWF0dXJlZFByb3BzU2VydmljZScsICdmZXRjaEZlYXR1cmVkUHJvcHMnLCBgRmFpbGVkIHRvIGZldGNoICR7c3BvcnQgfHwgJ2dlbmVyYWwnfSBwcm9wc2AsIHVuZGVmaW5lZCwgZXJyb3IgYXMgRXJyb3IpO1xyXG5cclxuICAgIC8vIFRyeSB0byBnZXQgY2FjaGVkIGRhdGEgYXMgZmFsbGJhY2tcclxuICAgIGlmICh1c2VDYWNoZSkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGZhbGxiYWNrUHJvcHMgPSBhd2FpdCBlbmhhbmNlZERhdGFNYW5hZ2VyLmZldGNoU3BvcnRzUHJvcHMoXHJcbiAgICAgICAgICBzcG9ydCB8fCAnZ2VuZXJhbCcsXHJcbiAgICAgICAgICBtYXJrZXRUeXBlIHx8ICdwbGF5ZXInLFxyXG4gICAgICAgICAgeyB1c2VDYWNoZTogdHJ1ZSwgcmVhbHRpbWU6IGZhbHNlIH1cclxuICAgICAgICApO1xyXG5cclxuICBlbmhhbmNlZExvZ2dlci53YXJuKCdGZWF0dXJlZFByb3BzU2VydmljZScsICdmZXRjaEZlYXR1cmVkUHJvcHMnLCBgVXNpbmcgZmFsbGJhY2sgY2FjaGVkIGRhdGE6ICR7ZmFsbGJhY2tQcm9wcy5sZW5ndGh9IHByb3BzYCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrUHJvcHM7XHJcbiAgICAgIH0gY2F0Y2ggKGZhbGxiYWNrRXJyb3IpIHtcclxuICBlbmhhbmNlZExvZ2dlci5lcnJvcignRmVhdHVyZWRQcm9wc1NlcnZpY2UnLCAnZmV0Y2hGZWF0dXJlZFByb3BzJywgJ0ZhbGxiYWNrIGFsc28gZmFpbGVkJywgdW5kZWZpbmVkLCBmYWxsYmFja0Vycm9yIGFzIEVycm9yKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYSBjb25uZWN0aXZpdHkgaXNzdWUgKGluY2x1ZGluZyBheGlvcyBlcnJvcnMpXHJcbiAgICBjb25zdCBpc0Nvbm5lY3Rpdml0eUVycm9yID1cclxuICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJlxyXG4gICAgICAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnRmFpbGVkIHRvIGZldGNoJykgfHxcclxuICAgICAgICBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdOZXR3b3JrIEVycm9yJykgfHxcclxuICAgICAgICBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCd0aW1lb3V0JykgfHxcclxuICAgICAgICBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdzaWduYWwgdGltZWQgb3V0JykgfHxcclxuICAgICAgICBlcnJvci5uYW1lID09PSAnTmV0d29ya0Vycm9yJyB8fFxyXG4gICgoZXJyb3IgYXMgdW5rbm93bikgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pLmNvZGUgPT09ICdFUlJfTkVUV09SSycpO1xyXG5cclxuICAgIGlmIChpc0Nvbm5lY3Rpdml0eUVycm9yKSB7XHJcbiAgZW5oYW5jZWRMb2dnZXIud2FybignRmVhdHVyZWRQcm9wc1NlcnZpY2UnLCAnZmV0Y2hGZWF0dXJlZFByb3BzJywgYEJhY2tlbmQgdW5hdmFpbGFibGUgZm9yICR7c3BvcnR9IC0gdXNpbmcgbW9jayBkYXRhYCk7XHJcblxyXG4gICAgICAvLyBSZXR1cm4gbW9jayBkYXRhIHdoZW4gYmFja2VuZCBpcyB1bmF2YWlsYWJsZVxyXG4gICAgICBjb25zdCBtb2NrUHJvcHM6IEZlYXR1cmVkUHJvcFtdID0gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnbW9jay1hYXJvbi1qdWRnZS1ocicsXHJcbiAgICAgICAgICBwbGF5ZXI6ICdBYXJvbiBKdWRnZScsXHJcbiAgICAgICAgICBtYXRjaHVwOiAnWWFua2VlcyB2cyBSZWQgU294JyxcclxuICAgICAgICAgIHN0YXQ6ICdIb21lIFJ1bnMnLFxyXG4gICAgICAgICAgbGluZTogMS41LFxyXG4gICAgICAgICAgb3Zlck9kZHM6IDEyMCxcclxuICAgICAgICAgIHVuZGVyT2RkczogLTExMCxcclxuICAgICAgICAgIGNvbmZpZGVuY2U6IDg1LFxyXG4gICAgICAgICAgc3BvcnQ6IHNwb3J0IHx8ICdNTEInLFxyXG4gICAgICAgICAgZ2FtZVRpbWU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICAgIHBpY2tUeXBlOiAnb3ZlcicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpZDogJ21vY2stbWlrZS10cm91dC1oaXRzJyxcclxuICAgICAgICAgIHBsYXllcjogJ01pa2UgVHJvdXQnLFxyXG4gICAgICAgICAgbWF0Y2h1cDogJ0FuZ2VscyB2cyBBc3Ryb3MnLFxyXG4gICAgICAgICAgc3RhdDogJ0hpdHMnLFxyXG4gICAgICAgICAgbGluZTogMS41LFxyXG4gICAgICAgICAgb3Zlck9kZHM6IC0xMDUsXHJcbiAgICAgICAgICB1bmRlck9kZHM6IC0xMTUsXHJcbiAgICAgICAgICBjb25maWRlbmNlOiA3OCxcclxuICAgICAgICAgIHNwb3J0OiBzcG9ydCB8fCAnTUxCJyxcclxuICAgICAgICAgIGdhbWVUaW1lOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgICAgICBwaWNrVHlwZTogJ292ZXInLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWQ6ICdtb2NrLW1vb2tpZS1iZXR0cy1yYmlzJyxcclxuICAgICAgICAgIHBsYXllcjogJ01vb2tpZSBCZXR0cycsXHJcbiAgICAgICAgICBtYXRjaHVwOiAnRG9kZ2VycyB2cyBHaWFudHMnLFxyXG4gICAgICAgICAgc3RhdDogJ1JCSXMnLFxyXG4gICAgICAgICAgbGluZTogMC41LFxyXG4gICAgICAgICAgb3Zlck9kZHM6IDExMCxcclxuICAgICAgICAgIHVuZGVyT2RkczogLTEzMCxcclxuICAgICAgICAgIGNvbmZpZGVuY2U6IDgyLFxyXG4gICAgICAgICAgc3BvcnQ6IHNwb3J0IHx8ICdNTEInLFxyXG4gICAgICAgICAgZ2FtZVRpbWU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICAgIHBpY2tUeXBlOiAnb3ZlcicsXHJcbiAgICAgICAgfSxcclxuICAgICAgXTtcclxuXHJcbiAgICAgIHJldHVybiBtb2NrUHJvcHM7XHJcbiAgICB9XHJcblxyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogRW5oYW5jZWQgcHJvcCBhbmFseXNpcyBmZXRjaGluZyB3aXRoIGludGVsbGlnZW50IGNhY2hpbmdcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaEVuaGFuY2VkUHJvcEFuYWx5c2lzKFxyXG4gIHByb3BJZDogc3RyaW5nLFxyXG4gIHBsYXllcjogc3RyaW5nLFxyXG4gIHN0YXQ6IHN0cmluZyxcclxuICBvcHRpb25zOiB7XHJcbiAgICB1c2VDYWNoZT86IGJvb2xlYW47XHJcbiAgICBwcmlvcml0eT86ICdoaWdoJyB8ICdub3JtYWwnIHwgJ2xvdyc7XHJcbiAgfSA9IHt9XHJcbik6IFByb21pc2U8dW5rbm93bj4ge1xyXG4gIGNvbnN0IHsgdXNlQ2FjaGUgPSB0cnVlLCBwcmlvcml0eSA9ICdub3JtYWwnIH0gPSBvcHRpb25zO1xyXG5cclxuICB0cnkge1xyXG4gICAgcmV0dXJuIGF3YWl0IGVuaGFuY2VkRGF0YU1hbmFnZXIuZmV0Y2hQcm9wQW5hbHlzaXMocHJvcElkLCBwbGF5ZXIsIHN0YXQsIHtcclxuICAgICAgdXNlQ2FjaGUsXHJcbiAgICAgIHByaW9yaXR5LFxyXG4gICAgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGVuaGFuY2VkTG9nZ2VyLmVycm9yKCdGZWF0dXJlZFByb3BzU2VydmljZScsICdmZXRjaEVuaGFuY2VkUHJvcEFuYWx5c2lzJywgYEVuaGFuY2VkIGFuYWx5c2lzIGZhaWxlZCBmb3IgJHtwbGF5ZXJ9ICR7c3RhdH1gLCB1bmRlZmluZWQsIGVycm9yIGFzIEVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFN1YnNjcmliZSB0byByZWFsLXRpbWUgcHJvcCB1cGRhdGVzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaWJlVG9Qcm9wc1VwZGF0ZXMoXHJcbiAgc3BvcnQ6IHN0cmluZyxcclxuICBjYWxsYmFjazogKHByb3BzOiBGZWF0dXJlZFByb3BbXSkgPT4gdm9pZCxcclxuICBvcHRpb25zOiB7XHJcbiAgICBtYXJrZXRUeXBlPzogc3RyaW5nO1xyXG4gICAgcHJlZmV0Y2g/OiBib29sZWFuO1xyXG4gIH0gPSB7fVxyXG4pOiAoKSA9PiB2b2lkIHtcclxuICBjb25zdCB7IG1hcmtldFR5cGUgPSAncGxheWVyJywgcHJlZmV0Y2ggPSB0cnVlIH0gPSBvcHRpb25zO1xyXG5cclxuICByZXR1cm4gZW5oYW5jZWREYXRhTWFuYWdlci5zdWJzY3JpYmUoXHJcbiAgICBgc3BvcnRzOiR7c3BvcnR9OiR7bWFya2V0VHlwZX1gLFxyXG4gICAgZGF0YSA9PiB7XHJcbiAgICAgIC8vIFRyYW5zZm9ybSByZWFsLXRpbWUgZGF0YSB0byBGZWF0dXJlZFByb3AgZm9ybWF0XHJcbiAgICAgIGNvbnN0IHByb3BzID0gbWFwVG9GZWF0dXJlZFByb3BzKEFycmF5LmlzQXJyYXkoZGF0YSkgPyBkYXRhIDogW2RhdGFdLCBzcG9ydCk7XHJcbiAgICAgIGNhbGxiYWNrKHByb3BzKTtcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHJlYWx0aW1lOiB0cnVlLFxyXG4gICAgICBwcmVmZXRjaCxcclxuICAgICAgcHJpb3JpdHk6ICdoaWdoJyxcclxuICAgIH1cclxuICApO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IGRhdGEgbWFuYWdlciBwZXJmb3JtYW5jZSBtZXRyaWNzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF0YU1hbmFnZXJNZXRyaWNzKCkge1xyXG4gIHJldHVybiBlbmhhbmNlZERhdGFNYW5hZ2VyLmdldE1ldHJpY3MoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENsZWFyIGFsbCBjYWNoZWQgZGF0YVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyUHJvcHNDYWNoZSgpOiB2b2lkIHtcclxuICBlbmhhbmNlZERhdGFNYW5hZ2VyLmNsZWFyQ2FjaGUoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFByZWZldGNoIGxpa2VseSBuZWVkZWQgZGF0YSBiYXNlZCBvbiB1c2VyIHBhdHRlcm5zXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlZmV0Y2hQcm9wc0RhdGEoc3BvcnQ6IHN0cmluZywgcGF0dGVybnM6IHN0cmluZ1tdID0gW10pOiBQcm9taXNlPHZvaWQ+IHtcclxuICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgcGF0dGVybnMpIHtcclxuICAgIGF3YWl0IGVuaGFuY2VkRGF0YU1hbmFnZXIucHJlZmV0Y2hEYXRhKGAke3Nwb3J0fToke3BhdHRlcm59YCk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gbWFwIHJhdyBkYXRhIHRvIEZlYXR1cmVkUHJvcCBpbnRlcmZhY2VcclxuZnVuY3Rpb24gbWFwVG9GZWF0dXJlZFByb3BzKHJhd0RhdGE6IHVua25vd25bXSwgc3BvcnQ/OiBzdHJpbmcpOiBGZWF0dXJlZFByb3BbXSB7XHJcbiAgcmV0dXJuIHJhd0RhdGEubWFwKGl0ZW0gPT4ge1xyXG4gICAgY29uc3QgaXQgPSAoaXRlbSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikgfHwge307XHJcbiAgICAvLyBIYW5kbGUgTUxCIG9kZHMgZGF0YSBzdHJ1Y3R1cmVcclxuICAgIGNvbnN0IHBsYXllciA9IFN0cmluZyhpdC5wbGF5ZXIgPz8gaXQucGxheWVyX25hbWUgPz8gaXQuYXdheV90ZWFtID8/IGl0LmhvbWVfdGVhbSA/PyAnVW5rbm93bicpO1xyXG4gICAgY29uc3QgbWF0Y2h1cCA9IFN0cmluZyhcclxuICAgICAgaXQubWF0Y2h1cCA/PyBpdC5ldmVudF9uYW1lID8/IGAke1N0cmluZyhpdC5hd2F5X3RlYW0gPz8gJ1RlYW0gQScpfSB2cyAke1N0cmluZyhpdC5ob21lX3RlYW0gPz8gJ1RlYW0gQicpfWBcclxuICAgICk7XHJcbiAgICBjb25zdCBzdGF0ID0gU3RyaW5nKGl0LnN0YXQgPz8gaXQuc3RhdF90eXBlID8/IGl0Lm1hcmtldF90eXBlID8/ICdVbmtub3duJyk7XHJcblxyXG4gICAgY29uc3QgaWQgPSBTdHJpbmcoaXQuaWQgPz8gaXQuZXZlbnRfaWQgPz8gYCR7cGxheWVyfS0ke3N0YXR9YCk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaWQsXHJcbiAgICAgIHBsYXllcixcclxuICAgICAgbWF0Y2h1cCxcclxuICAgICAgc3RhdCxcclxuICAgICAgbGluZTogcGFyc2VGbG9hdChTdHJpbmcoaXQubGluZSA/PyBpdC5saW5lX3Njb3JlID8/IDApKSxcclxuICAgICAgb3Zlck9kZHM6IHBhcnNlRmxvYXQoU3RyaW5nKGl0Lm92ZXJPZGRzID8/IGl0Lm92ZXJfb2RkcyA/PyBpdC52YWx1ZSA/PyAwKSksXHJcbiAgICAgIHVuZGVyT2RkczogcGFyc2VGbG9hdChTdHJpbmcoaXQudW5kZXJPZGRzID8/IGl0LnVuZGVyX29kZHMgPz8gaXQudmFsdWUgPz8gMCkpLFxyXG4gICAgICBjb25maWRlbmNlOiBwYXJzZUZsb2F0KFN0cmluZyhpdC5jb25maWRlbmNlID8/IDc1KSksIC8vIERlZmF1bHQgY29uZmlkZW5jZSBmb3IgcmVhbCBnYW1lc1xyXG4gICAgICBzcG9ydDogU3RyaW5nKHNwb3J0ID8/IGl0LnNwb3J0ID8/ICdNTEInKSwgLy8gVXNlIHBhc3NlZCBzcG9ydCBwYXJhbWV0ZXIgZmlyc3RcclxuICAgICAgZ2FtZVRpbWU6IFN0cmluZyhpdC5nYW1lVGltZSA/PyBpdC5zdGFydF90aW1lID8/IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSksXHJcbiAgICAgIHBpY2tUeXBlOiBTdHJpbmcoaXQucGlja1R5cGUgPz8gc3RhdCA/PyAncHJvcCcpLFxyXG4gICAgICAvLyBJbXBvcnRhbnQ6IFRoaXMgaXMgdGhlIHBsYXllcl9pZCBmaWVsZCBmcm9tIHRoZSBNTEIgQVBJIHRoYXQgcG93ZXJzIHRoZSBoZWFkc2hvdCBVUkxzXHJcbiAgICAgIC8vIFRoZSBoZWFkc2hvdHMgYXJlIGxvYWRlZCBmcm9tOiBodHRwczovL21pZGZpZWxkLm1sYnN0YXRpYy5jb20vdjEvcGVvcGxlL3twbGF5ZXJfaWR9L3Nwb3RzLzEyMFxyXG4gICAgICBlc3BuUGxheWVySWQ6XHJcbiAgICAgICAgdHlwZW9mIChpdC5lc3BuUGxheWVySWQgPz8gaXQucGxheWVyX2lkID8/IGl0LnBsYXllcklkKSA9PT0gJ3N0cmluZydcclxuICAgICAgICAgID8gKChpdC5lc3BuUGxheWVySWQgPz8gaXQucGxheWVyX2lkID8/IGl0LnBsYXllcklkKSBhcyBzdHJpbmcpXHJcbiAgICAgICAgICA6IHVuZGVmaW5lZCxcclxuICAgICAgLy8gUHJlc2VydmUgb3JpZ2luYWwgcmF3IGRhdGEgZm9yIGJhY2tlbmQgcHJvY2Vzc2luZ1xyXG4gICAgICBfb3JpZ2luYWxEYXRhOiBpdCBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcclxuICAgIH07XHJcbiAgfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFRQSxJQUFBQSx5QkFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsb0JBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLGVBQUEsR0FBQUYsT0FBQTtBQVZBO0FBQ0E7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