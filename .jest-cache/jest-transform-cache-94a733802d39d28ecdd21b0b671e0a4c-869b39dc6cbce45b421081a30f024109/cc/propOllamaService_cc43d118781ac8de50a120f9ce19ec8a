4850d9a3c80eb58910668dbed2a11448
"use strict";

class MockPropOllamaService {
  getAvailableModels() {
    const models = ['mock-model-1', 'mock-model-2'];
    console.log('[MOCK] getAvailableModels called, returning:', models);
    return Promise.resolve(models);
  }
  getPropOllamaHealth() {
    console.log('[MOCK] getPropOllamaHealth called');
    return Promise.resolve({
      status: 'ready',
      message: 'All systems go!'
    });
  }
  getModelHealth(modelName) {
    console.log('[MOCK] getModelHealth called for', modelName);
    return Promise.resolve({
      status: 'ready',
      last_error: ''
    });
  }
  sendChatMessage(payload) {
    console.log('[MOCK] sendChatMessage called with', payload);
    if (payload.message === 'error') {
      return Promise.reject(new Error('Simulated error from mock service.\nTraceback: ...mocked...'));
    }
    return Promise.resolve({
      content: 'This is a mock AI response.',
      confidence: 0.99,
      suggestions: ['Try another question!'],
      shap_explanation: {
        feature1: 0.5
      }
    });
  }
}
const propOllamaService = new MockPropOllamaService();
module.exports = {
  __esModule: true,
  propOllamaService,
  default: propOllamaService
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2NrUHJvcE9sbGFtYVNlcnZpY2UiLCJnZXRBdmFpbGFibGVNb2RlbHMiLCJtb2RlbHMiLCJjb25zb2xlIiwibG9nIiwiUHJvbWlzZSIsInJlc29sdmUiLCJnZXRQcm9wT2xsYW1hSGVhbHRoIiwic3RhdHVzIiwibWVzc2FnZSIsImdldE1vZGVsSGVhbHRoIiwibW9kZWxOYW1lIiwibGFzdF9lcnJvciIsInNlbmRDaGF0TWVzc2FnZSIsInBheWxvYWQiLCJyZWplY3QiLCJFcnJvciIsImNvbnRlbnQiLCJjb25maWRlbmNlIiwic3VnZ2VzdGlvbnMiLCJzaGFwX2V4cGxhbmF0aW9uIiwiZmVhdHVyZTEiLCJwcm9wT2xsYW1hU2VydmljZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbInByb3BPbGxhbWFTZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE1vY2tQcm9wT2xsYW1hU2VydmljZSB7XHJcbiAgZ2V0QXZhaWxhYmxlTW9kZWxzKCkge1xyXG4gICAgY29uc3QgbW9kZWxzID0gWydtb2NrLW1vZGVsLTEnLCAnbW9jay1tb2RlbC0yJ107XHJcbiAgICBjb25zb2xlLmxvZygnW01PQ0tdIGdldEF2YWlsYWJsZU1vZGVscyBjYWxsZWQsIHJldHVybmluZzonLCBtb2RlbHMpO1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtb2RlbHMpO1xyXG4gIH1cclxuICBnZXRQcm9wT2xsYW1hSGVhbHRoKCkge1xyXG4gICAgY29uc29sZS5sb2coJ1tNT0NLXSBnZXRQcm9wT2xsYW1hSGVhbHRoIGNhbGxlZCcpO1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICAgIHN0YXR1czogJ3JlYWR5JyxcclxuICAgICAgbWVzc2FnZTogJ0FsbCBzeXN0ZW1zIGdvIScsXHJcbiAgICB9KTtcclxuICB9XHJcbiAgZ2V0TW9kZWxIZWFsdGgobW9kZWxOYW1lKSB7XHJcbiAgICBjb25zb2xlLmxvZygnW01PQ0tdIGdldE1vZGVsSGVhbHRoIGNhbGxlZCBmb3InLCBtb2RlbE5hbWUpO1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICAgIHN0YXR1czogJ3JlYWR5JyxcclxuICAgICAgbGFzdF9lcnJvcjogJycsXHJcbiAgICB9KTtcclxuICB9XHJcbiAgc2VuZENoYXRNZXNzYWdlKHBheWxvYWQpIHtcclxuICAgIGNvbnNvbGUubG9nKCdbTU9DS10gc2VuZENoYXRNZXNzYWdlIGNhbGxlZCB3aXRoJywgcGF5bG9hZCk7XHJcbiAgICBpZiAocGF5bG9hZC5tZXNzYWdlID09PSAnZXJyb3InKSB7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcclxuICAgICAgICBuZXcgRXJyb3IoJ1NpbXVsYXRlZCBlcnJvciBmcm9tIG1vY2sgc2VydmljZS5cXG5UcmFjZWJhY2s6IC4uLm1vY2tlZC4uLicpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcclxuICAgICAgY29udGVudDogJ1RoaXMgaXMgYSBtb2NrIEFJIHJlc3BvbnNlLicsXHJcbiAgICAgIGNvbmZpZGVuY2U6IDAuOTksXHJcbiAgICAgIHN1Z2dlc3Rpb25zOiBbJ1RyeSBhbm90aGVyIHF1ZXN0aW9uISddLFxyXG4gICAgICBzaGFwX2V4cGxhbmF0aW9uOiB7IGZlYXR1cmUxOiAwLjUgfSxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgcHJvcE9sbGFtYVNlcnZpY2UgPSBuZXcgTW9ja1Byb3BPbGxhbWFTZXJ2aWNlKCk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBfX2VzTW9kdWxlOiB0cnVlLFxyXG4gIHByb3BPbGxhbWFTZXJ2aWNlLFxyXG4gIGRlZmF1bHQ6IHByb3BPbGxhbWFTZXJ2aWNlLFxyXG59O1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEscUJBQXFCLENBQUM7RUFDMUJDLGtCQUFrQkEsQ0FBQSxFQUFHO0lBQ25CLE1BQU1DLE1BQU0sR0FBRyxDQUFDLGNBQWMsRUFBRSxjQUFjLENBQUM7SUFDL0NDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDhDQUE4QyxFQUFFRixNQUFNLENBQUM7SUFDbkUsT0FBT0csT0FBTyxDQUFDQyxPQUFPLENBQUNKLE1BQU0sQ0FBQztFQUNoQztFQUNBSyxtQkFBbUJBLENBQUEsRUFBRztJQUNwQkosT0FBTyxDQUFDQyxHQUFHLENBQUMsbUNBQW1DLENBQUM7SUFDaEQsT0FBT0MsT0FBTyxDQUFDQyxPQUFPLENBQUM7TUFDckJFLE1BQU0sRUFBRSxPQUFPO01BQ2ZDLE9BQU8sRUFBRTtJQUNYLENBQUMsQ0FBQztFQUNKO0VBQ0FDLGNBQWNBLENBQUNDLFNBQVMsRUFBRTtJQUN4QlIsT0FBTyxDQUFDQyxHQUFHLENBQUMsa0NBQWtDLEVBQUVPLFNBQVMsQ0FBQztJQUMxRCxPQUFPTixPQUFPLENBQUNDLE9BQU8sQ0FBQztNQUNyQkUsTUFBTSxFQUFFLE9BQU87TUFDZkksVUFBVSxFQUFFO0lBQ2QsQ0FBQyxDQUFDO0VBQ0o7RUFDQUMsZUFBZUEsQ0FBQ0MsT0FBTyxFQUFFO0lBQ3ZCWCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxvQ0FBb0MsRUFBRVUsT0FBTyxDQUFDO0lBQzFELElBQUlBLE9BQU8sQ0FBQ0wsT0FBTyxLQUFLLE9BQU8sRUFBRTtNQUMvQixPQUFPSixPQUFPLENBQUNVLE1BQU0sQ0FDbkIsSUFBSUMsS0FBSyxDQUFDLDZEQUE2RCxDQUN6RSxDQUFDO0lBQ0g7SUFDQSxPQUFPWCxPQUFPLENBQUNDLE9BQU8sQ0FBQztNQUNyQlcsT0FBTyxFQUFFLDZCQUE2QjtNQUN0Q0MsVUFBVSxFQUFFLElBQUk7TUFDaEJDLFdBQVcsRUFBRSxDQUFDLHVCQUF1QixDQUFDO01BQ3RDQyxnQkFBZ0IsRUFBRTtRQUFFQyxRQUFRLEVBQUU7TUFBSTtJQUNwQyxDQUFDLENBQUM7RUFDSjtBQUNGO0FBRUEsTUFBTUMsaUJBQWlCLEdBQUcsSUFBSXRCLHFCQUFxQixDQUFDLENBQUM7QUFFckR1QixNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmQyxVQUFVLEVBQUUsSUFBSTtFQUNoQkgsaUJBQWlCO0VBQ2pCSSxPQUFPLEVBQUVKO0FBQ1gsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==