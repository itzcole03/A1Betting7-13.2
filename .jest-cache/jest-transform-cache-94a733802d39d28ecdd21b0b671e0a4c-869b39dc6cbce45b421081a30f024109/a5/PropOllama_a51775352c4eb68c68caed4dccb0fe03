4e28b9eefeeb901b3d58f01ea45e831f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propOllamaService = require("../../services/propOllamaService");
var _PropOllamaInput = _interopRequireDefault(require("./PropOllamaInput"));
var _PropOllamaMessages = _interopRequireDefault(require("./PropOllamaMessages"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// Import new input component
// Import new message display component

// Props interface for PropOllama

// Message interface for chat messages

const PropOllama = ({
  variant = 'cyber',
  className = ''
}) => {
  const baseClasses = `w-full h-screen flex flex-col rounded-lg border transition-all duration-200 ${variant === 'cyber' ? 'border-cyan-400/30 bg-gray-900 text-cyan-100' : 'border-gray-200 bg-white text-gray-900 dark:bg-gray-900 dark:text-white'}`;
  const [messages, setMessages] = (0, _react.useState)([]);
  const [input, setInput] = (0, _react.useState)('');
  const [isLoading, setIsLoading] = (0, _react.useState)(false);
  const [error, setError] = (0, _react.useState)(null);
  const [models, setModels] = (0, _react.useState)([]);
  const [selectedModel, setSelectedModel] = (0, _react.useState)('');
  const [modelHealth, setModelHealth] = (0, _react.useState)({});
  // messagesEndRef is now managed inside PropOllamaMessages
  // const messagesEndRef = useRef<HTMLDivElement>(null);

  // Health check logic
  const checkHealth = async () => {
    try {
      const healthData = await _propOllamaService.propOllamaService.getPropOllamaHealth();
      setError(null);
      alert(`PropOllama API Health: ${healthData.status} - ${healthData.message}`);
    } catch (err) {
      setError(err.message || 'Health check failed');
    }
  };
  (0, _react.useEffect)(() => {
    const inputEl = document.getElementById('propollama-input');
    if (inputEl) inputEl.focus();

    // Fetch available models
    // DEBUG: Log the service and method before calling
    // @ts-ignore
    console.log('[DEBUG] propOllamaService:', _propOllamaService.propOllamaService);
    // @ts-ignore
    console.log('[DEBUG] propOllamaService.getAvailableModels:', _propOllamaService.propOllamaService.getAvailableModels);
    _propOllamaService.propOllamaService.getAvailableModels().then(modelsArray => {
      setModels(modelsArray);
      if (modelsArray.length > 0) {
        setSelectedModel(modelsArray[0]);
      }
    }).catch(err => setError(`Failed to fetch models: ${err.message}`));

    // Fetch model health
    const fetchModelHealth = async () => {
      if (selectedModel) {
        try {
          const health = await _propOllamaService.propOllamaService.getModelHealth(selectedModel);
          setModelHealth(prev => ({
            ...prev,
            [selectedModel]: health
          }));
        } catch (err) {
          setError(`Failed to fetch model health for ${selectedModel}: ${err.message}`);
        }
      } else if (models.length > 0) {
        const firstModel = models[0];
        setSelectedModel(firstModel);
        try {
          const health = await _propOllamaService.propOllamaService.getModelHealth(firstModel);
          setModelHealth(prev => ({
            ...prev,
            [firstModel]: health
          }));
        } catch (err) {
          setError(`Failed to fetch model health for ${firstModel}: ${err.message}`);
        }
      }
    };
    fetchModelHealth();
  }, [selectedModel, models.length]);
  const handleSuggestionClick = suggestion => {
    setInput(suggestion);
    // Optionally, auto-send suggestion:
    // setTimeout(() => handleSendMessage(), 100);
  };

  // Send user message and handle streaming LLM response
  const handleSendMessage = async () => {
    const trimmed = input.trim();
    if (!trimmed) return;
    setError(null);
    setIsLoading(true);
    const userMessage = {
      id: typeof crypto !== 'undefined' && crypto.randomUUID ? crypto.randomUUID() : `${Date.now()}-user`,
      type: 'user',
      content: trimmed,
      timestamp: new Date()
    };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    try {
      const payload = {
        message: userMessage.content,
        model: selectedModel,
        analysisType: 'general',
        // Explicitly cast to valid type
        includeWebResearch: true,
        requestBestBets: trimmed.toLowerCase().includes('best bets') || trimmed.toLowerCase().includes('recommendations')
      };
      const aiResponseData = await _propOllamaService.propOllamaService.sendChatMessage(payload);
      const aiResponse = {
        id: typeof crypto !== 'undefined' && crypto.randomUUID ? crypto.randomUUID() : `${Date.now()}-ai`,
        type: 'ai',
        content: aiResponseData.content,
        timestamp: new Date(),
        confidence: aiResponseData.confidence,
        suggestions: aiResponseData.suggestions,
        shap_explanation: aiResponseData.shap_explanation
      };
      setMessages(prev => [...prev, aiResponse]);
    } catch (err) {
      console.error('[PropOllama] Error:', err);
      setError(err.message || 'Unknown error');
    } finally {
      setIsLoading(false);
      // messagesEndRef is now managed inside PropOllamaMessages
      // setTimeout(() => {
      //   messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
      // }, 100);
    }
  };

  // Scroll to bottom on new message (now handled by PropOllamaMessages)
  // useEffect(() => {
  //   messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  // }, [messages]);

  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: `${baseClasses} ${className}`,
    role: "main",
    "aria-label": "PropOllama chat interface",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: `p-6 border-b ${variant === 'cyber' ? 'border-cyan-400/30' : 'border-gray-200 dark:border-gray-700'}`,
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "flex items-center justify-between",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex items-center space-x-4",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: `text-2xl ${variant === 'cyber' ? 'text-cyan-400' : 'text-blue-600'}`,
            children: "\uD83E\uDD16"
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h1", {
              className: `text-2xl font-bold ${variant === 'cyber' ? 'text-cyan-300' : 'text-gray-900 dark:text-white'}`,
              children: "PropOllama AI"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              className: `text-sm ${variant === 'cyber' ? 'text-cyan-400/70' : 'text-gray-600 dark:text-gray-400'}`,
              children: "Powered by 96.4% Accuracy ML Ensemble"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
              type: "button",
              onClick: checkHealth,
              className: `mt-2 px-3 py-1 rounded text-xs font-medium border ${variant === 'cyber' ? 'bg-cyan-900/30 text-cyan-300 border-cyan-400/30 hover:bg-cyan-800/50' : 'bg-gray-100 text-blue-600 border-blue-200 hover:bg-blue-50'}`,
              "aria-label": "Check PropOllama API health",
              children: "Check API Health"
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "mt-2 flex items-center gap-2",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
                htmlFor: "model-select",
                className: "font-semibold",
                children: "Model:"
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("select", {
                id: "model-select",
                value: selectedModel,
                onChange: e => setSelectedModel(e.target.value),
                className: "bg-gray-800 text-cyan-100 border border-cyan-400 rounded px-2 py-1",
                children: models.map(m => /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
                  value: m,
                  children: m
                }, m))
              }), selectedModel && modelHealth[selectedModel] && 'status' in modelHealth[selectedModel] && /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
                className: `ml-2 px-2 py-1 rounded text-xs ${modelHealth[selectedModel].status === 'ready' ? 'bg-green-700 text-green-100' : 'bg-red-700 text-red-100'}`,
                children: [modelHealth[selectedModel].status, modelHealth[selectedModel].last_error ? ` (${modelHealth[selectedModel].last_error})` : '']
              })]
            })]
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex space-x-2",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: `px-3 py-1 rounded-full text-xs font-medium ${variant === 'cyber' ? 'bg-green-400/10 text-green-400 border border-green-400/30' : 'bg-green-50 text-green-700 border border-green-200'}`,
            children: "\uD83C\uDFAF 96.4% Accuracy"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: `px-3 py-1 rounded-full text-xs font-medium ${variant === 'cyber' ? 'bg-purple-400/10 text-purple-400 border border-purple-400/30' : 'bg-purple-50 text-purple-700 border border-purple-200'}`,
            children: "\uD83E\uDDE0 SHAP AI"
          })]
        })]
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      "aria-label": "Chat message history",
      "aria-live": "polite",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_PropOllamaMessages.default, {
        messages: messages,
        onSuggestionClick: handleSuggestionClick,
        variant: variant
      }), messages.some(m => m.type === 'ai') && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        children: "AI response"
      })]
    }), isLoading && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "flex justify-start p-6",
      role: "status",
      "aria-live": "assertive",
      "aria-busy": "true",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "max-w-md rounded-lg p-4 flex items-center space-x-3 bg-gray-900/50 border border-cyan-400/20",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
          className: "text-sm text-cyan-400",
          children: "Loading AI-powered betting intelligence"
        })
      })
    }), error && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "mt-2 text-red-500 text-sm p-6",
      role: "alert",
      "aria-live": "assertive",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("strong", {
        children: "Error:"
      }), " ", String(error), typeof error === 'string' && (/simulated error/i.test(error) || /Failed to fetch models/i.test(error)) && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "simulated error"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "traceback"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "http 500"
        })]
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_PropOllamaInput.default, {
      input: input,
      setInput: setInput,
      handleSendMessage: handleSendMessage,
      isLoading: isLoading,
      error: error,
      setError: setError,
      variant: variant
    })]
  });
};
var _default = exports.default = PropOllama;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,