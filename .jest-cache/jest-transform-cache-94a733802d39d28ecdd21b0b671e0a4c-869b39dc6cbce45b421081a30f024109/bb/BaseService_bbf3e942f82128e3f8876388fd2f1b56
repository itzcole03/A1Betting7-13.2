3a2ae27528b79bf7c4cf451cf5d00c3f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseService = void 0;
var _axios = _interopRequireDefault(require("axios"));
var _UnifiedCache = require("./UnifiedCache");
var _UnifiedConfig = require("./UnifiedConfig");
var _UnifiedLogger = require("./UnifiedLogger");
// Browser-compatible EventEmitter;
class EventEmitter {
  constructor() {
    this.events = {};
  }
  on(event, listener) {
    if (!this.events[event]) {
      this.events[event] = [];
    }
    this.events[event].push(listener);
  }
  off(event, listener) {
    if (!this.events[event]) return;
    this.events[event] = this.events[event].filter(l => l !== listener);
  }
  emit(event, ...args) {
    if (!this.events[event]) return;
    this.events[event].forEach(listener => listener(...args));
  }
}
class BaseService extends EventEmitter {
  constructor(name,
  // Keep the registry loosely typed to avoid tight coupling during incremental fixes
  serviceRegistry) {
    super();
    this.name = name;
    this.serviceRegistry = serviceRegistry;
    this.config = void 0;
    this.logger = void 0;
    this.api = void 0;
    this.cache = void 0;
    this.config = _UnifiedConfig.UnifiedConfig.getInstance();
    this.logger = new _UnifiedLogger.UnifiedLogger(this.name);
    this.cache = _UnifiedCache.UnifiedCache.getInstance();

    // Initialize API client;
    this.api = _axios.default.create({
      baseURL: this.config.getApiUrl(),
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json'
      }
    });
    this.setupInterceptors();
  }
  setupInterceptors() {
    this.api.interceptors.request.use(config => {
      // If you want to add an Authorization header, pass the token as a parameter or get it from config
      // Example: if (config.headers && config.headers.AuthorizationToken)
      return config;
    }, error => {
      this.logger.error('Request error:', error);
      return Promise.reject(error);
    });
    this.api.interceptors.response.use(response => {
      return response;
    }, error => {
      this.logger.error('Response error:', error);
      return Promise.reject(error);
    });
  }
  handleError(error, serviceError) {
    let errorMsg = '';
    if (typeof error === 'object' && error !== null && 'message' in error) {
      errorMsg = error.message;
    } else {
      errorMsg = String(error);
    }
    this.logger.error(`Error in ${serviceError.source}: ${errorMsg}`);

    // Emit error event;
    this.serviceRegistry.emit('error', {
      ...serviceError,
      error: errorMsg,
      timestamp: Date.now()
    });
  }
  async retry(operation, maxRetries = 3, delay = 1000) {
    let _lastError;
    let lastError;
    for (let i = 0; i < maxRetries; i++) {
      try {
        return await operation();
      } catch (error) {
        lastError = error;
        if (i < maxRetries - 1) {
          await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));
        }
      }
    }
    throw lastError;
  }
  getCacheKey(...parts) {
    return `${this.name}:${parts.join(':')}`;
  }
  async withCache(key, operation, ttl) {
    const cached = this.cache.get(key);
    if (typeof cached !== 'undefined' && cached !== null) return cached;
    const result = await operation();
    this.cache.set(key, result, ttl);
    return result;
  }

  // Lifecycle methods;
  async initialize() {
    this.logger.info(`Initializing ${this.name} service`, this.name);
    // Override in derived classes if needed;
  }
  async cleanup() {
    this.logger.info(`Cleaning up ${this.name} service`, this.name);
    // Override in derived classes if needed;
  }
  async handleRequest(request) {
    try {
      return await request();
    } catch (error) {
      this.logger.error('Request failed:', error);
      throw error;
    }
  }
}
exports.BaseService = BaseService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,