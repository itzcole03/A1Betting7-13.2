{"version":3,"names":["state","isReady","readyTimestamp","listeners","Set","signalNavReady","Date","now","Array","from","forEach","listener","error","process","env","NODE_ENV","console","warn","clear","log","toISOString","onNavReady","callback","add","delete","isNavReady","getNavReadyTimestamp","resetNavReadyState"],"sources":["navReadySignal.ts"],"sourcesContent":["/**\r\n * Navigation Ready Signal System\r\n * \r\n * Lightweight event system for navigation readiness coordination\r\n * between components and validators.\r\n */\r\n\r\ntype NavReadyListener = () => void;\r\ntype UnsubscribeFn = () => void;\r\n\r\ninterface NavReadyState {\r\n  isReady: boolean;\r\n  readyTimestamp: number | null;\r\n  listeners: Set<NavReadyListener>;\r\n}\r\n\r\nconst state: NavReadyState = {\r\n  isReady: false,\r\n  readyTimestamp: null,\r\n  listeners: new Set()\r\n};\r\n\r\n/**\r\n * Signal that navigation is ready and available\r\n * Ignores duplicate calls after first signal\r\n */\r\nexport function signalNavReady(): void {\r\n  if (state.isReady) {\r\n    return; // Ignore duplicate signals\r\n  }\r\n\r\n  state.isReady = true;\r\n  state.readyTimestamp = Date.now();\r\n\r\n  // Notify all listeners\r\n  const listeners = Array.from(state.listeners); // Copy to avoid modification during iteration\r\n  listeners.forEach(listener => {\r\n    try {\r\n      listener();\r\n    } catch (error) {\r\n      // Log but don't throw to prevent cascading failures\r\n      if (process.env.NODE_ENV === 'development') {\r\n        // eslint-disable-next-line no-console\r\n        console.warn('[NavReady] Listener error:', error);\r\n      }\r\n    }\r\n  });\r\n\r\n  // Clear listeners after notification to prevent memory leaks\r\n  state.listeners.clear();\r\n\r\n  if (process.env.NODE_ENV === 'development') {\r\n    // eslint-disable-next-line no-console\r\n    console.log('[NavReady] Navigation ready signal fired at', new Date(state.readyTimestamp).toISOString());\r\n  }\r\n}\r\n\r\n/**\r\n * Subscribe to navigation ready event\r\n * If already ready, calls callback immediately\r\n */\r\nexport function onNavReady(callback: NavReadyListener): UnsubscribeFn {\r\n  if (state.isReady) {\r\n    // Already ready - call immediately\r\n    try {\r\n      callback();\r\n    } catch (error) {\r\n      if (process.env.NODE_ENV === 'development') {\r\n        // eslint-disable-next-line no-console\r\n        console.warn('[NavReady] Immediate callback error:', error);\r\n      }\r\n    }\r\n    return () => {}; // No-op unsubscribe since callback already fired\r\n  }\r\n\r\n  // Add to listeners\r\n  state.listeners.add(callback);\r\n\r\n  // Return unsubscribe function\r\n  return () => {\r\n    state.listeners.delete(callback);\r\n  };\r\n}\r\n\r\n/**\r\n * Check if navigation is ready (synchronous)\r\n */\r\nexport function isNavReady(): boolean {\r\n  return state.isReady;\r\n}\r\n\r\n/**\r\n * Get ready timestamp (for diagnostics)\r\n */\r\nexport function getNavReadyTimestamp(): number | null {\r\n  return state.readyTimestamp;\r\n}\r\n\r\n/**\r\n * Reset state (for testing only)\r\n */\r\nexport function resetNavReadyState(): void {\r\n  if (process.env.NODE_ENV !== 'test') {\r\n    // eslint-disable-next-line no-console\r\n    console.warn('[NavReady] resetNavReadyState should only be used in tests');\r\n    return;\r\n  }\r\n  \r\n  state.isReady = false;\r\n  state.readyTimestamp = null;\r\n  state.listeners.clear();\r\n}"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAWA,MAAMA,KAAoB,GAAG;EAC3BC,OAAO,EAAE,KAAK;EACdC,cAAc,EAAE,IAAI;EACpBC,SAAS,EAAE,IAAIC,GAAG,CAAC;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACO,SAASC,cAAcA,CAAA,EAAS;EACrC,IAAIL,KAAK,CAACC,OAAO,EAAE;IACjB,OAAO,CAAC;EACV;EAEAD,KAAK,CAACC,OAAO,GAAG,IAAI;EACpBD,KAAK,CAACE,cAAc,GAAGI,IAAI,CAACC,GAAG,CAAC,CAAC;;EAEjC;EACA,MAAMJ,SAAS,GAAGK,KAAK,CAACC,IAAI,CAACT,KAAK,CAACG,SAAS,CAAC,CAAC,CAAC;EAC/CA,SAAS,CAACO,OAAO,CAACC,QAAQ,IAAI;IAC5B,IAAI;MACFA,QAAQ,CAAC,CAAC;IACZ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;MACA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;QAC1C;QACAC,OAAO,CAACC,IAAI,CAAC,4BAA4B,EAAEL,KAAK,CAAC;MACnD;IACF;EACF,CAAC,CAAC;;EAEF;EACAZ,KAAK,CAACG,SAAS,CAACe,KAAK,CAAC,CAAC;EAEvB,IAAIL,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAC1C;IACAC,OAAO,CAACG,GAAG,CAAC,6CAA6C,EAAE,IAAIb,IAAI,CAACN,KAAK,CAACE,cAAc,CAAC,CAACkB,WAAW,CAAC,CAAC,CAAC;EAC1G;AACF;;AAEA;AACA;AACA;AACA;AACO,SAASC,UAAUA,CAACC,QAA0B,EAAiB;EACpE,IAAItB,KAAK,CAACC,OAAO,EAAE;IACjB;IACA,IAAI;MACFqB,QAAQ,CAAC,CAAC;IACZ,CAAC,CAAC,OAAOV,KAAK,EAAE;MACd,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;QAC1C;QACAC,OAAO,CAACC,IAAI,CAAC,sCAAsC,EAAEL,KAAK,CAAC;MAC7D;IACF;IACA,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;EACnB;;EAEA;EACAZ,KAAK,CAACG,SAAS,CAACoB,GAAG,CAACD,QAAQ,CAAC;;EAE7B;EACA,OAAO,MAAM;IACXtB,KAAK,CAACG,SAAS,CAACqB,MAAM,CAACF,QAAQ,CAAC;EAClC,CAAC;AACH;;AAEA;AACA;AACA;AACO,SAASG,UAAUA,CAAA,EAAY;EACpC,OAAOzB,KAAK,CAACC,OAAO;AACtB;;AAEA;AACA;AACA;AACO,SAASyB,oBAAoBA,CAAA,EAAkB;EACpD,OAAO1B,KAAK,CAACE,cAAc;AAC7B;;AAEA;AACA;AACA;AACO,SAASyB,kBAAkBA,CAAA,EAAS;EACzC,IAAId,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;IACnC;IACAC,OAAO,CAACC,IAAI,CAAC,4DAA4D,CAAC;IAC1E;EACF;EAEAjB,KAAK,CAACC,OAAO,GAAG,KAAK;EACrBD,KAAK,CAACE,cAAc,GAAG,IAAI;EAC3BF,KAAK,CAACG,SAAS,CAACe,KAAK,CAAC,CAAC;AACzB","ignoreList":[]}