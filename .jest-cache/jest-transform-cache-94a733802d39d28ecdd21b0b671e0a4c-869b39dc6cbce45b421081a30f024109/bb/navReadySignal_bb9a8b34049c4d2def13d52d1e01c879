8fbcd1582db372361a7da47ce6174c1e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNavReadyTimestamp = getNavReadyTimestamp;
exports.isNavReady = isNavReady;
exports.onNavReady = onNavReady;
exports.resetNavReadyState = resetNavReadyState;
exports.signalNavReady = signalNavReady;
/**
 * Navigation Ready Signal System
 * 
 * Lightweight event system for navigation readiness coordination
 * between components and validators.
 */

const state = {
  isReady: false,
  readyTimestamp: null,
  listeners: new Set()
};

/**
 * Signal that navigation is ready and available
 * Ignores duplicate calls after first signal
 */
function signalNavReady() {
  if (state.isReady) {
    return; // Ignore duplicate signals
  }
  state.isReady = true;
  state.readyTimestamp = Date.now();

  // Notify all listeners
  const listeners = Array.from(state.listeners); // Copy to avoid modification during iteration
  listeners.forEach(listener => {
    try {
      listener();
    } catch (error) {
      // Log but don't throw to prevent cascading failures
      if (process.env.NODE_ENV === 'development') {
        // eslint-disable-next-line no-console
        console.warn('[NavReady] Listener error:', error);
      }
    }
  });

  // Clear listeners after notification to prevent memory leaks
  state.listeners.clear();
  if (process.env.NODE_ENV === 'development') {
    // eslint-disable-next-line no-console
    console.log('[NavReady] Navigation ready signal fired at', new Date(state.readyTimestamp).toISOString());
  }
}

/**
 * Subscribe to navigation ready event
 * If already ready, calls callback immediately
 */
function onNavReady(callback) {
  if (state.isReady) {
    // Already ready - call immediately
    try {
      callback();
    } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        // eslint-disable-next-line no-console
        console.warn('[NavReady] Immediate callback error:', error);
      }
    }
    return () => {}; // No-op unsubscribe since callback already fired
  }

  // Add to listeners
  state.listeners.add(callback);

  // Return unsubscribe function
  return () => {
    state.listeners.delete(callback);
  };
}

/**
 * Check if navigation is ready (synchronous)
 */
function isNavReady() {
  return state.isReady;
}

/**
 * Get ready timestamp (for diagnostics)
 */
function getNavReadyTimestamp() {
  return state.readyTimestamp;
}

/**
 * Reset state (for testing only)
 */
function resetNavReadyState() {
  if (process.env.NODE_ENV !== 'test') {
    // eslint-disable-next-line no-console
    console.warn('[NavReady] resetNavReadyState should only be used in tests');
    return;
  }
  state.isReady = false;
  state.readyTimestamp = null;
  state.listeners.clear();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdGF0ZSIsImlzUmVhZHkiLCJyZWFkeVRpbWVzdGFtcCIsImxpc3RlbmVycyIsIlNldCIsInNpZ25hbE5hdlJlYWR5IiwiRGF0ZSIsIm5vdyIsIkFycmF5IiwiZnJvbSIsImZvckVhY2giLCJsaXN0ZW5lciIsImVycm9yIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiY29uc29sZSIsIndhcm4iLCJjbGVhciIsImxvZyIsInRvSVNPU3RyaW5nIiwib25OYXZSZWFkeSIsImNhbGxiYWNrIiwiYWRkIiwiZGVsZXRlIiwiaXNOYXZSZWFkeSIsImdldE5hdlJlYWR5VGltZXN0YW1wIiwicmVzZXROYXZSZWFkeVN0YXRlIl0sInNvdXJjZXMiOlsibmF2UmVhZHlTaWduYWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIE5hdmlnYXRpb24gUmVhZHkgU2lnbmFsIFN5c3RlbVxyXG4gKiBcclxuICogTGlnaHR3ZWlnaHQgZXZlbnQgc3lzdGVtIGZvciBuYXZpZ2F0aW9uIHJlYWRpbmVzcyBjb29yZGluYXRpb25cclxuICogYmV0d2VlbiBjb21wb25lbnRzIGFuZCB2YWxpZGF0b3JzLlxyXG4gKi9cclxuXHJcbnR5cGUgTmF2UmVhZHlMaXN0ZW5lciA9ICgpID0+IHZvaWQ7XHJcbnR5cGUgVW5zdWJzY3JpYmVGbiA9ICgpID0+IHZvaWQ7XHJcblxyXG5pbnRlcmZhY2UgTmF2UmVhZHlTdGF0ZSB7XHJcbiAgaXNSZWFkeTogYm9vbGVhbjtcclxuICByZWFkeVRpbWVzdGFtcDogbnVtYmVyIHwgbnVsbDtcclxuICBsaXN0ZW5lcnM6IFNldDxOYXZSZWFkeUxpc3RlbmVyPjtcclxufVxyXG5cclxuY29uc3Qgc3RhdGU6IE5hdlJlYWR5U3RhdGUgPSB7XHJcbiAgaXNSZWFkeTogZmFsc2UsXHJcbiAgcmVhZHlUaW1lc3RhbXA6IG51bGwsXHJcbiAgbGlzdGVuZXJzOiBuZXcgU2V0KClcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTaWduYWwgdGhhdCBuYXZpZ2F0aW9uIGlzIHJlYWR5IGFuZCBhdmFpbGFibGVcclxuICogSWdub3JlcyBkdXBsaWNhdGUgY2FsbHMgYWZ0ZXIgZmlyc3Qgc2lnbmFsXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2lnbmFsTmF2UmVhZHkoKTogdm9pZCB7XHJcbiAgaWYgKHN0YXRlLmlzUmVhZHkpIHtcclxuICAgIHJldHVybjsgLy8gSWdub3JlIGR1cGxpY2F0ZSBzaWduYWxzXHJcbiAgfVxyXG5cclxuICBzdGF0ZS5pc1JlYWR5ID0gdHJ1ZTtcclxuICBzdGF0ZS5yZWFkeVRpbWVzdGFtcCA9IERhdGUubm93KCk7XHJcblxyXG4gIC8vIE5vdGlmeSBhbGwgbGlzdGVuZXJzXHJcbiAgY29uc3QgbGlzdGVuZXJzID0gQXJyYXkuZnJvbShzdGF0ZS5saXN0ZW5lcnMpOyAvLyBDb3B5IHRvIGF2b2lkIG1vZGlmaWNhdGlvbiBkdXJpbmcgaXRlcmF0aW9uXHJcbiAgbGlzdGVuZXJzLmZvckVhY2gobGlzdGVuZXIgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgbGlzdGVuZXIoKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIC8vIExvZyBidXQgZG9uJ3QgdGhyb3cgdG8gcHJldmVudCBjYXNjYWRpbmcgZmFpbHVyZXNcclxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcclxuICAgICAgICBjb25zb2xlLndhcm4oJ1tOYXZSZWFkeV0gTGlzdGVuZXIgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIC8vIENsZWFyIGxpc3RlbmVycyBhZnRlciBub3RpZmljYXRpb24gdG8gcHJldmVudCBtZW1vcnkgbGVha3NcclxuICBzdGF0ZS5saXN0ZW5lcnMuY2xlYXIoKTtcclxuXHJcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxyXG4gICAgY29uc29sZS5sb2coJ1tOYXZSZWFkeV0gTmF2aWdhdGlvbiByZWFkeSBzaWduYWwgZmlyZWQgYXQnLCBuZXcgRGF0ZShzdGF0ZS5yZWFkeVRpbWVzdGFtcCkudG9JU09TdHJpbmcoKSk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogU3Vic2NyaWJlIHRvIG5hdmlnYXRpb24gcmVhZHkgZXZlbnRcclxuICogSWYgYWxyZWFkeSByZWFkeSwgY2FsbHMgY2FsbGJhY2sgaW1tZWRpYXRlbHlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBvbk5hdlJlYWR5KGNhbGxiYWNrOiBOYXZSZWFkeUxpc3RlbmVyKTogVW5zdWJzY3JpYmVGbiB7XHJcbiAgaWYgKHN0YXRlLmlzUmVhZHkpIHtcclxuICAgIC8vIEFscmVhZHkgcmVhZHkgLSBjYWxsIGltbWVkaWF0ZWx5XHJcbiAgICB0cnkge1xyXG4gICAgICBjYWxsYmFjaygpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcclxuICAgICAgICBjb25zb2xlLndhcm4oJ1tOYXZSZWFkeV0gSW1tZWRpYXRlIGNhbGxiYWNrIGVycm9yOicsIGVycm9yKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuICgpID0+IHt9OyAvLyBOby1vcCB1bnN1YnNjcmliZSBzaW5jZSBjYWxsYmFjayBhbHJlYWR5IGZpcmVkXHJcbiAgfVxyXG5cclxuICAvLyBBZGQgdG8gbGlzdGVuZXJzXHJcbiAgc3RhdGUubGlzdGVuZXJzLmFkZChjYWxsYmFjayk7XHJcblxyXG4gIC8vIFJldHVybiB1bnN1YnNjcmliZSBmdW5jdGlvblxyXG4gIHJldHVybiAoKSA9PiB7XHJcbiAgICBzdGF0ZS5saXN0ZW5lcnMuZGVsZXRlKGNhbGxiYWNrKTtcclxuICB9O1xyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgbmF2aWdhdGlvbiBpcyByZWFkeSAoc3luY2hyb25vdXMpXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNOYXZSZWFkeSgpOiBib29sZWFuIHtcclxuICByZXR1cm4gc3RhdGUuaXNSZWFkeTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCByZWFkeSB0aW1lc3RhbXAgKGZvciBkaWFnbm9zdGljcylcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXROYXZSZWFkeVRpbWVzdGFtcCgpOiBudW1iZXIgfCBudWxsIHtcclxuICByZXR1cm4gc3RhdGUucmVhZHlUaW1lc3RhbXA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXNldCBzdGF0ZSAoZm9yIHRlc3Rpbmcgb25seSlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByZXNldE5hdlJlYWR5U3RhdGUoKTogdm9pZCB7XHJcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcpIHtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXHJcbiAgICBjb25zb2xlLndhcm4oJ1tOYXZSZWFkeV0gcmVzZXROYXZSZWFkeVN0YXRlIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gdGVzdHMnKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgXHJcbiAgc3RhdGUuaXNSZWFkeSA9IGZhbHNlO1xyXG4gIHN0YXRlLnJlYWR5VGltZXN0YW1wID0gbnVsbDtcclxuICBzdGF0ZS5saXN0ZW5lcnMuY2xlYXIoKTtcclxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFXQSxNQUFNQSxLQUFvQixHQUFHO0VBQzNCQyxPQUFPLEVBQUUsS0FBSztFQUNkQyxjQUFjLEVBQUUsSUFBSTtFQUNwQkMsU0FBUyxFQUFF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