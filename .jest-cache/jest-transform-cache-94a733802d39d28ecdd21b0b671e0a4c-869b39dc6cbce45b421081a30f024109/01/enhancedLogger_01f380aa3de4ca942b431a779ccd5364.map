{"file":"C:\\Users\\bcmad\\Downloads\\A1Betting7-13.2\\frontend\\src\\utils\\enhancedLogger.ts","mappings":"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","names":[],"sources":["C:\\Users\\bcmad\\Downloads\\A1Betting7-13.2\\frontend\\src\\utils\\enhancedLogger.ts"],"sourcesContent":["/**\r\n * Enhanced logger with specific methods for cache operations, API requests, and metrics\r\n * Used by EnhancedDataManager and other services\r\n */\r\n\r\nimport { logger } from './logger';\r\n\r\nexport interface CacheMetrics {\r\n  hits: number;\r\n  misses: number;\r\n  sets: number;\r\n  invalidations: number;\r\n  hitRate: number;\r\n}\r\n\r\nexport interface ApiMetrics {\r\n  totalRequests: number;\r\n  successfulRequests: number;\r\n  errorRequests: number;\r\n  averageResponseTime: number;\r\n}\r\n\r\nexport interface EnhancedMetrics {\r\n  cache: CacheMetrics;\r\n  api: ApiMetrics;\r\n  uptime: number;\r\n  memoryUsage?: number;\r\n}\r\n\r\nexport interface EnhancedRequestMetrics {\r\n  totalRequests: number;\r\n  cacheHits: number;\r\n  cacheMisses: number;\r\n  errors: number;\r\n  avgResponseTime: number;\r\n  dataQualityScore: number;\r\n  validationErrors: number;\r\n  fallbacksUsed: number;\r\n  transformationErrors: number;\r\n  slowQueries: any[];\r\n  errorsByType: Record<string, number>;\r\n  errorsByEndpoint: Record<string, number>;\r\n  lastUpdate: number;\r\n}\r\n\r\nclass EnhancedLogger {\r\n  private cacheMetrics: CacheMetrics = {\r\n    hits: 0,\r\n    misses: 0,\r\n    sets: 0,\r\n    invalidations: 0,\r\n    hitRate: 0\r\n  };\r\n\r\n  private apiMetrics: ApiMetrics = {\r\n    totalRequests: 0,\r\n    successfulRequests: 0,\r\n    errorRequests: 0,\r\n    averageResponseTime: 0\r\n  };\r\n\r\n  private responseTimes: number[] = [];\r\n  private startTime = Date.now();\r\n\r\n  /**\r\n   * Standard logging methods with enhanced context\r\n   */\r\n  debug(component: string, operation: string, message: string, data?: Record<string, unknown>, err?: Error) {\r\n    const meta = { ...(data || {}), ...(err ? { error: { name: err.name, message: err.message, stack: err.stack } } : {}) } as Record<string, unknown>;\r\n    logger.debug(`[${component}:${operation}] ${message}`, meta);\r\n  }\r\n\r\n  info(component: string, operation: string, message: string, data?: Record<string, unknown>, err?: Error) {\r\n    const meta = { ...(data || {}), ...(err ? { error: { name: err.name, message: err.message } } : {}) } as Record<string, unknown>;\r\n    logger.info(`[${component}:${operation}] ${message}`, meta);\r\n  }\r\n\r\n  warn(component: string, operation: string, message: string, data?: Record<string, unknown>, err?: Error) {\r\n    const meta = { ...(data || {}), ...(err ? { error: { name: err.name, message: err.message } } : {}) } as Record<string, unknown>;\r\n    logger.warn(`[${component}:${operation}] ${message}`, meta);\r\n  }\r\n\r\n  error(component: string, operation: string, message: string, data?: Record<string, unknown>, err?: Error) {\r\n    const meta = { ...(data || {}), ...(err ? { error: { name: err.name, message: err.message, stack: err.stack } } : {}) } as Record<string, unknown>;\r\n    logger.error(`[${component}:${operation}] ${message}`, meta);\r\n  }\r\n\r\n  /**\r\n   * Cache operation logging\r\n   */\r\n  logCacheOperation(operation: 'hit' | 'miss' | 'set' | 'invalidate', key: string, metadata?: Record<string, unknown>) {\r\n    switch (operation) {\r\n      case 'hit':\r\n        this.cacheMetrics.hits++;\r\n        break;\r\n      case 'miss':\r\n        this.cacheMetrics.misses++;\r\n        break;\r\n      case 'set':\r\n        this.cacheMetrics.sets++;\r\n        break;\r\n      case 'invalidate':\r\n        this.cacheMetrics.invalidations++;\r\n        break;\r\n    }\r\n\r\n    // Update hit rate\r\n    const total = this.cacheMetrics.hits + this.cacheMetrics.misses;\r\n    this.cacheMetrics.hitRate = total > 0 ? this.cacheMetrics.hits / total : 0;\r\n\r\n    this.debug('Cache', operation, `Cache ${operation} for key: ${key}`, {\r\n      key,\r\n      operation,\r\n      ...metadata,\r\n      currentHitRate: this.cacheMetrics.hitRate.toFixed(2)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * API request logging with metrics tracking\r\n   */\r\n  logApiRequest(\r\n    endpoint: string, \r\n    method: string, \r\n    params: Record<string, unknown>, \r\n    duration: number, \r\n    status: 'success' | 'error' | 'cached', \r\n    metadata?: Record<string, unknown>\r\n  ) {\r\n    if (status !== 'cached') {\r\n      this.apiMetrics.totalRequests++;\r\n      \r\n      if (status === 'success') {\r\n        this.apiMetrics.successfulRequests++;\r\n        this.responseTimes.push(duration);\r\n        \r\n        // Keep only last 100 response times for average calculation\r\n        if (this.responseTimes.length > 100) {\r\n          this.responseTimes = this.responseTimes.slice(-100);\r\n        }\r\n        \r\n        // Update average response time\r\n        this.apiMetrics.averageResponseTime = \r\n          this.responseTimes.reduce((sum, time) => sum + time, 0) / this.responseTimes.length;\r\n      } else if (status === 'error') {\r\n        this.apiMetrics.errorRequests++;\r\n      }\r\n    }\r\n\r\n    const logLevel = status === 'error' ? 'warn' : 'debug';\r\n    this[logLevel]('API', 'request', `${method} ${endpoint} - ${status}`, {\r\n      endpoint,\r\n      method,\r\n      params,\r\n      duration: `${duration}ms`,\r\n      status,\r\n      ...metadata\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get comprehensive metrics\r\n   */\r\n  getMetrics(): EnhancedMetrics {\r\n    // Build EnhancedMetrics\r\n    const memoryUsage = (() => {\r\n      try {\r\n        const perf = typeof performance !== 'undefined' ? (performance as unknown as { memory?: { usedJSHeapSize?: number }}) : undefined;\r\n        return perf?.memory?.usedJSHeapSize;\r\n      } catch {\r\n        return undefined;\r\n      }\r\n    })();\r\n\r\n    const enhanced: EnhancedMetrics = {\r\n      cache: { ...this.cacheMetrics },\r\n      api: { ...this.apiMetrics },\r\n      uptime: Date.now() - this.startTime,\r\n      memoryUsage: memoryUsage,\r\n    };\r\n\r\n    return enhanced;\r\n  }\r\n\r\n  /**\r\n   * Compatibility: return metrics shaped like EnhancedRequestMetrics for services expecting that shape\r\n   */\r\n  getRequestMetrics(): EnhancedRequestMetrics {\r\n  const now = Date.now();\r\n  const requestMetrics: EnhancedRequestMetrics = {\r\n      totalRequests: this.apiMetrics.totalRequests,\r\n      cacheHits: this.cacheMetrics.hits,\r\n      cacheMisses: this.cacheMetrics.misses,\r\n      errors: this.apiMetrics.errorRequests || 0,\r\n      avgResponseTime: this.apiMetrics.averageResponseTime,\r\n      dataQualityScore: 0,\r\n      validationErrors: 0,\r\n      fallbacksUsed: 0,\r\n      transformationErrors: 0,\r\n      slowQueries: [],\r\n      errorsByType: {},\r\n      errorsByEndpoint: {},\r\n      lastUpdate: now,\r\n    };\r\n\r\n    return requestMetrics;\r\n  }\r\n\r\n  /**\r\n   * Log data validation metrics and context\r\n   */\r\n  logDataValidation(\r\n    operation: string,\r\n    sport: string,\r\n    total: number,\r\n    validated: number,\r\n    errorsCount: number,\r\n    averageQuality: number,\r\n    duration: number,\r\n    metadata?: Record<string, unknown>,\r\n    err?: Error\r\n  ) {\r\n    this.info('DataValidator', operation, `Validation summary for ${sport}: ${validated}/${total} valid`, {\r\n      sport,\r\n      total,\r\n      validated,\r\n      errorsCount,\r\n      averageQuality,\r\n      duration,\r\n      ...metadata,\r\n    }, err);\r\n  }\r\n\r\n  /**\r\n   * Reset metrics (useful for testing)\r\n   */\r\n  resetMetrics() {\r\n    this.cacheMetrics = {\r\n      hits: 0,\r\n      misses: 0,\r\n      sets: 0,\r\n      invalidations: 0,\r\n      hitRate: 0\r\n    };\r\n\r\n    this.apiMetrics = {\r\n      totalRequests: 0,\r\n      successfulRequests: 0,\r\n      errorRequests: 0,\r\n      averageResponseTime: 0\r\n    };\r\n\r\n    this.responseTimes = [];\r\n    this.startTime = Date.now();\r\n  }\r\n}\r\n\r\nexport const enhancedLogger = new EnhancedLogger();"],"version":3}