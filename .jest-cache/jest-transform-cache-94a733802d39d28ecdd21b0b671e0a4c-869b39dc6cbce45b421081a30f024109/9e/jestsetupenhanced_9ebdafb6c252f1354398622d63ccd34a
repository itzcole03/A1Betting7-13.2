d2ecbca4dc4905ff0875f627dc039f40
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
require("@testing-library/jest-dom");
require("jest-localstorage-mock");
// Enhanced Jest Setup for Phase 4 Testing Automation

// Enhanced DOM Testing Setup
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    // deprecated
    removeListener: jest.fn(),
    // deprecated
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn()
  }))
});

// WebSocket Mock
global.WebSocket = jest.fn().mockImplementation(() => ({
  close: jest.fn(),
  send: jest.fn(),
  readyState: 1,
  // OPEN
  CONNECTING: 0,
  OPEN: 1,
  CLOSING: 2,
  CLOSED: 3,
  addEventListener: jest.fn(),
  removeEventListener: jest.fn(),
  dispatchEvent: jest.fn()
}));

// ResizeObserver Mock
global.ResizeObserver = jest.fn().mockImplementation(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn()
}));

// IntersectionObserver Mock
global.IntersectionObserver = jest.fn().mockImplementation(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn(),
  root: null,
  rootMargin: '',
  thresholds: []
}));

// Fetch Mock Enhancement
global.fetch = jest.fn();

// Console Mock for Testing
const originalError = console.error;
const originalWarn = console.warn;
beforeAll(() => {
  console.error = (...args) => {
    if (typeof args[0] === 'string' && (args[0].includes('Warning:') || args[0].includes('React does not recognize') || args[0].includes('validateDOMNesting'))) {
      return;
    }
    originalError.call(console, ...args);
  };
  console.warn = (...args) => {
    if (typeof args[0] === 'string' && args[0].includes('componentWillReceiveProps')) {
      return;
    }
    originalWarn.call(console, ...args);
  };
});
afterAll(() => {
  console.error = originalError;
  console.warn = originalWarn;
});

// Performance Mock
Object.defineProperty(window, 'performance', {
  writable: true,
  value: {
    mark: jest.fn(),
    measure: jest.fn(),
    getEntriesByName: jest.fn(() => []),
    getEntriesByType: jest.fn(() => []),
    clearMarks: jest.fn(),
    clearMeasures: jest.fn(),
    now: jest.fn(() => Date.now())
  }
});

// URL Mock
Object.defineProperty(window, 'URL', {
  writable: true,
  value: {
    createObjectURL: jest.fn(() => 'mocked-url'),
    revokeObjectURL: jest.fn()
  }
});

// File and FileReader Mocks
global.File = jest.fn().mockImplementation((fileBits, filename, options) => ({
  name: filename,
  size: fileBits.length,
  type: options?.type || '',
  lastModified: Date.now(),
  arrayBuffer: jest.fn(() => Promise.resolve(new ArrayBuffer(0))),
  text: jest.fn(() => Promise.resolve('')),
  stream: jest.fn(),
  slice: jest.fn()
}));
global.FileReader = jest.fn().mockImplementation(() => ({
  readAsText: jest.fn(),
  readAsDataURL: jest.fn(),
  readAsArrayBuffer: jest.fn(),
  abort: jest.fn(),
  result: null,
  error: null,
  onload: null,
  onerror: null,
  onabort: null,
  readyState: 0,
  EMPTY: 0,
  LOADING: 1,
  DONE: 2
}));

// Enhanced Local Storage Mock
const localStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn(),
  key: jest.fn(),
  length: 0
};
Object.defineProperty(window, 'localStorage', {
  value: localStorageMock
});
Object.defineProperty(window, 'sessionStorage', {
  value: localStorageMock
});

// Crypto Mock
Object.defineProperty(window, 'crypto', {
  value: {
    getRandomValues: jest.fn(() => new Uint32Array(1)),
    randomUUID: jest.fn(() => '123e4567-e89b-12d3-a456-426614174000'),
    subtle: {
      digest: jest.fn(() => Promise.resolve(new ArrayBuffer(0))),
      encrypt: jest.fn(() => Promise.resolve(new ArrayBuffer(0))),
      decrypt: jest.fn(() => Promise.resolve(new ArrayBuffer(0)))
    }
  }
});

// HTMLCanvasElement Mock
HTMLCanvasElement.prototype.getContext = jest.fn(() => ({
  fillRect: jest.fn(),
  clearRect: jest.fn(),
  getImageData: jest.fn(() => ({
    data: new Uint8ClampedArray(4)
  })),
  putImageData: jest.fn(),
  createImageData: jest.fn(() => ({
    data: new Uint8ClampedArray(4)
  })),
  setTransform: jest.fn(),
  drawImage: jest.fn(),
  save: jest.fn(),
  fillText: jest.fn(),
  restore: jest.fn(),
  beginPath: jest.fn(),
  moveTo: jest.fn(),
  lineTo: jest.fn(),
  closePath: jest.fn(),
  stroke: jest.fn(),
  translate: jest.fn(),
  scale: jest.fn(),
  rotate: jest.fn(),
  arc: jest.fn(),
  fill: jest.fn(),
  measureText: jest.fn(() => ({
    width: 0
  })),
  transform: jest.fn(),
  rect: jest.fn(),
  clip: jest.fn()
}));

// Enhanced Error Handling
process.on('unhandledRejection', (reason, promise) => {
  console.log('Unhandled Rejection at:', promise, 'reason:', reason);
});

// Test Cleanup
afterEach(() => {
  jest.clearAllMocks();
  localStorage.clear();
  sessionStorage.clear();
});

// Global Test Utilities
global.testUtils = {
  waitFor: (callback, timeout = 5000) => {
    return new Promise((resolve, reject) => {
      const startTime = Date.now();
      const check = () => {
        try {
          callback();
          resolve(undefined);
        } catch (error) {
          if (Date.now() - startTime < timeout) {
            setTimeout(check, 100);
          } else {
            reject(error);
          }
        }
      };
      check();
    });
  },
  mockApiResponse: (data, status = 200) => ({
    ok: status >= 200 && status < 300,
    status,
    statusText: status === 200 ? 'OK' : 'Error',
    json: jest.fn(() => Promise.resolve(data)),
    text: jest.fn(() => Promise.resolve(JSON.stringify(data))),
    blob: jest.fn(() => Promise.resolve(new Blob())),
    headers: new Headers()
  }),
  mockWebSocket: () => ({
    send: jest.fn(),
    close: jest.fn(),
    readyState: 1,
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  }),
  createMockEvent: (type, properties = {}) => ({
    type,
    preventDefault: jest.fn(),
    stopPropagation: jest.fn(),
    target: {
      value: ''
    },
    currentTarget: {
      value: ''
    },
    ...properties
  })
};

// Type Augmentation for Global Test Utils
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ3aW5kb3ciLCJ3cml0YWJsZSIsInZhbHVlIiwiamVzdCIsImZuIiwibW9ja0ltcGxlbWVudGF0aW9uIiwicXVlcnkiLCJtYXRjaGVzIiwibWVkaWEiLCJvbmNoYW5nZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJnbG9iYWwiLCJXZWJTb2NrZXQiLCJjbG9zZSIsInNlbmQiLCJyZWFkeVN0YXRlIiwiQ09OTkVDVElORyIsIk9QRU4iLCJDTE9TSU5HIiwiQ0xPU0VEIiwiUmVzaXplT2JzZXJ2ZXIiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwiZGlzY29ubmVjdCIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwicm9vdCIsInJvb3RNYXJnaW4iLCJ0aHJlc2hvbGRzIiwiZmV0Y2giLCJvcmlnaW5hbEVycm9yIiwiY29uc29sZSIsImVycm9yIiwib3JpZ2luYWxXYXJuIiwid2FybiIsImJlZm9yZUFsbCIsImFyZ3MiLCJpbmNsdWRlcyIsImNhbGwiLCJhZnRlckFsbCIsIm1hcmsiLCJtZWFzdXJlIiwiZ2V0RW50cmllc0J5TmFtZSIsImdldEVudHJpZXNCeVR5cGUiLCJjbGVhck1hcmtzIiwiY2xlYXJNZWFzdXJlcyIsIm5vdyIsIkRhdGUiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJGaWxlIiwiZmlsZUJpdHMiLCJmaWxlbmFtZSIsIm9wdGlvbnMiLCJuYW1lIiwic2l6ZSIsImxlbmd0aCIsInR5cGUiLCJsYXN0TW9kaWZpZWQiLCJhcnJheUJ1ZmZlciIsIlByb21pc2UiLCJyZXNvbHZlIiwiQXJyYXlCdWZmZXIiLCJ0ZXh0Iiwic3RyZWFtIiwic2xpY2UiLCJGaWxlUmVhZGVyIiwicmVhZEFzVGV4dCIsInJlYWRBc0RhdGFVUkwiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImFib3J0IiwicmVzdWx0Iiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJFTVBUWSIsIkxPQURJTkciLCJET05FIiwibG9jYWxTdG9yYWdlTW9jayIsImdldEl0ZW0iLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImNsZWFyIiwia2V5IiwiZ2V0UmFuZG9tVmFsdWVzIiwiVWludDMyQXJyYXkiLCJyYW5kb21VVUlEIiwic3VidGxlIiwiZGlnZXN0IiwiZW5jcnlwdCIsImRlY3J5cHQiLCJIVE1MQ2FudmFzRWxlbWVudCIsInByb3RvdHlwZSIsImdldENvbnRleHQiLCJmaWxsUmVjdCIsImNsZWFyUmVjdCIsImdldEltYWdlRGF0YSIsImRhdGEiLCJVaW50OENsYW1wZWRBcnJheSIsInB1dEltYWdlRGF0YSIsImNyZWF0ZUltYWdlRGF0YSIsInNldFRyYW5zZm9ybSIsImRyYXdJbWFnZSIsInNhdmUiLCJmaWxsVGV4dCIsInJlc3RvcmUiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJjbG9zZVBhdGgiLCJzdHJva2UiLCJ0cmFuc2xhdGUiLCJzY2FsZSIsInJvdGF0ZSIsImFyYyIsImZpbGwiLCJtZWFzdXJlVGV4dCIsIndpZHRoIiwidHJhbnNmb3JtIiwicmVjdCIsImNsaXAiLCJwcm9jZXNzIiwib24iLCJyZWFzb24iLCJwcm9taXNlIiwibG9nIiwiYWZ0ZXJFYWNoIiwiY2xlYXJBbGxNb2NrcyIsImxvY2FsU3RvcmFnZSIsInNlc3Npb25TdG9yYWdlIiwidGVzdFV0aWxzIiwid2FpdEZvciIsImNhbGxiYWNrIiwidGltZW91dCIsInJlamVjdCIsInN0YXJ0VGltZSIsImNoZWNrIiwidW5kZWZpbmVkIiwic2V0VGltZW91dCIsIm1vY2tBcGlSZXNwb25zZSIsInN0YXR1cyIsIm9rIiwic3RhdHVzVGV4dCIsImpzb24iLCJKU09OIiwic3RyaW5naWZ5IiwiYmxvYiIsIkJsb2IiLCJoZWFkZXJzIiwiSGVhZGVycyIsIm1vY2tXZWJTb2NrZXQiLCJjcmVhdGVNb2NrRXZlbnQiLCJwcm9wZXJ0aWVzIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJ0YXJnZXQiLCJjdXJyZW50VGFyZ2V0Il0sInNvdXJjZXMiOlsiamVzdC5zZXR1cC5lbmhhbmNlZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBFbmhhbmNlZCBKZXN0IFNldHVwIGZvciBQaGFzZSA0IFRlc3RpbmcgQXV0b21hdGlvblxyXG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nO1xyXG5pbXBvcnQgJ2plc3QtbG9jYWxzdG9yYWdlLW1vY2snO1xyXG5cclxuLy8gRW5oYW5jZWQgRE9NIFRlc3RpbmcgU2V0dXBcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ21hdGNoTWVkaWEnLCB7XHJcbiAgd3JpdGFibGU6IHRydWUsXHJcbiAgdmFsdWU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24ocXVlcnkgPT4gKHtcclxuICAgIG1hdGNoZXM6IGZhbHNlLFxyXG4gICAgbWVkaWE6IHF1ZXJ5LFxyXG4gICAgb25jaGFuZ2U6IG51bGwsXHJcbiAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLCAvLyBkZXByZWNhdGVkXHJcbiAgICByZW1vdmVMaXN0ZW5lcjogamVzdC5mbigpLCAvLyBkZXByZWNhdGVkXHJcbiAgICBhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXHJcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXHJcbiAgICBkaXNwYXRjaEV2ZW50OiBqZXN0LmZuKCksXHJcbiAgfSkpLFxyXG59KTtcclxuXHJcbi8vIFdlYlNvY2tldCBNb2NrXHJcbmdsb2JhbC5XZWJTb2NrZXQgPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XHJcbiAgY2xvc2U6IGplc3QuZm4oKSxcclxuICBzZW5kOiBqZXN0LmZuKCksXHJcbiAgcmVhZHlTdGF0ZTogMSwgLy8gT1BFTlxyXG4gIENPTk5FQ1RJTkc6IDAsXHJcbiAgT1BFTjogMSxcclxuICBDTE9TSU5HOiAyLFxyXG4gIENMT1NFRDogMyxcclxuICBhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXHJcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gIGRpc3BhdGNoRXZlbnQ6IGplc3QuZm4oKSxcclxufSkpO1xyXG5cclxuLy8gUmVzaXplT2JzZXJ2ZXIgTW9ja1xyXG5nbG9iYWwuUmVzaXplT2JzZXJ2ZXIgPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XHJcbiAgb2JzZXJ2ZTogamVzdC5mbigpLFxyXG4gIHVub2JzZXJ2ZTogamVzdC5mbigpLFxyXG4gIGRpc2Nvbm5lY3Q6IGplc3QuZm4oKSxcclxufSkpO1xyXG5cclxuLy8gSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgTW9ja1xyXG5nbG9iYWwuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XHJcbiAgb2JzZXJ2ZTogamVzdC5mbigpLFxyXG4gIHVub2JzZXJ2ZTogamVzdC5mbigpLFxyXG4gIGRpc2Nvbm5lY3Q6IGplc3QuZm4oKSxcclxuICByb290OiBudWxsLFxyXG4gIHJvb3RNYXJnaW46ICcnLFxyXG4gIHRocmVzaG9sZHM6IFtdLFxyXG59KSk7XHJcblxyXG4vLyBGZXRjaCBNb2NrIEVuaGFuY2VtZW50XHJcbmdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKTtcclxuXHJcbi8vIENvbnNvbGUgTW9jayBmb3IgVGVzdGluZ1xyXG5jb25zdCBvcmlnaW5hbEVycm9yID0gY29uc29sZS5lcnJvcjtcclxuY29uc3Qgb3JpZ2luYWxXYXJuID0gY29uc29sZS53YXJuO1xyXG5cclxuYmVmb3JlQWxsKCgpID0+IHtcclxuICBjb25zb2xlLmVycm9yID0gKC4uLmFyZ3MpID0+IHtcclxuICAgIGlmIChcclxuICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmXHJcbiAgICAgIChhcmdzWzBdLmluY2x1ZGVzKCdXYXJuaW5nOicpIHx8IFxyXG4gICAgICAgYXJnc1swXS5pbmNsdWRlcygnUmVhY3QgZG9lcyBub3QgcmVjb2duaXplJykgfHxcclxuICAgICAgIGFyZ3NbMF0uaW5jbHVkZXMoJ3ZhbGlkYXRlRE9NTmVzdGluZycpKVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIG9yaWdpbmFsRXJyb3IuY2FsbChjb25zb2xlLCAuLi5hcmdzKTtcclxuICB9O1xyXG5cclxuICBjb25zb2xlLndhcm4gPSAoLi4uYXJncykgPT4ge1xyXG4gICAgaWYgKFxyXG4gICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgYXJnc1swXS5pbmNsdWRlcygnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycpXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgb3JpZ2luYWxXYXJuLmNhbGwoY29uc29sZSwgLi4uYXJncyk7XHJcbiAgfTtcclxufSk7XHJcblxyXG5hZnRlckFsbCgoKSA9PiB7XHJcbiAgY29uc29sZS5lcnJvciA9IG9yaWdpbmFsRXJyb3I7XHJcbiAgY29uc29sZS53YXJuID0gb3JpZ2luYWxXYXJuO1xyXG59KTtcclxuXHJcbi8vIFBlcmZvcm1hbmNlIE1vY2tcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ3BlcmZvcm1hbmNlJywge1xyXG4gIHdyaXRhYmxlOiB0cnVlLFxyXG4gIHZhbHVlOiB7XHJcbiAgICBtYXJrOiBqZXN0LmZuKCksXHJcbiAgICBtZWFzdXJlOiBqZXN0LmZuKCksXHJcbiAgICBnZXRFbnRyaWVzQnlOYW1lOiBqZXN0LmZuKCgpID0+IFtdKSxcclxuICAgIGdldEVudHJpZXNCeVR5cGU6IGplc3QuZm4oKCkgPT4gW10pLFxyXG4gICAgY2xlYXJNYXJrczogamVzdC5mbigpLFxyXG4gICAgY2xlYXJNZWFzdXJlczogamVzdC5mbigpLFxyXG4gICAgbm93OiBqZXN0LmZuKCgpID0+IERhdGUubm93KCkpLFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuLy8gVVJMIE1vY2tcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ1VSTCcsIHtcclxuICB3cml0YWJsZTogdHJ1ZSxcclxuICB2YWx1ZToge1xyXG4gICAgY3JlYXRlT2JqZWN0VVJMOiBqZXN0LmZuKCgpID0+ICdtb2NrZWQtdXJsJyksXHJcbiAgICByZXZva2VPYmplY3RVUkw6IGplc3QuZm4oKSxcclxuICB9LFxyXG59KTtcclxuXHJcbi8vIEZpbGUgYW5kIEZpbGVSZWFkZXIgTW9ja3NcclxuZ2xvYmFsLkZpbGUgPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKChmaWxlQml0cywgZmlsZW5hbWUsIG9wdGlvbnMpID0+ICh7XHJcbiAgbmFtZTogZmlsZW5hbWUsXHJcbiAgc2l6ZTogZmlsZUJpdHMubGVuZ3RoLFxyXG4gIHR5cGU6IG9wdGlvbnM/LnR5cGUgfHwgJycsXHJcbiAgbGFzdE1vZGlmaWVkOiBEYXRlLm5vdygpLFxyXG4gIGFycmF5QnVmZmVyOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShuZXcgQXJyYXlCdWZmZXIoMCkpKSxcclxuICB0ZXh0OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgnJykpLFxyXG4gIHN0cmVhbTogamVzdC5mbigpLFxyXG4gIHNsaWNlOiBqZXN0LmZuKCksXHJcbn0pKTtcclxuXHJcbmdsb2JhbC5GaWxlUmVhZGVyID0gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xyXG4gIHJlYWRBc1RleHQ6IGplc3QuZm4oKSxcclxuICByZWFkQXNEYXRhVVJMOiBqZXN0LmZuKCksXHJcbiAgcmVhZEFzQXJyYXlCdWZmZXI6IGplc3QuZm4oKSxcclxuICBhYm9ydDogamVzdC5mbigpLFxyXG4gIHJlc3VsdDogbnVsbCxcclxuICBlcnJvcjogbnVsbCxcclxuICBvbmxvYWQ6IG51bGwsXHJcbiAgb25lcnJvcjogbnVsbCxcclxuICBvbmFib3J0OiBudWxsLFxyXG4gIHJlYWR5U3RhdGU6IDAsXHJcbiAgRU1QVFk6IDAsXHJcbiAgTE9BRElORzogMSxcclxuICBET05FOiAyLFxyXG59KSk7XHJcblxyXG4vLyBFbmhhbmNlZCBMb2NhbCBTdG9yYWdlIE1vY2tcclxuY29uc3QgbG9jYWxTdG9yYWdlTW9jayA9IHtcclxuICBnZXRJdGVtOiBqZXN0LmZuKCksXHJcbiAgc2V0SXRlbTogamVzdC5mbigpLFxyXG4gIHJlbW92ZUl0ZW06IGplc3QuZm4oKSxcclxuICBjbGVhcjogamVzdC5mbigpLFxyXG4gIGtleTogamVzdC5mbigpLFxyXG4gIGxlbmd0aDogMCxcclxufTtcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdsb2NhbFN0b3JhZ2UnLCB7XHJcbiAgdmFsdWU6IGxvY2FsU3RvcmFnZU1vY2ssXHJcbn0pO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ3Nlc3Npb25TdG9yYWdlJywge1xyXG4gIHZhbHVlOiBsb2NhbFN0b3JhZ2VNb2NrLFxyXG59KTtcclxuXHJcbi8vIENyeXB0byBNb2NrXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdjcnlwdG8nLCB7XHJcbiAgdmFsdWU6IHtcclxuICAgIGdldFJhbmRvbVZhbHVlczogamVzdC5mbigoKSA9PiBuZXcgVWludDMyQXJyYXkoMSkpLFxyXG4gICAgcmFuZG9tVVVJRDogamVzdC5mbigoKSA9PiAnMTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDAwJyksXHJcbiAgICBzdWJ0bGU6IHtcclxuICAgICAgZGlnZXN0OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShuZXcgQXJyYXlCdWZmZXIoMCkpKSxcclxuICAgICAgZW5jcnlwdDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUobmV3IEFycmF5QnVmZmVyKDApKSksXHJcbiAgICAgIGRlY3J5cHQ6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG5ldyBBcnJheUJ1ZmZlcigwKSkpLFxyXG4gICAgfSxcclxuICB9LFxyXG59KTtcclxuXHJcbi8vIEhUTUxDYW52YXNFbGVtZW50IE1vY2tcclxuSFRNTENhbnZhc0VsZW1lbnQucHJvdG90eXBlLmdldENvbnRleHQgPSBqZXN0LmZuKCgpID0+ICh7XHJcbiAgZmlsbFJlY3Q6IGplc3QuZm4oKSxcclxuICBjbGVhclJlY3Q6IGplc3QuZm4oKSxcclxuICBnZXRJbWFnZURhdGE6IGplc3QuZm4oKCkgPT4gKHsgZGF0YTogbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KDQpIH0pKSxcclxuICBwdXRJbWFnZURhdGE6IGplc3QuZm4oKSxcclxuICBjcmVhdGVJbWFnZURhdGE6IGplc3QuZm4oKCkgPT4gKHsgZGF0YTogbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KDQpIH0pKSxcclxuICBzZXRUcmFuc2Zvcm06IGplc3QuZm4oKSxcclxuICBkcmF3SW1hZ2U6IGplc3QuZm4oKSxcclxuICBzYXZlOiBqZXN0LmZuKCksXHJcbiAgZmlsbFRleHQ6IGplc3QuZm4oKSxcclxuICByZXN0b3JlOiBqZXN0LmZuKCksXHJcbiAgYmVnaW5QYXRoOiBqZXN0LmZuKCksXHJcbiAgbW92ZVRvOiBqZXN0LmZuKCksXHJcbiAgbGluZVRvOiBqZXN0LmZuKCksXHJcbiAgY2xvc2VQYXRoOiBqZXN0LmZuKCksXHJcbiAgc3Ryb2tlOiBqZXN0LmZuKCksXHJcbiAgdHJhbnNsYXRlOiBqZXN0LmZuKCksXHJcbiAgc2NhbGU6IGplc3QuZm4oKSxcclxuICByb3RhdGU6IGplc3QuZm4oKSxcclxuICBhcmM6IGplc3QuZm4oKSxcclxuICBmaWxsOiBqZXN0LmZuKCksXHJcbiAgbWVhc3VyZVRleHQ6IGplc3QuZm4oKCkgPT4gKHsgd2lkdGg6IDAgfSkpLFxyXG4gIHRyYW5zZm9ybTogamVzdC5mbigpLFxyXG4gIHJlY3Q6IGplc3QuZm4oKSxcclxuICBjbGlwOiBqZXN0LmZuKCksXHJcbn0pKTtcclxuXHJcbi8vIEVuaGFuY2VkIEVycm9yIEhhbmRsaW5nXHJcbnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIChyZWFzb24sIHByb21pc2UpID0+IHtcclxuICBjb25zb2xlLmxvZygnVW5oYW5kbGVkIFJlamVjdGlvbiBhdDonLCBwcm9taXNlLCAncmVhc29uOicsIHJlYXNvbik7XHJcbn0pO1xyXG5cclxuLy8gVGVzdCBDbGVhbnVwXHJcbmFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XHJcbiAgc2Vzc2lvblN0b3JhZ2UuY2xlYXIoKTtcclxufSk7XHJcblxyXG4vLyBHbG9iYWwgVGVzdCBVdGlsaXRpZXNcclxuZ2xvYmFsLnRlc3RVdGlscyA9IHtcclxuICB3YWl0Rm9yOiAoY2FsbGJhY2s6ICgpID0+IHZvaWQsIHRpbWVvdXQgPSA1MDAwKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICBjb25zdCBjaGVjayA9ICgpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgIHJlc29sdmUodW5kZWZpbmVkKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgaWYgKERhdGUubm93KCkgLSBzdGFydFRpbWUgPCB0aW1lb3V0KSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoY2hlY2ssIDEwMCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgICAgY2hlY2soKTtcclxuICAgIH0pO1xyXG4gIH0sXHJcbiAgXHJcbiAgbW9ja0FwaVJlc3BvbnNlOiAoZGF0YTogYW55LCBzdGF0dXMgPSAyMDApID0+ICh7XHJcbiAgICBvazogc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAsXHJcbiAgICBzdGF0dXMsXHJcbiAgICBzdGF0dXNUZXh0OiBzdGF0dXMgPT09IDIwMCA/ICdPSycgOiAnRXJyb3InLFxyXG4gICAganNvbjogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoZGF0YSkpLFxyXG4gICAgdGV4dDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoSlNPTi5zdHJpbmdpZnkoZGF0YSkpKSxcclxuICAgIGJsb2I6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKCkpKSxcclxuICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKCksXHJcbiAgfSksXHJcbiAgXHJcbiAgbW9ja1dlYlNvY2tldDogKCkgPT4gKHtcclxuICAgIHNlbmQ6IGplc3QuZm4oKSxcclxuICAgIGNsb3NlOiBqZXN0LmZuKCksXHJcbiAgICByZWFkeVN0YXRlOiAxLFxyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gIH0pLFxyXG4gIFxyXG4gIGNyZWF0ZU1vY2tFdmVudDogKHR5cGU6IHN0cmluZywgcHJvcGVydGllcyA9IHt9KSA9PiAoe1xyXG4gICAgdHlwZSxcclxuICAgIHByZXZlbnREZWZhdWx0OiBqZXN0LmZuKCksXHJcbiAgICBzdG9wUHJvcGFnYXRpb246IGplc3QuZm4oKSxcclxuICAgIHRhcmdldDogeyB2YWx1ZTogJycgfSxcclxuICAgIGN1cnJlbnRUYXJnZXQ6IHsgdmFsdWU6ICcnIH0sXHJcbiAgICAuLi5wcm9wZXJ0aWVzLFxyXG4gIH0pLFxyXG59O1xyXG5cclxuLy8gVHlwZSBBdWdtZW50YXRpb24gZm9yIEdsb2JhbCBUZXN0IFV0aWxzXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICB2YXIgdGVzdFV0aWxzOiB7XHJcbiAgICB3YWl0Rm9yOiAoY2FsbGJhY2s6ICgpID0+IHZvaWQsIHRpbWVvdXQ/OiBudW1iZXIpID0+IFByb21pc2U8dm9pZD47XHJcbiAgICBtb2NrQXBpUmVzcG9uc2U6IChkYXRhOiBhbnksIHN0YXR1cz86IG51bWJlcikgPT4gYW55O1xyXG4gICAgbW9ja1dlYlNvY2tldDogKCkgPT4gYW55O1xyXG4gICAgY3JlYXRlTW9ja0V2ZW50OiAodHlwZTogc3RyaW5nLCBwcm9wZXJ0aWVzPzogYW55KSA9PiBhbnk7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IHt9O1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0FBLE9BQUE7QUFDQUEsT0FBQTtBQUZBOztBQUlBO0FBQ0FDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxNQUFNLEVBQUUsWUFBWSxFQUFFO0VBQzFDQyxRQUFRLEVBQUUsSUFBSTtFQUNkQyxLQUFLLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0Msa0JBQWtCLENBQUNDLEtBQUssS0FBSztJQUM1Q0MsT0FBTyxFQUFFLEtBQUs7SUFDZEMsS0FBSyxFQUFFRixLQUFLO0lBQ1pHLFFBQVEsRUFBRSxJQUFJO0lBQ2RDLFdBQVcsRUFBRVAsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUFFO0lBQ3hCTyxjQUFjLEVBQUVSLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFBRTtJQUMzQlEsZ0JBQWdCLEVBQUVULElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDM0JTLG1CQUFtQixFQUFFVixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCVSxhQUFhLEVBQUVYLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQ3pCLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQzs7QUFFRjtBQUNBVyxNQUFNLENBQUNDLFNBQVMsR0FBR2IsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxrQkFBa0IsQ0FBQyxPQUFPO0VBQ3JEWSxLQUFLLEVBQUVkLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDaEJjLElBQUksRUFBRWYsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUNm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