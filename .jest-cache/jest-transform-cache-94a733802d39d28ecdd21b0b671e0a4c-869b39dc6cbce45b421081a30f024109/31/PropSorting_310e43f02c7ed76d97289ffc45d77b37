984c9f8a5ee34cc48b23635534609e6a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PropSorting = void 0;
var _react = _interopRequireDefault(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
/**
 * PropSorting Component
 *
 * Handles sorting controls for props including sort criteria and direction.
 */

const sortOptions = [{
  value: 'confidence',
  label: 'Confidence'
}, {
  value: 'odds',
  label: 'Odds'
}, {
  value: 'impact',
  label: 'Impact'
}, {
  value: 'alphabetical',
  label: 'Alphabetical'
}, {
  value: 'recent',
  label: 'Recent'
}, {
  value: 'manual',
  label: 'Manual'
}, {
  value: 'analytics_score',
  label: 'Analytics Score'
}];
const PropSortingComponent = ({
  sorting,
  onSortingChange,
  className = ''
}) => {
  console.count('[PropSorting] RENDER');
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: `flex items-center gap-8 p-3 bg-slate-800/50 backdrop-blur-sm border border-slate-600 rounded-lg mb-4 text-white ${className}`,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "flex items-center gap-2",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
        htmlFor: "sort-by-select",
        className: "font-medium text-gray-200 text-sm whitespace-nowrap",
        children: "Sort by:"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("select", {
        id: "sort-by-select",
        value: sorting.sortBy,
        onChange: e => onSortingChange({
          sortBy: e.target.value
        }),
        className: "px-3 py-1.5 bg-slate-700 border border-slate-600 rounded text-white text-sm min-w-36 focus:ring-purple-500 focus:border-purple-500",
        children: sortOptions.map(option => /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
          value: option.value,
          className: "bg-slate-700 text-white",
          children: option.label
        }, option.value))
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "flex items-center gap-2",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
        className: "font-medium text-gray-200 text-sm",
        children: "Order:"
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "flex gap-4",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
          className: "flex items-center gap-1 text-sm text-gray-200 cursor-pointer whitespace-nowrap",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
            type: "radio",
            name: "sortOrder",
            value: "desc",
            checked: sorting.sortOrder === 'desc',
            onChange: e => onSortingChange({
              sortOrder: e.target.value
            }),
            className: "text-purple-600 focus:ring-purple-500"
          }), "Descending"]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("label", {
          className: "flex items-center gap-1 text-sm text-gray-200 cursor-pointer whitespace-nowrap",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
            type: "radio",
            name: "sortOrder",
            value: "asc",
            checked: sorting.sortOrder === 'asc',
            onChange: e => onSortingChange({
              sortOrder: e.target.value
            }),
            className: "text-purple-600 focus:ring-purple-500"
          }), "Ascending"]
        })]
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("style", {
      children: `
        @media (max-width: 768px) {
          .prop-sorting {
            flex-direction: column;
            align-items: stretch;
            gap: 1rem;
          }

          .sorting-group {
            flex-direction: column;
            align-items: stretch;
          }
        }
      `
    })]
  });
};
const PropSorting = exports.PropSorting = /*#__PURE__*/_react.default.memo(PropSortingComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,