8c62efa3aab2cb00219a38e342590fc8
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _robustApi = require("../utils/robustApi");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const toNumberOrDefault = (v, def = 0) => typeof v === 'number' && isFinite(v) ? v : def;
function normalizeMetrics(raw) {
  // raw may be: { data: { cache_performance: {...} } } or { data: { cache: {...} } } or direct object
  const wrapper = raw && typeof raw === 'object' && 'data' in raw ? raw.data : raw || {};
  const dataObj = wrapper;

  // Prefer canonical `cache` object when present; merge legacy `cache_performance` and canonical
  // so canonical keys override legacy but missing fields are filled from legacy.
  const canonicalCache = dataObj['cache'] ?? {};
  const legacyCache = dataObj['cache_performance'] ?? {};
  const cachePerf = {
    ...legacyCache,
    ...canonicalCache
  };
  const total_requests = toNumberOrDefault(cachePerf['total_requests'] ?? cachePerf['totalRequests'] ?? 0, 0);
  const hits = toNumberOrDefault(cachePerf['hits'] ?? 0, 0);
  const misses = toNumberOrDefault(cachePerf['misses'] ?? 0, 0);
  const errors = toNumberOrDefault(cachePerf['errors'] ?? 0, 0);
  const hit_rate = toNumberOrDefault(cachePerf['hit_rate'] ?? cachePerf['hitRate'] ?? cachePerf['hitRatePercent'] ?? 0, 0);
  const apiPerf = dataObj['api_performance'];
  const healthPerf = apiPerf && apiPerf['/health'] ? apiPerf['/health'] : undefined;
  const avgResponseTime = toNumberOrDefault(healthPerf ? healthPerf['avg_time_ms'] : dataObj['avgResponseTime'], 0);
  return {
    total_requests,
    hits,
    misses,
    errors,
    hit_rate,
    avgResponseTime
  };
}
const PerformanceMonitoringDashboard = () => {
  const [metrics, setMetrics] = (0, _react.useState)(null);
  // loading state removed; use `metrics` undefined/null to distinguish states

  (0, _react.useEffect)(() => {
    let mounted = true;
    const load = async () => {
      try {
        const resp = await (0, _robustApi.fetchPerformanceStats)();
        if (!mounted) return;
        const normalized = normalizeMetrics(resp);
        setMetrics(normalized);
        if (process.env.NODE_ENV === 'development' || typeof jest !== 'undefined') {
          // Emit diagnostics expected by tests
          const dataObj = resp && typeof resp === 'object' && 'data' in resp ? resp.data : null;
          const mappedLegacy = !!(dataObj && ('originFlags' in dataObj || 'origin_flags' in dataObj));
          // eslint-disable-next-line no-console
          console.log('[MetricsDiag]', {
            total: normalized.total_requests,
            hits: normalized.hits,
            misses: normalized.misses,
            errors: normalized.errors,
            mappedLegacy
          });
        }
      } catch {
        // On failure, set explicit null so fallback renders only on error
        setMetrics(null);
      }
    };
    load();
    return () => {
      mounted = false;
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  const formatPercent = n => {
    if (n === null || n === undefined || !Number.isFinite(n)) return '0.0%';
    return `${Number(n).toFixed(1)}%`;
  };
  const display = {
    total_requests: metrics ? metrics.total_requests : 0,
    hits: metrics ? metrics.hits : 0,
    misses: metrics ? metrics.misses : 0,
    hit_rate: metrics ? metrics.hit_rate : 0,
    avgResponseTime: metrics ? metrics.avgResponseTime : null
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "bg-gray-900 text-white p-6 rounded shadow-lg",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h2", {
      className: "text-xl font-bold mb-4",
      children: "Performance Monitoring"
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
        className: "text-lg font-semibold mb-2",
        children: "API Performance"
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("ul", {
        className: "space-y-2",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("li", {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            className: "font-semibold",
            children: "Total Requests"
          }), ' ', /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            "data-testid": "total-requests",
            children: String(display.total_requests)
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("li", {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            className: "font-semibold",
            children: "Cache Hits"
          }), ' ', /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            "data-testid": "cache-hits",
            children: String(display.hits)
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("li", {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            className: "font-semibold",
            children: "Cache Misses"
          }), ": ", /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            "data-testid": "cache-misses",
            children: String(display.misses)
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("li", {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            className: "font-semibold",
            children: "Hit Rate"
          }), ": ", /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            "data-testid": "cache-hit-rate",
            children: formatPercent(display.hit_rate)
          })]
        })]
      }), metrics === null && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "mt-4 text-yellow-400",
        children: "Using demo data. Metrics data unavailable. Please check backend connection."
      })]
    })]
  });
};
var _default = exports.default = PerformanceMonitoringDashboard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,