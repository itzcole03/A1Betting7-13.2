1e147b7a9cb709b22e44a96744fe33c7
"use strict";

var _ensureMetricsShape = require("../ensureMetricsShape");
/**
 * @jest-environment jsdom
 */

describe('ensureMetricsShape', () => {
  beforeEach(() => {
    // Reset console warn spy before each test
    jest.clearAllMocks();
  });
  afterEach(() => {
    // Clean up console spy
    jest.restoreAllMocks();
  });
  it('should return fully populated numeric fields with empty object input', () => {
    const result = (0, _ensureMetricsShape.ensureMetricsShape)({});
    expect(result).toEqual({
      api: {
        total_requests: 0,
        success_requests: 0,
        error_requests: 0,
        avg_latency_ms: 0
      },
      cache: {
        hits: 0,
        misses: 0,
        total_requests: 0,
        hit_rate: 0,
        errors: 0
      },
      system_info: {
        optimization_level: 'Basic',
        caching_strategy: 'Memory',
        monitoring: 'Standard'
      },
      timestamps: {
        updated_at: expect.any(String)
      },
      originFlags: {}
    });
  });
  it('should handle legacy cache_performance shape only', () => {
    const legacyData = {
      cache_performance: {
        hits: 312,
        misses: 67,
        total_requests: 379,
        hit_rate: 82.3,
        errors: 3
      }
    };
    const result = (0, _ensureMetricsShape.ensureMetricsShape)(legacyData);
    expect(result.cache).toEqual({
      hits: 312,
      misses: 67,
      total_requests: 379,
      hit_rate: 82.3,
      errors: 3
    });
    expect(result.originFlags?.mappedLegacy).toBe(true);
  });
  it('should handle mixed canonical and legacy with canonical winning', () => {
    const mixedData = {
      cache: {
        hits: 500,
        // canonical wins
        total_requests: 600
      },
      cache_performance: {
        hits: 300,
        // legacy fallback
        misses: 50,
        errors: 2
      }
    };
    const result = (0, _ensureMetricsShape.ensureMetricsShape)(mixedData);
    expect(result.cache).toEqual({
      hits: 500,
      // canonical value used
      misses: 50,
      // legacy fallback used
      total_requests: 600,
      // canonical value used  
      hit_rate: 0,
      // default since not provided
      errors: 2 // legacy fallback used
    });
    expect(result.originFlags?.mappedLegacy).toBe(true);
  });
  it('should coerce string numbers correctly', () => {
    const stringData = {
      cache_performance: {
        hits: '150',
        total_requests: '200',
        hit_rate: '75.5'
      }
    };
    const result = (0, _ensureMetricsShape.ensureMetricsShape)(stringData);
    expect(result.cache.hits).toBe(150);
    expect(result.cache.total_requests).toBe(200);
    expect(result.cache.hit_rate).toBe(75.5);
  });
  it('should handle partial data with missing fields defaulting to zero', () => {
    const partialData = {
      cache_performance: {
        hits: 100
        // missing: misses, total_requests, hit_rate, errors
      },
      api_performance: {
        '/health': {
          total_calls: 50,
          errors: 2,
          avg_time_ms: 45.2
        }
      }
    };
    const result = (0, _ensureMetricsShape.ensureMetricsShape)(partialData);
    expect(result.cache).toEqual({
      hits: 100,
      misses: 0,
      // default
      total_requests: 0,
      // default
      hit_rate: 0,
      // default
      errors: 0 // default
    });
    expect(result.api).toEqual({
      total_requests: 50,
      // aggregated from api_performance
      success_requests: 48,
      // total - errors
      error_requests: 2,
      // aggregated errors
      avg_latency_ms: 45.2 // averaged
    });
  });
  it('should detect and flag legacy mapping', () => {
    const consoleSpy = jest.spyOn(console, 'warn').mockImplementation(() => {});
    process.env.NODE_ENV = 'development';
    const legacyData = {
      api_performance: {
        '/health': {
          total_calls: 10,
          errors: 1
        },
        '/mlb/games': {
          total_calls: 20,
          errors: 0
        }
      }
    };
    const result = (0, _ensureMetricsShape.ensureMetricsShape)(legacyData);
    expect(result.originFlags?.mappedLegacy).toBe(true);
    expect(consoleSpy).toHaveBeenCalledWith('[MetricsGuard] Using legacy metrics structure (cache_performance/api_performance)', 'Consider migrating to canonical structure (cache/api)');
    consoleSpy.mockRestore();
    delete process.env.NODE_ENV;
  });
  it('should aggregate API performance stats correctly', () => {
    const apiData = {
      api_performance: {
        '/health': {
          total_calls: 100,
          errors: 2,
          avg_time_ms: 45.2
        },
        '/mlb/games': {
          total_calls: 50,
          errors: 1,
          avg_time_ms: 120.5
        },
        '/ml/predict': {
          total_calls: 25,
          errors: 0,
          avg_time_ms: 200.0
        }
      }
    };
    const result = (0, _ensureMetricsShape.ensureMetricsShape)(apiData);
    expect(result.api).toEqual({
      total_requests: 175,
      // 100 + 50 + 25
      success_requests: 172,
      // 175 - 3 errors
      error_requests: 3,
      // 2 + 1 + 0
      avg_latency_ms: 121.9 // (45.2 + 120.5 + 200.0) / 3
    });
  });
  it('should handle null input gracefully', () => {
    const result = (0, _ensureMetricsShape.ensureMetricsShape)(null);
    expect(result.api.total_requests).toBe(0);
    expect(result.cache.total_requests).toBe(0);
    expect(result.timestamps?.updated_at).toMatch(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/);
  });
  it('should handle Infinity and NaN in numeric fields', () => {
    const badData = {
      cache_performance: {
        hits: Infinity,
        misses: NaN,
        hit_rate: -Infinity
      }
    };
    const result = (0, _ensureMetricsShape.ensureMetricsShape)(badData);
    expect(result.cache.hits).toBe(0); // Infinity -> 0
    expect(result.cache.misses).toBe(0); // NaN -> 0
    expect(result.cache.hit_rate).toBe(0); // -Infinity -> 0
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZW5zdXJlTWV0cmljc1NoYXBlIiwicmVxdWlyZSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImplc3QiLCJjbGVhckFsbE1vY2tzIiwiYWZ0ZXJFYWNoIiwicmVzdG9yZUFsbE1vY2tzIiwiaXQiLCJyZXN1bHQiLCJlbnN1cmVNZXRyaWNzU2hhcGUiLCJleHBlY3QiLCJ0b0VxdWFsIiwiYXBpIiwidG90YWxfcmVxdWVzdHMiLCJzdWNjZXNzX3JlcXVlc3RzIiwiZXJyb3JfcmVxdWVzdHMiLCJhdmdfbGF0ZW5jeV9tcyIsImNhY2hlIiwiaGl0cyIsIm1pc3NlcyIsImhpdF9yYXRlIiwiZXJyb3JzIiwic3lzdGVtX2luZm8iLCJvcHRpbWl6YXRpb25fbGV2ZWwiLCJjYWNoaW5nX3N0cmF0ZWd5IiwibW9uaXRvcmluZyIsInRpbWVzdGFtcHMiLCJ1cGRhdGVkX2F0IiwiYW55IiwiU3RyaW5nIiwib3JpZ2luRmxhZ3MiLCJsZWdhY3lEYXRhIiwiY2FjaGVfcGVyZm9ybWFuY2UiLCJtYXBwZWRMZWdhY3kiLCJ0b0JlIiwibWl4ZWREYXRhIiwic3RyaW5nRGF0YSIsInBhcnRpYWxEYXRhIiwiYXBpX3BlcmZvcm1hbmNlIiwidG90YWxfY2FsbHMiLCJhdmdfdGltZV9tcyIsImNvbnNvbGVTcHkiLCJzcHlPbiIsImNvbnNvbGUiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm1vY2tSZXN0b3JlIiwiYXBpRGF0YSIsInRvTWF0Y2giLCJiYWREYXRhIiwiSW5maW5pdHkiLCJOYU4iXSwic291cmNlcyI6WyJlbnN1cmVNZXRyaWNzU2hhcGUudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGplc3QtZW52aXJvbm1lbnQganNkb21cclxuICovXHJcblxyXG5pbXBvcnQgeyBlbnN1cmVNZXRyaWNzU2hhcGUgfSBmcm9tICcuLi9lbnN1cmVNZXRyaWNzU2hhcGUnO1xyXG5cclxuZGVzY3JpYmUoJ2Vuc3VyZU1ldHJpY3NTaGFwZScsICgpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIC8vIFJlc2V0IGNvbnNvbGUgd2FybiBzcHkgYmVmb3JlIGVhY2ggdGVzdFxyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgfSk7XHJcblxyXG4gIGFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgICAvLyBDbGVhbiB1cCBjb25zb2xlIHNweVxyXG4gICAgamVzdC5yZXN0b3JlQWxsTW9ja3MoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCByZXR1cm4gZnVsbHkgcG9wdWxhdGVkIG51bWVyaWMgZmllbGRzIHdpdGggZW1wdHkgb2JqZWN0IGlucHV0JywgKCkgPT4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gZW5zdXJlTWV0cmljc1NoYXBlKHt9KTtcclxuICAgIFxyXG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XHJcbiAgICAgIGFwaToge1xyXG4gICAgICAgIHRvdGFsX3JlcXVlc3RzOiAwLFxyXG4gICAgICAgIHN1Y2Nlc3NfcmVxdWVzdHM6IDAsXHJcbiAgICAgICAgZXJyb3JfcmVxdWVzdHM6IDAsXHJcbiAgICAgICAgYXZnX2xhdGVuY3lfbXM6IDAsXHJcbiAgICAgIH0sXHJcbiAgICAgIGNhY2hlOiB7XHJcbiAgICAgICAgaGl0czogMCxcclxuICAgICAgICBtaXNzZXM6IDAsXHJcbiAgICAgICAgdG90YWxfcmVxdWVzdHM6IDAsXHJcbiAgICAgICAgaGl0X3JhdGU6IDAsXHJcbiAgICAgICAgZXJyb3JzOiAwLFxyXG4gICAgICB9LFxyXG4gICAgICBzeXN0ZW1faW5mbzoge1xyXG4gICAgICAgIG9wdGltaXphdGlvbl9sZXZlbDogJ0Jhc2ljJyxcclxuICAgICAgICBjYWNoaW5nX3N0cmF0ZWd5OiAnTWVtb3J5JyxcclxuICAgICAgICBtb25pdG9yaW5nOiAnU3RhbmRhcmQnLFxyXG4gICAgICB9LFxyXG4gICAgICB0aW1lc3RhbXBzOiB7XHJcbiAgICAgICAgdXBkYXRlZF9hdDogZXhwZWN0LmFueShTdHJpbmcpLFxyXG4gICAgICB9LFxyXG4gICAgICBvcmlnaW5GbGFnczoge30sXHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgbGVnYWN5IGNhY2hlX3BlcmZvcm1hbmNlIHNoYXBlIG9ubHknLCAoKSA9PiB7XHJcbiAgICBjb25zdCBsZWdhY3lEYXRhID0ge1xyXG4gICAgICBjYWNoZV9wZXJmb3JtYW5jZToge1xyXG4gICAgICAgIGhpdHM6IDMxMixcclxuICAgICAgICBtaXNzZXM6IDY3LFxyXG4gICAgICAgIHRvdGFsX3JlcXVlc3RzOiAzNzksXHJcbiAgICAgICAgaGl0X3JhdGU6IDgyLjMsXHJcbiAgICAgICAgZXJyb3JzOiAzLFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBlbnN1cmVNZXRyaWNzU2hhcGUobGVnYWN5RGF0YSk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdC5jYWNoZSkudG9FcXVhbCh7XHJcbiAgICAgIGhpdHM6IDMxMixcclxuICAgICAgbWlzc2VzOiA2NyxcclxuICAgICAgdG90YWxfcmVxdWVzdHM6IDM3OSxcclxuICAgICAgaGl0X3JhdGU6IDgyLjMsXHJcbiAgICAgIGVycm9yczogMyxcclxuICAgIH0pO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5vcmlnaW5GbGFncz8ubWFwcGVkTGVnYWN5KS50b0JlKHRydWUpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGhhbmRsZSBtaXhlZCBjYW5vbmljYWwgYW5kIGxlZ2FjeSB3aXRoIGNhbm9uaWNhbCB3aW5uaW5nJywgKCkgPT4ge1xyXG4gICAgY29uc3QgbWl4ZWREYXRhID0ge1xyXG4gICAgICBjYWNoZToge1xyXG4gICAgICAgIGhpdHM6IDUwMCwgLy8gY2Fub25pY2FsIHdpbnNcclxuICAgICAgICB0b3RhbF9yZXF1ZXN0czogNjAwLFxyXG4gICAgICB9LFxyXG4gICAgICBjYWNoZV9wZXJmb3JtYW5jZToge1xyXG4gICAgICAgIGhpdHM6IDMwMCwgLy8gbGVnYWN5IGZhbGxiYWNrXHJcbiAgICAgICAgbWlzc2VzOiA1MCxcclxuICAgICAgICBlcnJvcnM6IDIsXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGVuc3VyZU1ldHJpY3NTaGFwZShtaXhlZERhdGEpO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQuY2FjaGUpLnRvRXF1YWwoe1xyXG4gICAgICBoaXRzOiA1MDAsIC8vIGNhbm9uaWNhbCB2YWx1ZSB1c2VkXHJcbiAgICAgIG1pc3NlczogNTAsIC8vIGxlZ2FjeSBmYWxsYmFjayB1c2VkXHJcbiAgICAgIHRvdGFsX3JlcXVlc3RzOiA2MDAsIC8vIGNhbm9uaWNhbCB2YWx1ZSB1c2VkICBcclxuICAgICAgaGl0X3JhdGU6IDAsIC8vIGRlZmF1bHQgc2luY2Ugbm90IHByb3ZpZGVkXHJcbiAgICAgIGVycm9yczogMiwgLy8gbGVnYWN5IGZhbGxiYWNrIHVzZWRcclxuICAgIH0pO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5vcmlnaW5GbGFncz8ubWFwcGVkTGVnYWN5KS50b0JlKHRydWUpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGNvZXJjZSBzdHJpbmcgbnVtYmVycyBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICBjb25zdCBzdHJpbmdEYXRhID0ge1xyXG4gICAgICBjYWNoZV9wZXJmb3JtYW5jZToge1xyXG4gICAgICAgIGhpdHM6ICcxNTAnLFxyXG4gICAgICAgIHRvdGFsX3JlcXVlc3RzOiAnMjAwJyxcclxuICAgICAgICBoaXRfcmF0ZTogJzc1LjUnLFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBlbnN1cmVNZXRyaWNzU2hhcGUoc3RyaW5nRGF0YSk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdC5jYWNoZS5oaXRzKS50b0JlKDE1MCk7XHJcbiAgICBleHBlY3QocmVzdWx0LmNhY2hlLnRvdGFsX3JlcXVlc3RzKS50b0JlKDIwMCk7XHJcbiAgICBleHBlY3QocmVzdWx0LmNhY2hlLmhpdF9yYXRlKS50b0JlKDc1LjUpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGhhbmRsZSBwYXJ0aWFsIGRhdGEgd2l0aCBtaXNzaW5nIGZpZWxkcyBkZWZhdWx0aW5nIHRvIHplcm8nLCAoKSA9PiB7XHJcbiAgICBjb25zdCBwYXJ0aWFsRGF0YSA9IHtcclxuICAgICAgY2FjaGVfcGVyZm9ybWFuY2U6IHtcclxuICAgICAgICBoaXRzOiAxMDAsXHJcbiAgICAgICAgLy8gbWlzc2luZzogbWlzc2VzLCB0b3RhbF9yZXF1ZXN0cywgaGl0X3JhdGUsIGVycm9yc1xyXG4gICAgICB9LFxyXG4gICAgICBhcGlfcGVyZm9ybWFuY2U6IHtcclxuICAgICAgICAnL2hlYWx0aCc6IHtcclxuICAgICAgICAgIHRvdGFsX2NhbGxzOiA1MCxcclxuICAgICAgICAgIGVycm9yczogMixcclxuICAgICAgICAgIGF2Z190aW1lX21zOiA0NS4yLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGVuc3VyZU1ldHJpY3NTaGFwZShwYXJ0aWFsRGF0YSk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdC5jYWNoZSkudG9FcXVhbCh7XHJcbiAgICAgIGhpdHM6IDEwMCxcclxuICAgICAgbWlzc2VzOiAwLCAvLyBkZWZhdWx0XHJcbiAgICAgIHRvdGFsX3JlcXVlc3RzOiAwLCAvLyBkZWZhdWx0XHJcbiAgICAgIGhpdF9yYXRlOiAwLCAvLyBkZWZhdWx0XHJcbiAgICAgIGVycm9yczogMCwgLy8gZGVmYXVsdFxyXG4gICAgfSk7XHJcbiAgICBleHBlY3QocmVzdWx0LmFwaSkudG9FcXVhbCh7XHJcbiAgICAgIHRvdGFsX3JlcXVlc3RzOiA1MCwgLy8gYWdncmVnYXRlZCBmcm9tIGFwaV9wZXJmb3JtYW5jZVxyXG4gICAgICBzdWNjZXNzX3JlcXVlc3RzOiA0OCwgLy8gdG90YWwgLSBlcnJvcnNcclxuICAgICAgZXJyb3JfcmVxdWVzdHM6IDIsIC8vIGFnZ3JlZ2F0ZWQgZXJyb3JzXHJcbiAgICAgIGF2Z19sYXRlbmN5X21zOiA0NS4yLCAvLyBhdmVyYWdlZFxyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgZGV0ZWN0IGFuZCBmbGFnIGxlZ2FjeSBtYXBwaW5nJywgKCkgPT4ge1xyXG4gICAgY29uc3QgY29uc29sZVNweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ3dhcm4nKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pO1xyXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSAnZGV2ZWxvcG1lbnQnO1xyXG5cclxuICAgIGNvbnN0IGxlZ2FjeURhdGEgPSB7XHJcbiAgICAgIGFwaV9wZXJmb3JtYW5jZToge1xyXG4gICAgICAgICcvaGVhbHRoJzogeyB0b3RhbF9jYWxsczogMTAsIGVycm9yczogMSB9LFxyXG4gICAgICAgICcvbWxiL2dhbWVzJzogeyB0b3RhbF9jYWxsczogMjAsIGVycm9yczogMCB9LFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBlbnN1cmVNZXRyaWNzU2hhcGUobGVnYWN5RGF0YSk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdC5vcmlnaW5GbGFncz8ubWFwcGVkTGVnYWN5KS50b0JlKHRydWUpO1xyXG4gICAgZXhwZWN0KGNvbnNvbGVTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxyXG4gICAgICAnW01ldHJpY3NHdWFyZF0gVXNpbmcgbGVnYWN5IG1ldHJpY3Mgc3RydWN0dXJlIChjYWNoZV9wZXJmb3JtYW5jZS9hcGlfcGVyZm9ybWFuY2UpJyxcclxuICAgICAgJ0NvbnNpZGVyIG1pZ3JhdGluZyB0byBjYW5vbmljYWwgc3RydWN0dXJlIChjYWNoZS9hcGkpJ1xyXG4gICAgKTtcclxuXHJcbiAgICBjb25zb2xlU3B5Lm1vY2tSZXN0b3JlKCk7XHJcbiAgICBkZWxldGUgcHJvY2Vzcy5lbnYuTk9ERV9FTlY7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgYWdncmVnYXRlIEFQSSBwZXJmb3JtYW5jZSBzdGF0cyBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICBjb25zdCBhcGlEYXRhID0ge1xyXG4gICAgICBhcGlfcGVyZm9ybWFuY2U6IHtcclxuICAgICAgICAnL2hlYWx0aCc6IHtcclxuICAgICAgICAgIHRvdGFsX2NhbGxzOiAxMDAsXHJcbiAgICAgICAgICBlcnJvcnM6IDIsXHJcbiAgICAgICAgICBhdmdfdGltZV9tczogNDUuMixcclxuICAgICAgICB9LFxyXG4gICAgICAgICcvbWxiL2dhbWVzJzoge1xyXG4gICAgICAgICAgdG90YWxfY2FsbHM6IDUwLFxyXG4gICAgICAgICAgZXJyb3JzOiAxLFxyXG4gICAgICAgICAgYXZnX3RpbWVfbXM6IDEyMC41LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJy9tbC9wcmVkaWN0Jzoge1xyXG4gICAgICAgICAgdG90YWxfY2FsbHM6IDI1LFxyXG4gICAgICAgICAgZXJyb3JzOiAwLFxyXG4gICAgICAgICAgYXZnX3RpbWVfbXM6IDIwMC4wLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGVuc3VyZU1ldHJpY3NTaGFwZShhcGlEYXRhKTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LmFwaSkudG9FcXVhbCh7XHJcbiAgICAgIHRvdGFsX3JlcXVlc3RzOiAxNzUsIC8vIDEwMCArIDUwICsgMjVcclxuICAgICAgc3VjY2Vzc19yZXF1ZXN0czogMTcyLCAvLyAxNzUgLSAzIGVycm9yc1xyXG4gICAgICBlcnJvcl9yZXF1ZXN0czogMywgLy8gMiArIDEgKyAwXHJcbiAgICAgIGF2Z19sYXRlbmN5X21zOiAxMjEuOSwgLy8gKDQ1LjIgKyAxMjAuNSArIDIwMC4wKSAvIDNcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGhhbmRsZSBudWxsIGlucHV0IGdyYWNlZnVsbHknLCAoKSA9PiB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBlbnN1cmVNZXRyaWNzU2hhcGUobnVsbCk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdC5hcGkudG90YWxfcmVxdWVzdHMpLnRvQmUoMCk7XHJcbiAgICBleHBlY3QocmVzdWx0LmNhY2hlLnRvdGFsX3JlcXVlc3RzKS50b0JlKDApO1xyXG4gICAgZXhwZWN0KHJlc3VsdC50aW1lc3RhbXBzPy51cGRhdGVkX2F0KS50b01hdGNoKC9eXFxkezR9LVxcZHsyfS1cXGR7Mn1UXFxkezJ9OlxcZHsyfTpcXGR7Mn1cXC5cXGR7M31aJC8pO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGhhbmRsZSBJbmZpbml0eSBhbmQgTmFOIGluIG51bWVyaWMgZmllbGRzJywgKCkgPT4ge1xyXG4gICAgY29uc3QgYmFkRGF0YSA9IHtcclxuICAgICAgY2FjaGVfcGVyZm9ybWFuY2U6IHtcclxuICAgICAgICBoaXRzOiBJbmZpbml0eSxcclxuICAgICAgICBtaXNzZXM6IE5hTixcclxuICAgICAgICBoaXRfcmF0ZTogLUluZmluaXR5LFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBlbnN1cmVNZXRyaWNzU2hhcGUoYmFkRGF0YSk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdC5jYWNoZS5oaXRzKS50b0JlKDApOyAvLyBJbmZpbml0eSAtPiAwXHJcbiAgICBleHBlY3QocmVzdWx0LmNhY2hlLm1pc3NlcykudG9CZSgwKTsgLy8gTmFOIC0+IDBcclxuICAgIGV4cGVjdChyZXN1bHQuY2FjaGUuaGl0X3JhdGUpLnRvQmUoMCk7IC8vIC1JbmZpbml0eSAtPiAwXHJcbiAgfSk7XHJcbn0pOyJdLCJtYXBwaW5ncyI6Ijs7QUFJQSxJQUFBQSxtQkFBQSxHQUFBQyxPQUFBO0FBSkE7QUFDQTtBQUNBOztBQUlBQyxRQUFRLENBQUMsb0JBQW9CLEVB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