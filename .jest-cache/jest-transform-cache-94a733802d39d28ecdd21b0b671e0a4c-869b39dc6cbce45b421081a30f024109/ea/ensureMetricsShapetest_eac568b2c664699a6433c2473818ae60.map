{"version":3,"names":["_ensureMetricsShape","require","describe","beforeEach","jest","clearAllMocks","afterEach","restoreAllMocks","it","result","ensureMetricsShape","expect","toEqual","api","total_requests","success_requests","error_requests","avg_latency_ms","cache","hits","misses","hit_rate","errors","system_info","optimization_level","caching_strategy","monitoring","timestamps","updated_at","any","String","originFlags","legacyData","cache_performance","mappedLegacy","toBe","mixedData","stringData","partialData","api_performance","total_calls","avg_time_ms","consoleSpy","spyOn","console","mockImplementation","process","env","NODE_ENV","toHaveBeenCalledWith","mockRestore","apiData","toMatch","badData","Infinity","NaN"],"sources":["ensureMetricsShape.test.ts"],"sourcesContent":["/**\r\n * @jest-environment jsdom\r\n */\r\n\r\nimport { ensureMetricsShape } from '../ensureMetricsShape';\r\n\r\ndescribe('ensureMetricsShape', () => {\r\n  beforeEach(() => {\r\n    // Reset console warn spy before each test\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  afterEach(() => {\r\n    // Clean up console spy\r\n    jest.restoreAllMocks();\r\n  });\r\n\r\n  it('should return fully populated numeric fields with empty object input', () => {\r\n    const result = ensureMetricsShape({});\r\n    \r\n    expect(result).toEqual({\r\n      api: {\r\n        total_requests: 0,\r\n        success_requests: 0,\r\n        error_requests: 0,\r\n        avg_latency_ms: 0,\r\n      },\r\n      cache: {\r\n        hits: 0,\r\n        misses: 0,\r\n        total_requests: 0,\r\n        hit_rate: 0,\r\n        errors: 0,\r\n      },\r\n      system_info: {\r\n        optimization_level: 'Basic',\r\n        caching_strategy: 'Memory',\r\n        monitoring: 'Standard',\r\n      },\r\n      timestamps: {\r\n        updated_at: expect.any(String),\r\n      },\r\n      originFlags: {},\r\n    });\r\n  });\r\n\r\n  it('should handle legacy cache_performance shape only', () => {\r\n    const legacyData = {\r\n      cache_performance: {\r\n        hits: 312,\r\n        misses: 67,\r\n        total_requests: 379,\r\n        hit_rate: 82.3,\r\n        errors: 3,\r\n      },\r\n    };\r\n\r\n    const result = ensureMetricsShape(legacyData);\r\n\r\n    expect(result.cache).toEqual({\r\n      hits: 312,\r\n      misses: 67,\r\n      total_requests: 379,\r\n      hit_rate: 82.3,\r\n      errors: 3,\r\n    });\r\n    expect(result.originFlags?.mappedLegacy).toBe(true);\r\n  });\r\n\r\n  it('should handle mixed canonical and legacy with canonical winning', () => {\r\n    const mixedData = {\r\n      cache: {\r\n        hits: 500, // canonical wins\r\n        total_requests: 600,\r\n      },\r\n      cache_performance: {\r\n        hits: 300, // legacy fallback\r\n        misses: 50,\r\n        errors: 2,\r\n      },\r\n    };\r\n\r\n    const result = ensureMetricsShape(mixedData);\r\n\r\n    expect(result.cache).toEqual({\r\n      hits: 500, // canonical value used\r\n      misses: 50, // legacy fallback used\r\n      total_requests: 600, // canonical value used  \r\n      hit_rate: 0, // default since not provided\r\n      errors: 2, // legacy fallback used\r\n    });\r\n    expect(result.originFlags?.mappedLegacy).toBe(true);\r\n  });\r\n\r\n  it('should coerce string numbers correctly', () => {\r\n    const stringData = {\r\n      cache_performance: {\r\n        hits: '150',\r\n        total_requests: '200',\r\n        hit_rate: '75.5',\r\n      },\r\n    };\r\n\r\n    const result = ensureMetricsShape(stringData);\r\n\r\n    expect(result.cache.hits).toBe(150);\r\n    expect(result.cache.total_requests).toBe(200);\r\n    expect(result.cache.hit_rate).toBe(75.5);\r\n  });\r\n\r\n  it('should handle partial data with missing fields defaulting to zero', () => {\r\n    const partialData = {\r\n      cache_performance: {\r\n        hits: 100,\r\n        // missing: misses, total_requests, hit_rate, errors\r\n      },\r\n      api_performance: {\r\n        '/health': {\r\n          total_calls: 50,\r\n          errors: 2,\r\n          avg_time_ms: 45.2,\r\n        },\r\n      },\r\n    };\r\n\r\n    const result = ensureMetricsShape(partialData);\r\n\r\n    expect(result.cache).toEqual({\r\n      hits: 100,\r\n      misses: 0, // default\r\n      total_requests: 0, // default\r\n      hit_rate: 0, // default\r\n      errors: 0, // default\r\n    });\r\n    expect(result.api).toEqual({\r\n      total_requests: 50, // aggregated from api_performance\r\n      success_requests: 48, // total - errors\r\n      error_requests: 2, // aggregated errors\r\n      avg_latency_ms: 45.2, // averaged\r\n    });\r\n  });\r\n\r\n  it('should detect and flag legacy mapping', () => {\r\n    const consoleSpy = jest.spyOn(console, 'warn').mockImplementation(() => {});\r\n    process.env.NODE_ENV = 'development';\r\n\r\n    const legacyData = {\r\n      api_performance: {\r\n        '/health': { total_calls: 10, errors: 1 },\r\n        '/mlb/games': { total_calls: 20, errors: 0 },\r\n      },\r\n    };\r\n\r\n    const result = ensureMetricsShape(legacyData);\r\n\r\n    expect(result.originFlags?.mappedLegacy).toBe(true);\r\n    expect(consoleSpy).toHaveBeenCalledWith(\r\n      '[MetricsGuard] Using legacy metrics structure (cache_performance/api_performance)',\r\n      'Consider migrating to canonical structure (cache/api)'\r\n    );\r\n\r\n    consoleSpy.mockRestore();\r\n    delete process.env.NODE_ENV;\r\n  });\r\n\r\n  it('should aggregate API performance stats correctly', () => {\r\n    const apiData = {\r\n      api_performance: {\r\n        '/health': {\r\n          total_calls: 100,\r\n          errors: 2,\r\n          avg_time_ms: 45.2,\r\n        },\r\n        '/mlb/games': {\r\n          total_calls: 50,\r\n          errors: 1,\r\n          avg_time_ms: 120.5,\r\n        },\r\n        '/ml/predict': {\r\n          total_calls: 25,\r\n          errors: 0,\r\n          avg_time_ms: 200.0,\r\n        },\r\n      },\r\n    };\r\n\r\n    const result = ensureMetricsShape(apiData);\r\n\r\n    expect(result.api).toEqual({\r\n      total_requests: 175, // 100 + 50 + 25\r\n      success_requests: 172, // 175 - 3 errors\r\n      error_requests: 3, // 2 + 1 + 0\r\n      avg_latency_ms: 121.9, // (45.2 + 120.5 + 200.0) / 3\r\n    });\r\n  });\r\n\r\n  it('should handle null input gracefully', () => {\r\n    const result = ensureMetricsShape(null);\r\n\r\n    expect(result.api.total_requests).toBe(0);\r\n    expect(result.cache.total_requests).toBe(0);\r\n    expect(result.timestamps?.updated_at).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r\n  });\r\n\r\n  it('should handle Infinity and NaN in numeric fields', () => {\r\n    const badData = {\r\n      cache_performance: {\r\n        hits: Infinity,\r\n        misses: NaN,\r\n        hit_rate: -Infinity,\r\n      },\r\n    };\r\n\r\n    const result = ensureMetricsShape(badData);\r\n\r\n    expect(result.cache.hits).toBe(0); // Infinity -> 0\r\n    expect(result.cache.misses).toBe(0); // NaN -> 0\r\n    expect(result.cache.hit_rate).toBe(0); // -Infinity -> 0\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}