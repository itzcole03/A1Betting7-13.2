0a6bbd70f8731024283ac01f664f8978
"use strict";

// Mock dependencies
_getJestObj().mock('../AnalysisCacheService');
_getJestObj().mock('../propOllamaService');
_getJestObj().mock('../../types/errors');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _errors = require("../../types/errors");
var _AnalysisCacheService = require("../AnalysisCacheService");
var _PropAnalysisAggregator = require("../PropAnalysisAggregator");
var _propOllamaService = _interopRequireDefault(require("../propOllamaService"));
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
beforeAll(() => {
  jest.useFakeTimers();
});
afterAll(() => {
  jest.useRealTimers();
});
describe('PropAnalysisAggregator', () => {
  let aggregator;
  let mockCacheService;
  const mockRequest = {
    propId: '123',
    player: 'LeBron James',
    team: 'LAL',
    sport: 'NBA',
    statType: 'Points',
    line: 27.5,
    overOdds: 1.8,
    underOdds: 2.0
  };
  beforeEach(() => {
    jest.clearAllMocks();

    // Mock AnalysisCacheService
    mockCacheService = {
      get: jest.fn(),
      set: jest.fn(),
      has: jest.fn(),
      delete: jest.fn(),
      clear: jest.fn(),
      getStats: jest.fn()
    };
    _AnalysisCacheService.AnalysisCacheService.getInstance.mockReturnValue(mockCacheService);
    _AnalysisCacheService.AnalysisCacheService.generateCacheKey.mockReturnValue('cache-key-123');

    // Explicitly mock sendChatMessage as a Jest mock function
    _propOllamaService.default.sendChatMessage = jest.fn().mockResolvedValue({
      content: `OVER ANALYSIS:\nThis is the over analysis content.\nConfidence: 85%\nKey Factors:\n- Factor 1\n- Factor 2\n\nUNDER ANALYSIS:\nThis is the under analysis content.\nConfidence: 15%\nKey Factors:\n- Factor 3\n- Factor 4`,
      confidence: 0.85,
      model_used: 'llama2',
      response_time: 1500
    });

    // Create aggregator instance
    aggregator = new _PropAnalysisAggregator.PropAnalysisAggregator();
  });
  test('getAnalysis returns cached analysis if available', async () => {
    const cachedAnalysis = {
      overAnalysis: 'Cached over analysis',
      underAnalysis: 'Cached under analysis',
      confidenceOver: 80,
      confidenceUnder: 20,
      keyFactorsOver: ['Cached Factor 1', 'Cached Factor 2'],
      keyFactorsUnder: ['Cached Factor 3', 'Cached Factor 4'],
      dataQuality: 0.8,
      generationTime: 1500,
      modelUsed: 'llama2'
    };
    mockCacheService.get.mockReturnValue(cachedAnalysis);
    const result = await aggregator.getAnalysis(mockRequest);
    expect(result).toBe(cachedAnalysis);
    expect(mockCacheService.get).toHaveBeenCalledWith('cache-key-123');
    expect(_propOllamaService.default.sendChatMessage).not.toHaveBeenCalled();
  });
  test('getAnalysis returns stale analysis and refreshes in background', async () => {
    const staleAnalysis = {
      overAnalysis: 'Stale over analysis',
      underAnalysis: 'Stale under analysis',
      confidenceOver: 80,
      confidenceUnder: 20,
      keyFactorsOver: ['Stale Factor 1', 'Stale Factor 2'],
      keyFactorsUnder: ['Stale Factor 3', 'Stale Factor 4'],
      dataQuality: 0.8,
      generationTime: 1500,
      modelUsed: 'llama2',
      isStale: true
    };
    mockCacheService.get.mockReturnValue(staleAnalysis);
    const result = await aggregator.getAnalysis(mockRequest);
    expect(result).toEqual({
      ...staleAnalysis,
      isStale: true,
      timestamp: expect.any(String)
    });

    // Wait for background refresh to complete (simulate async)
    await Promise.resolve();
    await Promise.resolve();
    expect(_propOllamaService.default.sendChatMessage).toHaveBeenCalled();
    expect(mockCacheService.set).toHaveBeenCalled();
  });
  test('getAnalysis generates new analysis when cache is empty', async () => {
    mockCacheService.get.mockReturnValue(null);
    const result = await aggregator.getAnalysis(mockRequest);
    expect(result).toEqual({
      overAnalysis: 'This is the over analysis content.\nConfidence: 85%\nKey Factors:\n- Factor 1\n- Factor 2',
      underAnalysis: 'This is the under analysis content.\nConfidence: 15%\nKey Factors:\n- Factor 3\n- Factor 4',
      confidenceOver: 85,
      confidenceUnder: 15,
      keyFactorsOver: ['Factor 1', 'Factor 2'],
      keyFactorsUnder: ['Factor 3', 'Factor 4'],
      dataQuality: 0.8,
      generationTime: expect.any(Number),
      modelUsed: 'llama2'
    });
    expect(_propOllamaService.default.sendChatMessage).toHaveBeenCalled();
    expect(mockCacheService.set).toHaveBeenCalledWith('cache-key-123', result);
  });
  test('getAnalysis handles errors and generates fallback content', async () => {
    mockCacheService.get.mockReturnValue(null);

    // Mock propOllamaService to throw an error
    _propOllamaService.default.sendChatMessage.mockRejectedValue(new Error('Network error'));

    // Mock PropOllamaError.fromError with fallbackAvailable = true
    const mockError = {
      message: 'Network error',
      type: _errors.PropOllamaErrorType.NETWORK_ERROR,
      fallbackAvailable: true,
      isCritical: true,
      toString: () => 'Network error'
    };
    _errors.PropOllamaError.fromError.mockReturnValue(mockError);
    const result = await aggregator.getAnalysis(mockRequest);
    expect(result).toEqual({
      overAnalysis: expect.stringContaining('has a good chance of exceeding'),
      underAnalysis: expect.stringContaining('could limit'),
      confidenceOver: 65,
      confidenceUnder: 35,
      keyFactorsOver: ['Historical performance', 'Recent trends', 'Matchup factors'],
      keyFactorsUnder: ['Team dynamics', 'Game script', 'Defensive matchup'],
      dataQuality: 0.5,
      generationTime: 0,
      modelUsed: 'Fallback Generator',
      isFallback: true,
      error: mockError
    });
    expect(_propOllamaService.default.sendChatMessage).toHaveBeenCalled();
    expect(_errors.PropOllamaError.fromError).toHaveBeenCalled();
  });
  test('getAnalysis rethrows error if fallback is not available', async () => {
    mockCacheService.get.mockReturnValue(null);

    // Mock propOllamaService to throw an error
    _propOllamaService.default.sendChatMessage.mockRejectedValue(new Error('Critical error'));

    // Mock PropOllamaError.fromError with fallbackAvailable = false, as an Error instance

    class MockCriticalError extends Error {
      constructor(message) {
        super(message);
        this.name = 'MockCriticalError';
        this.type = _errors.PropOllamaErrorType.UNKNOWN_ERROR;
        this.fallbackAvailable = false;
        this.isCritical = true;
      }
    }
    _errors.PropOllamaError.fromError.mockReturnValue(new MockCriticalError('Critical error'));
    await expect(aggregator.getAnalysis(mockRequest)).rejects.toThrow('Critical error');
  });
  test('parseResponse extracts analysis sections correctly', () => {
    // (Removed raw text block that was causing syntax errors)
    const content = 'OVER ANALYSIS:\nThis is the over analysis content.\nConfidence: 85%\nKey Factors:\n- Factor 1\n- Factor 2\n\nUNDER ANALYSIS:\nThis is the under analysis content.\nConfidence: 15%\nKey Factors:\n- Factor 3\n- Factor 4';

    // Access private method using type assertion
    const parsed = aggregator.parseResponse(content);
    expect(parsed).toEqual({
      overAnalysis: 'This is the over analysis content.\nConfidence: 85%\nKey Factors:\n- Factor 1\n- Factor 2',
      underAnalysis: 'This is the under analysis content.\nConfidence: 15%\nKey Factors:\n- Factor 3\n- Factor 4',
      confidenceOver: 85,
      confidenceUnder: 15,
      keyFactorsOver: ['Factor 1', 'Factor 2'],
      keyFactorsUnder: ['Factor 3', 'Factor 4']
    });
  });
  test('parseResponse handles missing sections gracefully', () => {
    const content = 'Some unstructured content without clear sections';

    // Access private method using type assertion
    const parsed = aggregator.parseResponse(content);
    expect(parsed).toEqual({
      overAnalysis: 'No over analysis available',
      underAnalysis: 'No under analysis available',
      confidenceOver: undefined,
      confidenceUnder: undefined,
      keyFactorsOver: undefined,
      keyFactorsUnder: undefined
    });
  });
  test('buildPrompt creates appropriate prompt', () => {
    const context = {
      player: {
        name: 'LeBron James',
        team: 'LAL',
        position: 'Guard'
      },
      matchup: {
        opponent: 'GSW'
      },
      betting: {
        line: 27.5,
        overOdds: 1.8,
        underOdds: 2.0
      },
      predictions: {
        confidenceScores: {
          over: 0.75
        }
      }
    };

    // Access private method using type assertion
    const prompt = aggregator.buildPrompt(mockRequest, context);
    expect(prompt).toContain('LeBron James');
    expect(prompt).toContain('27.5');
    expect(prompt).toContain('OVER');
    expect(prompt).toContain('UNDER');
  });
  test('parseResponse extracts analysis sections correctly', () => {
    // (Removed raw text block that was causing syntax errors)
    const content = 'OVER ANALYSIS:\nThis is the over analysis content.\nConfidence: 85%\nKey Factors:\n- Factor 1\n- Factor 2\n\nUNDER ANALYSIS:\nThis is the under analysis content.\nConfidence: 15%\nKey Factors:\n- Factor 3\n- Factor 4';

    // Access private method using type assertion
    const parsed = aggregator.parseResponse(content);
    expect(parsed).toEqual({
      overAnalysis: 'This is the over analysis content.\nConfidence: 85%\nKey Factors:\n- Factor 1\n- Factor 2',
      underAnalysis: 'This is the under analysis content.\nConfidence: 15%\nKey Factors:\n- Factor 3\n- Factor 4',
      confidenceOver: 85,
      confidenceUnder: 15,
      keyFactorsOver: ['Factor 1', 'Factor 2'],
      keyFactorsUnder: ['Factor 3', 'Factor 4']
    });
  });
  test('parseResponse handles missing sections gracefully', () => {
    const content = 'Some unstructured content without clear sections';

    // Access private method using type assertion
    const parsed = aggregator.parseResponse(content);
    expect(parsed).toEqual({
      overAnalysis: 'No over analysis available',
      underAnalysis: 'No under analysis available',
      confidenceOver: undefined,
      confidenceUnder: undefined,
      keyFactorsOver: undefined,
      keyFactorsUnder: undefined
    });
  });
  test('buildPrompt creates appropriate prompt', () => {
    const context = {
      player: {
        name: 'LeBron James',
        team: 'LAL',
        position: 'Guard'
      },
      matchup: {
        opponent: 'GSW'
      },
      betting: {
        line: 27.5,
        overOdds: 1.8,
        underOdds: 2.0
      },
      predictions: {
        confidenceScores: {
          over: 0.75
        }
      }
    };

    // Access private method using type assertion
    const prompt = aggregator.buildPrompt(mockRequest, context);
    expect(prompt).toContain('LeBron James');
    expect(prompt).toContain('27.5');
    expect(prompt).toContain('OVER');
    expect(prompt).toContain('UNDER');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9lcnJvcnMiLCJfQW5hbHlzaXNDYWNoZVNlcnZpY2UiLCJfUHJvcEFuYWx5c2lzQWdncmVnYXRvciIsIl9wcm9wT2xsYW1hU2VydmljZSIsImplc3QiLCJiZWZvcmVBbGwiLCJ1c2VGYWtlVGltZXJzIiwiYWZ0ZXJBbGwiLCJ1c2VSZWFsVGltZXJzIiwiZGVzY3JpYmUiLCJhZ2dyZWdhdG9yIiwibW9ja0NhY2hlU2VydmljZSIsIm1vY2tSZXF1ZXN0IiwicHJvcElkIiwicGxheWVyIiwidGVhbSIsInNwb3J0Iiwic3RhdFR5cGUiLCJsaW5lIiwib3Zlck9kZHMiLCJ1bmRlck9kZHMiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsImdldCIsImZuIiwic2V0IiwiaGFzIiwiZGVsZXRlIiwiY2xlYXIiLCJnZXRTdGF0cyIsIkFuYWx5c2lzQ2FjaGVTZXJ2aWNlIiwiZ2V0SW5zdGFuY2UiLCJtb2NrUmV0dXJuVmFsdWUiLCJnZW5lcmF0ZUNhY2hlS2V5IiwicHJvcE9sbGFtYVNlcnZpY2UiLCJzZW5kQ2hhdE1lc3NhZ2UiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImNvbnRlbnQiLCJjb25maWRlbmNlIiwibW9kZWxfdXNlZCIsInJlc3BvbnNlX3RpbWUiLCJQcm9wQW5hbHlzaXNBZ2dyZWdhdG9yIiwidGVzdCIsImNhY2hlZEFuYWx5c2lzIiwib3ZlckFuYWx5c2lzIiwidW5kZXJBbmFseXNpcyIsImNvbmZpZGVuY2VPdmVyIiwiY29uZmlkZW5jZVVuZGVyIiwia2V5RmFjdG9yc092ZXIiLCJrZXlGYWN0b3JzVW5kZXIiLCJkYXRhUXVhbGl0eSIsImdlbmVyYXRpb25UaW1lIiwibW9kZWxVc2VkIiwicmVzdWx0IiwiZ2V0QW5hbHlzaXMiLCJleHBlY3QiLCJ0b0JlIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJub3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwic3RhbGVBbmFseXNpcyIsImlzU3RhbGUiLCJ0b0VxdWFsIiwidGltZXN0YW1wIiwiYW55IiwiU3RyaW5nIiwiUHJvbWlzZSIsInJlc29sdmUiLCJOdW1iZXIiLCJtb2NrUmVqZWN0ZWRWYWx1ZSIsIkVycm9yIiwibW9ja0Vycm9yIiwibWVzc2FnZSIsInR5cGUiLCJQcm9wT2xsYW1hRXJyb3JUeXBlIiwiTkVUV09SS19FUlJPUiIsImZhbGxiYWNrQXZhaWxhYmxlIiwiaXNDcml0aWNhbCIsInRvU3RyaW5nIiwiUHJvcE9sbGFtYUVycm9yIiwiZnJvbUVycm9yIiwic3RyaW5nQ29udGFpbmluZyIsImlzRmFsbGJhY2siLCJlcnJvciIsIk1vY2tDcml0aWNhbEVycm9yIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiVU5LTk9XTl9FUlJPUiIsInJlamVjdHMiLCJ0b1Rocm93IiwicGFyc2VkIiwicGFyc2VSZXNwb25zZSIsInVuZGVmaW5lZCIsImNvbnRleHQiLCJwb3NpdGlvbiIsIm1hdGNodXAiLCJvcHBvbmVudCIsImJldHRpbmciLCJwcmVkaWN0aW9ucyIsImNvbmZpZGVuY2VTY29yZXMiLCJvdmVyIiwicHJvbXB0IiwiYnVpbGRQcm9tcHQiLCJ0b0NvbnRhaW4iXSwic291cmNlcyI6WyJQcm9wQW5hbHlzaXNBZ2dyZWdhdG9yLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvcE9sbGFtYUVycm9yLCBQcm9wT2xsYW1hRXJyb3JUeXBlIH0gZnJvbSAnLi4vLi4vdHlwZXMvZXJyb3JzJztcclxuaW1wb3J0IHsgQW5hbHlzaXNDYWNoZVNlcnZpY2UgfSBmcm9tICcuLi9BbmFseXNpc0NhY2hlU2VydmljZSc7XHJcbmltcG9ydCB7IFByb3BBbmFseXNpc0FnZ3JlZ2F0b3IsIFByb3BBbmFseXNpc1JlcXVlc3QgfSBmcm9tICcuLi9Qcm9wQW5hbHlzaXNBZ2dyZWdhdG9yJztcclxuaW1wb3J0IHByb3BPbGxhbWFTZXJ2aWNlIGZyb20gJy4uL3Byb3BPbGxhbWFTZXJ2aWNlJztcclxuYmVmb3JlQWxsKCgpID0+IHtcclxuICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcclxufSk7XHJcbmFmdGVyQWxsKCgpID0+IHtcclxuICBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcclxufSk7XHJcblxyXG4vLyBNb2NrIGRlcGVuZGVuY2llc1xyXG5qZXN0Lm1vY2soJy4uL0FuYWx5c2lzQ2FjaGVTZXJ2aWNlJyk7XHJcbmplc3QubW9jaygnLi4vcHJvcE9sbGFtYVNlcnZpY2UnKTtcclxuamVzdC5tb2NrKCcuLi8uLi90eXBlcy9lcnJvcnMnKTtcclxuXHJcbmRlc2NyaWJlKCdQcm9wQW5hbHlzaXNBZ2dyZWdhdG9yJywgKCkgPT4ge1xyXG4gIGxldCBhZ2dyZWdhdG9yOiBQcm9wQW5hbHlzaXNBZ2dyZWdhdG9yO1xyXG4gIGxldCBtb2NrQ2FjaGVTZXJ2aWNlOiBqZXN0Lk1vY2tlZDxBbmFseXNpc0NhY2hlU2VydmljZT47XHJcblxyXG4gIGNvbnN0IG1vY2tSZXF1ZXN0OiBQcm9wQW5hbHlzaXNSZXF1ZXN0ID0ge1xyXG4gICAgcHJvcElkOiAnMTIzJyxcclxuICAgIHBsYXllcjogJ0xlQnJvbiBKYW1lcycsXHJcbiAgICB0ZWFtOiAnTEFMJyxcclxuICAgIHNwb3J0OiAnTkJBJyxcclxuICAgIHN0YXRUeXBlOiAnUG9pbnRzJyxcclxuICAgIGxpbmU6IDI3LjUsXHJcbiAgICBvdmVyT2RkczogMS44LFxyXG4gICAgdW5kZXJPZGRzOiAyLjAsXHJcbiAgfTtcclxuXHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcclxuXHJcbiAgICAvLyBNb2NrIEFuYWx5c2lzQ2FjaGVTZXJ2aWNlXHJcbiAgICBtb2NrQ2FjaGVTZXJ2aWNlID0ge1xyXG4gICAgICBnZXQ6IGplc3QuZm4oKSxcclxuICAgICAgc2V0OiBqZXN0LmZuKCksXHJcbiAgICAgIGhhczogamVzdC5mbigpLFxyXG4gICAgICBkZWxldGU6IGplc3QuZm4oKSxcclxuICAgICAgY2xlYXI6IGplc3QuZm4oKSxcclxuICAgICAgZ2V0U3RhdHM6IGplc3QuZm4oKSxcclxuICAgIH0gYXMgdW5rbm93biBhcyBqZXN0Lk1vY2tlZDxBbmFseXNpc0NhY2hlU2VydmljZT47XHJcblxyXG4gICAgKEFuYWx5c2lzQ2FjaGVTZXJ2aWNlLmdldEluc3RhbmNlIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKG1vY2tDYWNoZVNlcnZpY2UpO1xyXG4gICAgKEFuYWx5c2lzQ2FjaGVTZXJ2aWNlLmdlbmVyYXRlQ2FjaGVLZXkgYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoJ2NhY2hlLWtleS0xMjMnKTtcclxuXHJcbiAgICAvLyBFeHBsaWNpdGx5IG1vY2sgc2VuZENoYXRNZXNzYWdlIGFzIGEgSmVzdCBtb2NrIGZ1bmN0aW9uXHJcbiAgICBwcm9wT2xsYW1hU2VydmljZS5zZW5kQ2hhdE1lc3NhZ2UgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xyXG4gICAgICBjb250ZW50OiBgT1ZFUiBBTkFMWVNJUzpcXG5UaGlzIGlzIHRoZSBvdmVyIGFuYWx5c2lzIGNvbnRlbnQuXFxuQ29uZmlkZW5jZTogODUlXFxuS2V5IEZhY3RvcnM6XFxuLSBGYWN0b3IgMVxcbi0gRmFjdG9yIDJcXG5cXG5VTkRFUiBBTkFMWVNJUzpcXG5UaGlzIGlzIHRoZSB1bmRlciBhbmFseXNpcyBjb250ZW50LlxcbkNvbmZpZGVuY2U6IDE1JVxcbktleSBGYWN0b3JzOlxcbi0gRmFjdG9yIDNcXG4tIEZhY3RvciA0YCxcclxuICAgICAgY29uZmlkZW5jZTogMC44NSxcclxuICAgICAgbW9kZWxfdXNlZDogJ2xsYW1hMicsXHJcbiAgICAgIHJlc3BvbnNlX3RpbWU6IDE1MDAsXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYWdncmVnYXRvciBpbnN0YW5jZVxyXG4gICAgYWdncmVnYXRvciA9IG5ldyBQcm9wQW5hbHlzaXNBZ2dyZWdhdG9yKCk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ2dldEFuYWx5c2lzIHJldHVybnMgY2FjaGVkIGFuYWx5c2lzIGlmIGF2YWlsYWJsZScsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGNhY2hlZEFuYWx5c2lzID0ge1xyXG4gICAgICBvdmVyQW5hbHlzaXM6ICdDYWNoZWQgb3ZlciBhbmFseXNpcycsXHJcbiAgICAgIHVuZGVyQW5hbHlzaXM6ICdDYWNoZWQgdW5kZXIgYW5hbHlzaXMnLFxyXG4gICAgICBjb25maWRlbmNlT3ZlcjogODAsXHJcbiAgICAgIGNvbmZpZGVuY2VVbmRlcjogMjAsXHJcbiAgICAgIGtleUZhY3RvcnNPdmVyOiBbJ0NhY2hlZCBGYWN0b3IgMScsICdDYWNoZWQgRmFjdG9yIDInXSxcclxuICAgICAga2V5RmFjdG9yc1VuZGVyOiBbJ0NhY2hlZCBGYWN0b3IgMycsICdDYWNoZWQgRmFjdG9yIDQnXSxcclxuICAgICAgZGF0YVF1YWxpdHk6IDAuOCxcclxuICAgICAgZ2VuZXJhdGlvblRpbWU6IDE1MDAsXHJcbiAgICAgIG1vZGVsVXNlZDogJ2xsYW1hMicsXHJcbiAgICB9O1xyXG5cclxuICAgIG1vY2tDYWNoZVNlcnZpY2UuZ2V0Lm1vY2tSZXR1cm5WYWx1ZShjYWNoZWRBbmFseXNpcyk7XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYWdncmVnYXRvci5nZXRBbmFseXNpcyhtb2NrUmVxdWVzdCk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZShjYWNoZWRBbmFseXNpcyk7XHJcbiAgICBleHBlY3QobW9ja0NhY2hlU2VydmljZS5nZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdjYWNoZS1rZXktMTIzJyk7XHJcbiAgICBleHBlY3QocHJvcE9sbGFtYVNlcnZpY2Uuc2VuZENoYXRNZXNzYWdlKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdnZXRBbmFseXNpcyByZXR1cm5zIHN0YWxlIGFuYWx5c2lzIGFuZCByZWZyZXNoZXMgaW4gYmFja2dyb3VuZCcsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHN0YWxlQW5hbHlzaXMgPSB7XHJcbiAgICAgIG92ZXJBbmFseXNpczogJ1N0YWxlIG92ZXIgYW5hbHlzaXMnLFxyXG4gICAgICB1bmRlckFuYWx5c2lzOiAnU3RhbGUgdW5kZXIgYW5hbHlzaXMnLFxyXG4gICAgICBjb25maWRlbmNlT3ZlcjogODAsXHJcbiAgICAgIGNvbmZpZGVuY2VVbmRlcjogMjAsXHJcbiAgICAgIGtleUZhY3RvcnNPdmVyOiBbJ1N0YWxlIEZhY3RvciAxJywgJ1N0YWxlIEZhY3RvciAyJ10sXHJcbiAgICAgIGtleUZhY3RvcnNVbmRlcjogWydTdGFsZSBGYWN0b3IgMycsICdTdGFsZSBGYWN0b3IgNCddLFxyXG4gICAgICBkYXRhUXVhbGl0eTogMC44LFxyXG4gICAgICBnZW5lcmF0aW9uVGltZTogMTUwMCxcclxuICAgICAgbW9kZWxVc2VkOiAnbGxhbWEyJyxcclxuICAgICAgaXNTdGFsZTogdHJ1ZSxcclxuICAgIH07XHJcblxyXG4gICAgbW9ja0NhY2hlU2VydmljZS5nZXQubW9ja1JldHVyblZhbHVlKHN0YWxlQW5hbHlzaXMpO1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFnZ3JlZ2F0b3IuZ2V0QW5hbHlzaXMobW9ja1JlcXVlc3QpO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoe1xyXG4gICAgICAuLi5zdGFsZUFuYWx5c2lzLFxyXG4gICAgICBpc1N0YWxlOiB0cnVlLFxyXG4gICAgICB0aW1lc3RhbXA6IGV4cGVjdC5hbnkoU3RyaW5nKSxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFdhaXQgZm9yIGJhY2tncm91bmQgcmVmcmVzaCB0byBjb21wbGV0ZSAoc2ltdWxhdGUgYXN5bmMpXHJcbiAgICBhd2FpdCBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIGF3YWl0IFByb21pc2UucmVzb2x2ZSgpO1xyXG5cclxuICAgIGV4cGVjdChwcm9wT2xsYW1hU2VydmljZS5zZW5kQ2hhdE1lc3NhZ2UpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgIGV4cGVjdChtb2NrQ2FjaGVTZXJ2aWNlLnNldCkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdnZXRBbmFseXNpcyBnZW5lcmF0ZXMgbmV3IGFuYWx5c2lzIHdoZW4gY2FjaGUgaXMgZW1wdHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICBtb2NrQ2FjaGVTZXJ2aWNlLmdldC5tb2NrUmV0dXJuVmFsdWUobnVsbCk7XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYWdncmVnYXRvci5nZXRBbmFseXNpcyhtb2NrUmVxdWVzdCk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XHJcbiAgICAgIG92ZXJBbmFseXNpczpcclxuICAgICAgICAnVGhpcyBpcyB0aGUgb3ZlciBhbmFseXNpcyBjb250ZW50LlxcbkNvbmZpZGVuY2U6IDg1JVxcbktleSBGYWN0b3JzOlxcbi0gRmFjdG9yIDFcXG4tIEZhY3RvciAyJyxcclxuICAgICAgdW5kZXJBbmFseXNpczpcclxuICAgICAgICAnVGhpcyBpcyB0aGUgdW5kZXIgYW5hbHlzaXMgY29udGVudC5cXG5Db25maWRlbmNlOiAxNSVcXG5LZXkgRmFjdG9yczpcXG4tIEZhY3RvciAzXFxuLSBGYWN0b3IgNCcsXHJcbiAgICAgIGNvbmZpZGVuY2VPdmVyOiA4NSxcclxuICAgICAgY29uZmlkZW5jZVVuZGVyOiAxNSxcclxuICAgICAga2V5RmFjdG9yc092ZXI6IFsnRmFjdG9yIDEnLCAnRmFjdG9yIDInXSxcclxuICAgICAga2V5RmFjdG9yc1VuZGVyOiBbJ0ZhY3RvciAzJywgJ0ZhY3RvciA0J10sXHJcbiAgICAgIGRhdGFRdWFsaXR5OiAwLjgsXHJcbiAgICAgIGdlbmVyYXRpb25UaW1lOiBleHBlY3QuYW55KE51bWJlciksXHJcbiAgICAgIG1vZGVsVXNlZDogJ2xsYW1hMicsXHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3QocHJvcE9sbGFtYVNlcnZpY2Uuc2VuZENoYXRNZXNzYWdlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgICBleHBlY3QobW9ja0NhY2hlU2VydmljZS5zZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdjYWNoZS1rZXktMTIzJywgcmVzdWx0KTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgnZ2V0QW5hbHlzaXMgaGFuZGxlcyBlcnJvcnMgYW5kIGdlbmVyYXRlcyBmYWxsYmFjayBjb250ZW50JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgbW9ja0NhY2hlU2VydmljZS5nZXQubW9ja1JldHVyblZhbHVlKG51bGwpO1xyXG5cclxuICAgIC8vIE1vY2sgcHJvcE9sbGFtYVNlcnZpY2UgdG8gdGhyb3cgYW4gZXJyb3JcclxuICAgIChwcm9wT2xsYW1hU2VydmljZS5zZW5kQ2hhdE1lc3NhZ2UgYXMgamVzdC5Nb2NrKS5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ05ldHdvcmsgZXJyb3InKSk7XHJcblxyXG4gICAgLy8gTW9jayBQcm9wT2xsYW1hRXJyb3IuZnJvbUVycm9yIHdpdGggZmFsbGJhY2tBdmFpbGFibGUgPSB0cnVlXHJcbiAgICBjb25zdCBtb2NrRXJyb3IgPSB7XHJcbiAgICAgIG1lc3NhZ2U6ICdOZXR3b3JrIGVycm9yJyxcclxuICAgICAgdHlwZTogUHJvcE9sbGFtYUVycm9yVHlwZS5ORVRXT1JLX0VSUk9SLFxyXG4gICAgICBmYWxsYmFja0F2YWlsYWJsZTogdHJ1ZSxcclxuICAgICAgaXNDcml0aWNhbDogdHJ1ZSxcclxuICAgICAgdG9TdHJpbmc6ICgpID0+ICdOZXR3b3JrIGVycm9yJyxcclxuICAgIH07XHJcbiAgICAoUHJvcE9sbGFtYUVycm9yLmZyb21FcnJvciBhcyBqZXN0Lk1vY2spLm1vY2tSZXR1cm5WYWx1ZShtb2NrRXJyb3IpO1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFnZ3JlZ2F0b3IuZ2V0QW5hbHlzaXMobW9ja1JlcXVlc3QpO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoe1xyXG4gICAgICBvdmVyQW5hbHlzaXM6IGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdoYXMgYSBnb29kIGNoYW5jZSBvZiBleGNlZWRpbmcnKSxcclxuICAgICAgdW5kZXJBbmFseXNpczogZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ2NvdWxkIGxpbWl0JyksXHJcbiAgICAgIGNvbmZpZGVuY2VPdmVyOiA2NSxcclxuICAgICAgY29uZmlkZW5jZVVuZGVyOiAzNSxcclxuICAgICAga2V5RmFjdG9yc092ZXI6IFsnSGlzdG9yaWNhbCBwZXJmb3JtYW5jZScsICdSZWNlbnQgdHJlbmRzJywgJ01hdGNodXAgZmFjdG9ycyddLFxyXG4gICAgICBrZXlGYWN0b3JzVW5kZXI6IFsnVGVhbSBkeW5hbWljcycsICdHYW1lIHNjcmlwdCcsICdEZWZlbnNpdmUgbWF0Y2h1cCddLFxyXG4gICAgICBkYXRhUXVhbGl0eTogMC41LFxyXG4gICAgICBnZW5lcmF0aW9uVGltZTogMCxcclxuICAgICAgbW9kZWxVc2VkOiAnRmFsbGJhY2sgR2VuZXJhdG9yJyxcclxuICAgICAgaXNGYWxsYmFjazogdHJ1ZSxcclxuICAgICAgZXJyb3I6IG1vY2tFcnJvcixcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChwcm9wT2xsYW1hU2VydmljZS5zZW5kQ2hhdE1lc3NhZ2UpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgIGV4cGVjdChQcm9wT2xsYW1hRXJyb3IuZnJvbUVycm9yKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ2dldEFuYWx5c2lzIHJldGhyb3dzIGVycm9yIGlmIGZhbGxiYWNrIGlzIG5vdCBhdmFpbGFibGUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBtb2NrQ2FjaGVTZXJ2aWNlLmdldC5tb2NrUmV0dXJuVmFsdWUobnVsbCk7XHJcblxyXG4gICAgLy8gTW9jayBwcm9wT2xsYW1hU2VydmljZSB0byB0aHJvdyBhbiBlcnJvclxyXG4gICAgKHByb3BPbGxhbWFTZXJ2aWNlLnNlbmRDaGF0TWVzc2FnZSBhcyBqZXN0Lk1vY2spLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignQ3JpdGljYWwgZXJyb3InKSk7XHJcblxyXG4gICAgLy8gTW9jayBQcm9wT2xsYW1hRXJyb3IuZnJvbUVycm9yIHdpdGggZmFsbGJhY2tBdmFpbGFibGUgPSBmYWxzZSwgYXMgYW4gRXJyb3IgaW5zdGFuY2VcclxuXHJcbiAgICBjbGFzcyBNb2NrQ3JpdGljYWxFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgICAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gJ01vY2tDcml0aWNhbEVycm9yJztcclxuICAgICAgICAodGhpcyBhcyBhbnkpLnR5cGUgPSBQcm9wT2xsYW1hRXJyb3JUeXBlLlVOS05PV05fRVJST1I7XHJcbiAgICAgICAgKHRoaXMgYXMgYW55KS5mYWxsYmFja0F2YWlsYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICh0aGlzIGFzIGFueSkuaXNDcml0aWNhbCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIChQcm9wT2xsYW1hRXJyb3IuZnJvbUVycm9yIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKFxyXG4gICAgICBuZXcgTW9ja0NyaXRpY2FsRXJyb3IoJ0NyaXRpY2FsIGVycm9yJylcclxuICAgICk7XHJcblxyXG4gICAgYXdhaXQgZXhwZWN0KGFnZ3JlZ2F0b3IuZ2V0QW5hbHlzaXMobW9ja1JlcXVlc3QpKS5yZWplY3RzLnRvVGhyb3coJ0NyaXRpY2FsIGVycm9yJyk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3BhcnNlUmVzcG9uc2UgZXh0cmFjdHMgYW5hbHlzaXMgc2VjdGlvbnMgY29ycmVjdGx5JywgKCkgPT4ge1xyXG4gICAgLy8gKFJlbW92ZWQgcmF3IHRleHQgYmxvY2sgdGhhdCB3YXMgY2F1c2luZyBzeW50YXggZXJyb3JzKVxyXG4gICAgY29uc3QgY29udGVudCA9XHJcbiAgICAgICdPVkVSIEFOQUxZU0lTOlxcblRoaXMgaXMgdGhlIG92ZXIgYW5hbHlzaXMgY29udGVudC5cXG5Db25maWRlbmNlOiA4NSVcXG5LZXkgRmFjdG9yczpcXG4tIEZhY3RvciAxXFxuLSBGYWN0b3IgMlxcblxcblVOREVSIEFOQUxZU0lTOlxcblRoaXMgaXMgdGhlIHVuZGVyIGFuYWx5c2lzIGNvbnRlbnQuXFxuQ29uZmlkZW5jZTogMTUlXFxuS2V5IEZhY3RvcnM6XFxuLSBGYWN0b3IgM1xcbi0gRmFjdG9yIDQnO1xyXG5cclxuICAgIC8vIEFjY2VzcyBwcml2YXRlIG1ldGhvZCB1c2luZyB0eXBlIGFzc2VydGlvblxyXG4gICAgY29uc3QgcGFyc2VkID0gKGFnZ3JlZ2F0b3IgYXMgYW55KS5wYXJzZVJlc3BvbnNlKGNvbnRlbnQpO1xyXG5cclxuICAgIGV4cGVjdChwYXJzZWQpLnRvRXF1YWwoe1xyXG4gICAgICBvdmVyQW5hbHlzaXM6XHJcbiAgICAgICAgJ1RoaXMgaXMgdGhlIG92ZXIgYW5hbHlzaXMgY29udGVudC5cXG5Db25maWRlbmNlOiA4NSVcXG5LZXkgRmFjdG9yczpcXG4tIEZhY3RvciAxXFxuLSBGYWN0b3IgMicsXHJcbiAgICAgIHVuZGVyQW5hbHlzaXM6XHJcbiAgICAgICAgJ1RoaXMgaXMgdGhlIHVuZGVyIGFuYWx5c2lzIGNvbnRlbnQuXFxuQ29uZmlkZW5jZTogMTUlXFxuS2V5IEZhY3RvcnM6XFxuLSBGYWN0b3IgM1xcbi0gRmFjdG9yIDQnLFxyXG4gICAgICBjb25maWRlbmNlT3ZlcjogODUsXHJcbiAgICAgIGNvbmZpZGVuY2VVbmRlcjogMTUsXHJcbiAgICAgIGtleUZhY3RvcnNPdmVyOiBbJ0ZhY3RvciAxJywgJ0ZhY3RvciAyJ10sXHJcbiAgICAgIGtleUZhY3RvcnNVbmRlcjogWydGYWN0b3IgMycsICdGYWN0b3IgNCddLFxyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3BhcnNlUmVzcG9uc2UgaGFuZGxlcyBtaXNzaW5nIHNlY3Rpb25zIGdyYWNlZnVsbHknLCAoKSA9PiB7XHJcbiAgICBjb25zdCBjb250ZW50ID0gJ1NvbWUgdW5zdHJ1Y3R1cmVkIGNvbnRlbnQgd2l0aG91dCBjbGVhciBzZWN0aW9ucyc7XHJcblxyXG4gICAgLy8gQWNjZXNzIHByaXZhdGUgbWV0aG9kIHVzaW5nIHR5cGUgYXNzZXJ0aW9uXHJcbiAgICBjb25zdCBwYXJzZWQgPSAoYWdncmVnYXRvciBhcyBhbnkpLnBhcnNlUmVzcG9uc2UoY29udGVudCk7XHJcblxyXG4gICAgZXhwZWN0KHBhcnNlZCkudG9FcXVhbCh7XHJcbiAgICAgIG92ZXJBbmFseXNpczogJ05vIG92ZXIgYW5hbHlzaXMgYXZhaWxhYmxlJyxcclxuICAgICAgdW5kZXJBbmFseXNpczogJ05vIHVuZGVyIGFuYWx5c2lzIGF2YWlsYWJsZScsXHJcbiAgICAgIGNvbmZpZGVuY2VPdmVyOiB1bmRlZmluZWQsXHJcbiAgICAgIGNvbmZpZGVuY2VVbmRlcjogdW5kZWZpbmVkLFxyXG4gICAgICBrZXlGYWN0b3JzT3ZlcjogdW5kZWZpbmVkLFxyXG4gICAgICBrZXlGYWN0b3JzVW5kZXI6IHVuZGVmaW5lZCxcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdidWlsZFByb21wdCBjcmVhdGVzIGFwcHJvcHJpYXRlIHByb21wdCcsICgpID0+IHtcclxuICAgIGNvbnN0IGNvbnRleHQgPSB7XHJcbiAgICAgIHBsYXllcjoge1xyXG4gICAgICAgIG5hbWU6ICdMZUJyb24gSmFtZXMnLFxyXG4gICAgICAgIHRlYW06ICdMQUwnLFxyXG4gICAgICAgIHBvc2l0aW9uOiAnR3VhcmQnLFxyXG4gICAgICB9LFxyXG4gICAgICBtYXRjaHVwOiB7XHJcbiAgICAgICAgb3Bwb25lbnQ6ICdHU1cnLFxyXG4gICAgICB9LFxyXG4gICAgICBiZXR0aW5nOiB7XHJcbiAgICAgICAgbGluZTogMjcuNSxcclxuICAgICAgICBvdmVyT2RkczogMS44LFxyXG4gICAgICAgIHVuZGVyT2RkczogMi4wLFxyXG4gICAgICB9LFxyXG4gICAgICBwcmVkaWN0aW9uczoge1xyXG4gICAgICAgIGNvbmZpZGVuY2VTY29yZXM6IHtcclxuICAgICAgICAgIG92ZXI6IDAuNzUsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIH07XHJcblxyXG4gICAgLy8gQWNjZXNzIHByaXZhdGUgbWV0aG9kIHVzaW5nIHR5cGUgYXNzZXJ0aW9uXHJcbiAgICBjb25zdCBwcm9tcHQgPSAoYWdncmVnYXRvciBhcyBhbnkpLmJ1aWxkUHJvbXB0KG1vY2tSZXF1ZXN0LCBjb250ZXh0KTtcclxuXHJcbiAgICBleHBlY3QocHJvbXB0KS50b0NvbnRhaW4oJ0xlQnJvbiBKYW1lcycpO1xyXG4gICAgZXhwZWN0KHByb21wdCkudG9Db250YWluKCcyNy41Jyk7XHJcbiAgICBleHBlY3QocHJvbXB0KS50b0NvbnRhaW4oJ09WRVInKTtcclxuICAgIGV4cGVjdChwcm9tcHQpLnRvQ29udGFpbignVU5ERVInKTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgncGFyc2VSZXNwb25zZSBleHRyYWN0cyBhbmFseXNpcyBzZWN0aW9ucyBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICAvLyAoUmVtb3ZlZCByYXcgdGV4dCBibG9jayB0aGF0IHdhcyBjYXVzaW5nIHN5bnRheCBlcnJvcnMpXHJcbiAgICBjb25zdCBjb250ZW50ID1cclxuICAgICAgJ09WRVIgQU5BTFlTSVM6XFxuVGhpcyBpcyB0aGUgb3ZlciBhbmFseXNpcyBjb250ZW50LlxcbkNvbmZpZGVuY2U6IDg1JVxcbktleSBGYWN0b3JzOlxcbi0gRmFjdG9yIDFcXG4tIEZhY3RvciAyXFxuXFxuVU5ERVIgQU5BTFlTSVM6XFxuVGhpcyBpcyB0aGUgdW5kZXIgYW5hbHlzaXMgY29udGVudC5cXG5Db25maWRlbmNlOiAxNSVcXG5LZXkgRmFjdG9yczpcXG4tIEZhY3RvciAzXFxuLSBGYWN0b3IgNCc7XHJcblxyXG4gICAgLy8gQWNjZXNzIHByaXZhdGUgbWV0aG9kIHVzaW5nIHR5cGUgYXNzZXJ0aW9uXHJcbiAgICBjb25zdCBwYXJzZWQgPSAoYWdncmVnYXRvciBhcyBhbnkpLnBhcnNlUmVzcG9uc2UoY29udGVudCk7XHJcblxyXG4gICAgZXhwZWN0KHBhcnNlZCkudG9FcXVhbCh7XHJcbiAgICAgIG92ZXJBbmFseXNpczpcclxuICAgICAgICAnVGhpcyBpcyB0aGUgb3ZlciBhbmFseXNpcyBjb250ZW50LlxcbkNvbmZpZGVuY2U6IDg1JVxcbktleSBGYWN0b3JzOlxcbi0gRmFjdG9yIDFcXG4tIEZhY3RvciAyJyxcclxuICAgICAgdW5kZXJBbmFseXNpczpcclxuICAgICAgICAnVGhpcyBpcyB0aGUgdW5kZXIgYW5hbHlzaXMgY29udGVudC5cXG5Db25maWRlbmNlOiAxNSVcXG5LZXkgRmFjdG9yczpcXG4tIEZhY3RvciAzXFxuLSBGYWN0b3IgNCcsXHJcbiAgICAgIGNvbmZpZGVuY2VPdmVyOiA4NSxcclxuICAgICAgY29uZmlkZW5jZVVuZGVyOiAxNSxcclxuICAgICAga2V5RmFjdG9yc092ZXI6IFsnRmFjdG9yIDEnLCAnRmFjdG9yIDInXSxcclxuICAgICAga2V5RmFjdG9yc1VuZGVyOiBbJ0ZhY3RvciAzJywgJ0ZhY3RvciA0J10sXHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgncGFyc2VSZXNwb25zZSBoYW5kbGVzIG1pc3Npbmcgc2VjdGlvbnMgZ3JhY2VmdWxseScsICgpID0+IHtcclxuICAgIGNvbnN0IGNvbnRlbnQgPSAnU29tZSB1bnN0cnVjdHVyZWQgY29udGVudCB3aXRob3V0IGNsZWFyIHNlY3Rpb25zJztcclxuXHJcbiAgICAvLyBBY2Nlc3MgcHJpdmF0ZSBtZXRob2QgdXNpbmcgdHlwZSBhc3NlcnRpb25cclxuICAgIGNvbnN0IHBhcnNlZCA9IChhZ2dyZWdhdG9yIGFzIGFueSkucGFyc2VSZXNwb25zZShjb250ZW50KTtcclxuXHJcbiAgICBleHBlY3QocGFyc2VkKS50b0VxdWFsKHtcclxuICAgICAgb3ZlckFuYWx5c2lzOiAnTm8gb3ZlciBhbmFseXNpcyBhdmFpbGFibGUnLFxyXG4gICAgICB1bmRlckFuYWx5c2lzOiAnTm8gdW5kZXIgYW5hbHlzaXMgYXZhaWxhYmxlJyxcclxuICAgICAgY29uZmlkZW5jZU92ZXI6IHVuZGVmaW5lZCxcclxuICAgICAgY29uZmlkZW5jZVVuZGVyOiB1bmRlZmluZWQsXHJcbiAgICAgIGtleUZhY3RvcnNPdmVyOiB1bmRlZmluZWQsXHJcbiAgICAgIGtleUZhY3RvcnNVbmRlcjogdW5kZWZpbmVkLFxyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ2J1aWxkUHJvbXB0IGNyZWF0ZXMgYXBwcm9wcmlhdGUgcHJvbXB0JywgKCkgPT4ge1xyXG4gICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgcGxheWVyOiB7XHJcbiAgICAgICAgbmFtZTogJ0xlQnJvbiBKYW1lcycsXHJcbiAgICAgICAgdGVhbTogJ0xBTCcsXHJcbiAgICAgICAgcG9zaXRpb246ICdHdWFyZCcsXHJcbiAgICAgIH0sXHJcbiAgICAgIG1hdGNodXA6IHtcclxuICAgICAgICBvcHBvbmVudDogJ0dTVycsXHJcbiAgICAgIH0sXHJcbiAgICAgIGJldHRpbmc6IHtcclxuICAgICAgICBsaW5lOiAyNy41LFxyXG4gICAgICAgIG92ZXJPZGRzOiAxLjgsXHJcbiAgICAgICAgdW5kZXJPZGRzOiAyLjAsXHJcbiAgICAgIH0sXHJcbiAgICAgIHByZWRpY3Rpb25zOiB7XHJcbiAgICAgICAgY29uZmlkZW5jZVNjb3Jlczoge1xyXG4gICAgICAgICAgb3ZlcjogMC43NSxcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBBY2Nlc3MgcHJpdmF0ZSBtZXRob2QgdXNpbmcgdHlwZSBhc3NlcnRpb25cclxuICAgIGNvbnN0IHByb21wdCA9IChhZ2dyZWdhdG9yIGFzIGFueSkuYnVpbGRQcm9tcHQobW9ja1JlcXVlc3QsIGNvbnRleHQpO1xyXG5cclxuICAgIGV4cGVjdChwcm9tcHQpLnRvQ29udGFpbignTGVCcm9uIEphbWVzJyk7XHJcbiAgICBleHBlY3QocHJvbXB0KS50b0NvbnRhaW4oJzI3LjUnKTtcclxuICAgIGV4cGVjdChwcm9tcHQpLnRvQ29udGFpbignT1ZFUicpO1xyXG4gICAgZXhwZWN0KHByb21wdCkudG9Db250YWluKCdVTkRFUicpO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQVdBO0FBQ0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHlCQUF5QixDQUFDO0FBQ3BDRCxXQUFBLEdBQUtDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztBQUNqQ0QsV0FBQSxHQUFLQyxJQUFJLENBQUMsb0JBQW9CLENBQUM7QUFBQyxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBZGhDLElBQUFDLE9BQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLHFCQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyx1QkFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksa0JBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFxRCxTQUFBSCxZQUFBO0VBQUE7SUFBQVE7RUFBQSxJQUFBTCxPQUFBO0VBQUFILFdBQUEsR0FBQUEsQ0FBQSxLQUFBUSxJQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBQ3JEQyxTQUFTLENBQUMsTUFBTTtFQUNkRCxJQUFJLENBQUNFLGFBQWEsQ0FBQyxDQUFDO0FBQ3RCLENBQUMsQ0FBQztBQUNGQyxRQUFRLENBQUMsTUFBTTtFQUNiSCxJQUFJLENBQUNJLGFBQWEsQ0FBQyxDQUFDO0FBQ3RCLENBQUMsQ0FBQztBQU9GQyxRQUFRLENBQUMsd0JBQXdCLEVBQUUsTUFBTTtFQUN2QyxJQUFJQyxVQUFrQztFQUN0QyxJQUFJQyxnQkFBbUQ7RUFFdkQsTUFBTUMsV0FBZ0MsR0FBRztJQUN2Q0MsTUFBTSxFQUFFLEtBQUs7SUFDYkMsTUFBTSxFQUFFLGNBQWM7SUFDdEJDLElBQUksRUFBRSxLQUFLO0lBQ1hDLEtBQUssRUFBRSxLQUFLO0lBQ1pDLFFBQVEsRUFBRSxRQUFR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LENBQUM7RUFDSixDQUFDLENBQUM7RUFFRlAsSUFBSSxDQUFDLG1EQUFtRCxFQUFFLE1BQU07SUFDOUQsTUFBTUwsT0FBTyxHQUFHLGtEQUFrRDs7SUFFbEU7SUFDQSxNQUFNcUQsTUFBTSxHQUFJaEYsVUFBVSxDQUFTaUYsYUFBYSxDQUFDdEQsT0FBTyxDQUFDO0lBRXpEa0IsTUFBTSxDQUFDbUMsTUFBTSxDQUFDLENBQUM1QixPQUFPLENBQUM7TUFDckJsQixZQUFZLEVBQUUsNEJBQTRCO01BQzFDQyxhQUFhLEVBQUUsNkJBQTZCO01BQzVDQyxjQUFjLEVBQUU4QyxTQUFTO01BQ3pCN0MsZUFBZSxFQUFFNkMsU0FBUztNQUMxQjVDLGNBQWMsRUFBRTRDLFNBQVM7TUFDekIzQyxlQUFlLEVBQUUyQztJQUNuQixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFFRmxELElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxNQUFNO0lBQ25ELE1BQU1tRCxPQUFPLEdBQUc7TUFDZC9FLE1BQU0sRUFBRTtRQUNOd0UsSUFBSSxFQUFFLGNBQWM7UUFDcEJ2RSxJQUFJLEVBQUUsS0FBSztRQUNYK0UsUUFBUSxFQUFFO01BQ1osQ0FBQztNQUNEQyxPQUFPLEVBQUU7UUFDUEMsUUFBUSxFQUFFO01BQ1osQ0FBQztNQUNEQyxPQUFPLEVBQUU7UUFDUC9FLElBQUksRUFBRSxJQUFJO1FBQ1ZDLFFBQVEsRUFBRSxHQUFHO1FBQ2JDLFNBQVMsRUFBRTtNQUNiLENBQUM7TUFDRDhFLFdBQVcsRUFBRTtRQUNYQyxnQkFBZ0IsRUFBRTtVQUNoQkMsSUFBSSxFQUFFO1FBQ1I7TUFDRjtJQUNGLENBQUM7O0lBRUQ7SUFDQSxNQUFNQyxNQUFNLEdBQUkzRixVQUFVLENBQVM0RixXQUFXLENBQUMxRixXQUFXLEVBQUVpRixPQUFPLENBQUM7SUFFcEV0QyxNQUFNLENBQUM4QyxNQUFNLENBQUMsQ0FBQ0UsU0FBUyxDQUFDLGNBQWMsQ0FBQztJQUN4Q2hELE1BQU0sQ0FBQzhDLE1BQU0sQ0FBQyxDQUFDRSxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ2hDaEQsTUFBTSxDQUFDOEMsTUFBTSxDQUFDLENBQUNFLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDaENoRCxNQUFNLENBQUM4QyxNQUFNLENBQUMsQ0FBQ0UsU0FBUyxDQUFDLE9BQU8sQ0FBQztFQUNuQyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=