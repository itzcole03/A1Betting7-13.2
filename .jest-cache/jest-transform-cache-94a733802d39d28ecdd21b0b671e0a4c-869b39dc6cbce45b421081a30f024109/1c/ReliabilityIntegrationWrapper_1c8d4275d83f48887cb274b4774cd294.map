{"version":3,"names":["_react","_interopRequireWildcard","require","_reliabilityMonitoringOrchestrator","_enhancedLogger","_jsxRuntime","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","ReliabilityIntegrationWrapper","children","enableMonitoring","monitoringLevel","onCriticalIssue","reliabilityReport","setReliabilityReport","useState","isMonitoringActive","setIsMonitoringActive","monitoringConfig","useMemo","minimal","checkInterval","enablePerformanceTracking","enableDataPipelineMonitoring","enableServiceHealthChecks","enableAutoRecovery","standard","comprehensive","enableTrendAnalysis","enablePredictiveAlerts","currentConfig","useEffect","devLeanMode","localStorage","getItem","URLSearchParams","window","location","search","enhancedLogger","info","monitoringInterval","isComponentMounted","initializeMonitoring","reliabilityMonitoringOrchestrator","initialize","initConfig","e2","warn","undefined","_","setInterval","generateFn","generateReport","report","rawHealth","overallHealth","toUpperCase","alerts","alertMsg","message","requestIdleCallback","setTimeout","error","clearInterval","cleanup","process","env","NODE_ENV","reportObj","toString","String","debug","performanceScore","performanceMetrics","serviceHealth","activeAlerts","Array","isArray","length","autoRecoveryActions","jsxs","Fragment","normalized","backgroundColor","title","jsx","style","position","bottom","right","width","height","borderRadius","zIndex","opacity","pointerEvents","exports","_default"],"sources":["ReliabilityIntegrationWrapper.tsx"],"sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\r\nimport { reliabilityMonitoringOrchestrator } from '../../services/reliabilityMonitoringOrchestrator';\r\nimport type { ReliabilityReport } from '../../services/reliabilityMonitoringOrchestrator';\r\nimport { enhancedLogger } from '../../utils/enhancedLogger';\r\n\r\ninterface ReliabilityIntegrationWrapperProps {\r\n  children: React.ReactNode;\r\n  enableMonitoring?: boolean;\r\n  monitoringLevel?: 'minimal' | 'standard' | 'comprehensive';\r\n  onCriticalIssue?: (issue: string) => void;\r\n}\r\n\r\ntype MonitoringConfig = {\r\n  checkInterval: number;\r\n  enablePerformanceTracking?: boolean;\r\n  enableDataPipelineMonitoring?: boolean;\r\n  enableServiceHealthChecks?: boolean;\r\n  enableAutoRecovery?: boolean;\r\n  enableTrendAnalysis?: boolean;\r\n  enablePredictiveAlerts?: boolean;\r\n};\r\n\r\n/**\r\n * Non-intrusive wrapper that integrates reliability monitoring without\r\n * affecting core application functionality. Operates silently in the background.\r\n */\r\nexport const ReliabilityIntegrationWrapper: React.FC<ReliabilityIntegrationWrapperProps> = ({\r\n  children,\r\n  enableMonitoring = true,\r\n  monitoringLevel = 'standard',\r\n  onCriticalIssue\r\n}) => {\r\n  const [reliabilityReport, setReliabilityReport] = useState<ReliabilityReport | null>(null);\r\n  const [isMonitoringActive, setIsMonitoringActive] = useState(false);\r\n\r\n  // Configuration based on monitoring level\r\n  const monitoringConfig = useMemo(() => ({\r\n    minimal: {\r\n      checkInterval: 30000, // 30 seconds\r\n      enablePerformanceTracking: false,\r\n      enableDataPipelineMonitoring: false,\r\n      enableServiceHealthChecks: true,\r\n      enableAutoRecovery: false\r\n    },\r\n    standard: {\r\n      checkInterval: 15000, // 15 seconds\r\n      enablePerformanceTracking: true,\r\n      enableDataPipelineMonitoring: true,\r\n      enableServiceHealthChecks: true,\r\n      enableAutoRecovery: true\r\n    },\r\n    comprehensive: {\r\n      checkInterval: 5000, // 5 seconds\r\n      enablePerformanceTracking: true,\r\n      enableDataPipelineMonitoring: true,\r\n      enableServiceHealthChecks: true,\r\n      enableAutoRecovery: true,\r\n      enableTrendAnalysis: true,\r\n      enablePredictiveAlerts: true\r\n    }\r\n  }), []);\r\n\r\n  const currentConfig = monitoringConfig[monitoringLevel];\r\n\r\n  // Initialize monitoring without blocking main thread\r\n  useEffect(() => {\r\n    if (!enableMonitoring) return;\r\n\r\n    // Stabilization: Check for lean mode\r\n    const devLeanMode = localStorage.getItem('DEV_LEAN_MODE') === 'true' || \r\n                        new URLSearchParams(window.location.search).get('lean') === 'true';\r\n    \r\n    if (devLeanMode) {\r\n      enhancedLogger.info('ReliabilityIntegration', 'initialize', 'Lean mode enabled - monitoring disabled');\r\n      return;\r\n    }\r\n\r\n    let monitoringInterval: NodeJS.Timeout;\r\n    let isComponentMounted = true;\r\n\r\n    const initializeMonitoring = async () => {\r\n      try {\r\n        // Initialize orchestrator silently. If the orchestrator expects no args, fall back to that.\r\n        if (typeof reliabilityMonitoringOrchestrator.initialize === 'function') {\r\n              try {\r\n                const initConfig: MonitoringConfig = {\r\n                  checkInterval: (currentConfig as MonitoringConfig).checkInterval,\r\n                  enablePerformanceTracking: (currentConfig as MonitoringConfig).enablePerformanceTracking,\r\n                  enableDataPipelineMonitoring: (currentConfig as MonitoringConfig).enableDataPipelineMonitoring,\r\n                  enableServiceHealthChecks: (currentConfig as MonitoringConfig).enableServiceHealthChecks,\r\n                  enableAutoRecovery: (currentConfig as MonitoringConfig).enableAutoRecovery,\r\n                  enableTrendAnalysis: (currentConfig as MonitoringConfig).enableTrendAnalysis || false,\r\n                  enablePredictiveAlerts: (currentConfig as MonitoringConfig).enablePredictiveAlerts || false,\r\n                };\r\n\r\n                // Try to initialize with a typed config, fallback to no-arg call\r\n                try {\r\n                  // Try calling initialize with the typed config. If it fails, try a no-arg call.\r\n                  await (reliabilityMonitoringOrchestrator.initialize as unknown as (...args: unknown[]) => Promise<unknown>)(initConfig as unknown);\r\n                } catch {\r\n                  try {\r\n                    await (reliabilityMonitoringOrchestrator.initialize as unknown as () => Promise<unknown>)();\r\n                  } catch (e2) {\r\n                    enhancedLogger.warn('ReliabilityIntegration', 'initialize', 'Orchestrator initialize fallback failed', undefined, e2 as Error);\r\n                  }\r\n                }\r\n              } catch (_) {\r\n                // Fallback handled above - continue\r\n              }\r\n        }\r\n\r\n        if (isComponentMounted) {\r\n          setIsMonitoringActive(true);\r\n        }\r\n\r\n        // Start non-blocking monitoring cycle\r\n        monitoringInterval = setInterval(async () => {\r\n          if (!isComponentMounted) return;\r\n\r\n          try {\r\n            // Generate report if the orchestrator exposes the method, otherwise skip\r\n            const generateFn = (reliabilityMonitoringOrchestrator as unknown as Record<string, unknown>)?.generateReport as\r\n              | undefined\r\n              | ((...args: unknown[]) => Promise<unknown>);\r\n            const report = typeof generateFn === 'function' ? await generateFn.call(reliabilityMonitoringOrchestrator) : null;\r\n\r\n            if (isComponentMounted) {\r\n              // store as any to avoid strict shape coupling during incremental typing fixes\r\n              setReliabilityReport(report as unknown as ReliabilityReport | null);\r\n\r\n              // Handle critical issues without disrupting user experience\r\n              const rawHealth = (report as unknown as Record<string, unknown>)?.overallHealth;\r\n              const overallHealth = typeof rawHealth === 'string' ? rawHealth.toUpperCase() : undefined;\r\n\r\n              if (overallHealth === 'CRITICAL' && onCriticalIssue) {\r\n                const alerts = (report as unknown as Record<string, unknown>)?.alerts as Array<Record<string, unknown>> | undefined;\r\n                const alertMsg = (alerts && alerts[0] && (alerts[0].message as string)) || 'Unknown issue';\r\n                // Use requestIdleCallback to ensure non-blocking execution\r\n                if ('requestIdleCallback' in window && typeof (window as unknown as Record<string, unknown>).requestIdleCallback === 'function') {\r\n                  (window as unknown as { requestIdleCallback: (cb: () => void) => void }).requestIdleCallback(() => {\r\n                    onCriticalIssue(`Critical system health issue detected: ${alertMsg}`);\r\n                  });\r\n                } else {\r\n                  // Fallback for browsers without requestIdleCallback\r\n                  setTimeout(() => {\r\n                    onCriticalIssue(`Critical system health issue detected: ${alertMsg}`);\r\n                  }, 0);\r\n                }\r\n              }\r\n            }\r\n          } catch (error) {\r\n            // Silent error handling - don't disrupt user experience\r\n            enhancedLogger.warn('ReliabilityIntegration', 'monitoringCycle', 'Monitoring error (non-critical)', undefined, error as Error);\r\n          }\r\n        }, currentConfig.checkInterval);\r\n\r\n      } catch (error) {\r\n        // Silent initialization failure - continue without monitoring\r\n        enhancedLogger.warn('ReliabilityIntegration', 'initialize', 'Failed to initialize monitoring (continuing without)', undefined, error as Error);\r\n      }\r\n    };\r\n\r\n    // Use requestIdleCallback for non-blocking initialization\r\n    if ('requestIdleCallback' in window) {\r\n      window.requestIdleCallback(initializeMonitoring);\r\n    } else {\r\n      // Fallback for browsers without requestIdleCallback\r\n      setTimeout(initializeMonitoring, 100);\r\n    }\r\n\r\n    return () => {\r\n      isComponentMounted = false;\r\n      if (monitoringInterval) {\r\n        clearInterval(monitoringInterval);\r\n      }\r\n    };\r\n  }, [enableMonitoring, monitoringLevel, currentConfig, onCriticalIssue]);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      try {\r\n        reliabilityMonitoringOrchestrator.cleanup();\r\n      } catch (error) {\r\n        // Silent cleanup failure\r\n        enhancedLogger.warn('ReliabilityIntegration', 'cleanup', 'Cleanup warning (non-critical)', undefined, error as Error);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Development-only: Log reliability status in console (non-intrusive)\r\n  useEffect(() => {\r\n    if (process.env.NODE_ENV === 'development' && reliabilityReport) {\r\n      const reportObj = reliabilityReport as unknown as Record<string, unknown>;\r\n      const rawHealth = reportObj?.overallHealth;\r\n      const overallHealth = typeof rawHealth === 'string' ? rawHealth.toString() : String(rawHealth);\r\n      enhancedLogger.debug(\r\n        'ReliabilityIntegration',\r\n        'status',\r\n        `Reliability Status: ${overallHealth}`,\r\n        {\r\n          performanceScore: typeof reportObj?.performanceMetrics === 'object'\r\n            ? (reportObj?.performanceMetrics as Record<string, unknown>)['overallScore'] ?? 'N/A'\r\n            : 'N/A',\r\n          serviceHealth: typeof reportObj?.serviceHealth === 'object'\r\n            ? (reportObj?.serviceHealth as Record<string, unknown>)['overallStatus'] ?? 'N/A'\r\n            : 'N/A',\r\n          activeAlerts: Array.isArray(reportObj?.alerts) ? (reportObj?.alerts as unknown[]).length : 0,\r\n          autoRecoveryActions: Array.isArray(reportObj?.autoRecoveryActions) ? (reportObj?.autoRecoveryActions as unknown[]).length : 0,\r\n        }\r\n      );\r\n    }\r\n  }, [reliabilityReport]);\r\n\r\n  // Render children without any visual modifications\r\n  // Monitoring operates completely in the background\r\n  return (\r\n    <>\r\n      {children}\r\n      {/* Optional: Invisible monitoring indicator for development */}\r\n      {process.env.NODE_ENV === 'development' && isMonitoringActive && (() => {\r\n  const reportObj = reliabilityReport as unknown as Record<string, unknown> | null;\r\n  const rawHealth = reportObj?.overallHealth;\r\n  const normalized = typeof rawHealth === 'string' ? rawHealth.toUpperCase() : undefined;\r\n        const backgroundColor = normalized === 'HEALTHY' ? '#10b981' :\r\n                                normalized === 'WARNING' ? '#f59e0b' :\r\n                                normalized === 'CRITICAL' ? '#ef4444' : '#6b7280';\r\n\r\n        const title = `Reliability Monitoring: ${normalized || 'INITIALIZING'}`;\r\n\r\n        return (\r\n          <div\r\n            style={{\r\n              position: 'fixed',\r\n              bottom: '10px',\r\n              right: '10px',\r\n              width: '8px',\r\n              height: '8px',\r\n              borderRadius: '50%',\r\n              backgroundColor,\r\n              zIndex: 9999,\r\n              opacity: 0.7,\r\n              pointerEvents: 'none'\r\n            }}\r\n            title={title}\r\n          />\r\n        );\r\n      })()}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReliabilityIntegrationWrapper;\r\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,kCAAA,GAAAD,OAAA;AAEA,IAAAE,eAAA,GAAAF,OAAA;AAA4D,IAAAG,WAAA,GAAAH,OAAA;AAAA,SAAAD,wBAAAK,CAAA,EAAAC,CAAA,6BAAAC,OAAA,MAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAP,uBAAA,YAAAA,CAAAK,CAAA,EAAAC,CAAA,SAAAA,CAAA,IAAAD,CAAA,IAAAA,CAAA,CAAAK,UAAA,SAAAL,CAAA,MAAAM,CAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAC,SAAA,QAAAC,OAAA,EAAAV,CAAA,iBAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,SAAAQ,CAAA,MAAAF,CAAA,GAAAL,CAAA,GAAAG,CAAA,GAAAD,CAAA,QAAAG,CAAA,CAAAK,GAAA,CAAAX,CAAA,UAAAM,CAAA,CAAAM,GAAA,CAAAZ,CAAA,GAAAM,CAAA,CAAAO,GAAA,CAAAb,CAAA,EAAAQ,CAAA,gBAAAP,CAAA,IAAAD,CAAA,gBAAAC,CAAA,OAAAa,cAAA,CAAAC,IAAA,CAAAf,CAAA,EAAAC,CAAA,OAAAM,CAAA,IAAAD,CAAA,GAAAU,MAAA,CAAAC,cAAA,KAAAD,MAAA,CAAAE,wBAAA,CAAAlB,CAAA,EAAAC,CAAA,OAAAM,CAAA,CAAAK,GAAA,IAAAL,CAAA,CAAAM,GAAA,IAAAP,CAAA,CAAAE,CAAA,EAAAP,CAAA,EAAAM,CAAA,IAAAC,CAAA,CAAAP,CAAA,IAAAD,CAAA,CAAAC,CAAA,WAAAO,CAAA,KAAAR,CAAA,EAAAC,CAAA;AAmB5D;AACA;AACA;AACA;AACO,MAAMkB,6BAA2E,GAAGA,CAAC;EAC1FC,QAAQ;EACRC,gBAAgB,GAAG,IAAI;EACvBC,eAAe,GAAG,UAAU;EAC5BC;AACF,CAAC,KAAK;EACJ,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG,IAAAC,eAAQ,EAA2B,IAAI,CAAC;EAC1F,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG,IAAAF,eAAQ,EAAC,KAAK,CAAC;;EAEnE;EACA,MAAMG,gBAAgB,GAAG,IAAAC,cAAO,EAAC,OAAO;IACtCC,OAAO,EAAE;MACPC,aAAa,EAAE,KAAK;MAAE;MACtBC,yBAAyB,EAAE,KAAK;MAChCC,4BAA4B,EAAE,KAAK;MACnCC,yBAAyB,EAAE,IAAI;MAC/BC,kBAAkB,EAAE;IACtB,CAAC;IACDC,QAAQ,EAAE;MACRL,aAAa,EAAE,KAAK;MAAE;MACtBC,yBAAyB,EAAE,IAAI;MAC/BC,4BAA4B,EAAE,IAAI;MAClCC,yBAAyB,EAAE,IAAI;MAC/BC,kBAAkB,EAAE;IACtB,CAAC;IACDE,aAAa,EAAE;MACbN,aAAa,EAAE,IAAI;MAAE;MACrBC,yBAAyB,EAAE,IAAI;MAC/BC,4BAA4B,EAAE,IAAI;MAClCC,yBAAyB,EAAE,IAAI;MAC/BC,kBAAkB,EAAE,IAAI;MACxBG,mBAAmB,EAAE,IAAI;MACzBC,sBAAsB,EAAE;IAC1B;EACF,CAAC,CAAC,EAAE,EAAE,CAAC;EAEP,MAAMC,aAAa,GAAGZ,gBAAgB,CAACP,eAAe,CAAC;;EAEvD;EACA,IAAAoB,gBAAS,EAAC,MAAM;IACd,IAAI,CAACrB,gBAAgB,EAAE;;IAEvB;IACA,MAAMsB,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,KAAK,MAAM,IAChD,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAACrC,GAAG,CAAC,MAAM,CAAC,KAAK,MAAM;IAEtF,IAAI+B,WAAW,EAAE;MACfO,8BAAc,CAACC,IAAI,CAAC,wBAAwB,EAAE,YAAY,EAAE,yCAAyC,CAAC;MACtG;IACF;IAEA,IAAIC,kBAAkC;IACtC,IAAIC,kBAAkB,GAAG,IAAI;IAE7B,MAAMC,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,IAAI;QACF;QACA,IAAI,OAAOC,oEAAiC,CAACC,UAAU,KAAK,UAAU,EAAE;UAClE,IAAI;YACF,MAAMC,UAA4B,GAAG;cACnCzB,aAAa,EAAGS,aAAa,CAAsBT,aAAa;cAChEC,yBAAyB,EAAGQ,aAAa,CAAsBR,yBAAyB;cACxFC,4BAA4B,EAAGO,aAAa,CAAsBP,4BAA4B;cAC9FC,yBAAyB,EAAGM,aAAa,CAAsBN,yBAAyB;cACxFC,kBAAkB,EAAGK,aAAa,CAAsBL,kBAAkB;cAC1EG,mBAAmB,EAAGE,aAAa,CAAsBF,mBAAmB,IAAI,KAAK;cACrFC,sBAAsB,EAAGC,aAAa,CAAsBD,sBAAsB,IAAI;YACxF,CAAC;;YAED;YACA,IAAI;cACF;cACA,MAAOe,oEAAiC,CAACC,UAAU,CAAyDC,UAAqB,CAAC;YACpI,CAAC,CAAC,MAAM;cACN,IAAI;gBACF,MAAOF,oEAAiC,CAACC,UAAU,CAAuC,CAAC;cAC7F,CAAC,CAAC,OAAOE,EAAE,EAAE;gBACXR,8BAAc,CAACS,IAAI,CAAC,wBAAwB,EAAE,YAAY,EAAE,yCAAyC,EAAEC,SAAS,EAAEF,EAAW,CAAC;cAChI;YACF;UACF,CAAC,CAAC,OAAOG,CAAC,EAAE;YACV;UAAA;QAER;QAEA,IAAIR,kBAAkB,EAAE;UACtBzB,qBAAqB,CAAC,IAAI,CAAC;QAC7B;;QAEA;QACAwB,kBAAkB,GAAGU,WAAW,CAAC,YAAY;UAC3C,IAAI,CAACT,kBAAkB,EAAE;UAEzB,IAAI;YACF;YACA,MAAMU,UAAU,GAAIR,oEAAiC,EAAyCS,cAEhD;YAC9C,MAAMC,MAAM,GAAG,OAAOF,UAAU,KAAK,UAAU,GAAG,MAAMA,UAAU,CAAChD,IAAI,CAACwC,oEAAiC,CAAC,GAAG,IAAI;YAEjH,IAAIF,kBAAkB,EAAE;cACtB;cACA5B,oBAAoB,CAACwC,MAA6C,CAAC;;cAEnE;cACA,MAAMC,SAAS,GAAID,MAAM,EAAyCE,aAAa;cAC/E,MAAMA,aAAa,GAAG,OAAOD,SAAS,KAAK,QAAQ,GAAGA,SAAS,CAACE,WAAW,CAAC,CAAC,GAAGR,SAAS;cAEzF,IAAIO,aAAa,KAAK,UAAU,IAAI5C,eAAe,EAAE;gBACnD,MAAM8C,MAAM,GAAIJ,MAAM,EAAyCI,MAAoD;gBACnH,MAAMC,QAAQ,GAAID,MAAM,IAAIA,MAAM,CAAC,CAAC,CAAC,IAAKA,MAAM,CAAC,CAAC,CAAC,CAACE,OAAkB,IAAK,eAAe;gBAC1F;gBACA,IAAI,qBAAqB,IAAIxB,MAAM,IAAI,OAAQA,MAAM,CAAwCyB,mBAAmB,KAAK,UAAU,EAAE;kBAC9HzB,MAAM,CAAkEyB,mBAAmB,CAAC,MAAM;oBACjGjD,eAAe,CAAC,0CAA0C+C,QAAQ,EAAE,CAAC;kBACvE,CAAC,CAAC;gBACJ,CAAC,MAAM;kBACL;kBACAG,UAAU,CAAC,MAAM;oBACflD,eAAe,CAAC,0CAA0C+C,QAAQ,EAAE,CAAC;kBACvE,CAAC,EAAE,CAAC,CAAC;gBACP;cACF;YACF;UACF,CAAC,CAAC,OAAOI,KAAK,EAAE;YACd;YACAxB,8BAAc,CAACS,IAAI,CAAC,wBAAwB,EAAE,iBAAiB,EAAE,iCAAiC,EAAEC,SAAS,EAAEc,KAAc,CAAC;UAChI;QACF,CAAC,EAAEjC,aAAa,CAACT,aAAa,CAAC;MAEjC,CAAC,CAAC,OAAO0C,KAAK,EAAE;QACd;QACAxB,8BAAc,CAACS,IAAI,CAAC,wBAAwB,EAAE,YAAY,EAAE,sDAAsD,EAAEC,SAAS,EAAEc,KAAc,CAAC;MAChJ;IACF,CAAC;;IAED;IACA,IAAI,qBAAqB,IAAI3B,MAAM,EAAE;MACnCA,MAAM,CAACyB,mBAAmB,CAAClB,oBAAoB,CAAC;IAClD,CAAC,MAAM;MACL;MACAmB,UAAU,CAACnB,oBAAoB,EAAE,GAAG,CAAC;IACvC;IAEA,OAAO,MAAM;MACXD,kBAAkB,GAAG,KAAK;MAC1B,IAAID,kBAAkB,EAAE;QACtBuB,aAAa,CAACvB,kBAAkB,CAAC;MACnC;IACF,CAAC;EACH,CAAC,EAAE,CAAC/B,gBAAgB,EAAEC,eAAe,EAAEmB,aAAa,EAAElB,eAAe,CAAC,CAAC;;EAEvE;EACA,IAAAmB,gBAAS,EAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAI;QACFa,oEAAiC,CAACqB,OAAO,CAAC,CAAC;MAC7C,CAAC,CAAC,OAAOF,KAAK,EAAE;QACd;QACAxB,8BAAc,CAACS,IAAI,CAAC,wBAAwB,EAAE,SAAS,EAAE,gCAAgC,EAAEC,SAAS,EAAEc,KAAc,CAAC;MACvH;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAAhC,gBAAS,EAAC,MAAM;IACd,IAAImC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,IAAIvD,iBAAiB,EAAE;MAC/D,MAAMwD,SAAS,GAAGxD,iBAAuD;MACzE,MAAM0C,SAAS,GAAGc,SAAS,EAAEb,aAAa;MAC1C,MAAMA,aAAa,GAAG,OAAOD,SAAS,KAAK,QAAQ,GAAGA,SAAS,CAACe,QAAQ,CAAC,CAAC,GAAGC,MAAM,CAAChB,SAAS,CAAC;MAC9FhB,8BAAc,CAACiC,KAAK,CAClB,wBAAwB,EACxB,QAAQ,EACR,uBAAuBhB,aAAa,EAAE,EACtC;QACEiB,gBAAgB,EAAE,OAAOJ,SAAS,EAAEK,kBAAkB,KAAK,QAAQ,GAC/D,CAACL,SAAS,EAAEK,kBAAkB,EAA6B,cAAc,CAAC,IAAI,KAAK,GACnF,KAAK;QACTC,aAAa,EAAE,OAAON,SAAS,EAAEM,aAAa,KAAK,QAAQ,GACvD,CAACN,SAAS,EAAEM,aAAa,EAA6B,eAAe,CAAC,IAAI,KAAK,GAC/E,KAAK;QACTC,YAAY,EAAEC,KAAK,CAACC,OAAO,CAACT,SAAS,EAAEX,MAAM,CAAC,GAAG,CAACW,SAAS,EAAEX,MAAM,EAAeqB,MAAM,GAAG,CAAC;QAC5FC,mBAAmB,EAAEH,KAAK,CAACC,OAAO,CAACT,SAAS,EAAEW,mBAAmB,CAAC,GAAG,CAACX,SAAS,EAAEW,mBAAmB,EAAeD,MAAM,GAAG;MAC9H,CACF,CAAC;IACH;EACF,CAAC,EAAE,CAAClE,iBAAiB,CAAC,CAAC;;EAEvB;EACA;EACA,oBACE,IAAAzB,WAAA,CAAA6F,IAAA,EAAA7F,WAAA,CAAA8F,QAAA;IAAAzE,QAAA,GACGA,QAAQ,EAERyD,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,IAAIpD,kBAAkB,IAAI,CAAC,MAAM;MAC5E,MAAMqD,SAAS,GAAGxD,iBAA8D;MAChF,MAAM0C,SAAS,GAAGc,SAAS,EAAEb,aAAa;MAC1C,MAAM2B,UAAU,GAAG,OAAO5B,SAAS,KAAK,QAAQ,GAAGA,SAAS,CAACE,WAAW,CAAC,CAAC,GAAGR,SAAS;MAChF,MAAMmC,eAAe,GAAGD,UAAU,KAAK,SAAS,GAAG,SAAS,GACpCA,UAAU,KAAK,SAAS,GAAG,SAAS,GACpCA,UAAU,KAAK,UAAU,GAAG,SAAS,GAAG,SAAS;MAEzE,MAAME,KAAK,GAAG,2BAA2BF,UAAU,IAAI,cAAc,EAAE;MAEvE,oBACE,IAAA/F,WAAA,CAAAkG,GAAA;QACEC,KAAK,EAAE;UACLC,QAAQ,EAAE,OAAO;UACjBC,MAAM,EAAE,MAAM;UACdC,KAAK,EAAE,MAAM;UACbC,KAAK,EAAE,KAAK;UACZC,MAAM,EAAE,KAAK;UACbC,YAAY,EAAE,KAAK;UACnBT,eAAe;UACfU,MAAM,EAAE,IAAI;UACZC,OAAO,EAAE,GAAG;UACZC,aAAa,EAAE;QACjB,CAAE;QACFX,KAAK,EAAEA;MAAM,CACd,CAAC;IAEN,CAAC,EAAE,CAAC;EAAA,CACJ,CAAC;AAEP,CAAC;AAACY,OAAA,CAAAzF,6BAAA,GAAAA,6BAAA;AAAA,IAAA0F,QAAA,GAAAD,OAAA,CAAAlG,OAAA,GAEaS,6BAA6B","ignoreList":[]}