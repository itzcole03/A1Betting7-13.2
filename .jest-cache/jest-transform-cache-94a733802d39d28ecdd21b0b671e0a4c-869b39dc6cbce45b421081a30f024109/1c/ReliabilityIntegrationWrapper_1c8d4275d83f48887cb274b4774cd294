b350795120b64ec47575f9f33edcf0fb
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ReliabilityIntegrationWrapper = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reliabilityMonitoringOrchestrator = require("../../services/reliabilityMonitoringOrchestrator");
var _enhancedLogger = require("../../utils/enhancedLogger");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Non-intrusive wrapper that integrates reliability monitoring without
 * affecting core application functionality. Operates silently in the background.
 */
const ReliabilityIntegrationWrapper = ({
  children,
  enableMonitoring = true,
  monitoringLevel = 'standard',
  onCriticalIssue
}) => {
  const [reliabilityReport, setReliabilityReport] = (0, _react.useState)(null);
  const [isMonitoringActive, setIsMonitoringActive] = (0, _react.useState)(false);

  // Configuration based on monitoring level
  const monitoringConfig = (0, _react.useMemo)(() => ({
    minimal: {
      checkInterval: 30000,
      // 30 seconds
      enablePerformanceTracking: false,
      enableDataPipelineMonitoring: false,
      enableServiceHealthChecks: true,
      enableAutoRecovery: false
    },
    standard: {
      checkInterval: 15000,
      // 15 seconds
      enablePerformanceTracking: true,
      enableDataPipelineMonitoring: true,
      enableServiceHealthChecks: true,
      enableAutoRecovery: true
    },
    comprehensive: {
      checkInterval: 5000,
      // 5 seconds
      enablePerformanceTracking: true,
      enableDataPipelineMonitoring: true,
      enableServiceHealthChecks: true,
      enableAutoRecovery: true,
      enableTrendAnalysis: true,
      enablePredictiveAlerts: true
    }
  }), []);
  const currentConfig = monitoringConfig[monitoringLevel];

  // Initialize monitoring without blocking main thread
  (0, _react.useEffect)(() => {
    if (!enableMonitoring) return;

    // Stabilization: Check for lean mode
    const devLeanMode = localStorage.getItem('DEV_LEAN_MODE') === 'true' || new URLSearchParams(window.location.search).get('lean') === 'true';
    if (devLeanMode) {
      _enhancedLogger.enhancedLogger.info('ReliabilityIntegration', 'initialize', 'Lean mode enabled - monitoring disabled');
      return;
    }
    let monitoringInterval;
    let isComponentMounted = true;
    const initializeMonitoring = async () => {
      try {
        // Initialize orchestrator silently. If the orchestrator expects no args, fall back to that.
        if (typeof _reliabilityMonitoringOrchestrator.reliabilityMonitoringOrchestrator.initialize === 'function') {
          try {
            const initConfig = {
              checkInterval: currentConfig.checkInterval,
              enablePerformanceTracking: currentConfig.enablePerformanceTracking,
              enableDataPipelineMonitoring: currentConfig.enableDataPipelineMonitoring,
              enableServiceHealthChecks: currentConfig.enableServiceHealthChecks,
              enableAutoRecovery: currentConfig.enableAutoRecovery,
              enableTrendAnalysis: currentConfig.enableTrendAnalysis || false,
              enablePredictiveAlerts: currentConfig.enablePredictiveAlerts || false
            };

            // Try to initialize with a typed config, fallback to no-arg call
            try {
              // Try calling initialize with the typed config. If it fails, try a no-arg call.
              await _reliabilityMonitoringOrchestrator.reliabilityMonitoringOrchestrator.initialize(initConfig);
            } catch {
              try {
                await _reliabilityMonitoringOrchestrator.reliabilityMonitoringOrchestrator.initialize();
              } catch (e2) {
                _enhancedLogger.enhancedLogger.warn('ReliabilityIntegration', 'initialize', 'Orchestrator initialize fallback failed', undefined, e2);
              }
            }
          } catch (_) {
            // Fallback handled above - continue
          }
        }
        if (isComponentMounted) {
          setIsMonitoringActive(true);
        }

        // Start non-blocking monitoring cycle
        monitoringInterval = setInterval(async () => {
          if (!isComponentMounted) return;
          try {
            // Generate report if the orchestrator exposes the method, otherwise skip
            const generateFn = _reliabilityMonitoringOrchestrator.reliabilityMonitoringOrchestrator?.generateReport;
            const report = typeof generateFn === 'function' ? await generateFn.call(_reliabilityMonitoringOrchestrator.reliabilityMonitoringOrchestrator) : null;
            if (isComponentMounted) {
              // store as any to avoid strict shape coupling during incremental typing fixes
              setReliabilityReport(report);

              // Handle critical issues without disrupting user experience
              const rawHealth = report?.overallHealth;
              const overallHealth = typeof rawHealth === 'string' ? rawHealth.toUpperCase() : undefined;
              if (overallHealth === 'CRITICAL' && onCriticalIssue) {
                const alerts = report?.alerts;
                const alertMsg = alerts && alerts[0] && alerts[0].message || 'Unknown issue';
                // Use requestIdleCallback to ensure non-blocking execution
                if ('requestIdleCallback' in window && typeof window.requestIdleCallback === 'function') {
                  window.requestIdleCallback(() => {
                    onCriticalIssue(`Critical system health issue detected: ${alertMsg}`);
                  });
                } else {
                  // Fallback for browsers without requestIdleCallback
                  setTimeout(() => {
                    onCriticalIssue(`Critical system health issue detected: ${alertMsg}`);
                  }, 0);
                }
              }
            }
          } catch (error) {
            // Silent error handling - don't disrupt user experience
            _enhancedLogger.enhancedLogger.warn('ReliabilityIntegration', 'monitoringCycle', 'Monitoring error (non-critical)', undefined, error);
          }
        }, currentConfig.checkInterval);
      } catch (error) {
        // Silent initialization failure - continue without monitoring
        _enhancedLogger.enhancedLogger.warn('ReliabilityIntegration', 'initialize', 'Failed to initialize monitoring (continuing without)', undefined, error);
      }
    };

    // Use requestIdleCallback for non-blocking initialization
    if ('requestIdleCallback' in window) {
      window.requestIdleCallback(initializeMonitoring);
    } else {
      // Fallback for browsers without requestIdleCallback
      setTimeout(initializeMonitoring, 100);
    }
    return () => {
      isComponentMounted = false;
      if (monitoringInterval) {
        clearInterval(monitoringInterval);
      }
    };
  }, [enableMonitoring, monitoringLevel, currentConfig, onCriticalIssue]);

  // Cleanup on unmount
  (0, _react.useEffect)(() => {
    return () => {
      try {
        _reliabilityMonitoringOrchestrator.reliabilityMonitoringOrchestrator.cleanup();
      } catch (error) {
        // Silent cleanup failure
        _enhancedLogger.enhancedLogger.warn('ReliabilityIntegration', 'cleanup', 'Cleanup warning (non-critical)', undefined, error);
      }
    };
  }, []);

  // Development-only: Log reliability status in console (non-intrusive)
  (0, _react.useEffect)(() => {
    if (process.env.NODE_ENV === 'development' && reliabilityReport) {
      const reportObj = reliabilityReport;
      const rawHealth = reportObj?.overallHealth;
      const overallHealth = typeof rawHealth === 'string' ? rawHealth.toString() : String(rawHealth);
      _enhancedLogger.enhancedLogger.debug('ReliabilityIntegration', 'status', `Reliability Status: ${overallHealth}`, {
        performanceScore: typeof reportObj?.performanceMetrics === 'object' ? (reportObj?.performanceMetrics)['overallScore'] ?? 'N/A' : 'N/A',
        serviceHealth: typeof reportObj?.serviceHealth === 'object' ? (reportObj?.serviceHealth)['overallStatus'] ?? 'N/A' : 'N/A',
        activeAlerts: Array.isArray(reportObj?.alerts) ? (reportObj?.alerts).length : 0,
        autoRecoveryActions: Array.isArray(reportObj?.autoRecoveryActions) ? (reportObj?.autoRecoveryActions).length : 0
      });
    }
  }, [reliabilityReport]);

  // Render children without any visual modifications
  // Monitoring operates completely in the background
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [children, process.env.NODE_ENV === 'development' && isMonitoringActive && (() => {
      const reportObj = reliabilityReport;
      const rawHealth = reportObj?.overallHealth;
      const normalized = typeof rawHealth === 'string' ? rawHealth.toUpperCase() : undefined;
      const backgroundColor = normalized === 'HEALTHY' ? '#10b981' : normalized === 'WARNING' ? '#f59e0b' : normalized === 'CRITICAL' ? '#ef4444' : '#6b7280';
      const title = `Reliability Monitoring: ${normalized || 'INITIALIZING'}`;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        style: {
          position: 'fixed',
          bottom: '10px',
          right: '10px',
          width: '8px',
          height: '8px',
          borderRadius: '50%',
          backgroundColor,
          zIndex: 9999,
          opacity: 0.7,
          pointerEvents: 'none'
        },
        title: title
      });
    })()]
  });
};
exports.ReliabilityIntegrationWrapper = ReliabilityIntegrationWrapper;
var _default = exports.default = ReliabilityIntegrationWrapper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,