{"file":"C:\\Users\\bcmad\\Downloads\\A1Betting7-13.2\\frontend\\src\\__tests__\\App.e2e.error.test.tsx","mappings":"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","names":[],"sources":["C:\\Users\\bcmad\\Downloads\\A1Betting7-13.2\\frontend\\src\\__tests__\\App.e2e.error.test.tsx"],"sourcesContent":["import { QueryClient, QueryClientProvider } from '@tanstack/react-query';\r\nimport { render, screen, waitFor } from '@testing-library/react';\r\nimport '../../../jest.setup.e2e.js';\r\n\r\n// Use the mock for unifiedApiService in error state E2E tests\r\n\r\njest.mock('src/services/unifiedApiService');\r\n\r\nglobalThis.__JEST_E2E_ERROR__ = true;\r\n\r\ndescribe('App E2E Error State', () => {\r\n  beforeAll(() => {\r\n    (globalThis as any).__MOCK_GET_ENHANCED_BETS_ERROR__ = true;\r\n  });\r\n  afterAll(() => {\r\n    (globalThis as any).__MOCK_GET_ENHANCED_BETS_ERROR__ = false;\r\n  });\r\n\r\n  it('shows error state if API returns error', async () => {\r\n    const App = (await import('../App')).default;\r\n    const queryClient = new QueryClient();\r\n    // Wrap render in act to address React warnings\r\n    await (\r\n      await import('react-dom/test-utils')\r\n    ).act(async () => {\r\n      render(\r\n        <QueryClientProvider client={queryClient}>\r\n          <App />\r\n        </QueryClientProvider>\r\n      );\r\n    });\r\n    // Wait for the error message rendered inline in PropOllamaUnified\r\n    await waitFor(() => {\r\n      const errorMessages = screen.getAllByText(/Cannot connect|Error|Failed|Unable to load/i);\r\n      expect(errorMessages.length).toBeGreaterThan(0);\r\n    });\r\n  }, 20000);\r\n});\r\njest.mock('src/components/user-friendly/PropOllama', () => {\r\n  return jest.fn().mockImplementation(() => {\r\n    let message = '';\r\n    // Mock the fetch call to simulate backend behavior\r\n    global.fetch = (url, opts) => {\r\n      if (url.includes('/health')) {\r\n        return Promise.resolve({\r\n          ok: true,\r\n          status: 200,\r\n          text: () => Promise.resolve(JSON.stringify({ status: 'ok' })),\r\n        });\r\n      }\r\n      if (url.includes('/propollama')) {\r\n        if (opts && opts.body) {\r\n          if (typeof opts.body === 'object') {\r\n            message = opts.body.message || '';\r\n          } else if (typeof opts.body === 'string') {\r\n            try {\r\n              message = JSON.parse(opts.body).message;\r\n            } catch {\r\n              // intentionally ignore JSON parse errors\r\n            }\r\n          }\r\n        } else if (opts && typeof opts === 'string') {\r\n          message = opts;\r\n        } else if (opts && opts.body && typeof opts.body === 'string') {\r\n          // Handle string body\r\n          message = opts.body;\r\n        }\r\n      }\r\n      return Promise.resolve({\r\n        ok: true,\r\n        status: 200,\r\n        text: () => Promise.resolve(JSON.stringify({ message })),\r\n      });\r\n    };\r\n    return <div>{message}</div>;\r\n  });\r\n});\r\n"],"version":3}