c603b2f01fe4361614def7b4121deacd
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serviceWorkerManager = exports.default = void 0;
exports.useServiceWorkerUpdate = useServiceWorkerUpdate;
var _react = _interopRequireDefault(require("react"));
var _enhancedLogger = require("../utils/enhancedLogger");
/**
 * Service Worker Registration - 2025 Best Practices
 *
 * Features:
 * - Automatic registration with update detection
 * - User-friendly update prompts
 * - Background sync capability
 * - Push notification support
 */

class ServiceWorkerManager {
  constructor() {
    this.registration = null;
    this.updateCallbacks = new Set();
    this.state = {
      hasUpdate: false,
      newWorker: null,
      isInstalling: false,
      error: null
    };
  }
  /**
   * Register the service worker with automatic update detection
   */
  async register() {
    if (!('serviceWorker' in navigator)) {
      _enhancedLogger.enhancedLogger.warn('ServiceWorker', 'register', 'Not supported in this browser');
      return null;
    }
    try {
      _enhancedLogger.enhancedLogger.info('ServiceWorker', 'register', 'Registering with 2025 best practices...');
      const registration = await navigator.serviceWorker.register('/sw.js', {
        scope: '/',
        updateViaCache: 'none' // Always check for updates
      });
      this.registration = registration;

      // Set up update detection
      this.setupUpdateHandling(registration);

      // Enable background sync
      this.enableBackgroundSync(registration);

      // Track registration success
      _enhancedLogger.enhancedLogger.info('ServiceWorker', 'register', 'Registration tracking: success');
      _enhancedLogger.enhancedLogger.info('ServiceWorker', 'register', 'Successfully registered');
      return registration;
    } catch (error) {
      _enhancedLogger.enhancedLogger.error('ServiceWorker', 'register', 'Registration failed', undefined, error);
      _enhancedLogger.enhancedLogger.warn('ServiceWorker', 'register', 'Registration tracking: error');
      this.updateState({
        error: `Registration failed: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
      return null;
    }
  }

  /**
   * Set up update detection and handling
   */
  setupUpdateHandling(registration) {
    // Check for updates periodically
    setInterval(() => {
      registration.update().catch(e => _enhancedLogger.enhancedLogger.error('ServiceWorker', 'update', 'Update failed', undefined, e));
    }, 60000); // Check every minute

    // Handle installation of new service worker
    registration.addEventListener('updatefound', () => {
      const newWorker = registration.installing;
      if (!newWorker) return;
      _enhancedLogger.enhancedLogger.info('ServiceWorker', 'updatefound', 'New version found, installing...');
      this.updateState({
        isInstalling: true,
        newWorker
      });
      newWorker.addEventListener('statechange', () => {
        if (newWorker.state === 'installed') {
          if (navigator.serviceWorker.controller) {
            // New version available
            _enhancedLogger.enhancedLogger.info('ServiceWorker', 'update', 'New version ready');
            this.updateState({
              hasUpdate: true,
              isInstalling: false,
              newWorker
            });
          } else {
            // First time installation
            _enhancedLogger.enhancedLogger.info('ServiceWorker', 'update', 'App is ready for offline use');
            this.updateState({
              isInstalling: false
            });
          }
        }
      });
    });

    // Handle controller change (when new SW becomes active)
    navigator.serviceWorker.addEventListener('controllerchange', () => {
      _enhancedLogger.enhancedLogger.info('ServiceWorker', 'controllerchange', 'New version is now controlling the app');
      // Optionally reload the page or show notification
      window.location.reload();
    });
  }

  /**
   * Enable background sync for offline analytics
   */
  enableBackgroundSync(registration) {
    // Check if sync is supported
    if ('sync' in registration) {
      try {
        // Add error handling for sync registration
        const syncManager = registration.sync;
        if (syncManager && typeof syncManager.register === 'function') {
          syncManager.register('analytics-sync').catch(error => {
            _enhancedLogger.enhancedLogger.error('ServiceWorker', 'sync', 'Sync registration failed', undefined, error);
          });
          _enhancedLogger.enhancedLogger.info('ServiceWorker', 'sync', 'Background sync enabled');
        }
      } catch (error) {
        _enhancedLogger.enhancedLogger.warn('ServiceWorker', 'sync', 'Background sync not available', undefined, error);
      }
    }
  }

  /**
   * Apply pending service worker update
   */
  applyUpdate() {
    if (this.state.newWorker) {
      this.state.newWorker.postMessage({
        type: 'SKIP_WAITING'
      });
    }
  }

  /**
   * Subscribe to update notifications
   */
  onUpdate(callback) {
    this.updateCallbacks.add(callback);

    // Immediately call with current state
    callback(this.state);

    // Return unsubscribe function
    return () => {
      this.updateCallbacks.delete(callback);
    };
  }

  /**
   * Request permission for push notifications
   */
  async requestNotificationPermission() {
    if (!('Notification' in window)) {
      throw new Error('Notifications not supported');
    }
    const permission = await Notification.requestPermission();
    if (permission === 'granted' && this.registration) {
      // Subscribe to push notifications
      try {
        const subscription = await this.registration.pushManager.subscribe({
          userVisibleOnly: true,
          // Cast to any to accept various BufferSource implementations across browsers
          applicationServerKey: this.urlBase64ToUint8Array(process.env.VITE_VAPID_PUBLIC_KEY || '')
        });

        // Send subscription to backend
        await fetch('/api/push/subscribe', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(subscription)
        });
        _enhancedLogger.enhancedLogger.info('ServiceWorker', 'push', 'Push notifications enabled');
      } catch (error) {
        _enhancedLogger.enhancedLogger.error('ServiceWorker', 'push', 'Push subscription failed', undefined, error);
      }
    }
    return permission;
  }

  /**
   * Get current registration
   */
  getRegistration() {
    return this.registration;
  }

  /**
   * Update internal state and notify callbacks
   */
  updateState(updates) {
    this.state = {
      ...this.state,
      ...updates
    };
    this.updateCallbacks.forEach(callback => callback(this.state));
  }

  /**
   * Convert VAPID key to Uint8Array
   */
  urlBase64ToUint8Array(base64String) {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);
    for (let i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
  }
}

// Export singleton instance
const serviceWorkerManager = exports.serviceWorkerManager = new ServiceWorkerManager();

/**
 * React hook for service worker updates
 */
function useServiceWorkerUpdate() {
  const [updateState, setUpdateState] = _react.default.useState({
    hasUpdate: false,
    newWorker: null,
    isInstalling: false,
    error: null
  });
  _react.default.useEffect(() => {
    const unsubscribe = serviceWorkerManager.onUpdate(setUpdateState);
    return unsubscribe;
  }, []);
  const applyUpdate = _react.default.useCallback(() => {
    serviceWorkerManager.applyUpdate();
  }, []);
  const requestNotifications = _react.default.useCallback(() => {
    return serviceWorkerManager.requestNotificationPermission();
  }, []);
  return {
    ...updateState,
    applyUpdate,
    requestNotifications
  };
}
var _default = exports.default = serviceWorkerManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,