{"version":3,"names":["_globals","require","_coreFunctionalityValidator","navReadySignal","_interopRequireWildcard","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","mockEnv","VITE_VALIDATOR_NAV_MAX_ATTEMPTS","VITE_VALIDATOR_NAV_INTERVAL_MS","NODE_ENV","mockQuerySelectorAll","jest","fn","mockConsoleLog","mockConsoleWarn","describe","validator","beforeEach","vi","clearAllMocks","document","value","writable","spyOn","console","mockImplementation","import","meta","mockReturnValue","_callback","CoreFunctionalityValidator","afterEach","stopValidation","restoreAllMocks","it","mocked","isNavReady","result","validateNavigation","expect","toBe","toHaveBeenCalledWith","mockNavElements","tagName","getAttribute","createElement","navReadyCallback","onNavReady","callback","firstResult","secondResult","maxAttempts","parseInt","toHaveBeenCalledTimes","navValidationState","navValidationAttempts","customMaxAttempts","configValidator","config","getConfig","navMaxAttempts","navIntervalMs","prodValidator","not","toHaveBeenCalled","diagnosticLogs","mock","calls","filter","toHaveLength","startValidation","mockUnsubscribe","cleanupNavValidation","mockClearTimeout","global","navValidationTimeout","setTimeout"],"sources":["navigationValidator.test.ts"],"sourcesContent":["/**\r\n * Navigation Validator Tests\r\n * Tests for the refactored navigation validation system\r\n */\r\n\r\nimport React from 'react';\r\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\r\nimport { CoreFunctionalityValidator } from '../coreFunctionalityValidator';\r\nimport * as navReadySignal from '../navigation/navReadySignal';\r\n\r\n// Mock environment variables\r\nconst mockEnv = {\r\n  VITE_VALIDATOR_NAV_MAX_ATTEMPTS: '12',\r\n  VITE_VALIDATOR_NAV_INTERVAL_MS: '250',\r\n  NODE_ENV: 'development'\r\n};\r\n\r\n// Mock DOM methods\r\nconst mockQuerySelectorAll = jest.fn();\r\nconst mockConsoleLog = jest.fn();\r\nconst mockConsoleWarn = jest.fn();\r\n\r\ndescribe('NavigationValidator', () => {\r\n  let validator: CoreFunctionalityValidator;\r\n\r\n  beforeEach(() => {\r\n    // Reset mocks\r\n    vi.clearAllMocks();\r\n    \r\n    // Mock DOM\r\n    Object.defineProperty(document, 'querySelectorAll', {\r\n      value: mockQuerySelectorAll,\r\n      writable: true\r\n    });\r\n\r\n    // Mock console methods\r\n    vi.spyOn(console, 'log').mockImplementation(mockConsoleLog);\r\n    vi.spyOn(console, 'warn').mockImplementation(mockConsoleWarn);\r\n\r\n    // Mock environment\r\n    Object.defineProperty(import.meta, 'env', {\r\n      value: mockEnv,\r\n      writable: true\r\n    });\r\n\r\n    // Mock navReadySignal functions\r\n    vi.spyOn(navReadySignal, 'isNavReady').mockReturnValue(false);\r\n    vi.spyOn(navReadySignal, 'onNavReady').mockImplementation((_callback) => {\r\n      return () => {}; // Return unsubscribe function\r\n    });\r\n\r\n    validator = new CoreFunctionalityValidator();\r\n  });\r\n\r\n  afterEach(() => {\r\n    validator.stopValidation();\r\n    vi.restoreAllMocks();\r\n  });\r\n\r\n  describe('Success Scenarios', () => {\r\n    it('should validate navigation when navReady signal is already true', async () => {\r\n      // Setup: Navigation is already ready\r\n      vi.mocked(navReadySignal.isNavReady).mockReturnValue(true);\r\n\r\n      // Act\r\n      const result = await (validator as any).validateNavigation();\r\n\r\n      // Assert\r\n      expect(result).toBe(true);\r\n      expect(mockConsoleLog).toHaveBeenCalledWith('[NavDiag] Navigation already ready');\r\n    });\r\n\r\n    it('should validate navigation when nav elements are found', async () => {\r\n      // Setup: Mock finding navigation elements\r\n      const mockNavElements = [\r\n        { tagName: 'NAV', getAttribute: vi.fn().mockReturnValue('primary-nav') }\r\n      ];\r\n      mockQuerySelectorAll.mockReturnValue(mockNavElements);\r\n\r\n      // Act\r\n      const result = await (validator as any).validateNavigation();\r\n\r\n      // Assert\r\n      expect(result).toBe(true);\r\n      expect(mockQuerySelectorAll).toHaveBeenCalledWith(\r\n        '[data-testid=\"primary-nav\"], [role=\"navigation\"], nav'\r\n      );\r\n      expect(mockConsoleLog).toHaveBeenCalledWith(\r\n        '[NavDiag] Navigation validation successful - found elements:',\r\n        1\r\n      );\r\n    });\r\n\r\n    it('should use hardened selectors for navigation detection', async () => {\r\n      // Setup\r\n      mockQuerySelectorAll.mockReturnValue([document.createElement('nav')]);\r\n\r\n      // Act\r\n      await (validator as any).validateNavigation();\r\n\r\n      // Assert\r\n      expect(mockQuerySelectorAll).toHaveBeenCalledWith(\r\n        '[data-testid=\"primary-nav\"], [role=\"navigation\"], nav'\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Delayed Navigation', () => {\r\n    it('should handle delayed navigation component mounting', async () => {\r\n      let navReadyCallback: (() => void) | undefined;\r\n\r\n      // Setup: Mock navigation not ready initially, but will be ready later\r\n      vi.mocked(navReadySignal.isNavReady).mockReturnValue(false);\r\n      vi.mocked(navReadySignal.onNavReady).mockImplementation((callback) => {\r\n        navReadyCallback = callback;\r\n        return () => {}; // Return unsubscribe function\r\n      });\r\n\r\n      mockQuerySelectorAll.mockReturnValue([]); // No nav elements initially\r\n\r\n      // Act: First validation call\r\n      const firstResult = await (validator as any).validateNavigation();\r\n      expect(firstResult).toBe(false);\r\n\r\n      // Simulate navigation becoming ready\r\n      if (navReadyCallback) {\r\n        navReadyCallback();\r\n      }\r\n\r\n      // Mock finding navigation elements after signal\r\n      mockQuerySelectorAll.mockReturnValue([document.createElement('nav')]);\r\n\r\n      // Act: Second validation call\r\n      const secondResult = await (validator as any).validateNavigation();\r\n\r\n      // Assert\r\n      expect(secondResult).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Degraded Timeout Scenarios', () => {\r\n    it('should timeout after max attempts reached', async () => {\r\n      // Setup: No navigation elements and max attempts\r\n      mockQuerySelectorAll.mockReturnValue([]);\r\n      const maxAttempts = parseInt(mockEnv.VITE_VALIDATOR_NAV_MAX_ATTEMPTS);\r\n\r\n      // Act: Call validation multiple times to reach max attempts\r\n      let result = false;\r\n      for (let i = 0; i < maxAttempts + 1; i++) {\r\n        result = await (validator as any).validateNavigation();\r\n      }\r\n\r\n      // Assert\r\n      expect(result).toBe(false);\r\n      expect(mockConsoleWarn).toHaveBeenCalledWith(\r\n        '[NavDiag] Navigation validation degraded - no nav elements found after',\r\n        maxAttempts,\r\n        'attempts'\r\n      );\r\n    });\r\n\r\n    it('should increment attempts counter correctly', async () => {\r\n      // Setup\r\n      mockQuerySelectorAll.mockReturnValue([]);\r\n\r\n      // Act: Make multiple validation calls\r\n      await (validator as any).validateNavigation(); // Attempt 1\r\n      await (validator as any).validateNavigation(); // Attempt 2\r\n      await (validator as any).validateNavigation(); // Attempt 3\r\n\r\n      // Assert: Should log diagnostic only on first attempt\r\n      expect(mockConsoleLog).toHaveBeenCalledWith('[NavDiag] Starting navigation validation...');\r\n      expect(mockConsoleLog).toHaveBeenCalledTimes(1); // Only first attempt logs\r\n    });\r\n\r\n    it('should cleanup state on timeout', async () => {\r\n      // Setup\r\n      mockQuerySelectorAll.mockReturnValue([]);\r\n      const maxAttempts = parseInt(mockEnv.VITE_VALIDATOR_NAV_MAX_ATTEMPTS);\r\n\r\n      // Act: Reach max attempts\r\n      for (let i = 0; i < maxAttempts + 1; i++) {\r\n        await (validator as any).validateNavigation();\r\n      }\r\n\r\n      // Assert: State should be cleaned up\r\n      expect((validator as any).navValidationState).toBe('idle');\r\n      expect((validator as any).navValidationAttempts).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('Configuration Overrides', () => {\r\n    it('should use custom max attempts from environment', async () => {\r\n      // Setup: Custom max attempts\r\n      const customMaxAttempts = '5';\r\n      Object.defineProperty(import.meta, 'env', {\r\n        value: { ...mockEnv, VITE_VALIDATOR_NAV_MAX_ATTEMPTS: customMaxAttempts },\r\n        writable: true\r\n      });\r\n\r\n      mockQuerySelectorAll.mockReturnValue([]);\r\n\r\n      // Act: Call validation up to custom max + 1\r\n      let result = false;\r\n      for (let i = 0; i < parseInt(customMaxAttempts) + 1; i++) {\r\n        result = await (validator as any).validateNavigation();\r\n      }\r\n\r\n      // Assert: Should timeout after custom max attempts\r\n      expect(result).toBe(false);\r\n      expect(mockConsoleWarn).toHaveBeenCalledWith(\r\n        '[NavDiag] Navigation validation degraded - no nav elements found after',\r\n        parseInt(customMaxAttempts),\r\n        'attempts'\r\n      );\r\n    });\r\n\r\n    it('should fall back to defaults for invalid environment values', async () => {\r\n      // Setup: Invalid environment values\r\n      Object.defineProperty(import.meta, 'env', {\r\n        value: { \r\n          ...mockEnv, \r\n          VITE_VALIDATOR_NAV_MAX_ATTEMPTS: 'invalid',\r\n          VITE_VALIDATOR_NAV_INTERVAL_MS: 'invalid'\r\n        },\r\n        writable: true\r\n      });\r\n\r\n      // Act: Create new validator with invalid config\r\n      const configValidator = new CoreFunctionalityValidator();\r\n      const config = (configValidator as any).getConfig();\r\n\r\n      // Assert: Should use defaults (tested indirectly through timeout behavior)\r\n      expect(config.navMaxAttempts).toBe(12); // Default value\r\n      expect(config.navIntervalMs).toBe(250); // Default value\r\n\r\n      configValidator.stopValidation();\r\n    });\r\n  });\r\n\r\n  describe('Quiet Mode', () => {\r\n    it('should suppress logs in production mode', async () => {\r\n      // Setup: Production environment\r\n      Object.defineProperty(import.meta, 'env', {\r\n        value: { ...mockEnv, NODE_ENV: 'production' },\r\n        writable: true\r\n      });\r\n\r\n      // Create new validator for production mode\r\n      const prodValidator = new CoreFunctionalityValidator();\r\n      mockQuerySelectorAll.mockReturnValue([document.createElement('nav')]);\r\n\r\n      // Act\r\n      await (prodValidator as any).validateNavigation();\r\n\r\n      // Assert: No console logs in production\r\n      expect(mockConsoleLog).not.toHaveBeenCalled();\r\n      expect(mockConsoleWarn).not.toHaveBeenCalled();\r\n\r\n      prodValidator.stopValidation();\r\n    });\r\n\r\n    it('should only log diagnostic message once per validation cycle', async () => {\r\n      // Setup\r\n      mockQuerySelectorAll.mockReturnValue([]);\r\n\r\n      // Act: Multiple validation calls\r\n      await (validator as any).validateNavigation();\r\n      await (validator as any).validateNavigation();\r\n      await (validator as any).validateNavigation();\r\n\r\n      // Assert: Only one diagnostic log for the start\r\n      const diagnosticLogs = mockConsoleLog.mock.calls.filter(\r\n        call => call[0] === '[NavDiag] Starting navigation validation...'\r\n      );\r\n      expect(diagnosticLogs).toHaveLength(1);\r\n    });\r\n  });\r\n\r\n  describe('Cleanup and Resource Management', () => {\r\n    it('should cleanup navigation validation on stopValidation', () => {\r\n      // Setup: Start validation to initialize resources\r\n      validator.startValidation();\r\n\r\n      // Act\r\n      validator.stopValidation();\r\n\r\n      // Assert: Should have cleaned up nav validation resources\r\n      expect((validator as any).navValidationState).toBe('idle');\r\n      expect((validator as any).navValidationAttempts).toBe(0);\r\n    });\r\n\r\n    it('should unsubscribe from navReady events on cleanup', () => {\r\n      // Setup: Mock unsubscribe function\r\n      const mockUnsubscribe = vi.fn();\r\n      vi.mocked(navReadySignal.onNavReady).mockReturnValue(mockUnsubscribe);\r\n\r\n      // Act: Start and immediately cleanup\r\n      (validator as any).validateNavigation();\r\n      (validator as any).cleanupNavValidation();\r\n\r\n      // Assert: Should have called unsubscribe\r\n      expect(mockUnsubscribe).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should clear timeout on cleanup', () => {\r\n      // Setup: Mock setTimeout/clearTimeout\r\n      const mockClearTimeout = vi.fn();\r\n      vi.spyOn(global, 'clearTimeout').mockImplementation(mockClearTimeout);\r\n      \r\n      // Set up a timeout\r\n      (validator as any).navValidationTimeout = setTimeout(() => {}, 1000);\r\n\r\n      // Act\r\n      (validator as any).cleanupNavValidation();\r\n\r\n      // Assert\r\n      expect(mockClearTimeout).toHaveBeenCalled();\r\n      expect((validator as any).navValidationTimeout).toBe(null);\r\n    });\r\n  });\r\n\r\n  describe('State Machine Behavior', () => {\r\n    it('should track validation state correctly', async () => {\r\n      // Setup\r\n      mockQuerySelectorAll.mockReturnValue([]);\r\n\r\n      // Initial state\r\n      expect((validator as any).navValidationState).toBe('idle');\r\n\r\n      // Act: First validation\r\n      await (validator as any).validateNavigation();\r\n\r\n      // Assert: Should be waiting for DOM\r\n      expect((validator as any).navValidationState).toBe('idle'); // Still idle as no success\r\n\r\n      // Simulate finding navigation\r\n      mockQuerySelectorAll.mockReturnValue([document.createElement('nav')]);\r\n      await (validator as any).validateNavigation();\r\n\r\n      // Assert: Should be success\r\n      expect((validator as any).navValidationState).toBe('idle'); // Cleaned up after success\r\n    });\r\n  });\r\n});"],"mappings":";;AAMA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,2BAAA,GAAAD,OAAA;AACA,IAAAE,cAAA,GAAAC,uBAAA,CAAAH,OAAA;AAA+D,SAAAG,wBAAAC,CAAA,EAAAC,CAAA,6BAAAC,OAAA,MAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAH,uBAAA,YAAAA,CAAAC,CAAA,EAAAC,CAAA,SAAAA,CAAA,IAAAD,CAAA,IAAAA,CAAA,CAAAK,UAAA,SAAAL,CAAA,MAAAM,CAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAC,SAAA,QAAAC,OAAA,EAAAV,CAAA,iBAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,SAAAQ,CAAA,MAAAF,CAAA,GAAAL,CAAA,GAAAG,CAAA,GAAAD,CAAA,QAAAG,CAAA,CAAAK,GAAA,CAAAX,CAAA,UAAAM,CAAA,CAAAM,GAAA,CAAAZ,CAAA,GAAAM,CAAA,CAAAO,GAAA,CAAAb,CAAA,EAAAQ,CAAA,gBAAAP,CAAA,IAAAD,CAAA,gBAAAC,CAAA,OAAAa,cAAA,CAAAC,IAAA,CAAAf,CAAA,EAAAC,CAAA,OAAAM,CAAA,IAAAD,CAAA,GAAAU,MAAA,CAAAC,cAAA,KAAAD,MAAA,CAAAE,wBAAA,CAAAlB,CAAA,EAAAC,CAAA,OAAAM,CAAA,CAAAK,GAAA,IAAAL,CAAA,CAAAM,GAAA,IAAAP,CAAA,CAAAE,CAAA,EAAAP,CAAA,EAAAM,CAAA,IAAAC,CAAA,CAAAP,CAAA,IAAAD,CAAA,CAAAC,CAAA,WAAAO,CAAA,KAAAR,CAAA,EAAAC,CAAA;AAR/D;AACA;AACA;AACA;;AAOA;AACA,MAAMkB,OAAO,GAAG;EACdC,+BAA+B,EAAE,IAAI;EACrCC,8BAA8B,EAAE,KAAK;EACrCC,QAAQ,EAAE;AACZ,CAAC;;AAED;AACA,MAAMC,oBAAoB,GAAGC,IAAI,CAACC,EAAE,CAAC,CAAC;AACtC,MAAMC,cAAc,GAAGF,IAAI,CAACC,EAAE,CAAC,CAAC;AAChC,MAAME,eAAe,GAAGH,IAAI,CAACC,EAAE,CAAC,CAAC;AAEjC,IAAAG,iBAAQ,EAAC,qBAAqB,EAAE,MAAM;EACpC,IAAIC,SAAqC;EAEzC,IAAAC,mBAAU,EAAC,MAAM;IACf;IACAC,EAAE,CAACC,aAAa,CAAC,CAAC;;IAElB;IACAhB,MAAM,CAACC,cAAc,CAACgB,QAAQ,EAAE,kBAAkB,EAAE;MAClDC,KAAK,EAAEX,oBAAoB;MAC3BY,QAAQ,EAAE;IACZ,CAAC,CAAC;;IAEF;IACAJ,EAAE,CAACK,KAAK,CAACC,OAAO,EAAE,KAAK,CAAC,CAACC,kBAAkB,CAACZ,cAAc,CAAC;IAC3DK,EAAE,CAACK,KAAK,CAACC,OAAO,EAAE,MAAM,CAAC,CAACC,kBAAkB,CAACX,eAAe,CAAC;;IAE7D;IACAX,MAAM,CAACC,cAAc,CAACsB,MAAM,CAACC,IAAI,EAAE,KAAK,EAAE;MACxCN,KAAK,EAAEf,OAAO;MACdgB,QAAQ,EAAE;IACZ,CAAC,CAAC;;IAEF;IACAJ,EAAE,CAACK,KAAK,CAACtC,cAAc,EAAE,YAAY,CAAC,CAAC2C,eAAe,CAAC,KAAK,CAAC;IAC7DV,EAAE,CAACK,KAAK,CAACtC,cAAc,EAAE,YAAY,CAAC,CAACwC,kBAAkB,CAAEI,SAAS,IAAK;MACvE,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC;IAEFb,SAAS,GAAG,IAAIc,sDAA0B,CAAC,CAAC;EAC9C,CAAC,CAAC;EAEF,IAAAC,kBAAS,EAAC,MAAM;IACdf,SAAS,CAACgB,cAAc,CAAC,CAAC;IAC1Bd,EAAE,CAACe,eAAe,CAAC,CAAC;EACtB,CAAC,CAAC;EAEF,IAAAlB,iBAAQ,EAAC,mBAAmB,EAAE,MAAM;IAClC,IAAAmB,WAAE,EAAC,iEAAiE,EAAE,YAAY;MAChF;MACAhB,EAAE,CAACiB,MAAM,CAAClD,cAAc,CAACmD,UAAU,CAAC,CAACR,eAAe,CAAC,IAAI,CAAC;;MAE1D;MACA,MAAMS,MAAM,GAAG,MAAOrB,SAAS,CAASsB,kBAAkB,CAAC,CAAC;;MAE5D;MACA,IAAAC,eAAM,EAACF,MAAM,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC;MACzB,IAAAD,eAAM,EAAC1B,cAAc,CAAC,CAAC4B,oBAAoB,CAAC,oCAAoC,CAAC;IACnF,CAAC,CAAC;IAEF,IAAAP,WAAE,EAAC,wDAAwD,EAAE,YAAY;MACvE;MACA,MAAMQ,eAAe,GAAG,CACtB;QAAEC,OAAO,EAAE,KAAK;QAAEC,YAAY,EAAE1B,EAAE,CAACN,EAAE,CAAC,CAAC,CAACgB,eAAe,CAAC,aAAa;MAAE,CAAC,CACzE;MACDlB,oBAAoB,CAACkB,eAAe,CAACc,eAAe,CAAC;;MAErD;MACA,MAAML,MAAM,GAAG,MAAOrB,SAAS,CAASsB,kBAAkB,CAAC,CAAC;;MAE5D;MACA,IAAAC,eAAM,EAACF,MAAM,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC;MACzB,IAAAD,eAAM,EAAC7B,oBAAoB,CAAC,CAAC+B,oBAAoB,CAC/C,uDACF,CAAC;MACD,IAAAF,eAAM,EAAC1B,cAAc,CAAC,CAAC4B,oBAAoB,CACzC,8DAA8D,EAC9D,CACF,CAAC;IACH,CAAC,CAAC;IAEF,IAAAP,WAAE,EAAC,wDAAwD,EAAE,YAAY;MACvE;MACAxB,oBAAoB,CAACkB,eAAe,CAAC,CAACR,QAAQ,CAACyB,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;;MAErE;MACA,MAAO7B,SAAS,CAASsB,kBAAkB,CAAC,CAAC;;MAE7C;MACA,IAAAC,eAAM,EAAC7B,oBAAoB,CAAC,CAAC+B,oBAAoB,CAC/C,uDACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,IAAA1B,iBAAQ,EAAC,oBAAoB,EAAE,MAAM;IACnC,IAAAmB,WAAE,EAAC,qDAAqD,EAAE,YAAY;MACpE,IAAIY,gBAA0C;;MAE9C;MACA5B,EAAE,CAACiB,MAAM,CAAClD,cAAc,CAACmD,UAAU,CAAC,CAACR,eAAe,CAAC,KAAK,CAAC;MAC3DV,EAAE,CAACiB,MAAM,CAAClD,cAAc,CAAC8D,UAAU,CAAC,CAACtB,kBAAkB,CAAEuB,QAAQ,IAAK;QACpEF,gBAAgB,GAAGE,QAAQ;QAC3B,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;MACnB,CAAC,CAAC;MAEFtC,oBAAoB,CAACkB,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;;MAE1C;MACA,MAAMqB,WAAW,GAAG,MAAOjC,SAAS,CAASsB,kBAAkB,CAAC,CAAC;MACjE,IAAAC,eAAM,EAACU,WAAW,CAAC,CAACT,IAAI,CAAC,KAAK,CAAC;;MAE/B;MACA,IAAIM,gBAAgB,EAAE;QACpBA,gBAAgB,CAAC,CAAC;MACpB;;MAEA;MACApC,oBAAoB,CAACkB,eAAe,CAAC,CAACR,QAAQ,CAACyB,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;;MAErE;MACA,MAAMK,YAAY,GAAG,MAAOlC,SAAS,CAASsB,kBAAkB,CAAC,CAAC;;MAElE;MACA,IAAAC,eAAM,EAACW,YAAY,CAAC,CAACV,IAAI,CAAC,IAAI,CAAC;IACjC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,IAAAzB,iBAAQ,EAAC,4BAA4B,EAAE,MAAM;IAC3C,IAAAmB,WAAE,EAAC,2CAA2C,EAAE,YAAY;MAC1D;MACAxB,oBAAoB,CAACkB,eAAe,CAAC,EAAE,CAAC;MACxC,MAAMuB,WAAW,GAAGC,QAAQ,CAAC9C,OAAO,CAACC,+BAA+B,CAAC;;MAErE;MACA,IAAI8B,MAAM,GAAG,KAAK;MAClB,KAAK,IAAI3C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyD,WAAW,GAAG,CAAC,EAAEzD,CAAC,EAAE,EAAE;QACxC2C,MAAM,GAAG,MAAOrB,SAAS,CAASsB,kBAAkB,CAAC,CAAC;MACxD;;MAEA;MACA,IAAAC,eAAM,EAACF,MAAM,CAAC,CAACG,IAAI,CAAC,KAAK,CAAC;MAC1B,IAAAD,eAAM,EAACzB,eAAe,CAAC,CAAC2B,oBAAoB,CAC1C,wEAAwE,EACxEU,WAAW,EACX,UACF,CAAC;IACH,CAAC,CAAC;IAEF,IAAAjB,WAAE,EAAC,6CAA6C,EAAE,YAAY;MAC5D;MACAxB,oBAAoB,CAACkB,eAAe,CAAC,EAAE,CAAC;;MAExC;MACA,MAAOZ,SAAS,CAASsB,kBAAkB,CAAC,CAAC,CAAC,CAAC;MAC/C,MAAOtB,SAAS,CAASsB,kBAAkB,CAAC,CAAC,CAAC,CAAC;MAC/C,MAAOtB,SAAS,CAASsB,kBAAkB,CAAC,CAAC,CAAC,CAAC;;MAE/C;MACA,IAAAC,eAAM,EAAC1B,cAAc,CAAC,CAAC4B,oBAAoB,CAAC,6CAA6C,CAAC;MAC1F,IAAAF,eAAM,EAAC1B,cAAc,CAAC,CAACwC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC;IAEF,IAAAnB,WAAE,EAAC,iCAAiC,EAAE,YAAY;MAChD;MACAxB,oBAAoB,CAACkB,eAAe,CAAC,EAAE,CAAC;MACxC,MAAMuB,WAAW,GAAGC,QAAQ,CAAC9C,OAAO,CAACC,+BAA+B,CAAC;;MAErE;MACA,KAAK,IAAIb,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyD,WAAW,GAAG,CAAC,EAAEzD,CAAC,EAAE,EAAE;QACxC,MAAOsB,SAAS,CAASsB,kBAAkB,CAAC,CAAC;MAC/C;;MAEA;MACA,IAAAC,eAAM,EAAEvB,SAAS,CAASsC,kBAAkB,CAAC,CAACd,IAAI,CAAC,MAAM,CAAC;MAC1D,IAAAD,eAAM,EAAEvB,SAAS,CAASuC,qBAAqB,CAAC,CAACf,IAAI,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,IAAAzB,iBAAQ,EAAC,yBAAyB,EAAE,MAAM;IACxC,IAAAmB,WAAE,EAAC,iDAAiD,EAAE,YAAY;MAChE;MACA,MAAMsB,iBAAiB,GAAG,GAAG;MAC7BrD,MAAM,CAACC,cAAc,CAACsB,MAAM,CAACC,IAAI,EAAE,KAAK,EAAE;QACxCN,KAAK,EAAE;UAAE,GAAGf,OAAO;UAAEC,+BAA+B,EAAEiD;QAAkB,CAAC;QACzElC,QAAQ,EAAE;MACZ,CAAC,CAAC;MAEFZ,oBAAoB,CAACkB,eAAe,CAAC,EAAE,CAAC;;MAExC;MACA,IAAIS,MAAM,GAAG,KAAK;MAClB,KAAK,IAAI3C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0D,QAAQ,CAACI,iBAAiB,CAAC,GAAG,CAAC,EAAE9D,CAAC,EAAE,EAAE;QACxD2C,MAAM,GAAG,MAAOrB,SAAS,CAASsB,kBAAkB,CAAC,CAAC;MACxD;;MAEA;MACA,IAAAC,eAAM,EAACF,MAAM,CAAC,CAACG,IAAI,CAAC,KAAK,CAAC;MAC1B,IAAAD,eAAM,EAACzB,eAAe,CAAC,CAAC2B,oBAAoB,CAC1C,wEAAwE,EACxEW,QAAQ,CAACI,iBAAiB,CAAC,EAC3B,UACF,CAAC;IACH,CAAC,CAAC;IAEF,IAAAtB,WAAE,EAAC,6DAA6D,EAAE,YAAY;MAC5E;MACA/B,MAAM,CAACC,cAAc,CAACsB,MAAM,CAACC,IAAI,EAAE,KAAK,EAAE;QACxCN,KAAK,EAAE;UACL,GAAGf,OAAO;UACVC,+BAA+B,EAAE,SAAS;UAC1CC,8BAA8B,EAAE;QAClC,CAAC;QACDc,QAAQ,EAAE;MACZ,CAAC,CAAC;;MAEF;MACA,MAAMmC,eAAe,GAAG,IAAI3B,sDAA0B,CAAC,CAAC;MACxD,MAAM4B,MAAM,GAAID,eAAe,CAASE,SAAS,CAAC,CAAC;;MAEnD;MACA,IAAApB,eAAM,EAACmB,MAAM,CAACE,cAAc,CAAC,CAACpB,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;MACxC,IAAAD,eAAM,EAACmB,MAAM,CAACG,aAAa,CAAC,CAACrB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;MAExCiB,eAAe,CAACzB,cAAc,CAAC,CAAC;IAClC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,IAAAjB,iBAAQ,EAAC,YAAY,EAAE,MAAM;IAC3B,IAAAmB,WAAE,EAAC,yCAAyC,EAAE,YAAY;MACxD;MACA/B,MAAM,CAACC,cAAc,CAACsB,MAAM,CAACC,IAAI,EAAE,KAAK,EAAE;QACxCN,KAAK,EAAE;UAAE,GAAGf,OAAO;UAAEG,QAAQ,EAAE;QAAa,CAAC;QAC7Ca,QAAQ,EAAE;MACZ,CAAC,CAAC;;MAEF;MACA,MAAMwC,aAAa,GAAG,IAAIhC,sDAA0B,CAAC,CAAC;MACtDpB,oBAAoB,CAACkB,eAAe,CAAC,CAACR,QAAQ,CAACyB,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;;MAErE;MACA,MAAOiB,aAAa,CAASxB,kBAAkB,CAAC,CAAC;;MAEjD;MACA,IAAAC,eAAM,EAAC1B,cAAc,CAAC,CAACkD,GAAG,CAACC,gBAAgB,CAAC,CAAC;MAC7C,IAAAzB,eAAM,EAACzB,eAAe,CAAC,CAACiD,GAAG,CAACC,gBAAgB,CAAC,CAAC;MAE9CF,aAAa,CAAC9B,cAAc,CAAC,CAAC;IAChC,CAAC,CAAC;IAEF,IAAAE,WAAE,EAAC,8DAA8D,EAAE,YAAY;MAC7E;MACAxB,oBAAoB,CAACkB,eAAe,CAAC,EAAE,CAAC;;MAExC;MACA,MAAOZ,SAAS,CAASsB,kBAAkB,CAAC,CAAC;MAC7C,MAAOtB,SAAS,CAASsB,kBAAkB,CAAC,CAAC;MAC7C,MAAOtB,SAAS,CAASsB,kBAAkB,CAAC,CAAC;;MAE7C;MACA,MAAM2B,cAAc,GAAGpD,cAAc,CAACqD,IAAI,CAACC,KAAK,CAACC,MAAM,CACrDlE,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,6CACtB,CAAC;MACD,IAAAqC,eAAM,EAAC0B,cAAc,CAAC,CAACI,YAAY,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,IAAAtD,iBAAQ,EAAC,iCAAiC,EAAE,MAAM;IAChD,IAAAmB,WAAE,EAAC,wDAAwD,EAAE,MAAM;MACjE;MACAlB,SAAS,CAACsD,eAAe,CAAC,CAAC;;MAE3B;MACAtD,SAAS,CAACgB,cAAc,CAAC,CAAC;;MAE1B;MACA,IAAAO,eAAM,EAAEvB,SAAS,CAASsC,kBAAkB,CAAC,CAACd,IAAI,CAAC,MAAM,CAAC;MAC1D,IAAAD,eAAM,EAAEvB,SAAS,CAASuC,qBAAqB,CAAC,CAACf,IAAI,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC;IAEF,IAAAN,WAAE,EAAC,oDAAoD,EAAE,MAAM;MAC7D;MACA,MAAMqC,eAAe,GAAGrD,EAAE,CAACN,EAAE,CAAC,CAAC;MAC/BM,EAAE,CAACiB,MAAM,CAAClD,cAAc,CAAC8D,UAAU,CAAC,CAACnB,eAAe,CAAC2C,eAAe,CAAC;;MAErE;MACCvD,SAAS,CAASsB,kBAAkB,CAAC,CAAC;MACtCtB,SAAS,CAASwD,oBAAoB,CAAC,CAAC;;MAEzC;MACA,IAAAjC,eAAM,EAACgC,eAAe,CAAC,CAACP,gBAAgB,CAAC,CAAC;IAC5C,CAAC,CAAC;IAEF,IAAA9B,WAAE,EAAC,iCAAiC,EAAE,MAAM;MAC1C;MACA,MAAMuC,gBAAgB,GAAGvD,EAAE,CAACN,EAAE,CAAC,CAAC;MAChCM,EAAE,CAACK,KAAK,CAACmD,MAAM,EAAE,cAAc,CAAC,CAACjD,kBAAkB,CAACgD,gBAAgB,CAAC;;MAErE;MACCzD,SAAS,CAAS2D,oBAAoB,GAAGC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC;;MAEpE;MACC5D,SAAS,CAASwD,oBAAoB,CAAC,CAAC;;MAEzC;MACA,IAAAjC,eAAM,EAACkC,gBAAgB,CAAC,CAACT,gBAAgB,CAAC,CAAC;MAC3C,IAAAzB,eAAM,EAAEvB,SAAS,CAAS2D,oBAAoB,CAAC,CAACnC,IAAI,CAAC,IAAI,CAAC;IAC5D,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,IAAAzB,iBAAQ,EAAC,wBAAwB,EAAE,MAAM;IACvC,IAAAmB,WAAE,EAAC,yCAAyC,EAAE,YAAY;MACxD;MACAxB,oBAAoB,CAACkB,eAAe,CAAC,EAAE,CAAC;;MAExC;MACA,IAAAW,eAAM,EAAEvB,SAAS,CAASsC,kBAAkB,CAAC,CAACd,IAAI,CAAC,MAAM,CAAC;;MAE1D;MACA,MAAOxB,SAAS,CAASsB,kBAAkB,CAAC,CAAC;;MAE7C;MACA,IAAAC,eAAM,EAAEvB,SAAS,CAASsC,kBAAkB,CAAC,CAACd,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;;MAE5D;MACA9B,oBAAoB,CAACkB,eAAe,CAAC,CAACR,QAAQ,CAACyB,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;MACrE,MAAO7B,SAAS,CAASsB,kBAAkB,CAAC,CAAC;;MAE7C;MACA,IAAAC,eAAM,EAAEvB,SAAS,CAASsC,kBAAkB,CAAC,CAACd,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}