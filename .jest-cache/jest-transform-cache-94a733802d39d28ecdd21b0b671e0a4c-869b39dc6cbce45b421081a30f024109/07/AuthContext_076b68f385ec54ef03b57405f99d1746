284c70c6aaba331a7552d93f65d736c0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAuth = exports._AuthProvider = exports._AuthContext = void 0;
var _react = _interopRequireWildcard(require("react"));
var _authService = require("../services/authService");
var _logger = require("../utils/logger");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Authentication context and provider for managing user authentication state and actions.
 *
 * Provides login, logout, registration, and password management for the app.
 *
 * @module contexts/AuthContext
 */

/**
 * AuthContextType
 * Provides authentication state and actions for the app.
 */

// Stub register method for test compatibility
const register = async (_email, _password) => {
  // In a real implementation, this would call an API endpoint
  return Promise.resolve();
};

/**
 * React context for authentication state and actions.
 */
const _AuthContext = exports._AuthContext = /*#__PURE__*/(0, _react.createContext)(undefined);

/**
 * AuthProvider component.
 * Wrap your app with this provider to enable authentication state and actions.
 * @param {object} props - React children.
 * @returns {JSX.Element} The provider component.
 */
/**
 * useAuthState
 * Custom hook to encapsulate authentication state logic for modularity and testability.
 */
function useAuthState() {
  const [user, setUser] = (0, _react.useState)(null);
  const [loading, setLoading] = (0, _react.useState)(false);
  const [error, setError] = (0, _react.useState)(null);
  const [isAdmin, setIsAdmin] = (0, _react.useState)(false);
  const [isAuthenticated, setIsAuthenticated] = (0, _react.useState)(false);
  const [requiresPasswordChange, setRequiresPasswordChange] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    // Skip auth restoration if bootstrap already handled it
    const globalState = window;
    if (typeof window !== 'undefined' && globalState.__A1_AUTH_RESTORED) {
      return;
    }
    const _initializeAuth = () => {
      if (_authService._authService.isAuthenticated()) {
        const _storedUser = _authService._authService.getUser();
        if (_storedUser) {
          setUser(_storedUser);
          setIsAdmin(_authService._authService.isAdmin());
          setIsAuthenticated(true);
          setRequiresPasswordChange(_authService._authService.requiresPasswordChange());

          // Mark as restored to prevent duplicate logs
          if (typeof window !== 'undefined') {
            globalState.__A1_AUTH_RESTORED = true;
          }

          // Structured logging for audit (only if not already restored by bootstrap)
          _logger.logger.info('🔐 Authentication restored', {
            email: _storedUser.email,
            role: _storedUser.role,
            userId: _storedUser.id
          }, 'Auth');
        }
      }
    };
    // In tests we want immediate auth restoration to avoid timing flakiness
    if (process.env.NODE_ENV === 'test') {
      _initializeAuth();
    } else {
      setTimeout(_initializeAuth, 100);
    }
  }, []);
  const login = async (email, password) => {
    setLoading(true);
    setError(null);
    try {
      const _response = await _authService._authService.login(email, password);
      if (_response.success && _response.user) {
        setUser(_response.user);
        setIsAdmin(_response.user.role === 'admin' || _response.user.permissions?.includes('admin') || false);
        setIsAuthenticated(true);
        setRequiresPasswordChange(_response.requiresPasswordChange || false);
      } else {
        throw new Error(_response.message || 'Login failed');
      }
    } catch (e) {
      setError(e.message || 'Login failed');
      throw e;
    } finally {
      setLoading(false);
    }
  };
  const logout = async () => {
    setLoading(true);
    setError(null);
    try {
      await _authService._authService.logout();
      setUser(null);
      setIsAdmin(false);
      setIsAuthenticated(false);
      setRequiresPasswordChange(false);
    } catch (e) {
      setError(e.message || 'Logout failed');
    } finally {
      setLoading(false);
    }
  };
  const changePassword = async data => {
    setLoading(true);
    setError(null);
    try {
      const _response = await _authService._authService.changePassword(data);
      if (_response.success) {
        const _updatedUser = _authService._authService.getUser();
        if (_updatedUser) {
          setUser(_updatedUser);
          setRequiresPasswordChange(false);
        }
      } else {
        throw new Error(_response.message || 'Password change failed');
      }
    } catch (e) {
      setError(e.message || 'Password change failed');
      throw e;
    } finally {
      setLoading(false);
    }
  };
  const clearError = () => {
    setError(null);
  };
  return {
    user,
    loading,
    error,
    isAdmin,
    isAuthenticated,
    requiresPasswordChange,
    login,
    logout,
    changePassword,
    clearError,
    register
  };
}

/**
 * AuthProvider component.
 * Wrap your app with this provider to enable authentication state and actions.
 * Uses useAuthState for modularity and testability.
 * @param {object} props - React children.
 * @returns {JSX.Element} The provider component.
 */
const AuthProvider = ({
  children
}) => {
  const contextValue = useAuthState();
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.Provider, {
    value: contextValue,
    children: children
  });
};
const _AuthProvider = exports._AuthProvider = AuthProvider;

/**
 * useAuth
 * Access the authentication context in any component.
 */
const useAuth = () => {
  const ctx = (0, _react.useContext)(_AuthContext);
  if (!ctx) throw new Error('useAuth must be used within AuthProvider');
  return ctx;
};
exports.useAuth = useAuth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,