09e191ae8ac5af9fa9c4f778c48f1385
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__resetLocationMocks = void 0;
require("@testing-library/jest-dom/extend-expect");
// Lightweight test setup for Jest + jsdom
// Provide jest-dom matchers (toBeInTheDocument, etc.)

// - Provide a minimal getContext implementation to avoid jsdom "Not implemented: getContext" errors
// - Stub URL.createObjectURL to avoid errors in export CSV tests

// Provide a basic 2D context mock
if (typeof HTMLCanvasElement !== 'undefined' && !HTMLCanvasElement.prototype.getContext) {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  HTMLCanvasElement.prototype.getContext = function (type) {
    if (type === '2d') {
      return {
        fillRect: () => {},
        clearRect: () => {},
        getImageData: (x, y, w, h) => ({
          data: new Array(w * h * 4)
        }),
        putImageData: () => {},
        createImageData: () => [],
        setTransform: () => {},
        drawImage: () => {},
        save: () => {},
        fillText: () => {},
        restore: () => {},
        beginPath: () => {},
        moveTo: () => {},
        lineTo: () => {},
        closePath: () => {},
        stroke: () => {},
        translate: () => {},
        scale: () => {},
        rotate: () => {},
        arc: () => {}
      };
    }
    return null;
  };
}

// Stub createObjectURL and revoke for tests
if (typeof URL !== 'undefined' && !URL.createObjectURL) {
  // @ts-ignore
  URL.createObjectURL = blob => 'blob://test';
  // @ts-ignore
  URL.revokeObjectURL = url => {};
}

// Silence console warnings from navigation/getContext in some jest environments
const _consoleWarn = console.warn;
console.warn = (...args) => {
  const msg = String(args[0] ?? '');
  if (msg.includes('Not implemented: navigation') || msg.includes('Not implemented: HTMLCanvasElement.prototype.getContext')) {
    return;
  }
  _consoleWarn(...args);
};

// Suppress framer-motion DOM prop warnings in tests by filtering props
try {
  // @ts-ignore
  const originalCreateElement = document.createElement;
  // Wrap createElement to remove whileHover/whileTap attributes when added to DOM
  // This is a lightweight compatibility shim for framer-motion in jsdom tests
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  document.createElement = function (tagName, options) {
    const el = originalCreateElement.call(document, tagName, options);
    const originalSetAttribute = el.setAttribute.bind(el);
    el.setAttribute = function (name, value) {
      if (name === 'whilehover' || name === 'whiletap' || name === 'whileHover' || name === 'whileTap') {
        return;
      }
      return originalSetAttribute(name, value);
    };
    return el;
  };
} catch (e) {
  // ignore in environments we cannot patch
}

// Jest environment: mock navigation functions that jsdom doesn't implement
if (typeof window !== 'undefined' && typeof window.location !== 'undefined') {
  // Preserve original descriptors if present
  try {
    // Replace assign and reload with jest.fn() so tests can assert calls without throwing
    // @ts-ignore
    if (!window.location.assign || typeof window.location.assign !== 'function') {
      // @ts-ignore
      window.location.assign = url => {
        // mimic behavior: no-op in test
      };
    }
    // @ts-ignore
    if (!window.location.reload || typeof window.location.reload !== 'function') {
      // @ts-ignore
      window.location.reload = () => {
        // no-op in tests
      };
    }
  } catch (e) {
    // ignore modification errors in some environments
  }
}

// Helper to reset window.location mocks between tests (call from tests if needed)
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const __resetLocationMocks = () => {
  try {
    // @ts-ignore
    if (window?.location?.assign && window.location.assign.mockReset) window.location.assign.mockReset();
    // @ts-ignore
    if (window?.location?.reload && window.location.reload.mockReset) window.location.reload.mockReset();
  } catch (_) {}
};
exports.__resetLocationMocks = __resetLocationMocks;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,