{"version":3,"names":["_logger","require","EnhancedLogger","constructor","cacheMetrics","hits","misses","sets","invalidations","hitRate","apiMetrics","totalRequests","successfulRequests","errorRequests","averageResponseTime","responseTimes","startTime","Date","now","debug","component","operation","message","data","err","meta","error","name","stack","logger","info","warn","logCacheOperation","key","metadata","total","currentHitRate","toFixed","logApiRequest","endpoint","method","params","duration","status","push","length","slice","reduce","sum","time","logLevel","getMetrics","memoryUsage","perf","performance","undefined","memory","usedJSHeapSize","enhanced","cache","api","uptime","getRequestMetrics","requestMetrics","cacheHits","cacheMisses","errors","avgResponseTime","dataQualityScore","validationErrors","fallbacksUsed","transformationErrors","slowQueries","errorsByType","errorsByEndpoint","lastUpdate","logDataValidation","sport","validated","errorsCount","averageQuality","resetMetrics","enhancedLogger","exports"],"sources":["enhancedLogger.ts"],"sourcesContent":["/**\r\n * Enhanced logger with specific methods for cache operations, API requests, and metrics\r\n * Used by EnhancedDataManager and other services\r\n */\r\n\r\nimport { logger } from './logger';\r\n\r\nexport interface CacheMetrics {\r\n  hits: number;\r\n  misses: number;\r\n  sets: number;\r\n  invalidations: number;\r\n  hitRate: number;\r\n}\r\n\r\nexport interface ApiMetrics {\r\n  totalRequests: number;\r\n  successfulRequests: number;\r\n  errorRequests: number;\r\n  averageResponseTime: number;\r\n}\r\n\r\nexport interface EnhancedMetrics {\r\n  cache: CacheMetrics;\r\n  api: ApiMetrics;\r\n  uptime: number;\r\n  memoryUsage?: number;\r\n}\r\n\r\nexport interface EnhancedRequestMetrics {\r\n  totalRequests: number;\r\n  cacheHits: number;\r\n  cacheMisses: number;\r\n  errors: number;\r\n  avgResponseTime: number;\r\n  dataQualityScore: number;\r\n  validationErrors: number;\r\n  fallbacksUsed: number;\r\n  transformationErrors: number;\r\n  slowQueries: any[];\r\n  errorsByType: Record<string, number>;\r\n  errorsByEndpoint: Record<string, number>;\r\n  lastUpdate: number;\r\n}\r\n\r\nclass EnhancedLogger {\r\n  private cacheMetrics: CacheMetrics = {\r\n    hits: 0,\r\n    misses: 0,\r\n    sets: 0,\r\n    invalidations: 0,\r\n    hitRate: 0\r\n  };\r\n\r\n  private apiMetrics: ApiMetrics = {\r\n    totalRequests: 0,\r\n    successfulRequests: 0,\r\n    errorRequests: 0,\r\n    averageResponseTime: 0\r\n  };\r\n\r\n  private responseTimes: number[] = [];\r\n  private startTime = Date.now();\r\n\r\n  /**\r\n   * Standard logging methods with enhanced context\r\n   */\r\n  debug(component: string, operation: string, message: string, data?: Record<string, unknown>, err?: Error) {\r\n    const meta = { ...(data || {}), ...(err ? { error: { name: err.name, message: err.message, stack: err.stack } } : {}) } as Record<string, unknown>;\r\n    logger.debug(`[${component}:${operation}] ${message}`, meta);\r\n  }\r\n\r\n  info(component: string, operation: string, message: string, data?: Record<string, unknown>, err?: Error) {\r\n    const meta = { ...(data || {}), ...(err ? { error: { name: err.name, message: err.message } } : {}) } as Record<string, unknown>;\r\n    logger.info(`[${component}:${operation}] ${message}`, meta);\r\n  }\r\n\r\n  warn(component: string, operation: string, message: string, data?: Record<string, unknown>, err?: Error) {\r\n    const meta = { ...(data || {}), ...(err ? { error: { name: err.name, message: err.message } } : {}) } as Record<string, unknown>;\r\n    logger.warn(`[${component}:${operation}] ${message}`, meta);\r\n  }\r\n\r\n  error(component: string, operation: string, message: string, data?: Record<string, unknown>, err?: Error) {\r\n    const meta = { ...(data || {}), ...(err ? { error: { name: err.name, message: err.message, stack: err.stack } } : {}) } as Record<string, unknown>;\r\n    logger.error(`[${component}:${operation}] ${message}`, meta);\r\n  }\r\n\r\n  /**\r\n   * Cache operation logging\r\n   */\r\n  logCacheOperation(operation: 'hit' | 'miss' | 'set' | 'invalidate', key: string, metadata?: Record<string, unknown>) {\r\n    switch (operation) {\r\n      case 'hit':\r\n        this.cacheMetrics.hits++;\r\n        break;\r\n      case 'miss':\r\n        this.cacheMetrics.misses++;\r\n        break;\r\n      case 'set':\r\n        this.cacheMetrics.sets++;\r\n        break;\r\n      case 'invalidate':\r\n        this.cacheMetrics.invalidations++;\r\n        break;\r\n    }\r\n\r\n    // Update hit rate\r\n    const total = this.cacheMetrics.hits + this.cacheMetrics.misses;\r\n    this.cacheMetrics.hitRate = total > 0 ? this.cacheMetrics.hits / total : 0;\r\n\r\n    this.debug('Cache', operation, `Cache ${operation} for key: ${key}`, {\r\n      key,\r\n      operation,\r\n      ...metadata,\r\n      currentHitRate: this.cacheMetrics.hitRate.toFixed(2)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * API request logging with metrics tracking\r\n   */\r\n  logApiRequest(\r\n    endpoint: string, \r\n    method: string, \r\n    params: Record<string, unknown>, \r\n    duration: number, \r\n    status: 'success' | 'error' | 'cached', \r\n    metadata?: Record<string, unknown>\r\n  ) {\r\n    if (status !== 'cached') {\r\n      this.apiMetrics.totalRequests++;\r\n      \r\n      if (status === 'success') {\r\n        this.apiMetrics.successfulRequests++;\r\n        this.responseTimes.push(duration);\r\n        \r\n        // Keep only last 100 response times for average calculation\r\n        if (this.responseTimes.length > 100) {\r\n          this.responseTimes = this.responseTimes.slice(-100);\r\n        }\r\n        \r\n        // Update average response time\r\n        this.apiMetrics.averageResponseTime = \r\n          this.responseTimes.reduce((sum, time) => sum + time, 0) / this.responseTimes.length;\r\n      } else if (status === 'error') {\r\n        this.apiMetrics.errorRequests++;\r\n      }\r\n    }\r\n\r\n    const logLevel = status === 'error' ? 'warn' : 'debug';\r\n    this[logLevel]('API', 'request', `${method} ${endpoint} - ${status}`, {\r\n      endpoint,\r\n      method,\r\n      params,\r\n      duration: `${duration}ms`,\r\n      status,\r\n      ...metadata\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get comprehensive metrics\r\n   */\r\n  getMetrics(): EnhancedMetrics {\r\n    // Build EnhancedMetrics\r\n    const memoryUsage = (() => {\r\n      try {\r\n        const perf = typeof performance !== 'undefined' ? (performance as unknown as { memory?: { usedJSHeapSize?: number }}) : undefined;\r\n        return perf?.memory?.usedJSHeapSize;\r\n      } catch {\r\n        return undefined;\r\n      }\r\n    })();\r\n\r\n    const enhanced: EnhancedMetrics = {\r\n      cache: { ...this.cacheMetrics },\r\n      api: { ...this.apiMetrics },\r\n      uptime: Date.now() - this.startTime,\r\n      memoryUsage: memoryUsage,\r\n    };\r\n\r\n    return enhanced;\r\n  }\r\n\r\n  /**\r\n   * Compatibility: return metrics shaped like EnhancedRequestMetrics for services expecting that shape\r\n   */\r\n  getRequestMetrics(): EnhancedRequestMetrics {\r\n  const now = Date.now();\r\n  const requestMetrics: EnhancedRequestMetrics = {\r\n      totalRequests: this.apiMetrics.totalRequests,\r\n      cacheHits: this.cacheMetrics.hits,\r\n      cacheMisses: this.cacheMetrics.misses,\r\n      errors: this.apiMetrics.errorRequests || 0,\r\n      avgResponseTime: this.apiMetrics.averageResponseTime,\r\n      dataQualityScore: 0,\r\n      validationErrors: 0,\r\n      fallbacksUsed: 0,\r\n      transformationErrors: 0,\r\n      slowQueries: [],\r\n      errorsByType: {},\r\n      errorsByEndpoint: {},\r\n      lastUpdate: now,\r\n    };\r\n\r\n    return requestMetrics;\r\n  }\r\n\r\n  /**\r\n   * Log data validation metrics and context\r\n   */\r\n  logDataValidation(\r\n    operation: string,\r\n    sport: string,\r\n    total: number,\r\n    validated: number,\r\n    errorsCount: number,\r\n    averageQuality: number,\r\n    duration: number,\r\n    metadata?: Record<string, unknown>,\r\n    err?: Error\r\n  ) {\r\n    this.info('DataValidator', operation, `Validation summary for ${sport}: ${validated}/${total} valid`, {\r\n      sport,\r\n      total,\r\n      validated,\r\n      errorsCount,\r\n      averageQuality,\r\n      duration,\r\n      ...metadata,\r\n    }, err);\r\n  }\r\n\r\n  /**\r\n   * Reset metrics (useful for testing)\r\n   */\r\n  resetMetrics() {\r\n    this.cacheMetrics = {\r\n      hits: 0,\r\n      misses: 0,\r\n      sets: 0,\r\n      invalidations: 0,\r\n      hitRate: 0\r\n    };\r\n\r\n    this.apiMetrics = {\r\n      totalRequests: 0,\r\n      successfulRequests: 0,\r\n      errorRequests: 0,\r\n      averageResponseTime: 0\r\n    };\r\n\r\n    this.responseTimes = [];\r\n    this.startTime = Date.now();\r\n  }\r\n}\r\n\r\nexport const enhancedLogger = new EnhancedLogger();"],"mappings":"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","ignoreList":[]}