{"file":"C:\\Users\\bcmad\\Downloads\\A1Betting7-13.2\\frontend\\src\\services\\serviceWorkerManager.ts","mappings":"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","names":[],"sources":["C:\\Users\\bcmad\\Downloads\\A1Betting7-13.2\\frontend\\src\\services\\serviceWorkerManager.ts"],"sourcesContent":["/**\r\n * Service Worker Registration - 2025 Best Practices\r\n *\r\n * Features:\r\n * - Automatic registration with update detection\r\n * - User-friendly update prompts\r\n * - Background sync capability\r\n * - Push notification support\r\n */\r\n\r\nimport React from 'react';\r\nimport { enhancedLogger } from '../utils/enhancedLogger';\r\n\r\ninterface ServiceWorkerUpdateState {\r\n  hasUpdate: boolean;\r\n  newWorker: ServiceWorker | null;\r\n  isInstalling: boolean;\r\n  error: string | null;\r\n}\r\n\r\ntype UpdateCallback = (state: ServiceWorkerUpdateState) => void;\r\n\r\nclass ServiceWorkerManager {\r\n  private registration: ServiceWorkerRegistration | null = null;\r\n  private updateCallbacks: Set<UpdateCallback> = new Set();\r\n  private state: ServiceWorkerUpdateState = {\r\n    hasUpdate: false,\r\n    newWorker: null,\r\n    isInstalling: false,\r\n    error: null,\r\n  };\r\n\r\n  /**\r\n   * Register the service worker with automatic update detection\r\n   */\r\n  async register(): Promise<ServiceWorkerRegistration | null> {\r\n    if (!('serviceWorker' in navigator)) {\r\n      enhancedLogger.warn('ServiceWorker', 'register', 'Not supported in this browser');\r\n      return null;\r\n    }\r\n\r\n    try {\r\n  enhancedLogger.info('ServiceWorker', 'register', 'Registering with 2025 best practices...');\r\n\r\n      const registration = await navigator.serviceWorker.register('/sw.js', {\r\n        scope: '/',\r\n        updateViaCache: 'none', // Always check for updates\r\n      });\r\n\r\n      this.registration = registration;\r\n\r\n      // Set up update detection\r\n      this.setupUpdateHandling(registration);\r\n\r\n      // Enable background sync\r\n      this.enableBackgroundSync(registration);\r\n\r\n  // Track registration success\r\n  enhancedLogger.info('ServiceWorker', 'register', 'Registration tracking: success');\r\n\r\n  enhancedLogger.info('ServiceWorker', 'register', 'Successfully registered');\r\n      return registration;\r\n    } catch (error) {\r\n  enhancedLogger.error('ServiceWorker', 'register', 'Registration failed', undefined, error as Error);\r\n  enhancedLogger.warn('ServiceWorker', 'register', 'Registration tracking: error');\r\n\r\n      this.updateState({\r\n        error: `Registration failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      });\r\n\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set up update detection and handling\r\n   */\r\n  private setupUpdateHandling(registration: ServiceWorkerRegistration): void {\r\n    // Check for updates periodically\r\n    setInterval(() => {\r\n  registration.update().catch((e: any) => enhancedLogger.error('ServiceWorker', 'update', 'Update failed', undefined, e as Error));\r\n    }, 60000); // Check every minute\r\n\r\n    // Handle installation of new service worker\r\n    registration.addEventListener('updatefound', () => {\r\n      const newWorker = registration.installing;\r\n      if (!newWorker) return;\r\n\r\n  enhancedLogger.info('ServiceWorker', 'updatefound', 'New version found, installing...');\r\n\r\n      this.updateState({\r\n        isInstalling: true,\r\n        newWorker,\r\n      });\r\n\r\n      newWorker.addEventListener('statechange', () => {\r\n        if (newWorker.state === 'installed') {\r\n          if (navigator.serviceWorker.controller) {\r\n            // New version available\r\n            enhancedLogger.info('ServiceWorker', 'update', 'New version ready');\r\n            this.updateState({\r\n              hasUpdate: true,\r\n              isInstalling: false,\r\n              newWorker,\r\n            });\r\n          } else {\r\n            // First time installation\r\n            enhancedLogger.info('ServiceWorker', 'update', 'App is ready for offline use');\r\n            this.updateState({\r\n              isInstalling: false,\r\n            });\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // Handle controller change (when new SW becomes active)\r\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\r\n  enhancedLogger.info('ServiceWorker', 'controllerchange', 'New version is now controlling the app');\r\n      // Optionally reload the page or show notification\r\n      window.location.reload();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Enable background sync for offline analytics\r\n   */\r\n  private enableBackgroundSync(registration: ServiceWorkerRegistration): void {\r\n    // Check if sync is supported\r\n    if ('sync' in registration) {\r\n      try {\r\n        // Add error handling for sync registration\r\n        const syncManager = (registration as any).sync;\r\n        if (syncManager && typeof syncManager.register === 'function') {\r\n          syncManager.register('analytics-sync').catch((error: any) => {\r\n            enhancedLogger.error('ServiceWorker', 'sync', 'Sync registration failed', undefined, error as Error);\r\n          });\r\n          enhancedLogger.info('ServiceWorker', 'sync', 'Background sync enabled');\r\n        }\r\n        } catch (error) {\r\n          enhancedLogger.warn('ServiceWorker', 'sync', 'Background sync not available', undefined, error as Error);\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply pending service worker update\r\n   */\r\n  applyUpdate(): void {\r\n    if (this.state.newWorker) {\r\n      this.state.newWorker.postMessage({ type: 'SKIP_WAITING' });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribe to update notifications\r\n   */\r\n  onUpdate(callback: UpdateCallback): () => void {\r\n    this.updateCallbacks.add(callback);\r\n\r\n    // Immediately call with current state\r\n    callback(this.state);\r\n\r\n    // Return unsubscribe function\r\n    return () => {\r\n      this.updateCallbacks.delete(callback);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Request permission for push notifications\r\n   */\r\n  async requestNotificationPermission(): Promise<NotificationPermission> {\r\n    if (!('Notification' in window)) {\r\n      throw new Error('Notifications not supported');\r\n    }\r\n\r\n    const permission = await Notification.requestPermission();\r\n\r\n    if (permission === 'granted' && this.registration) {\r\n      // Subscribe to push notifications\r\n      try {\r\n        const subscription = await this.registration.pushManager.subscribe({\r\n          userVisibleOnly: true,\r\n          // Cast to any to accept various BufferSource implementations across browsers\r\n          applicationServerKey: this.urlBase64ToUint8Array(process.env.VITE_VAPID_PUBLIC_KEY || '') as any,\r\n        } as any);\r\n\r\n        // Send subscription to backend\r\n        await fetch('/api/push/subscribe', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(subscription),\r\n        });\r\n\r\n  enhancedLogger.info('ServiceWorker', 'push', 'Push notifications enabled');\r\n      } catch (error) {\r\n  enhancedLogger.error('ServiceWorker', 'push', 'Push subscription failed', undefined, error as Error);\r\n      }\r\n    }\r\n\r\n    return permission;\r\n  }\r\n\r\n  /**\r\n   * Get current registration\r\n   */\r\n  getRegistration(): ServiceWorkerRegistration | null {\r\n    return this.registration;\r\n  }\r\n\r\n  /**\r\n   * Update internal state and notify callbacks\r\n   */\r\n  private updateState(updates: Partial<ServiceWorkerUpdateState>): void {\r\n    this.state = { ...this.state, ...updates };\r\n  this.updateCallbacks.forEach(callback => callback(this.state));\r\n  }\r\n\r\n  /**\r\n   * Convert VAPID key to Uint8Array\r\n   */\r\n  private urlBase64ToUint8Array(base64String: string): Uint8Array {\r\n    const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\r\n    const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\r\n\r\n    const rawData = window.atob(base64);\r\n    const outputArray = new Uint8Array(rawData.length);\r\n\r\n    for (let i = 0; i < rawData.length; ++i) {\r\n      outputArray[i] = rawData.charCodeAt(i);\r\n    }\r\n\r\n    return outputArray;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const serviceWorkerManager = new ServiceWorkerManager();\r\n\r\n/**\r\n * React hook for service worker updates\r\n */\r\nexport function useServiceWorkerUpdate() {\r\n  const [updateState, setUpdateState] = React.useState<ServiceWorkerUpdateState>({\r\n    hasUpdate: false,\r\n    newWorker: null,\r\n    isInstalling: false,\r\n    error: null,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    const unsubscribe = serviceWorkerManager.onUpdate(setUpdateState);\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const applyUpdate = React.useCallback(() => {\r\n    serviceWorkerManager.applyUpdate();\r\n  }, []);\r\n\r\n  const requestNotifications = React.useCallback(() => {\r\n    return serviceWorkerManager.requestNotificationPermission();\r\n  }, []);\r\n\r\n  return {\r\n    ...updateState,\r\n    applyUpdate,\r\n    requestNotifications,\r\n  };\r\n}\r\n\r\nexport default serviceWorkerManager;\r\n"],"version":3}