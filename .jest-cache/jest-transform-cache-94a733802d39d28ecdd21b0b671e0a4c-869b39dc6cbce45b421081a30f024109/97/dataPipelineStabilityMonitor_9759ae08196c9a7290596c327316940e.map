{"version":3,"names":["_UnifiedDataService","require","_enhancedLogger","_DataPipelineStabilityMonitor","DataPipelineStabilityMonitor","constructor","metrics","Map","isMonitoring","monitoringInterval","DEFAULT_THRESHOLDS","maxResponseTime","maxErrorRate","minSuccessRate","minCacheHitRate","getInstance","instance","startMonitoring","intervalMs","enhancedLogger","warn","info","performHealthChecks","setInterval","error","undefined","stopMonitoring","clearInterval","services","name","service","UnifiedDataService","healthCheckPromises","map","checkServiceHealth","Promise","allSettled","analyzeAndAlert","serviceName","startTime","Date","now","result","healthCheckUnifiedDataService","success","responseTime","Error","message","updateMetrics","testCacheKey","testData","test","timestamp","svc","cacheData","getCachedData","cachedData","cachedObj","existing","get","set","errorRate","successRate","cacheHitRate","lastHealthCheck","status","determineHealthStatus","errors","weight","push","length","slice","thresholds","unhealthyServices","degradedServices","forEach","join","sendAlert","level","toISOString","alertMessage","toUpperCase","window","localStorage","alerts","JSON","parse","getItem","splice","setItem","stringify","getHealthReport","report","getOverallHealthStatus","statuses","Array","from","values","m","includes","isMonitoringActive","validateUnifiedDataServiceFix","testKey","validated","retrieved","_default","exports","default"],"sources":["dataPipelineStabilityMonitor.ts"],"sourcesContent":["import { UnifiedDataService } from './unified/UnifiedDataService';\r\nimport { enhancedLogger } from '../utils/enhancedLogger';\r\n\r\ninterface ServiceHealthMetrics {\r\n  serviceName: string;\r\n  responseTime: number;\r\n  errorRate: number;\r\n  successRate: number;\r\n  cacheHitRate: number;\r\n  lastHealthCheck: Date;\r\n  status: 'healthy' | 'degraded' | 'unhealthy';\r\n  errors: string[];\r\n}\r\n\r\ninterface HealthCheckResult {\r\n  success: boolean;\r\n  responseTime: number;\r\n  error?: string;\r\n}\r\n\r\ninterface AlertThresholds {\r\n  maxResponseTime: number;\r\n  maxErrorRate: number;\r\n  minSuccessRate: number;\r\n  minCacheHitRate: number;\r\n}\r\n\r\nclass DataPipelineStabilityMonitor {\r\n  private static instance: DataPipelineStabilityMonitor;\r\n  private metrics: Map<string, ServiceHealthMetrics> = new Map();\r\n  private isMonitoring = false;\r\n  private monitoringInterval: NodeJS.Timeout | null = null;\r\n  \r\n  private readonly DEFAULT_THRESHOLDS: AlertThresholds = {\r\n    maxResponseTime: 5000, // 5 seconds\r\n    maxErrorRate: 0.1,     // 10%\r\n    minSuccessRate: 0.9,   // 90%\r\n    minCacheHitRate: 0.7   // 70%\r\n  };\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): DataPipelineStabilityMonitor {\r\n    if (!DataPipelineStabilityMonitor.instance) {\r\n      DataPipelineStabilityMonitor.instance = new DataPipelineStabilityMonitor();\r\n    }\r\n    return DataPipelineStabilityMonitor.instance;\r\n  }\r\n\r\n  async startMonitoring(intervalMs: number = 60000): Promise<void> {\r\n    if (this.isMonitoring) {\r\n      enhancedLogger.warn('DataPipelineStabilityMonitor', 'startMonitoring', 'Data pipeline monitoring is already running');\r\n      return;\r\n    }\r\n\r\n    this.isMonitoring = true;\r\n    enhancedLogger.info('DataPipelineStabilityMonitor', 'startMonitoring', 'Starting data pipeline stability monitoring...');\r\n\r\n    // Initial health check\r\n    await this.performHealthChecks();\r\n\r\n    // Set up periodic monitoring\r\n    this.monitoringInterval = setInterval(async () => {\r\n      try {\r\n        await this.performHealthChecks();\r\n      } catch (error) {\r\n        enhancedLogger.error('DataPipelineStabilityMonitor', 'monitorInterval', 'Error during health check', undefined, error as unknown as Error);\r\n      }\r\n    }, intervalMs);\r\n  }\r\n\r\n  stopMonitoring(): void {\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval);\r\n      this.monitoringInterval = null;\r\n    }\r\n  this.isMonitoring = false;\r\n  enhancedLogger.info('DataPipelineStabilityMonitor', 'stopMonitoring', 'Data pipeline monitoring stopped');\r\n  }\r\n\r\n  private async performHealthChecks(): Promise<void> {\r\n    const services = [\r\n      { name: 'UnifiedDataService', service: UnifiedDataService.getInstance() }\r\n    ];\r\n\r\n    const healthCheckPromises = services.map(({ name, service }) =>\r\n      this.checkServiceHealth(name, service)\r\n    );\r\n\r\n    await Promise.allSettled(healthCheckPromises);\r\n    this.analyzeAndAlert();\r\n  }\r\n\r\n  private async checkServiceHealth(serviceName: string, service: unknown): Promise<void> {\r\n    const startTime = Date.now();\r\n    let result: HealthCheckResult;\r\n\r\n    try {\r\n      // Perform a lightweight health check based on service type\r\n      if (serviceName === 'UnifiedDataService') {\r\n        result = await this.healthCheckUnifiedDataService(service);\r\n      } else {\r\n        result = { success: false, responseTime: 0, error: 'Unknown service' };\r\n      }\r\n    } catch (error) {\r\n      result = {\r\n        success: false,\r\n        responseTime: Date.now() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n\r\n    this.updateMetrics(serviceName, result);\r\n  }\r\n\r\n  private async healthCheckUnifiedDataService(service: unknown): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    try {\r\n      // Test basic functionality that was fixed in the constructor\r\n      const testCacheKey = 'health-check-test';\r\n      const testData = { test: true, timestamp: Date.now() };\r\n      \r\n      // Test cache operations (this validates the constructor fix)\r\n      const svc = service as { cacheData?: (k: string, v: unknown, ttl?: number) => Promise<void>; getCachedData?: (k: string) => Promise<unknown> };\r\n      if (typeof svc.cacheData !== 'function' || typeof svc.getCachedData !== 'function') {\r\n        throw new Error('UnifiedDataService does not expose required cache methods');\r\n      }\r\n\r\n      await svc.cacheData(testCacheKey, testData, 1000);\r\n      const cachedData = await svc.getCachedData(testCacheKey);\r\n      \r\n      const cachedObj = cachedData as Record<string, unknown> | undefined;\r\n      if (!cachedObj || cachedObj['test'] !== true) {\r\n        throw new Error('Cache operations failed');\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        responseTime: Date.now() - startTime\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        responseTime: Date.now() - startTime,\r\n        error: error instanceof Error ? error.message : 'Health check failed'\r\n      };\r\n    }\r\n  }\r\n\r\n\r\n  private updateMetrics(serviceName: string, result: HealthCheckResult): void {\r\n    const existing = this.metrics.get(serviceName);\r\n    const now = new Date();\r\n\r\n    if (!existing) {\r\n      this.metrics.set(serviceName, {\r\n        serviceName,\r\n        responseTime: result.responseTime,\r\n        errorRate: result.success ? 0 : 1,\r\n        successRate: result.success ? 1 : 0,\r\n        cacheHitRate: 0.8, // Default assumption\r\n        lastHealthCheck: now,\r\n        status: this.determineHealthStatus(result.responseTime, result.success ? 0 : 1, result.success ? 1 : 0),\r\n        errors: result.error ? [result.error] : []\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Calculate rolling averages (simple weighted average)\r\n    const weight = 0.2; // 20% weight for new data\r\n    existing.responseTime = existing.responseTime * (1 - weight) + result.responseTime * weight;\r\n    existing.errorRate = existing.errorRate * (1 - weight) + (result.success ? 0 : 1) * weight;\r\n    existing.successRate = existing.successRate * (1 - weight) + (result.success ? 1 : 0) * weight;\r\n    existing.lastHealthCheck = now;\r\n    existing.status = this.determineHealthStatus(existing.responseTime, existing.errorRate, existing.successRate);\r\n\r\n    if (result.error) {\r\n      existing.errors.push(result.error);\r\n      // Keep only last 10 errors\r\n      if (existing.errors.length > 10) {\r\n        existing.errors = existing.errors.slice(-10);\r\n      }\r\n    }\r\n  }\r\n\r\n  private determineHealthStatus(responseTime: number, errorRate: number, successRate: number): 'healthy' | 'degraded' | 'unhealthy' {\r\n    const thresholds = this.DEFAULT_THRESHOLDS;\r\n\r\n    if (errorRate > thresholds.maxErrorRate || successRate < thresholds.minSuccessRate) {\r\n      return 'unhealthy';\r\n    }\r\n\r\n    if (responseTime > thresholds.maxResponseTime) {\r\n      return 'degraded';\r\n    }\r\n\r\n    return 'healthy';\r\n  }\r\n\r\n  private analyzeAndAlert(): void {\r\n    const unhealthyServices: string[] = [];\r\n    const degradedServices: string[] = [];\r\n\r\n    this.metrics.forEach((metrics, serviceName) => {\r\n      if (metrics.status === 'unhealthy') {\r\n        unhealthyServices.push(serviceName);\r\n      } else if (metrics.status === 'degraded') {\r\n        degradedServices.push(serviceName);\r\n      }\r\n    });\r\n\r\n    if (unhealthyServices.length > 0) {\r\n      enhancedLogger.error('DataPipelineStabilityMonitor', 'analyzeAndAlert', `üö® CRITICAL: Unhealthy services detected: ${unhealthyServices.join(', ')}`);\r\n      this.sendAlert('critical', `Unhealthy services: ${unhealthyServices.join(', ')}`);\r\n    }\r\n\r\n    if (degradedServices.length > 0) {\r\n      enhancedLogger.warn('DataPipelineStabilityMonitor', 'analyzeAndAlert', `‚ö†Ô∏è WARNING: Degraded services detected: ${degradedServices.join(', ')}`);\r\n      this.sendAlert('warning', `Degraded services: ${degradedServices.join(', ')}`);\r\n    }\r\n\r\n    if (unhealthyServices.length === 0 && degradedServices.length === 0) {\r\n      enhancedLogger.info('DataPipelineStabilityMonitor', 'analyzeAndAlert', '‚úÖ All data pipeline services are healthy');\r\n    }\r\n  }\r\n\r\n  private sendAlert(level: 'critical' | 'warning', message: string): void {\r\n    // In a real implementation, this would integrate with alerting systems\r\n    const timestamp = new Date().toISOString();\r\n    const alertMessage = `[${level.toUpperCase()}] ${timestamp}: ${message}`;\r\n    \r\n    if (level === 'critical') {\r\n      enhancedLogger.error('DataPipelineStabilityMonitor', 'sendAlert', alertMessage);\r\n    } else {\r\n      enhancedLogger.warn('DataPipelineStabilityMonitor', 'sendAlert', alertMessage);\r\n    }\r\n\r\n    // Store alert for dashboard display\r\n    if (typeof window !== 'undefined' && window.localStorage) {\r\n      const alerts = JSON.parse(localStorage.getItem('pipeline-alerts') || '[]');\r\n      alerts.push({ level, message, timestamp });\r\n      \r\n      // Keep only last 50 alerts\r\n      if (alerts.length > 50) {\r\n        alerts.splice(0, alerts.length - 50);\r\n      }\r\n      \r\n      localStorage.setItem('pipeline-alerts', JSON.stringify(alerts));\r\n    }\r\n  }\r\n\r\n  getHealthReport(): Record<string, ServiceHealthMetrics> {\r\n    const report: Record<string, ServiceHealthMetrics> = {};\r\n    this.metrics.forEach((metrics, serviceName) => {\r\n      report[serviceName] = { ...metrics };\r\n    });\r\n    return report;\r\n  }\r\n\r\n  getOverallHealthStatus(): 'healthy' | 'degraded' | 'unhealthy' {\r\n    const statuses = Array.from(this.metrics.values()).map(m => m.status);\r\n    \r\n    if (statuses.includes('unhealthy')) {\r\n      return 'unhealthy';\r\n    }\r\n    \r\n    if (statuses.includes('degraded')) {\r\n      return 'degraded';\r\n    }\r\n    \r\n    return 'healthy';\r\n  }\r\n\r\n  isMonitoringActive(): boolean {\r\n    return this.isMonitoring;\r\n  }\r\n\r\n  // Method to validate UnifiedDataService constructor fix specifically\r\n  async validateUnifiedDataServiceFix(): Promise<boolean> {\r\n    try {\r\n      const service = UnifiedDataService.getInstance();\r\n      \r\n      // Test that the service was properly initialized with the registry\r\n      if (!service) {\r\n        enhancedLogger.error('DataPipelineStabilityMonitor', 'validateUnifiedDataServiceFix', 'UnifiedDataService instance not available');\r\n        return false;\r\n      }\r\n\r\n      // Test cache operations that previously failed due to constructor issues\r\n      const testKey = 'constructor-fix-validation';\r\n      const testData = { validated: true, timestamp: Date.now() };\r\n      \r\n      await service.cacheData(testKey, testData, 5000);\r\n      const retrieved = await service.getCachedData(testKey);\r\n      \r\n    if (!retrieved || (retrieved as unknown as Record<string, unknown>)['validated'] !== true) {\r\n        enhancedLogger.error('DataPipelineStabilityMonitor', 'validateUnifiedDataServiceFix', 'UnifiedDataService cache operations failed - constructor fix may not be working');\r\n        return false;\r\n      }\r\n\r\n      enhancedLogger.info('DataPipelineStabilityMonitor', 'validateUnifiedDataServiceFix', '‚úÖ UnifiedDataService constructor fix validated successfully');\r\n      return true;\r\n    } catch (error) {\r\n      enhancedLogger.error('DataPipelineStabilityMonitor', 'validateUnifiedDataServiceFix', '‚ùå UnifiedDataService constructor fix validation failed', undefined, error as unknown as Error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DataPipelineStabilityMonitor;\r\n"],"mappings":"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","ignoreList":[]}