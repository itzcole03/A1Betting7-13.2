36d57e05e5d6f09193055f0538eef0d3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = void 0;
class Logger {
  constructor() {
    this.isDevelopment = process.env.NODE_ENV === 'development';
  }
  formatMessage(level, message, data, context) {
    return {
      level,
      message,
      data,
      context: context === undefined ? undefined : context,
      timestamp: new Date().toISOString()
    };
  }
  logToConsole(entry) {
    // Log to console only in development environment
    if (!this.isDevelopment) return;
    const {
      level,
      message,
      data,
      context,
      timestamp
    } = entry;
    const prefix = context ? `[${context}]` : '';
    const fullMessage = `${timestamp} ${prefix} ${message}`;

    // Properly serialize data for logging
    const logData = data !== undefined ? typeof data === 'object' && data !== null ? JSON.stringify(data, null, 2) : data : '';
    switch (level) {
      case 'info':
        if (logData) {
          console.info(fullMessage, logData);
        } else {
          console.info(fullMessage);
        }
        break;
      case 'warn':
        if (logData) {
          console.warn(fullMessage, logData);
        } else {
          console.warn(fullMessage);
        }
        break;
      case 'error':
        if (logData) {
          console.error(fullMessage, logData);
        } else {
          console.error(fullMessage);
        }
        break;
      case 'debug':
        if (logData) {
          console.debug(fullMessage, logData);
        } else {
          console.debug(fullMessage);
        }
        break;
    }
  }
  info(message, data, context) {
    const entry = this.formatMessage('info', message, data, context);
    this.logToConsole(entry);
  }
  warn(message, data, context) {
    const entry = this.formatMessage('warn', message, data, context);
    this.logToConsole(entry);
  }
  error(message, data, context) {
    const entry = this.formatMessage('error', message, data, context);
    this.logToConsole(entry);
  }
  debug(message, data, context) {
    const entry = this.formatMessage('debug', message, data, context);
    this.logToConsole(entry);
  }
}
const logger = exports.logger = new Logger();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMb2dnZXIiLCJjb25zdHJ1Y3RvciIsImlzRGV2ZWxvcG1lbnQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJmb3JtYXRNZXNzYWdlIiwibGV2ZWwiLCJtZXNzYWdlIiwiZGF0YSIsImNvbnRleHQiLCJ1bmRlZmluZWQiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJsb2dUb0NvbnNvbGUiLCJlbnRyeSIsInByZWZpeCIsImZ1bGxNZXNzYWdlIiwibG9nRGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb25zb2xlIiwiaW5mbyIsIndhcm4iLCJlcnJvciIsImRlYnVnIiwibG9nZ2VyIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImxvZ2dlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJ0eXBlIExvZ0xldmVsID0gJ2luZm8nIHwgJ3dhcm4nIHwgJ2Vycm9yJyB8ICdkZWJ1Zyc7XHJcblxyXG5pbnRlcmZhY2UgTG9nRW50cnkge1xyXG4gIGxldmVsOiBMb2dMZXZlbDtcclxuICBtZXNzYWdlOiBzdHJpbmc7XHJcbiAgZGF0YT86IHVua25vd247XHJcbiAgY29udGV4dD86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICB0aW1lc3RhbXA6IHN0cmluZztcclxufVxyXG5cclxuY2xhc3MgTG9nZ2VyIHtcclxuICBwcml2YXRlIGlzRGV2ZWxvcG1lbnQgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JztcclxuXHJcbiAgcHJpdmF0ZSBmb3JtYXRNZXNzYWdlKFxyXG4gICAgbGV2ZWw6IExvZ0xldmVsLFxyXG4gICAgbWVzc2FnZTogc3RyaW5nLFxyXG4gICAgZGF0YT86IHVua25vd24sXHJcbiAgICBjb250ZXh0Pzogc3RyaW5nXHJcbiAgKTogTG9nRW50cnkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbGV2ZWwsXHJcbiAgICAgIG1lc3NhZ2UsXHJcbiAgICAgIGRhdGEsXHJcbiAgICAgIGNvbnRleHQ6IGNvbnRleHQgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGNvbnRleHQsXHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbG9nVG9Db25zb2xlKGVudHJ5OiBMb2dFbnRyeSkge1xyXG4gICAgLy8gTG9nIHRvIGNvbnNvbGUgb25seSBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudFxyXG4gICAgaWYgKCF0aGlzLmlzRGV2ZWxvcG1lbnQpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCB7IGxldmVsLCBtZXNzYWdlLCBkYXRhLCBjb250ZXh0LCB0aW1lc3RhbXAgfSA9IGVudHJ5O1xyXG4gICAgY29uc3QgcHJlZml4ID0gY29udGV4dCA/IGBbJHtjb250ZXh0fV1gIDogJyc7XHJcbiAgICBjb25zdCBmdWxsTWVzc2FnZSA9IGAke3RpbWVzdGFtcH0gJHtwcmVmaXh9ICR7bWVzc2FnZX1gO1xyXG5cclxuICAgIC8vIFByb3Blcmx5IHNlcmlhbGl6ZSBkYXRhIGZvciBsb2dnaW5nXHJcbiAgICBjb25zdCBsb2dEYXRhID1cclxuICAgICAgZGF0YSAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgPyB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgZGF0YSAhPT0gbnVsbFxyXG4gICAgICAgICAgPyBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKVxyXG4gICAgICAgICAgOiBkYXRhXHJcbiAgICAgICAgOiAnJztcclxuXHJcbiAgICBzd2l0Y2ggKGxldmVsKSB7XHJcbiAgICAgIGNhc2UgJ2luZm8nOlxyXG4gICAgICAgIGlmIChsb2dEYXRhKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmluZm8oZnVsbE1lc3NhZ2UsIGxvZ0RhdGEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLmluZm8oZnVsbE1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnd2Fybic6XHJcbiAgICAgICAgaWYgKGxvZ0RhdGEpIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybihmdWxsTWVzc2FnZSwgbG9nRGF0YSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybihmdWxsTWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdlcnJvcic6XHJcbiAgICAgICAgaWYgKGxvZ0RhdGEpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZnVsbE1lc3NhZ2UsIGxvZ0RhdGEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGZ1bGxNZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2RlYnVnJzpcclxuICAgICAgICBpZiAobG9nRGF0YSkge1xyXG4gICAgICAgICAgY29uc29sZS5kZWJ1ZyhmdWxsTWVzc2FnZSwgbG9nRGF0YSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUuZGVidWcoZnVsbE1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGluZm8obWVzc2FnZTogc3RyaW5nLCBkYXRhPzogdW5rbm93biwgY29udGV4dD86IHN0cmluZykge1xyXG4gICAgY29uc3QgZW50cnkgPSB0aGlzLmZvcm1hdE1lc3NhZ2UoJ2luZm8nLCBtZXNzYWdlLCBkYXRhLCBjb250ZXh0KTtcclxuICAgIHRoaXMubG9nVG9Db25zb2xlKGVudHJ5KTtcclxuICB9XHJcblxyXG4gIHdhcm4obWVzc2FnZTogc3RyaW5nLCBkYXRhPzogdW5rbm93biwgY29udGV4dD86IHN0cmluZykge1xyXG4gICAgY29uc3QgZW50cnkgPSB0aGlzLmZvcm1hdE1lc3NhZ2UoJ3dhcm4nLCBtZXNzYWdlLCBkYXRhLCBjb250ZXh0KTtcclxuICAgIHRoaXMubG9nVG9Db25zb2xlKGVudHJ5KTtcclxuICB9XHJcblxyXG4gIGVycm9yKG1lc3NhZ2U6IHN0cmluZywgZGF0YT86IHVua25vd24sIGNvbnRleHQ/OiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5mb3JtYXRNZXNzYWdlKCdlcnJvcicsIG1lc3NhZ2UsIGRhdGEsIGNvbnRleHQpO1xyXG4gICAgdGhpcy5sb2dUb0NvbnNvbGUoZW50cnkpO1xyXG4gIH1cclxuXHJcbiAgZGVidWcobWVzc2FnZTogc3RyaW5nLCBkYXRhPzogdW5rbm93biwgY29udGV4dD86IHN0cmluZykge1xyXG4gICAgY29uc3QgZW50cnkgPSB0aGlzLmZvcm1hdE1lc3NhZ2UoJ2RlYnVnJywgbWVzc2FnZSwgZGF0YSwgY29udGV4dCk7XHJcbiAgICB0aGlzLmxvZ1RvQ29uc29sZShlbnRyeSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcigpO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQVVBLE1BQU1BLE1BQU0sQ0FBQztFQUFBQyxZQUFBO0lBQUEsS0FDSEMsYUFBYSxHQUFHQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLLGFBQWE7RUFBQTtFQUV0REMsYUFBYUEsQ0FDbkJDLEtBQWUsRUFDZkMsT0FBZSxFQUNmQyxJQUFjLEVBQ2RDLE9BQWdCLEVBQ047SUFDVixPQUFPO01BQ0xILEtBQUs7TUFDTEMsT0FBTztNQUNQQyxJQUFJO01BQ0pDLE9BQU8sRUFBRUEsT0FBTyxLQUFLQyxTQUFTLEdBQUdBLFNBQVMsR0FBR0QsT0FBTztNQUNwREUsU0FBUyxFQUFFLElBQUlDLElBQUksQ0FBQyxDQUFDLENBQUNDLFdBQVcsQ0FBQztJQUNwQyxDQUFDO0VBQ0g7RUFFUUMsWUFBWUEsQ0FBQ0MsS0FBZSxFQUFFO0lBQ3BDO0lBQ0EsSUFBSSxDQUFDLElBQUksQ0FBQ2QsYUFBYSxFQUFFO0lBRXpCLE1BQU07TUFBRUssS0FBSztNQUFFQyxPQUFP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