d45ff1abef4d2042778b3da39ecb3aa4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = void 0;
class Logger {
    constructor() {
        Object.defineProperty(this, "isDevelopment", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: process.env.NODE_ENV === 'development'
        });
    }
    formatMessage(level, message, data, context) {
        return {
            level,
            message,
            data,
            context: context === undefined ? undefined : context,
            timestamp: new Date().toISOString(),
        };
    }
    logToConsole(entry) {
        // Log to console only in development environment
        if (!this.isDevelopment)
            return;
        const { level, message, data, context, timestamp } = entry;
        const prefix = context ? `[${context}]` : '';
        const fullMessage = `${timestamp} ${prefix} ${message}`;
        // Properly serialize data for logging
        const logData = data !== undefined
            ? typeof data === 'object' && data !== null
                ? JSON.stringify(data, null, 2)
                : data
            : '';
        switch (level) {
            case 'info':
                if (logData) {
                    console.info(fullMessage, logData);
                }
                else {
                    console.info(fullMessage);
                }
                break;
            case 'warn':
                if (logData) {
                    console.warn(fullMessage, logData);
                }
                else {
                    console.warn(fullMessage);
                }
                break;
            case 'error':
                if (logData) {
                    console.error(fullMessage, logData);
                }
                else {
                    console.error(fullMessage);
                }
                break;
            case 'debug':
                if (logData) {
                    console.debug(fullMessage, logData);
                }
                else {
                    console.debug(fullMessage);
                }
                break;
        }
    }
    info(message, data, context) {
        const entry = this.formatMessage('info', message, data, context);
        this.logToConsole(entry);
    }
    warn(message, data, context) {
        const entry = this.formatMessage('warn', message, data, context);
        this.logToConsole(entry);
    }
    error(message, data, context) {
        const entry = this.formatMessage('error', message, data, context);
        this.logToConsole(entry);
    }
    debug(message, data, context) {
        const entry = this.formatMessage('debug', message, data, context);
        this.logToConsole(entry);
    }
}
exports.logger = new Logger();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxiY21hZFxcRG93bmxvYWRzXFxBMUJldHRpbmc3LTEzLjJcXGZyb250ZW5kXFxzcmNcXHV0aWxzXFxsb2dnZXIudHMiLCJtYXBwaW5ncyI6Ijs7O0FBVUEsTUFBTSxNQUFNO0lBQVo7UUFDVTs7OzttQkFBZ0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssYUFBYTtXQUFDO0lBb0ZqRSxDQUFDO0lBbEZTLGFBQWEsQ0FDbkIsS0FBZSxFQUNmLE9BQWUsRUFDZixJQUFjLEVBQ2QsT0FBZ0I7UUFFaEIsT0FBTztZQUNMLEtBQUs7WUFDTCxPQUFPO1lBQ1AsSUFBSTtZQUNKLE9BQU8sRUFBRSxPQUFPLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU87WUFDcEQsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO1NBQ3BDLENBQUM7SUFDSixDQUFDO0lBRU8sWUFBWSxDQUFDLEtBQWU7UUFDbEMsaURBQWlEO1FBQ2pELElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYTtZQUFFLE9BQU87UUFFaEMsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFDM0QsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDN0MsTUFBTSxXQUFXLEdBQUcsR0FBRyxTQUFTLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBRXhELHNDQUFzQztRQUN0QyxNQUFNLE9BQU8sR0FDWCxJQUFJLEtBQUssU0FBUztZQUNoQixDQUFDLENBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLElBQUksS0FBSyxJQUFJO2dCQUN6QyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztnQkFDL0IsQ0FBQyxDQUFDLElBQUk7WUFDUixDQUFDLENBQUMsRUFBRSxDQUFDO1FBRVQsUUFBUSxLQUFLLEVBQUUsQ0FBQztZQUNkLEtBQUssTUFBTTtnQkFDVCxJQUFJLE9BQU8sRUFBRSxDQUFDO29CQUNaLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUNyQyxDQUFDO3FCQUFNLENBQUM7b0JBQ04sT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDNUIsQ0FBQztnQkFDRCxNQUFNO1lBQ1IsS0FBSyxNQUFNO2dCQUNULElBQUksT0FBTyxFQUFFLENBQUM7b0JBQ1osT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQ3JDLENBQUM7cUJBQU0sQ0FBQztvQkFDTixPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUM1QixDQUFDO2dCQUNELE1BQU07WUFDUixLQUFLLE9BQU87Z0JBQ1YsSUFBSSxPQUFPLEVBQUUsQ0FBQztvQkFDWixPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDdEMsQ0FBQztxQkFBTSxDQUFDO29CQUNOLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQzdCLENBQUM7Z0JBQ0QsTUFBTTtZQUNSLEtBQUssT0FBTztnQkFDVixJQUFJLE9BQU8sRUFBRSxDQUFDO29CQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUN0QyxDQUFDO3FCQUFNLENBQUM7b0JBQ04sT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDN0IsQ0FBQztnQkFDRCxNQUFNO1FBQ1YsQ0FBQztJQUNILENBQUM7SUFFRCxJQUFJLENBQUMsT0FBZSxFQUFFLElBQWMsRUFBRSxPQUFnQjtRQUNwRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksQ0FBQyxPQUFlLEVBQUUsSUFBYyxFQUFFLE9BQWdCO1FBQ3BELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQWUsRUFBRSxJQUFjLEVBQUUsT0FBZ0I7UUFDckQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBZSxFQUFFLElBQWMsRUFBRSxPQUFnQjtRQUNyRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0IsQ0FBQztDQUNGO0FBRVksUUFBQSxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGJjbWFkXFxEb3dubG9hZHNcXEExQmV0dGluZzctMTMuMlxcZnJvbnRlbmRcXHNyY1xcdXRpbHNcXGxvZ2dlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJ0eXBlIExvZ0xldmVsID0gJ2luZm8nIHwgJ3dhcm4nIHwgJ2Vycm9yJyB8ICdkZWJ1Zyc7XHJcblxyXG5pbnRlcmZhY2UgTG9nRW50cnkge1xyXG4gIGxldmVsOiBMb2dMZXZlbDtcclxuICBtZXNzYWdlOiBzdHJpbmc7XHJcbiAgZGF0YT86IHVua25vd247XHJcbiAgY29udGV4dD86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICB0aW1lc3RhbXA6IHN0cmluZztcclxufVxyXG5cclxuY2xhc3MgTG9nZ2VyIHtcclxuICBwcml2YXRlIGlzRGV2ZWxvcG1lbnQgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JztcclxuXHJcbiAgcHJpdmF0ZSBmb3JtYXRNZXNzYWdlKFxyXG4gICAgbGV2ZWw6IExvZ0xldmVsLFxyXG4gICAgbWVzc2FnZTogc3RyaW5nLFxyXG4gICAgZGF0YT86IHVua25vd24sXHJcbiAgICBjb250ZXh0Pzogc3RyaW5nXHJcbiAgKTogTG9nRW50cnkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbGV2ZWwsXHJcbiAgICAgIG1lc3NhZ2UsXHJcbiAgICAgIGRhdGEsXHJcbiAgICAgIGNvbnRleHQ6IGNvbnRleHQgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGNvbnRleHQsXHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbG9nVG9Db25zb2xlKGVudHJ5OiBMb2dFbnRyeSkge1xyXG4gICAgLy8gTG9nIHRvIGNvbnNvbGUgb25seSBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudFxyXG4gICAgaWYgKCF0aGlzLmlzRGV2ZWxvcG1lbnQpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCB7IGxldmVsLCBtZXNzYWdlLCBkYXRhLCBjb250ZXh0LCB0aW1lc3RhbXAgfSA9IGVudHJ5O1xyXG4gICAgY29uc3QgcHJlZml4ID0gY29udGV4dCA/IGBbJHtjb250ZXh0fV1gIDogJyc7XHJcbiAgICBjb25zdCBmdWxsTWVzc2FnZSA9IGAke3RpbWVzdGFtcH0gJHtwcmVmaXh9ICR7bWVzc2FnZX1gO1xyXG5cclxuICAgIC8vIFByb3Blcmx5IHNlcmlhbGl6ZSBkYXRhIGZvciBsb2dnaW5nXHJcbiAgICBjb25zdCBsb2dEYXRhID1cclxuICAgICAgZGF0YSAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgPyB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgZGF0YSAhPT0gbnVsbFxyXG4gICAgICAgICAgPyBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKVxyXG4gICAgICAgICAgOiBkYXRhXHJcbiAgICAgICAgOiAnJztcclxuXHJcbiAgICBzd2l0Y2ggKGxldmVsKSB7XHJcbiAgICAgIGNhc2UgJ2luZm8nOlxyXG4gICAgICAgIGlmIChsb2dEYXRhKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmluZm8oZnVsbE1lc3NhZ2UsIGxvZ0RhdGEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLmluZm8oZnVsbE1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnd2Fybic6XHJcbiAgICAgICAgaWYgKGxvZ0RhdGEpIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybihmdWxsTWVzc2FnZSwgbG9nRGF0YSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybihmdWxsTWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdlcnJvcic6XHJcbiAgICAgICAgaWYgKGxvZ0RhdGEpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZnVsbE1lc3NhZ2UsIGxvZ0RhdGEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGZ1bGxNZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2RlYnVnJzpcclxuICAgICAgICBpZiAobG9nRGF0YSkge1xyXG4gICAgICAgICAgY29uc29sZS5kZWJ1ZyhmdWxsTWVzc2FnZSwgbG9nRGF0YSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUuZGVidWcoZnVsbE1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGluZm8obWVzc2FnZTogc3RyaW5nLCBkYXRhPzogdW5rbm93biwgY29udGV4dD86IHN0cmluZykge1xyXG4gICAgY29uc3QgZW50cnkgPSB0aGlzLmZvcm1hdE1lc3NhZ2UoJ2luZm8nLCBtZXNzYWdlLCBkYXRhLCBjb250ZXh0KTtcclxuICAgIHRoaXMubG9nVG9Db25zb2xlKGVudHJ5KTtcclxuICB9XHJcblxyXG4gIHdhcm4obWVzc2FnZTogc3RyaW5nLCBkYXRhPzogdW5rbm93biwgY29udGV4dD86IHN0cmluZykge1xyXG4gICAgY29uc3QgZW50cnkgPSB0aGlzLmZvcm1hdE1lc3NhZ2UoJ3dhcm4nLCBtZXNzYWdlLCBkYXRhLCBjb250ZXh0KTtcclxuICAgIHRoaXMubG9nVG9Db25zb2xlKGVudHJ5KTtcclxuICB9XHJcblxyXG4gIGVycm9yKG1lc3NhZ2U6IHN0cmluZywgZGF0YT86IHVua25vd24sIGNvbnRleHQ/OiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5mb3JtYXRNZXNzYWdlKCdlcnJvcicsIG1lc3NhZ2UsIGRhdGEsIGNvbnRleHQpO1xyXG4gICAgdGhpcy5sb2dUb0NvbnNvbGUoZW50cnkpO1xyXG4gIH1cclxuXHJcbiAgZGVidWcobWVzc2FnZTogc3RyaW5nLCBkYXRhPzogdW5rbm93biwgY29udGV4dD86IHN0cmluZykge1xyXG4gICAgY29uc3QgZW50cnkgPSB0aGlzLmZvcm1hdE1lc3NhZ2UoJ2RlYnVnJywgbWVzc2FnZSwgZGF0YSwgY29udGV4dCk7XHJcbiAgICB0aGlzLmxvZ1RvQ29uc29sZShlbnRyeSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcigpO1xyXG4iXSwidmVyc2lvbiI6M30=