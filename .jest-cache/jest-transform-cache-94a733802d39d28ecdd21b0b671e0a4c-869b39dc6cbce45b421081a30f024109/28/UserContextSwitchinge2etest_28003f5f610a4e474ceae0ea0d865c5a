6d3ea76060eced18ab7d719c21da0097
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
var _UserFriendlyApp = _interopRequireDefault(require("../components/user-friendly/UserFriendlyApp"));
var _jsxRuntime = require("react/jsx-runtime");
describe('User Context Switching E2E', () => {
  beforeEach(() => {
    localStorage.setItem('onboardingComplete', 'true');
    localStorage.setItem('token', 'test-token');
    localStorage.setItem('user', JSON.stringify({
      id: 'test-user',
      email: 'test@example.com',
      role: 'admin',
      permissions: ['admin']
    }));
  });
  it('switches user context and updates permissions', async () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.MemoryRouter, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_UserFriendlyApp.default, {})
    }));
    // Wait for admin dashboard (robust matcher for split/nested nodes)
    expect(await _react2.screen.findByText((content, node) => {
      const text = node?.textContent || '';
      return /Admin Dashboard|User Management/i.test(text);
    })).toBeInTheDocument();
    // Simulate switching to user role
    const switchUserButton = await _react2.screen.findByRole('button', {
      name: /Switch to User/i
    });
    (0, _react2.act)(() => {
      switchUserButton.click();
    });
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText(/User Dashboard|Betting Interface/i)).toBeInTheDocument();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfcmVhY3RSb3V0ZXJEb20iLCJfVXNlckZyaWVuZGx5QXBwIiwiX2pzeFJ1bnRpbWUiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsImlkIiwiZW1haWwiLCJyb2xlIiwicGVybWlzc2lvbnMiLCJpdCIsInJlbmRlciIsImpzeCIsIk1lbW9yeVJvdXRlciIsImNoaWxkcmVuIiwiZGVmYXVsdCIsImV4cGVjdCIsInNjcmVlbiIsImZpbmRCeVRleHQiLCJjb250ZW50Iiwibm9kZSIsInRleHQiLCJ0ZXh0Q29udGVudCIsInRlc3QiLCJ0b0JlSW5UaGVEb2N1bWVudCIsInN3aXRjaFVzZXJCdXR0b24iLCJmaW5kQnlSb2xlIiwibmFtZSIsImFjdCIsImNsaWNrIiwid2FpdEZvciIsImdldEJ5VGV4dCJdLCJzb3VyY2VzIjpbIlVzZXJDb250ZXh0U3dpdGNoaW5nLmUyZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBhY3QsIHJlbmRlciwgc2NyZWVuLCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XHJcbmltcG9ydCB7IE1lbW9yeVJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgVXNlckZyaWVuZGx5QXBwIGZyb20gJy4uL2NvbXBvbmVudHMvdXNlci1mcmllbmRseS9Vc2VyRnJpZW5kbHlBcHAnO1xyXG5cclxuZGVzY3JpYmUoJ1VzZXIgQ29udGV4dCBTd2l0Y2hpbmcgRTJFJywgKCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ29uYm9hcmRpbmdDb21wbGV0ZScsICd0cnVlJyk7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndG9rZW4nLCAndGVzdC10b2tlbicpO1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXHJcbiAgICAgICd1c2VyJyxcclxuICAgICAgSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIGlkOiAndGVzdC11c2VyJyxcclxuICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxyXG4gICAgICAgIHJvbGU6ICdhZG1pbicsXHJcbiAgICAgICAgcGVybWlzc2lvbnM6IFsnYWRtaW4nXSxcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzd2l0Y2hlcyB1c2VyIGNvbnRleHQgYW5kIHVwZGF0ZXMgcGVybWlzc2lvbnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICByZW5kZXIoXHJcbiAgICAgIDxNZW1vcnlSb3V0ZXI+XHJcbiAgICAgICAgPFVzZXJGcmllbmRseUFwcCAvPlxyXG4gICAgICA8L01lbW9yeVJvdXRlcj5cclxuICAgICk7XHJcbiAgICAvLyBXYWl0IGZvciBhZG1pbiBkYXNoYm9hcmQgKHJvYnVzdCBtYXRjaGVyIGZvciBzcGxpdC9uZXN0ZWQgbm9kZXMpXHJcbiAgICBleHBlY3QoXHJcbiAgICAgIGF3YWl0IHNjcmVlbi5maW5kQnlUZXh0KChjb250ZW50LCBub2RlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGV4dCA9IG5vZGU/LnRleHRDb250ZW50IHx8ICcnO1xyXG4gICAgICAgIHJldHVybiAvQWRtaW4gRGFzaGJvYXJkfFVzZXIgTWFuYWdlbWVudC9pLnRlc3QodGV4dCk7XHJcbiAgICAgIH0pXHJcbiAgICApLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgICAvLyBTaW11bGF0ZSBzd2l0Y2hpbmcgdG8gdXNlciByb2xlXHJcbiAgICBjb25zdCBzd2l0Y2hVc2VyQnV0dG9uID0gYXdhaXQgc2NyZWVuLmZpbmRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL1N3aXRjaCB0byBVc2VyL2kgfSk7XHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICBzd2l0Y2hVc2VyQnV0dG9uLmNsaWNrKCk7XHJcbiAgICB9KTtcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvVXNlciBEYXNoYm9hcmR8QmV0dGluZyBJbnRlcmZhY2UvaSkpLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsZUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsZ0JBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUEwRSxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFFMUVLLFFBQVEsQ0FBQyw0QkFBNEIsRUFBRSxNQUFNO0VBQzNDQyxVQUFVLENBQUMsTUFBTTtJQUNmQyxZQUFZLENBQUNDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxNQUFNLENBQUM7SUFDbERELFlBQVksQ0FBQ0MsT0FBTyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUM7SUFDM0NELFlBQVksQ0FBQ0MsT0FBTyxDQUNsQixNQUFNLEVBQ05DLElBQUksQ0FBQ0MsU0FBUyxDQUFDO01BQ2JDLEVBQUUsRUFBRSxXQUFXO01BQ2ZDLEtBQUssRUFBRSxrQkFBa0I7TUFDekJDLElBQUksRUFBRSxPQUFPO01BQ2JDLFdBQVcsRUFBRSxDQUFDLE9BQU87SUFDdkIsQ0FBQyxDQUNILENBQUM7RUFDSCxDQUFDLENBQUM7RUFFRkMsRUFBRSxDQUFDLCtDQUErQyxFQUFFLFlBQVk7SUFDOUQsSUFBQUMsY0FBTSxlQUNKLElBQUFaLFdBQUEsQ0FBQWEsR0FBQSxFQUFDZixlQUFBLENBQUFnQixZQUFZO01BQUFDLFFBQUEsZUFDWCxJQUFBZixXQUFBLENBQUFhLEdBQUEsRUFBQ2QsZ0JBQUEsQ0FBQWlCLE9BQWUsSUFBRTtJQUFDLENBQ1AsQ0FDaEIsQ0FBQztJQUNEO0lBQ0FDLE1BQU0sQ0FDSixNQUFNQyxjQUFNLENBQUNDLFVBQVUsQ0FBQyxDQUFDQyxPQUFPLEVBQUVDLElBQUksS0FBSztNQUN6QyxNQUFNQyxJQUFJLEdBQUdELElBQUksRUFBRUUsV0FBVyxJQUFJLEVBQUU7TUFDcEMsT0FBTyxrQ0FBa0MsQ0FBQ0MsSUFBSSxDQUFDRixJQUFJLENBQUM7SUFDdEQsQ0FBQyxDQUNILENBQUMsQ0FBQ0csaUJBQWlCLENBQUMsQ0FBQztJQUNyQjtJQUNBLE1BQU1DLGdCQUFnQixHQUFHLE1BQU1SLGNBQU0sQ0FBQ1MsVUFBVSxDQUFDLFFBQVEsRUFBRTtNQUFFQyxJQUFJLEVBQUU7SUFBa0IsQ0FBQyxDQUFDO0lBQ3ZGLElBQUFDLFdBQUcsRUFBQyxNQUFNO01BQ1JILGdCQUFnQixDQUFDSSxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDLENBQUM7SUFDRixNQUFNLElBQUFDLGVBQU8sRUFBQyxNQUFNO01BQ2xCZCxNQUFNLENBQUNDLGNBQU0sQ0FBQ2MsU0FBUyxDQUFDLG1DQUFtQyxDQUFDLENBQUMsQ0FBQ1AsaUJBQWlCLENBQUMsQ0FBQztJQUNuRixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=