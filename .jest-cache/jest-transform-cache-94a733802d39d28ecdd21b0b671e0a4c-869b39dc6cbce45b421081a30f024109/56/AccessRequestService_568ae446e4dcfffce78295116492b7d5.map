{"file":"C:\\Users\\bcmad\\Downloads\\A1Betting7-13.2\\frontend\\src\\services\\AccessRequestService.ts","mappings":"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","names":[],"sources":["C:\\Users\\bcmad\\Downloads\\A1Betting7-13.2\\frontend\\src\\services\\AccessRequestService.ts"],"sourcesContent":["import { VITE_API_URL } from '../constants';\r\n/**\r\n * AccessRequestService - Handles user access requests and approval workflow\r\n */\r\n\r\nexport interface AccessRequest {\r\n  id: string;\r\n  email: string;\r\n  requestedAt: Date;\r\n  status: 'pending' | 'approved' | 'denied';\r\n  approvedBy?: string;\r\n  approvedAt?: Date;\r\n  deniedReason?: string;\r\n  tempPassword?: string;\r\n  isFirstLogin?: boolean;\r\n}\r\n\r\nexport interface AccessRequestSubmission {\r\n  email: string;\r\n  message?: string;\r\n}\r\n\r\nexport interface AccessRequestResponse {\r\n  success: boolean;\r\n  message: string;\r\n  requestId?: string;\r\n}\r\n\r\nclass AccessRequestService {\r\n  private baseUrl: string;\r\n\r\n  constructor() {\r\n    // Use centralized VITE_API_URL for browser-safe environment variables\r\n    this.baseUrl = VITE_API_URL || '/api';\r\n  }\r\n\r\n  /**\r\n   * Submit an access request\r\n   */\r\n  async submitAccessRequest(data: AccessRequestSubmission): Promise<AccessRequestResponse> {\r\n    try {\r\n      const _response = await fetch(`${this.baseUrl}/access-requests`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          email: data.email.toLowerCase().trim(),\r\n          message: data.message?.trim(),\r\n          requestedAt: new Date().toISOString(),\r\n          userAgent: navigator.userAgent,\r\n          timestamp: Date.now(),\r\n        }),\r\n      });\r\n\r\n      if (!_response.ok) {\r\n        const _errorData = await _response.json().catch(() => ({ message: 'Network error' }));\r\n        throw new Error(_errorData.message || `HTTP error! status: ${_response.status}`);\r\n      }\r\n\r\n      return await _response.json();\r\n    } catch (error) {\r\n      console.error('Failed to submit access request:', error);\r\n      // For demo purposes, simulate success\r\n      if (process.env.NODE_ENV === 'development') {\r\n        return this.simulateAccessRequest(data);\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if email already has a pending request\r\n   */\r\n  async checkExistingRequest(email: string): Promise<AccessRequest | null> {\r\n    try {\r\n      const _response = await fetch(\r\n        `${this.baseUrl}/access-requests/check/${encodeURIComponent(email)}`,\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (_response.status === 404) {\r\n        return null; // No existing request\r\n      }\r\n\r\n      if (!_response.ok) {\r\n        throw new Error(`HTTP error! status: ${_response.status}`);\r\n      }\r\n\r\n      return await _response.json();\r\n    } catch (error) {\r\n      console.error('Failed to check existing request:', error);\r\n      // For demo purposes, return null (no existing request)\r\n      if (process.env.NODE_ENV === 'development') {\r\n        return null;\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all access requests (admin only)\r\n   */\r\n  async getAllAccessRequests(authToken: string): Promise<AccessRequest[]> {\r\n    try {\r\n      const _response = await fetch(`${this.baseUrl}/admin/access-requests`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${authToken}`,\r\n        },\r\n      });\r\n\r\n      if (!_response.ok) {\r\n        throw new Error(`HTTP error! status: ${_response.status}`);\r\n      }\r\n\r\n      return await _response.json();\r\n    } catch (error) {\r\n      console.error('Failed to fetch access requests:', error);\r\n      // For demo purposes, return mock data\r\n      if (process.env.NODE_ENV === 'development') {\r\n        return this.getMockAccessRequests();\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Approve an access request (admin only)\r\n   */\r\n  async approveAccessRequest(\r\n    requestId: string,\r\n    authToken: string,\r\n    adminEmail: string\r\n  ): Promise<AccessRequestResponse> {\r\n    try {\r\n      const _response = await fetch(`${this.baseUrl}/admin/access-requests/${requestId}/approve`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${authToken}`,\r\n        },\r\n        body: JSON.stringify({\r\n          approvedBy: adminEmail,\r\n          approvedAt: new Date().toISOString(),\r\n        }),\r\n      });\r\n\r\n      if (!_response.ok) {\r\n        throw new Error(`HTTP error! status: ${_response.status}`);\r\n      }\r\n\r\n      return await _response.json();\r\n    } catch (error) {\r\n      console.error('Failed to approve access request:', error);\r\n      // For demo purposes, simulate success\r\n      if (process.env.NODE_ENV === 'development') {\r\n        return {\r\n          success: true,\r\n          message:\r\n            'Access request approved successfully. User will receive email with login credentials.',\r\n        };\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deny an access request (admin only)\r\n   */\r\n  async denyAccessRequest(\r\n    requestId: string,\r\n    authToken: string,\r\n    adminEmail: string,\r\n    reason?: string\r\n  ): Promise<AccessRequestResponse> {\r\n    try {\r\n      const _response = await fetch(`${this.baseUrl}/admin/access-requests/${requestId}/deny`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${authToken}`,\r\n        },\r\n        body: JSON.stringify({\r\n          deniedBy: adminEmail,\r\n          deniedAt: new Date().toISOString(),\r\n          deniedReason: reason,\r\n        }),\r\n      });\r\n\r\n      if (!_response.ok) {\r\n        throw new Error(`HTTP error! status: ${_response.status}`);\r\n      }\r\n\r\n      return await _response.json();\r\n    } catch (error) {\r\n      console.error('Failed to deny access request:', error);\r\n      // For demo purposes, simulate success\r\n      if (process.env.NODE_ENV === 'development') {\r\n        return {\r\n          success: true,\r\n          message: 'Access request denied. User will be notified via email.',\r\n        };\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate email format\r\n   */\r\n  isValidEmail(email: string): boolean {\r\n    const _emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return _emailRegex.test(email);\r\n  }\r\n\r\n  /**\r\n   * Generate temporary password\r\n   */\r\n  generateTempPassword(): string {\r\n    const _chars = 'ABCDEFGHJKMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789';\r\n    let _password = '';\r\n    for (let _i = 0; _i < 12; _i++) {\r\n      _password += _chars.charAt(Math.floor(Math.random() * _chars.length));\r\n    }\r\n    return _password;\r\n  }\r\n\r\n  /**\r\n   * Demo simulation methods for development\r\n   */\r\n  private async simulateAccessRequest(\r\n    data: AccessRequestSubmission\r\n  ): Promise<AccessRequestResponse> {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    // Simulate sending email notification to admin\r\n    console.log('🔔 [DEMO] Access Request Notification:', {\r\n      email: data.email,\r\n      message: data.message,\r\n      timestamp: new Date().toISOString(),\r\n      notifyAdmin: 'cole@example.com',\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      message:\r\n        'Access request submitted successfully! You will receive an email once your request is reviewed.',\r\n      requestId: `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n    };\r\n  }\r\n\r\n  private getMockAccessRequests(): AccessRequest[] {\r\n    return [\r\n      {\r\n        id: 'req_001',\r\n        email: 'user1@example.com',\r\n        requestedAt: new Date(Date.now() - 86400000), // 1 day ago\r\n        status: 'pending',\r\n      },\r\n      {\r\n        id: 'req_002',\r\n        email: 'user2@example.com',\r\n        requestedAt: new Date(Date.now() - 172800000), // 2 days ago\r\n        status: 'approved',\r\n        approvedBy: 'cole@example.com',\r\n        approvedAt: new Date(Date.now() - 86400000),\r\n        tempPassword: 'TempPass123',\r\n        isFirstLogin: true,\r\n      },\r\n      {\r\n        id: 'req_003',\r\n        email: 'spam@example.com',\r\n        requestedAt: new Date(Date.now() - 259200000), // 3 days ago\r\n        status: 'denied',\r\n        approvedBy: 'cole@example.com',\r\n        approvedAt: new Date(Date.now() - 172800000),\r\n        deniedReason: 'Invalid business email domain',\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const _accessRequestService = new AccessRequestService();\r\n\r\n// Export class for testing\r\nexport default AccessRequestService;\r\n"],"version":3}