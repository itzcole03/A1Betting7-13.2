da6b99cfb00b6712202baf4203546fe6
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enhancedLogger = void 0;
var _logger = require("./logger");
/**
 * Enhanced logger with specific methods for cache operations, API requests, and metrics
 * Used by EnhancedDataManager and other services
 */

class EnhancedLogger {
  constructor() {
    this.cacheMetrics = {
      hits: 0,
      misses: 0,
      sets: 0,
      invalidations: 0,
      hitRate: 0
    };
    this.apiMetrics = {
      totalRequests: 0,
      successfulRequests: 0,
      errorRequests: 0,
      averageResponseTime: 0
    };
    this.responseTimes = [];
    this.startTime = Date.now();
  }
  /**
   * Standard logging methods with enhanced context
   */
  debug(component, operation, message, data, err) {
    const meta = {
      ...(data || {}),
      ...(err ? {
        error: {
          name: err.name,
          message: err.message,
          stack: err.stack
        }
      } : {})
    };
    _logger.logger.debug(`[${component}:${operation}] ${message}`, meta);
  }
  info(component, operation, message, data, err) {
    const meta = {
      ...(data || {}),
      ...(err ? {
        error: {
          name: err.name,
          message: err.message
        }
      } : {})
    };
    _logger.logger.info(`[${component}:${operation}] ${message}`, meta);
  }
  warn(component, operation, message, data, err) {
    const meta = {
      ...(data || {}),
      ...(err ? {
        error: {
          name: err.name,
          message: err.message
        }
      } : {})
    };
    _logger.logger.warn(`[${component}:${operation}] ${message}`, meta);
  }
  error(component, operation, message, data, err) {
    const meta = {
      ...(data || {}),
      ...(err ? {
        error: {
          name: err.name,
          message: err.message,
          stack: err.stack
        }
      } : {})
    };
    _logger.logger.error(`[${component}:${operation}] ${message}`, meta);
  }

  /**
   * Cache operation logging
   */
  logCacheOperation(operation, key, metadata) {
    switch (operation) {
      case 'hit':
        this.cacheMetrics.hits++;
        break;
      case 'miss':
        this.cacheMetrics.misses++;
        break;
      case 'set':
        this.cacheMetrics.sets++;
        break;
      case 'invalidate':
        this.cacheMetrics.invalidations++;
        break;
    }

    // Update hit rate
    const total = this.cacheMetrics.hits + this.cacheMetrics.misses;
    this.cacheMetrics.hitRate = total > 0 ? this.cacheMetrics.hits / total : 0;
    this.debug('Cache', operation, `Cache ${operation} for key: ${key}`, {
      key,
      operation,
      ...metadata,
      currentHitRate: this.cacheMetrics.hitRate.toFixed(2)
    });
  }

  /**
   * API request logging with metrics tracking
   */
  logApiRequest(endpoint, method, params, duration, status, metadata) {
    if (status !== 'cached') {
      this.apiMetrics.totalRequests++;
      if (status === 'success') {
        this.apiMetrics.successfulRequests++;
        this.responseTimes.push(duration);

        // Keep only last 100 response times for average calculation
        if (this.responseTimes.length > 100) {
          this.responseTimes = this.responseTimes.slice(-100);
        }

        // Update average response time
        this.apiMetrics.averageResponseTime = this.responseTimes.reduce((sum, time) => sum + time, 0) / this.responseTimes.length;
      } else if (status === 'error') {
        this.apiMetrics.errorRequests++;
      }
    }
    const logLevel = status === 'error' ? 'warn' : 'debug';
    this[logLevel]('API', 'request', `${method} ${endpoint} - ${status}`, {
      endpoint,
      method,
      params,
      duration: `${duration}ms`,
      status,
      ...metadata
    });
  }

  /**
   * Get comprehensive metrics
   */
  getMetrics() {
    // Build EnhancedMetrics
    const memoryUsage = (() => {
      try {
        const perf = typeof performance !== 'undefined' ? performance : undefined;
        return perf?.memory?.usedJSHeapSize;
      } catch {
        return undefined;
      }
    })();
    const enhanced = {
      cache: {
        ...this.cacheMetrics
      },
      api: {
        ...this.apiMetrics
      },
      uptime: Date.now() - this.startTime,
      memoryUsage: memoryUsage
    };
    return enhanced;
  }

  /**
   * Compatibility: return metrics shaped like EnhancedRequestMetrics for services expecting that shape
   */
  getRequestMetrics() {
    const now = Date.now();
    const requestMetrics = {
      totalRequests: this.apiMetrics.totalRequests,
      cacheHits: this.cacheMetrics.hits,
      cacheMisses: this.cacheMetrics.misses,
      errors: this.apiMetrics.errorRequests || 0,
      avgResponseTime: this.apiMetrics.averageResponseTime,
      dataQualityScore: 0,
      validationErrors: 0,
      fallbacksUsed: 0,
      transformationErrors: 0,
      slowQueries: [],
      errorsByType: {},
      errorsByEndpoint: {},
      lastUpdate: now
    };
    return requestMetrics;
  }

  /**
   * Log data validation metrics and context
   */
  logDataValidation(operation, sport, total, validated, errorsCount, averageQuality, duration, metadata, err) {
    this.info('DataValidator', operation, `Validation summary for ${sport}: ${validated}/${total} valid`, {
      sport,
      total,
      validated,
      errorsCount,
      averageQuality,
      duration,
      ...metadata
    }, err);
  }

  /**
   * Reset metrics (useful for testing)
   */
  resetMetrics() {
    this.cacheMetrics = {
      hits: 0,
      misses: 0,
      sets: 0,
      invalidations: 0,
      hitRate: 0
    };
    this.apiMetrics = {
      totalRequests: 0,
      successfulRequests: 0,
      errorRequests: 0,
      averageResponseTime: 0
    };
    this.responseTimes = [];
    this.startTime = Date.now();
  }
}
const enhancedLogger = exports.enhancedLogger = new EnhancedLogger();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,