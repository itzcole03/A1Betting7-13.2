5eab3e4afa8789b84ad45d2e315276af
"use strict";

var _globals = require("@jest/globals");
/**
 * Frontend Tests for WebSocket/Realtime Enhancement
 * 
 * Tests for exponential backoff timing, SSE fallback activation,
 * and validator error classification.
 */

// Mock EventBus to avoid dependencies
const mockEventBus = {
  emit: _globals.jest.fn(),
  on: _globals.jest.fn(),
  off: _globals.jest.fn()
};

// Ensure the real module is loaded and then override the exported _eventBus
try {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  const eb = require('../../core/EventBus');
  if (eb && typeof eb === 'object') {
    eb._eventBus = mockEventBus;
  }
} catch (e) {
  // If require fails, continue â€” tests will report module-not-found
}

// Mock fetch for network requests
global.fetch = _globals.jest.fn();
(0, _globals.describe)('Exponential Backoff Timing', () => {
  // We'll need to import the actual backoff logic
  // This is a placeholder structure for the tests

  let backoffCalculator;
  (0, _globals.beforeEach)(() => {
    _globals.jest.clearAllMocks();
    _globals.jest.useFakeTimers();

    // Mock the exponential backoff implementation
    backoffCalculator = {
      calculateDelay: (attempt, baseDelay = 1000, maxDelay = 30000, jitter = true) => {
        const exponentialDelay = Math.min(baseDelay * Math.pow(2, attempt), maxDelay);
        return jitter ? exponentialDelay + Math.random() * 0.3 * exponentialDelay : exponentialDelay;
      }
    };
  });
  (0, _globals.afterEach)(() => {
    _globals.jest.useRealTimers();
  });
  (0, _globals.test)('should calculate exponential backoff correctly without jitter', () => {
    const baseDelay = 1000;
    const maxDelay = 30000;

    // Test exponential progression
    (0, _globals.expect)(backoffCalculator.calculateDelay(0, baseDelay, maxDelay, false)).toBe(1000);
    (0, _globals.expect)(backoffCalculator.calculateDelay(1, baseDelay, maxDelay, false)).toBe(2000);
    (0, _globals.expect)(backoffCalculator.calculateDelay(2, baseDelay, maxDelay, false)).toBe(4000);
    (0, _globals.expect)(backoffCalculator.calculateDelay(3, baseDelay, maxDelay, false)).toBe(8000);
    (0, _globals.expect)(backoffCalculator.calculateDelay(4, baseDelay, maxDelay, false)).toBe(16000);

    // Test max delay cap
    (0, _globals.expect)(backoffCalculator.calculateDelay(10, baseDelay, maxDelay, false)).toBe(30000);
  });
  (0, _globals.test)('should add jitter to prevent thundering herd', () => {
    const baseDelay = 1000;
    const maxDelay = 30000;

    // Run multiple times to ensure jitter varies
    const delays = Array.from({
      length: 10
    }, () => backoffCalculator.calculateDelay(2, baseDelay, maxDelay, true));

    // All delays should be around 4000ms but not exactly the same
    delays.forEach(delay => {
      (0, _globals.expect)(delay).toBeGreaterThan(4000); // Base delay
      (0, _globals.expect)(delay).toBeLessThan(5200); // Base + 30% jitter
    });

    // Ensure they're not all identical
    const uniqueDelays = new Set(delays);
    (0, _globals.expect)(uniqueDelays.size).toBeGreaterThan(5); // Should have variety due to jitter
  });
  (0, _globals.test)('should respect maximum delay bounds', () => {
    const baseDelay = 5000;
    const maxDelay = 10000;

    // High attempt number should still respect max delay
    const delay = backoffCalculator.calculateDelay(20, baseDelay, maxDelay, false);
    (0, _globals.expect)(delay).toBeLessThanOrEqual(maxDelay);
    (0, _globals.expect)(delay).toBe(10000);
  });
  (0, _globals.test)('should handle edge cases', () => {
    // Zero attempt
    (0, _globals.expect)(backoffCalculator.calculateDelay(0, 1000, 30000, false)).toBe(1000);

    // Very small base delay
    (0, _globals.expect)(backoffCalculator.calculateDelay(0, 100, 30000, false)).toBe(100);

    // Base delay larger than max delay
    (0, _globals.expect)(backoffCalculator.calculateDelay(0, 50000, 30000, false)).toBe(30000);
  });
});
(0, _globals.describe)('SSE Fallback Activation', () => {
  let sseChannelMock;
  (0, _globals.beforeEach)(() => {
    _globals.jest.clearAllMocks();
    _globals.jest.useFakeTimers();

    // Mock SSE fallback channel
    sseChannelMock = {
      isActive: false,
      consecutiveFailures: 0,
      stabilityTimer: null,
      activationThreshold: 3,
      stabilityThreshold: 120000,
      // 2 minutes

      reportWebSocketFailure: function () {
        this.consecutiveFailures++;
        if (this.consecutiveFailures >= this.activationThreshold && !this.isActive) {
          this.activate();
        }
      },
      reportWebSocketSuccess: function () {
        if (this.isActive) {
          // Start stability monitoring
          this.stabilityTimer = setTimeout(() => {
            this.deactivate();
          }, this.stabilityThreshold);
        }
        this.consecutiveFailures = 0;
      },
      activate: function () {
        this.isActive = true;
        // Mock EventSource creation
        mockEventBus.emit('sse:activated');
      },
      deactivate: function () {
        this.isActive = false;
        if (this.stabilityTimer) {
          clearTimeout(this.stabilityTimer);
          this.stabilityTimer = null;
        }
        mockEventBus.emit('sse:deactivated');
      }
    };
  });
  (0, _globals.afterEach)(() => {
    _globals.jest.useRealTimers();
  });
  (0, _globals.test)('should not activate SSE before threshold failures', () => {
    // Report 2 failures (below threshold of 3)
    sseChannelMock.reportWebSocketFailure();
    sseChannelMock.reportWebSocketFailure();
    (0, _globals.expect)(sseChannelMock.isActive).toBe(false);
    (0, _globals.expect)(mockEventBus.emit).not.toHaveBeenCalledWith('sse:activated');
  });
  (0, _globals.test)('should activate SSE after threshold failures', () => {
    // Report 3 failures (meets threshold)
    sseChannelMock.reportWebSocketFailure();
    sseChannelMock.reportWebSocketFailure();
    sseChannelMock.reportWebSocketFailure();
    (0, _globals.expect)(sseChannelMock.isActive).toBe(true);
    (0, _globals.expect)(mockEventBus.emit).toHaveBeenCalledWith('sse:activated');
  });
  (0, _globals.test)('should reset failure count on WebSocket success', () => {
    // Report 2 failures, then success
    sseChannelMock.reportWebSocketFailure();
    sseChannelMock.reportWebSocketFailure();
    sseChannelMock.reportWebSocketSuccess();
    (0, _globals.expect)(sseChannelMock.consecutiveFailures).toBe(0);

    // Should need 3 more failures to activate
    sseChannelMock.reportWebSocketFailure();
    sseChannelMock.reportWebSocketFailure();
    (0, _globals.expect)(sseChannelMock.isActive).toBe(false);
  });
  (0, _globals.test)('should deactivate SSE after stability period', () => {
    // Activate SSE
    sseChannelMock.reportWebSocketFailure();
    sseChannelMock.reportWebSocketFailure();
    sseChannelMock.reportWebSocketFailure();
    (0, _globals.expect)(sseChannelMock.isActive).toBe(true);

    // Report WebSocket success (starts stability timer)
    sseChannelMock.reportWebSocketSuccess();

    // Fast-forward past stability threshold
    _globals.jest.advanceTimersByTime(sseChannelMock.stabilityThreshold + 1000);
    (0, _globals.expect)(sseChannelMock.isActive).toBe(false);
    (0, _globals.expect)(mockEventBus.emit).toHaveBeenCalledWith('sse:deactivated');
  });
  (0, _globals.test)('should handle multiple activation/deactivation cycles', () => {
    // First activation cycle
    for (let i = 0; i < 3; i++) {
      sseChannelMock.reportWebSocketFailure();
    }
    (0, _globals.expect)(sseChannelMock.isActive).toBe(true);

    // Deactivate after stability
    sseChannelMock.reportWebSocketSuccess();
    _globals.jest.advanceTimersByTime(sseChannelMock.stabilityThreshold + 1000);
    (0, _globals.expect)(sseChannelMock.isActive).toBe(false);

    // Second activation cycle
    for (let i = 0; i < 3; i++) {
      sseChannelMock.reportWebSocketFailure();
    }
    (0, _globals.expect)(sseChannelMock.isActive).toBe(true);

    // Deactivate second cycle after stability
    sseChannelMock.reportWebSocketSuccess();
    _globals.jest.advanceTimersByTime(sseChannelMock.stabilityThreshold + 1000);
    (0, _globals.expect)(sseChannelMock.isActive).toBe(false);
    (0, _globals.expect)(mockEventBus.emit).toHaveBeenCalledTimes(4); // 2 activations + 2 deactivations
  });
});
(0, _globals.describe)('Validator Error Classification', () => {
  let validator;
  (0, _globals.beforeEach)(() => {
    _globals.jest.clearAllMocks();

    // Mock DOM methods
    const mockQuerySelectorAll = _globals.jest.fn();
    const mockQuerySelector = _globals.jest.fn();
    global.document = {
      querySelectorAll: mockQuerySelectorAll,
      querySelector: mockQuerySelector
    };

    // Mock validator with error classification
    validator = {
      classifyValidationError: (functionName, errorMessage, _originalError) => {
        // Normalize message for robust matching
        const msg = (errorMessage || '').toLowerCase();

        // Check for missing structural elements (covers "No X elements found", "no elements", "not found")
        if (msg.includes('not found') || msg.includes('no navigation elements') || msg.includes('no elements found') || /no .*elements/.test(msg)) {
          const missingElements = [];
          if (functionName === 'navigation') {
            const navElements = document.querySelectorAll('[data-testid*="nav"], [role="navigation"], nav');
            if (!navElements || Array.isArray(navElements) && navElements.length === 0) {
              missingElements.push('navigation elements');
            }
          }
          return {
            type: 'structural_missing',
            details: {
              missingElements
            }
          };
        }

        // Check for data pending situations
        if (errorMessage.includes('no content visible') || errorMessage.includes('empty') || errorMessage.includes('data not loaded')) {
          return {
            type: 'data_pending',
            details: {
              emptyElements: []
            }
          };
        }

        // Check for performance issues
        if (errorMessage.includes('timeout') || errorMessage.includes('Slow execution')) {
          return {
            type: 'performance_issue',
            details: {
              performanceMetrics: {
                issue: 'timeout_or_slow_execution'
              }
            }
          };
        }

        // Default to functionality broken
        return {
          type: 'functionality_broken',
          details: {
            brokenFunctionality: [errorMessage]
          }
        };
      }
    };
  });
  (0, _globals.test)('should classify structural missing errors correctly', () => {
    // Ensure this test explicitly provides a jest.fn for querySelectorAll
    const explicitMock = _globals.jest.fn().mockReturnValue([]);
    document.querySelectorAll = explicitMock;
    const result = validator.classifyValidationError('navigation', 'No navigation elements found', new Error('No navigation elements found'));
    (0, _globals.expect)(result.type).toBe('structural_missing');
    (0, _globals.expect)(result.details.missingElements).toContain('navigation elements');
  });
  (0, _globals.test)('should classify data pending errors correctly', () => {
    const result = validator.classifyValidationError('predictions', 'Prediction elements found but no content visible', new Error('No content'));
    (0, _globals.expect)(result.type).toBe('data_pending');
    (0, _globals.expect)(result.details).toHaveProperty('emptyElements');
  });
  (0, _globals.test)('should classify performance issues correctly', () => {
    const result = validator.classifyValidationError('rendering', 'Validation timeout after 5000ms', new Error('Timeout'));
    (0, _globals.expect)(result.type).toBe('performance_issue');
    (0, _globals.expect)(result.details.performanceMetrics.issue).toBe('timeout_or_slow_execution');
  });
  (0, _globals.test)('should classify functionality broken as default', () => {
    const result = validator.classifyValidationError('dataFetching', 'API endpoint returned 500 error', new Error('Server error'));
    (0, _globals.expect)(result.type).toBe('functionality_broken');
    (0, _globals.expect)(result.details.brokenFunctionality).toContain('API endpoint returned 500 error');
  });
  (0, _globals.test)('should handle slow execution classification', () => {
    const result = validator.classifyValidationError('rendering', 'Slow execution: 3000ms', new Error('Slow'));
    (0, _globals.expect)(result.type).toBe('performance_issue');
  });
  (0, _globals.test)('should differentiate between structural and data issues', () => {
    // Structural issue - elements don't exist
    const structuralResult = validator.classifyValidationError('betting', 'No betting elements found in DOM', new Error('Not found'));

    // Data issue - elements exist but empty
    const dataResult = validator.classifyValidationError('betting', 'Betting elements found but no content visible', new Error('Empty'));
    (0, _globals.expect)(structuralResult.type).toBe('structural_missing');
    (0, _globals.expect)(dataResult.type).toBe('data_pending');
  });
});
(0, _globals.describe)('Event Logger Integration', () => {
  let mockEventLogger;
  (0, _globals.beforeEach)(() => {
    _globals.jest.clearAllMocks();

    // Mock event logger
    mockEventLogger = {
      events: [],
      log: _globals.jest.fn((severity, category, component, message, data) => {
        const event = {
          severity,
          category,
          component,
          message,
          data,
          timestamp: Date.now()
        };
        mockEventLogger.events.push(event);
        return `event_${mockEventLogger.events.length}`;
      }),
      logWebSocketEvent: _globals.jest.fn(),
      logSSEEvent: _globals.jest.fn(),
      logPerformance: _globals.jest.fn(),
      flush: _globals.jest.fn()
    };
  });
  (0, _globals.test)('should batch events correctly', () => {
    // Log multiple events
    mockEventLogger.log('info', 'websocket', 'TestComponent', 'Connected');
    mockEventLogger.log('warn', 'websocket', 'TestComponent', 'Connection unstable');
    mockEventLogger.log('error', 'websocket', 'TestComponent', 'Connection failed');
    (0, _globals.expect)(mockEventLogger.events).toHaveLength(3);
    (0, _globals.expect)(mockEventLogger.events[0].severity).toBe('info');
    (0, _globals.expect)(mockEventLogger.events[1].severity).toBe('warn');
    (0, _globals.expect)(mockEventLogger.events[2].severity).toBe('error');
  });
  (0, _globals.test)('should filter events by severity level', () => {
    const minimumSeverity = 'warn';
    const severityLevels = {
      debug: 0,
      info: 1,
      warn: 2,
      error: 3,
      critical: 4
    };
    const events = [{
      severity: 'debug',
      message: 'Debug event'
    }, {
      severity: 'info',
      message: 'Info event'
    }, {
      severity: 'warn',
      message: 'Warn event'
    }, {
      severity: 'error',
      message: 'Error event'
    }];
    const filteredEvents = events.filter(event => severityLevels[event.severity] >= severityLevels[minimumSeverity]);
    (0, _globals.expect)(filteredEvents).toHaveLength(2);
    (0, _globals.expect)(filteredEvents[0].severity).toBe('warn');
    (0, _globals.expect)(filteredEvents[1].severity).toBe('error');
  });
  (0, _globals.test)('should generate diagnostic report', () => {
    // Simulate various events
    mockEventLogger.log('error', 'websocket', 'DataManager', 'Connection failed', {
      reason: 'network'
    });
    mockEventLogger.log('warn', 'validation', 'CoreValidator', 'Slow validation', {
      duration: 2000
    });
    mockEventLogger.log('info', 'sse', 'SSEChannel', 'Fallback activated');
    const recentErrors = mockEventLogger.events.filter(e => e.severity === 'error');
    const recentWarnings = mockEventLogger.events.filter(e => e.severity === 'warn');
    (0, _globals.expect)(recentErrors).toHaveLength(1);
    (0, _globals.expect)(recentWarnings).toHaveLength(1);
    (0, _globals.expect)(recentErrors[0].component).toBe('DataManager');
    (0, _globals.expect)(recentWarnings[0].component).toBe('CoreValidator');
  });
});
(0, _globals.describe)('Realtime Configuration Management', () => {
  let configManager;
  (0, _globals.beforeEach)(() => {
    _globals.jest.clearAllMocks();

    // Mock configuration manager
    configManager = {
      config: {
        realtime: {
          websocket: {
            enabled: true,
            maxReconnectAttempts: 5,
            reconnectInterval: 5000
          },
          sse: {
            enabled: true,
            activationThreshold: 3
          }
        }
      },
      getRealtimeConfig: function () {
        return this.config.realtime;
      },
      updateRealtimeConfig: function (section, updates) {
        this.config.realtime[section] = {
          ...this.config.realtime[section],
          ...updates
        };
      },
      validateConfiguration: function () {
        const config = this.getRealtimeConfig();
        const warnings = [];
        const recommendations = [];
        if (config.websocket.reconnectInterval < 1000) {
          warnings.push('WebSocket reconnect interval is very short');
        }
        if (!config.sse.enabled && !config.websocket.enabled) {
          warnings.push('No realtime connection enabled');
        }
        return {
          isValid: warnings.length === 0,
          warnings,
          recommendations
        };
      }
    };
  });
  (0, _globals.test)('should validate configuration correctly', () => {
    const validation = configManager.validateConfiguration();
    (0, _globals.expect)(validation.isValid).toBe(true);
    (0, _globals.expect)(validation.warnings).toHaveLength(0);
  });
  (0, _globals.test)('should detect configuration issues', () => {
    // Set problematic configuration
    configManager.updateRealtimeConfig('websocket', {
      reconnectInterval: 500,
      enabled: false
    });
    configManager.updateRealtimeConfig('sse', {
      enabled: false
    });
    const validation = configManager.validateConfiguration();
    (0, _globals.expect)(validation.isValid).toBe(false);
    (0, _globals.expect)(validation.warnings).toContain('WebSocket reconnect interval is very short');
    (0, _globals.expect)(validation.warnings).toContain('No realtime connection enabled');
  });
  (0, _globals.test)('should update configuration correctly', () => {
    const originalInterval = configManager.getRealtimeConfig().websocket.reconnectInterval;
    (0, _globals.expect)(originalInterval).toBe(5000);
    configManager.updateRealtimeConfig('websocket', {
      reconnectInterval: 10000
    });
    const updatedInterval = configManager.getRealtimeConfig().websocket.reconnectInterval;
    (0, _globals.expect)(updatedInterval).toBe(10000);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,