{"version":3,"names":["_apiConfig","require","_enhancedLogger","_RealTimePlayerDataService","RealTimePlayerDataService","getInstance","instance","constructor","cache","Map","websocket","reconnectAttempts","maxReconnectAttempts","healthMetrics","circuitBreakers","subscribers","config","cacheTTL","playerProfile","recentStats","liveData","searchResults","apiTimeout","circuitBreakerThreshold","circuitBreakerResetTime","websocketReconnectDelay","maxConcurrentRequests","rateLimitWindow","rateLimitMaxRequests","pendingRequests","requestQueue","activeRequests","initializeWebSocket","startCacheCleanup","startHealthMonitoring","wsUrl","WS_URL","WebSocket","onopen","enhancedLogger","info","onmessage","event","update","JSON","parse","data","handleRealTimeUpdate","error","onclose","scheduleReconnect","onerror","warn","delay","Math","pow","setTimeout","cacheKeysToInvalidate","getCacheKeysForPlayer","playerId","forEach","key","delete","get","callback","type","updatePlayerStatsCache","Array","from","keys","filter","includes","subscribeToPlayer","has","set","Set","add","playerSubscribers","size","getPlayerData","sport","cacheKey","cached","getCachedData","isCacheValid","request","executeWithCircuitBreaker","fetchPlayerDataFromAPI","player","setCachedData","searchPlayers","query","limit","length","toLowerCase","checkRateLimit","results","fetchSearchResultsFromAPI","serviceName","operation","breaker","isOpen","lastFailure","failures","timeSinceFailure","Date","now","Error","startTime","result","Promise","race","timeoutPromise","updateHealthMetrics","errMsg","message","String","window","resetTime","count","_sport","apiUrl","response","fetch","signal","AbortSignal","timeout","ok","status","json","validatedPlayer","validateAndNormalizePlayerData","raw","id","name","season","season_stats","adv","advanced_metrics","team","position","active","injury_status","undefined","hits","normalizeNumeric","home_runs","rbis","batting_average","on_base_percentage","slugging_percentage","ops","strikeouts","walks","games_played","plate_appearances","at_bats","runs","doubles","triples","stolen_bases","war","babip","wrc_plus","barrel_rate","hard_hit_rate","exit_velocity","launch_angle","last_30_games","normalizeGameData","performance_trends","last_7_days","last_30_days","home_vs_away","home","away","vs_lefties","vs_righties","consistency_score","clutch_performance","injury_risk","hot_streak","Boolean","cold_streak","breakout_candidate","projections","next_game","rest_of_season","confidence_intervals","low","high","value","defaultValue","min","max","num","parseFloat","isNaN","games","isArray","map","game","g","date","toISOString","opponent","stats","game_score","weather","encodeURIComponent","console","item","entry","ttl","quality","timestamp","maxAge","newStats","entries","startsWith","Object","assign","ms","_","reject","responseTime","success","current","successRate","consecutiveFailures","lastError","setInterval","service","metrics","stringify","getHealthMetrics","refreshPlayerData","clearCache","clear","dispose","close","exports","realTimePlayerDataService"],"sources":["RealTimePlayerDataService.ts"],"sourcesContent":["/**\n * Real-Time Player Data Service\n * Implements optimizations from A1Betting Real-Time Data Analysis\n * \n          // Ensure season_stats exists before merging\n          if (!player.season_stats) player.season_stats = {} as any;\n          Object.assign(player.season_stats, newStats as Record<string, unknown>);\n * - WebSocket-based real-time updates\n * - Intelligent caching with cache invalidation\n * - Rate limiting and API call optimization\n * - Circuit breaker pattern for resilience\n * - Data quality validation and normalization\n */\n\nimport { WS_URL } from '../config/apiConfig';\n\nimport { Player } from '../components/player/PlayerDashboardContainer';\nimport { enhancedLogger } from '../utils/enhancedLogger';\n\ninterface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n  ttl: number;\n  quality: 'high' | 'medium' | 'low';\n}\n\ninterface APIHealthMetrics {\n  responseTime: number;\n  successRate: number;\n  lastError?: string;\n  consecutiveFailures: number;\n}\n\ninterface RealTimeUpdate {\n  type: 'player_stats' | 'injury_update' | 'lineup_change' | 'trade';\n  playerId: string;\n  data: unknown;\n  timestamp: number;\n  source: string;\n}\n\nexport class RealTimePlayerDataService {\n  private static instance: RealTimePlayerDataService;\n  private cache = new Map<string, CacheEntry<unknown>>();\n  private websocket: WebSocket | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private healthMetrics = new Map<string, APIHealthMetrics>();\n  private circuitBreakers = new Map<string, { isOpen: boolean; lastFailure: number; failures: number }>();\n  private subscribers = new Map<string, Set<(data: unknown) => void>>();\n  \n  // Configuration based on analysis recommendations\n  private readonly config = {\n    cacheTTL: {\n      playerProfile: 5 * 60 * 1000, // 5 minutes\n      recentStats: 2 * 60 * 1000,   // 2 minutes  \n      liveData: 30 * 1000,          // 30 seconds\n      searchResults: 10 * 60 * 1000  // 10 minutes\n    },\n    apiTimeout: 5000,\n    circuitBreakerThreshold: 5,\n    circuitBreakerResetTime: 60000,\n    websocketReconnectDelay: 1000,\n    maxConcurrentRequests: 10,\n    rateLimitWindow: 60000, // 1 minute\n    rateLimitMaxRequests: 100\n  };\n\n  private pendingRequests = new Map<string, Promise<unknown>>();\n  private requestQueue: Array<() => Promise<unknown>> = [];\n  private activeRequests = 0;\n  private rateLimitWindow = new Map<string, { count: number; resetTime: number }>();\n\n  public static getInstance(): RealTimePlayerDataService {\n    if (!RealTimePlayerDataService.instance) {\n      RealTimePlayerDataService.instance = new RealTimePlayerDataService();\n    }\n    return RealTimePlayerDataService.instance;\n  }\n\n  private constructor() {\n    this.initializeWebSocket();\n    this.startCacheCleanup();\n    this.startHealthMonitoring();\n  }\n\n  /**\n   * WebSocket initialization with auto-reconnect\n   * Addresses analysis finding: \"Incomplete WebSocket implementation\"\n   */\n  private initializeWebSocket(): void {\n    try {\n      const wsUrl = WS_URL + '/ws/player-data';\n      this.websocket = new WebSocket(wsUrl);\n\n      this.websocket.onopen = () => {\n        // eslint-disable-next-line no-console\n  enhancedLogger.info('RealTimePlayerData', 'WebSocket', 'WebSocket connected');\n        this.reconnectAttempts = 0;\n      };\n\n      this.websocket.onmessage = (event) => {\n        try {\n          const update: RealTimeUpdate = JSON.parse(event.data);\n          this.handleRealTimeUpdate(update);\n        } catch (error) {\n          // eslint-disable-next-line no-console\n          enhancedLogger.error('RealTimePlayerData', 'WebSocket', 'Failed to parse WebSocket message', { error });\n        }\n      };\n\n      this.websocket.onclose = () => {\n        // eslint-disable-next-line no-console\n  enhancedLogger.info('RealTimePlayerData', 'WebSocket', 'WebSocket disconnected');\n        this.scheduleReconnect();\n      };\n\n      this.websocket.onerror = (error) => {\n        // eslint-disable-next-line no-console\n  enhancedLogger.warn('RealTimePlayerData', 'WebSocket', 'WebSocket error (non-critical)', { error });\n        // Don't throw error - WebSocket is optional enhancement\n      };\n\n    } catch (error) {\n      // eslint-disable-next-line no-console\n  enhancedLogger.error('RealTimePlayerData', 'WebSocket', 'Failed to initialize WebSocket', { error });\n      this.scheduleReconnect();\n    }\n  }\n\n  private scheduleReconnect(): void {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      const delay = this.config.websocketReconnectDelay * Math.pow(2, this.reconnectAttempts - 1);\n      \n      setTimeout(() => {\n        // eslint-disable-next-line no-console\n  enhancedLogger.info('RealTimePlayerData', 'WebSocket', `Attempting WebSocket reconnection (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        this.initializeWebSocket();\n      }, delay);\n    }\n  }\n\n  /**\n   * Handle real-time updates from WebSocket\n   */\n  private handleRealTimeUpdate(update: RealTimeUpdate): void {\n    // Invalidate relevant cache entries\n    const cacheKeysToInvalidate = this.getCacheKeysForPlayer(update.playerId);\n    cacheKeysToInvalidate.forEach(key => this.cache.delete(key));\n\n    // Notify subscribers\n    const subscribers = this.subscribers.get(update.playerId);\n    if (subscribers) {\n      subscribers.forEach(callback => {\n        try {\n          callback(update);\n          } catch (error) {\n          // eslint-disable-next-line no-console\n    enhancedLogger.error('RealTimePlayerData', 'Subscriber', 'Error in subscriber callback', { error });\n        }\n      });\n    }\n\n    // Update cache with new data if applicable\n    if (update.type === 'player_stats') {\n  this.updatePlayerStatsCache(update.playerId, update.data as Record<string, unknown>);\n    }\n  }\n\n  private getCacheKeysForPlayer(playerId: string): string[] {\n    return Array.from(this.cache.keys()).filter(key => key.includes(playerId));\n  }\n\n  /**\n   * Subscribe to real-time updates for a specific player\n   */\n  public subscribeToPlayer(playerId: string, callback: (data: unknown) => void): () => void {\n    if (!this.subscribers.has(playerId)) {\n      this.subscribers.set(playerId, new Set());\n    }\n    \n    this.subscribers.get(playerId)!.add(callback);\n\n    // Return unsubscribe function\n    return () => {\n      const playerSubscribers = this.subscribers.get(playerId);\n      if (playerSubscribers) {\n        playerSubscribers.delete(callback);\n        if (playerSubscribers.size === 0) {\n          this.subscribers.delete(playerId);\n        }\n      }\n    };\n  }\n\n  /**\n   * Get player data with intelligent caching and real-time updates\n   * Addresses analysis finding: \"Data aggregation and normalization latency\"\n   */\n  public async getPlayerData(playerId: string, sport: string = 'MLB'): Promise<Player | null> {\n    const cacheKey = `player:${playerId}:${sport}`;\n    \n    // Check cache first\n    const cached = this.getCachedData<Player>(cacheKey);\n    if (cached && this.isCacheValid(cached, this.config.cacheTTL.playerProfile)) {\n      return cached.data;\n    }\n\n    // Check if request is already pending (deduplication)\n    if (this.pendingRequests.has(cacheKey)) {\n      return this.pendingRequests.get(cacheKey) as Promise<Player | null>;\n    }\n\n    // Create new request with circuit breaker protection\n    const request = this.executeWithCircuitBreaker(`player-api-${sport}`, async () => {\n      return this.fetchPlayerDataFromAPI(playerId, sport);\n    });\n\n    this.pendingRequests.set(cacheKey, request);\n\n    try {\n      const player = await request;\n      \n      // Cache the result\n      if (player) {\n        this.setCachedData(cacheKey, player, this.config.cacheTTL.playerProfile, 'high');\n      }\n\n      return player;\n    } catch (error) {\n      // eslint-disable-next-line no-console\n  enhancedLogger.error('RealTimePlayerData', 'DataFetch', `Failed to get player data for ${playerId}`, { error });\n      \n      // Return stale cache data if available\n      if (cached) {\n        // eslint-disable-next-line no-console\n  enhancedLogger.warn('RealTimePlayerData', 'DataFetch', 'Returning stale cache data due to API failure');\n        return cached.data;\n      }\n      \n      return null;\n    } finally {\n      this.pendingRequests.delete(cacheKey);\n    }\n  }\n\n  /**\n   * Search players with optimized rate limiting and caching\n   * Addresses analysis finding: \"API call management and rate limiting issues\"\n   */\n  public async searchPlayers(query: string, sport: string = 'MLB', limit: number = 10): Promise<Player[]> {\n    if (query.length < 2) return [];\n\n    const cacheKey = `search:${query.toLowerCase()}:${sport}:${limit}`;\n    \n    // Check cache first\n    const cached = this.getCachedData<Player[]>(cacheKey);\n    if (cached && this.isCacheValid(cached, this.config.cacheTTL.searchResults)) {\n      return cached.data;\n    }\n\n    // Rate limiting check\n    if (!this.checkRateLimit('search')) {\n      // eslint-disable-next-line no-console\n  enhancedLogger.warn('RealTimePlayerData', 'Search', 'Search rate limit exceeded');\n      return cached?.data || [];\n    }\n\n    try {\n      const results = await this.executeWithCircuitBreaker(`search-api-${sport}`, async () => {\n        return this.fetchSearchResultsFromAPI(query, sport, limit);\n      });\n\n      // Cache results\n      this.setCachedData(cacheKey, results, this.config.cacheTTL.searchResults, 'medium');\n      \n      return results;\n    } catch (error) {\n      // eslint-disable-next-line no-console\n  enhancedLogger.error('RealTimePlayerData', 'Search', 'Search failed', { error });\n      return cached?.data || [];\n    }\n  }\n\n  /**\n   * Circuit breaker pattern implementation\n   * Addresses analysis finding: \"Insufficient error handling and resilience mechanisms\"\n   */\n  private async executeWithCircuitBreaker<T>(\n    serviceName: string, \n    operation: () => Promise<T>\n  ): Promise<T> {\n    const breaker = this.circuitBreakers.get(serviceName) || {\n      isOpen: false,\n      lastFailure: 0,\n      failures: 0\n    };\n\n    // Check if circuit breaker is open\n    if (breaker.isOpen) {\n      const timeSinceFailure = Date.now() - breaker.lastFailure;\n      if (timeSinceFailure < this.config.circuitBreakerResetTime) {\n        throw new Error(`Circuit breaker open for ${serviceName}`);\n      } else {\n        // Half-open state - allow one request\n        breaker.isOpen = false;\n        breaker.failures = 0;\n      }\n    }\n\n    try {\n      const startTime = Date.now();\n      const result = await Promise.race([\n        operation(),\n        this.timeoutPromise(this.config.apiTimeout)\n      ]);\n      \n      // Success - reset failure count\n      breaker.failures = 0;\n      this.circuitBreakers.set(serviceName, breaker);\n      \n      // Update health metrics\n      this.updateHealthMetrics(serviceName, Date.now() - startTime, true);\n      \n      return result;\n      } catch (error) {\n      // Failure - increment failure count\n      breaker.failures++;\n      breaker.lastFailure = Date.now();\n      \n      if (breaker.failures >= this.config.circuitBreakerThreshold) {\n        breaker.isOpen = true;\n        // eslint-disable-next-line no-console\n  enhancedLogger.warn('RealTimePlayerData', 'CircuitBreaker', `Circuit breaker opened for ${serviceName}`);\n      }\n      \n      this.circuitBreakers.set(serviceName, breaker);\n  const errMsg = (error as unknown instanceof Error ? (error as Error).message : String(error));\n      this.updateHealthMetrics(serviceName, this.config.apiTimeout, false, errMsg);\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Rate limiting implementation\n   */\n  private checkRateLimit(operation: string): boolean {\n    const now = Date.now();\n    const window = this.rateLimitWindow.get(operation);\n    \n    if (!window || now > window.resetTime) {\n      this.rateLimitWindow.set(operation, {\n        count: 1,\n        resetTime: now + this.config.rateLimitWindow\n      });\n      return true;\n    }\n    \n    if (window.count >= this.config.rateLimitMaxRequests) {\n      return false;\n    }\n    \n    window.count++;\n    return true;\n  }\n\n  /**\n   * Fetch player data from API with data quality validation\n   */\n  private async fetchPlayerDataFromAPI(playerId: string, _sport: string): Promise<Player | null> {\n    const apiUrl = `/api/v2/players/${playerId}/dashboard`;\n    \n    const response = await fetch(apiUrl, {\n      signal: AbortSignal.timeout(this.config.apiTimeout)\n    });\n\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    // Data quality validation\n    const validatedPlayer = this.validateAndNormalizePlayerData(data);\n    return validatedPlayer;\n  }\n\n  /**\n   * Data quality validation and normalization\n   * Addresses analysis finding: \"Data quality and validation gaps\"\n   */\n  private validateAndNormalizePlayerData(data: unknown): Player | null {\n    try {\n      const raw = (data as Record<string, unknown> | null) || {};\n\n      // Basic validation\n      if (!raw.id || !raw.name) {\n        enhancedLogger.warn('RealTimePlayerData', 'validate', 'Invalid player data - missing required fields');\n        return null;\n      }\n\n      // Normalize data structure\n      const season = (raw.season_stats as Record<string, unknown> | undefined) || {};\n      const adv = (raw.advanced_metrics as Record<string, unknown> | undefined) || {};\n\n      const player: Player = {\n        id: String(raw.id),\n        name: String(raw.name),\n        team: String(raw.team || 'Unknown'),\n        position: String(raw.position || 'Unknown'),\n        sport: String(raw.sport || 'MLB'),\n        active: raw.active !== false,\n        injury_status: raw.injury_status ? String(raw.injury_status) : undefined,\n\n        season_stats: {\n          hits: this.normalizeNumeric(season.hits, 0),\n          home_runs: this.normalizeNumeric(season.home_runs, 0),\n          rbis: this.normalizeNumeric(season.rbis, 0),\n          batting_average: this.normalizeNumeric(season.batting_average, 0, 0, 1),\n          on_base_percentage: this.normalizeNumeric(season.on_base_percentage, 0, 0, 1),\n          slugging_percentage: this.normalizeNumeric(season.slugging_percentage, 0, 0, 1),\n          ops: this.normalizeNumeric(season.ops, 0, 0, 3),\n          strikeouts: this.normalizeNumeric(season.strikeouts, 0),\n          walks: this.normalizeNumeric(season.walks, 0),\n          games_played: this.normalizeNumeric(season.games_played, 0, 0, 162),\n          plate_appearances: this.normalizeNumeric(season.plate_appearances, 0),\n          at_bats: this.normalizeNumeric(season.at_bats, 0),\n          runs: this.normalizeNumeric(season.runs, 0),\n          doubles: this.normalizeNumeric(season.doubles, 0),\n          triples: this.normalizeNumeric(season.triples, 0),\n          stolen_bases: this.normalizeNumeric(season.stolen_bases, 0),\n          war: this.normalizeNumeric(season.war),\n          babip: this.normalizeNumeric(season.babip, undefined, 0, 1),\n          wrc_plus: this.normalizeNumeric(season.wrc_plus),\n          barrel_rate: this.normalizeNumeric(season.barrel_rate),\n          hard_hit_rate: this.normalizeNumeric(season.hard_hit_rate),\n          exit_velocity: this.normalizeNumeric(season.exit_velocity),\n          launch_angle: this.normalizeNumeric(season.launch_angle)\n        },\n\n        last_30_games: this.normalizeGameData((raw.last_30_games as unknown[]) || []),\n\n        performance_trends: (raw.performance_trends as Record<string, unknown>) || {\n          last_7_days: {},\n          last_30_days: {},\n          home_vs_away: { home: {}, away: {} },\n          vs_lefties: {},\n          vs_righties: {}\n        },\n\n        advanced_metrics: {\n          consistency_score: this.normalizeNumeric(adv.consistency_score, 50, 0, 100),\n          clutch_performance: this.normalizeNumeric(adv.clutch_performance, 50, 0, 100),\n          injury_risk: this.normalizeNumeric(adv.injury_risk, 20, 0, 100),\n          hot_streak: Boolean(adv.hot_streak),\n          cold_streak: Boolean(adv.cold_streak),\n          breakout_candidate: Boolean(adv.breakout_candidate)\n        },\n\n        projections: (raw.projections as Record<string, unknown>) || {\n          next_game: {},\n          rest_of_season: {},\n          confidence_intervals: { low: {}, high: {} }\n        }\n      };\n\n      return player;\n    } catch (error) {\n  enhancedLogger.error('RealTimePlayerData', 'validate', 'Data validation failed', undefined, error as unknown as Error);\n      return null;\n    }\n  }\n\n  private normalizeNumeric(value: unknown, defaultValue?: number, min?: number, max?: number): number | undefined {\n    if (value === null || value === undefined || value === '') {\n      return defaultValue;\n    }\n    \n  const num = typeof value === 'number' ? value : parseFloat(String(value));\n    if (isNaN(num)) {\n      return defaultValue;\n    }\n    \n    if (min !== undefined && num < min) return min;\n    if (max !== undefined && num > max) return max;\n    \n    return num;\n  }\n\n  private normalizeGameData(games: unknown[]): Record<string, unknown>[] {\n    if (!Array.isArray(games)) return [];\n\n    return games.map((game: unknown) => {\n      const g = game as Record<string, unknown> || {};\n      return {\n        date: (g.date as string) || new Date().toISOString(),\n        opponent: (g.opponent as string) || 'Unknown',\n        home: (g.home as boolean) || false,\n        result: (g.result as string) || 'Unknown',\n        stats: (g.stats as Record<string, unknown>) || {},\n        game_score: this.normalizeNumeric(g.game_score),\n        weather: g.weather\n      };\n    });\n  }\n\n  /**\n   * Search API implementation\n   */\n  private async fetchSearchResultsFromAPI(query: string, sport: string, limit: number): Promise<Player[]> {\n    const apiUrl = `/api/v2/players/search?q=${encodeURIComponent(query)}&sport=${sport}&limit=${limit}`;\n    \n    const response = await fetch(apiUrl, {\n      signal: AbortSignal.timeout(this.config.apiTimeout)\n    });\n\n    if (!response.ok) {\n      throw new Error(`Search API request failed: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    if (!Array.isArray(data)) {\n      // eslint-disable-next-line no-console\n      console.warn('[RealTimePlayerData] Invalid search response format');\n      return [];\n    }\n\n    return data.map(item => this.validateAndNormalizePlayerData(item)).filter(Boolean) as Player[];\n  }\n\n  // Cache management methods\n  private getCachedData<T>(key: string): CacheEntry<T> | null {\n    const entry = this.cache.get(key) as CacheEntry<T> | undefined;\n    return entry || null;\n  }\n\n  private setCachedData<T>(key: string, data: T, ttl: number, quality: 'high' | 'medium' | 'low'): void {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n      ttl,\n      quality\n    });\n  }\n\n  private isCacheValid(entry: CacheEntry<unknown>, maxAge: number): boolean {\n    return Date.now() - entry.timestamp < Math.min(entry.ttl, maxAge);\n  }\n\n  private updatePlayerStatsCache(playerId: string, newStats: Record<string, unknown>): void {\n    // Find and update relevant cache entries\n    for (const [key, entry] of this.cache.entries()) {\n      if (key.includes(playerId) && key.startsWith('player:')) {\n        const player = entry.data as Player;\n        if (player && newStats) {\n          // Ensure season_stats exists and both operands are objects for Object.assign\n          if (!player.season_stats) player.season_stats = {} as Record<string, unknown>;\n          Object.assign(player.season_stats as Record<string, unknown>, newStats as Record<string, unknown>);\n          entry.timestamp = Date.now();\n        }\n      }\n    }\n  }\n\n  // Utility methods\n  private timeoutPromise(ms: number): Promise<never> {\n    return new Promise((_, reject) => {\n      setTimeout(() => reject(new Error('Request timeout')), ms);\n    });\n  }\n\n  private updateHealthMetrics(serviceName: string, responseTime: number, success: boolean, error?: string): void {\n    const current = this.healthMetrics.get(serviceName) || {\n      responseTime: 0,\n      successRate: 1,\n      consecutiveFailures: 0\n    };\n\n    // Update response time (moving average)\n    current.responseTime = (current.responseTime * 0.8) + (responseTime * 0.2);\n    \n    // Update success rate (moving average)\n    current.successRate = (current.successRate * 0.9) + (success ? 1 : 0) * 0.1;\n    \n    // Update consecutive failures\n    if (success) {\n      current.consecutiveFailures = 0;\n    } else {\n      current.consecutiveFailures++;\n      current.lastError = error;\n    }\n\n    this.healthMetrics.set(serviceName, current);\n  }\n\n  // Background tasks\n  private startCacheCleanup(): void {\n    setInterval(() => {\n      const now = Date.now();\n      for (const [key, entry] of this.cache.entries()) {\n        if (now - entry.timestamp > entry.ttl) {\n          this.cache.delete(key);\n        }\n      }\n    }, 60000); // Cleanup every minute\n  }\n\n  private startHealthMonitoring(): void {\n    setInterval(() => {\n      // Log health metrics for monitoring\n      for (const [service, metrics] of this.healthMetrics.entries()) {\n        if (metrics.consecutiveFailures > 3) {\n          enhancedLogger.warn('RealTimePlayerData', 'healthMonitor', `Service ${service} health degraded: ${JSON.stringify(metrics)}`);\n        }\n      }\n  }, 30000); // Check every 30 seconds\n  }\n\n  /**\n   * Get service health metrics\n   */\n  public getHealthMetrics(): Map<string, APIHealthMetrics> {\n    return new Map(this.healthMetrics);\n  }\n\n  /**\n   * Force cache refresh for a player\n   */\n  public async refreshPlayerData(playerId: string, sport: string = 'MLB'): Promise<Player | null> {\n    const cacheKey = `player:${playerId}:${sport}`;\n    this.cache.delete(cacheKey);\n    return this.getPlayerData(playerId, sport);\n  }\n\n  /**\n   * Clear all cached data\n   */\n  public clearCache(): void {\n    this.cache.clear();\n  // eslint-disable-next-line no-console\n  enhancedLogger.info('RealTimePlayerData', 'Cache', 'Cache cleared');\n  }\n\n  /**\n   * Cleanup resources\n   */\n  public dispose(): void {\n    if (this.websocket) {\n      this.websocket.close();\n      this.websocket = null;\n    }\n    this.cache.clear();\n    this.subscribers.clear();\n    this.pendingRequests.clear();\n  }\n}\n\nexport const realTimePlayerDataService = RealTimePlayerDataService.getInstance();\n"],"mappings":"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","ignoreList":[]}