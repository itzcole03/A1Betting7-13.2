aea94e91ccf75a5252cde3f670e81075
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CacheStatsPanel = void 0;
var _react = _interopRequireWildcard(require("react"));
var _useCacheStats = require("../cache/useCacheStats");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Cache Statistics Panel Component
 * 
 * Provides comprehensive cache observability UI with:
 * - Real-time cache metrics display with formatted values
 * - Hit ratio progress indicators and performance metrics
 * - Namespace breakdown with detailed statistics
 * - Latency percentiles visualization
 * - Error states with retry capabilities
 * - Graceful loading and empty states
 * 
 * Usage:
 * ```tsx
 * <CacheStatsPanel
 *   refreshInterval={30000}
 *   showNamespaceBreakdown={true}
 *   onError={(error) => console.error('Cache stats error:', error)}
 * />
 * ```
 */

// Component props interface

// Performance indicator component
const PerformanceIndicator = ({
  label,
  value,
  format,
  thresholds,
  higher_is_better = true
}) => {
  const getIndicatorColor = val => {
    if (higher_is_better) {
      if (val >= thresholds.good) return 'text-green-600 bg-green-100';
      if (val >= thresholds.warning) return 'text-yellow-600 bg-yellow-100';
      return 'text-red-600 bg-red-100';
    } else {
      if (val <= thresholds.good) return 'text-green-600 bg-green-100';
      if (val <= thresholds.warning) return 'text-yellow-600 bg-yellow-100';
      return 'text-red-600 bg-red-100';
    }
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "flex items-center justify-between p-3 bg-gray-50 rounded-lg",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
      className: "text-sm font-medium text-gray-700",
      children: label
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
      className: `px-2 py-1 rounded-full text-xs font-semibold ${getIndicatorColor(value)}`,
      children: format(value)
    })]
  });
};

// Hit ratio progress bar component
const HitRatioBar = ({
  ratio,
  total_operations
}) => {
  const percentage = ratio * 100;
  const getColor = pct => {
    if (pct >= 90) return 'bg-green-500';
    if (pct >= 75) return 'bg-yellow-500';
    return 'bg-red-500';
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "space-y-2",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "flex justify-between items-center",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
        className: "text-sm font-medium text-gray-700",
        children: "Hit Ratio"
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
        className: "text-sm text-gray-500",
        children: [_useCacheStats.formatCacheStats.count(total_operations), " operations"]
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "w-full bg-gray-200 rounded-full h-3",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: `h-3 rounded-full transition-all duration-300 ${getColor(percentage)}`,
        style: {
          width: `${Math.min(percentage, 100)}%`
        }
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "text-right",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
        className: "text-lg font-bold text-gray-800",
        children: _useCacheStats.formatCacheStats.hitRatio(ratio)
      })
    })]
  });
};

// Namespace stats table component
const NamespaceBreakdown = ({
  stats
}) => {
  const [sortBy, setSortBy] = (0, _react.useState)('count');
  const [sortDesc, setSortDesc] = (0, _react.useState)(true);
  const sortedNamespaces = (0, _react.useMemo)(() => {
    // Guard against missing namespaced_counts
    if (!stats.namespaced_counts) {
      return [];
    }
    const namespaceEntries = Object.entries(stats.namespaced_counts).map(([namespace, count]) => ({
      namespace,
      count,
      percentage: stats.total_keys > 0 ? count / stats.total_keys * 100 : 0
    }));
    return namespaceEntries.sort((a, b) => {
      const factor = sortDesc ? -1 : 1;
      switch (sortBy) {
        case 'namespace':
          return factor * a.namespace.localeCompare(b.namespace);
        case 'count':
          return factor * (a.count - b.count);
        case 'percentage':
          return factor * (a.percentage - b.percentage);
        default:
          return 0;
      }
    });
  }, [stats.namespaced_counts, stats.total_keys, sortBy, sortDesc]);
  const handleSort = column => {
    if (sortBy === column) {
      setSortDesc(!sortDesc);
    } else {
      setSortBy(column);
      setSortDesc(true);
    }
  };
  if (sortedNamespaces.length === 0) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "text-center py-4 text-gray-500",
      children: "No namespace data available"
    });
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: "overflow-hidden border border-gray-200 rounded-lg",
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("table", {
      className: "min-w-full divide-y divide-gray-200",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("thead", {
        className: "bg-gray-50",
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("tr", {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("th", {
            className: "px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100",
            onClick: () => handleSort('namespace'),
            children: ["Namespace ", sortBy === 'namespace' && (sortDesc ? '↓' : '↑')]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("th", {
            className: "px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100",
            onClick: () => handleSort('count'),
            children: ["Keys ", sortBy === 'count' && (sortDesc ? '↓' : '↑')]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("th", {
            className: "px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100",
            onClick: () => handleSort('percentage'),
            children: ["% of Total ", sortBy === 'percentage' && (sortDesc ? '↓' : '↑')]
          })]
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("tbody", {
        className: "bg-white divide-y divide-gray-200",
        children: sortedNamespaces.map(({
          namespace,
          count,
          percentage
        }) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("tr", {
          className: "hover:bg-gray-50",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("td", {
            className: "px-4 py-3 whitespace-nowrap",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              className: "text-sm font-mono text-gray-900",
              children: namespace
            })
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("td", {
            className: "px-4 py-3 whitespace-nowrap text-right",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              className: "text-sm text-gray-900",
              children: _useCacheStats.formatCacheStats.count(count)
            })
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("td", {
            className: "px-4 py-3 whitespace-nowrap text-right",
            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
              className: "text-sm text-gray-500",
              children: [percentage.toFixed(1), "%"]
            })
          })]
        }, namespace))
      })]
    })
  });
};

// Latency percentiles component
const LatencyMetrics = ({
  stats
}) => {
  // Guard against missing latency_percentiles
  if (!stats.latency_percentiles) {
    return null;
  }
  const percentiles = [{
    label: 'P50 (Median)',
    value: stats.latency_percentiles.p50
  }, {
    label: 'P90',
    value: stats.latency_percentiles.p90
  }, {
    label: 'P95',
    value: stats.latency_percentiles.p95
  }, {
    label: 'P99',
    value: stats.latency_percentiles.p99
  }];
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: "grid grid-cols-2 md:grid-cols-4 gap-4",
    children: percentiles.map(({
      label,
      value
    }) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "text-center p-3 bg-gray-50 rounded-lg",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "text-xs text-gray-500 uppercase tracking-wide mb-1",
        children: label
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "text-lg font-bold text-gray-800",
        children: _useCacheStats.formatCacheStats.latency(value)
      })]
    }, label))
  });
};

// Health indicator component
const HealthIndicator = ({
  health,
  loading,
  error
}) => {
  if (loading) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "flex items-center space-x-2",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
        className: "text-sm text-gray-500",
        children: "Checking health..."
      })]
    });
  }
  if (error || !health) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "flex items-center space-x-2",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "h-3 w-3 bg-red-500 rounded-full"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
        className: "text-sm text-red-600",
        children: "Health check failed"
      })]
    });
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "flex items-center space-x-2",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: `h-3 w-3 rounded-full ${health.healthy ? 'bg-green-500' : 'bg-yellow-500'}`
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
      className: `text-sm ${health.healthy ? 'text-green-600' : 'text-yellow-600'}`,
      children: health.healthy ? 'Healthy' : 'Degraded'
    })]
  });
};

// Error state component
const ErrorState = ({
  error,
  onRetry,
  retryCount
}) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
  className: "text-center py-8 px-4 bg-red-50 border border-red-200 rounded-lg",
  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: "text-red-600 mb-4",
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("svg", {
      className: "mx-auto h-12 w-12",
      fill: "none",
      viewBox: "0 0 24 24",
      stroke: "currentColor",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
      })
    })
  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
    className: "text-lg font-medium text-red-800 mb-2",
    children: "Failed to load cache statistics"
  }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
    className: "text-sm text-red-600 mb-4",
    children: [error.message, retryCount > 0 && /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
      className: "block mt-1 text-xs",
      children: ["(", retryCount, " retry attempts made)"]
    })]
  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
    onClick: onRetry,
    className: "inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500",
    children: "Retry"
  })]
});

// Loading state component
const LoadingState = () => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
  className: "text-center py-8 px-4",
  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: "animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"
  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
    className: "text-gray-600",
    children: "Loading cache statistics..."
  })]
});

// Main component
const CacheStatsPanel = ({
  refreshInterval,
  showNamespaceBreakdown = true,
  showLatencyMetrics = true,
  showHealthIndicator = true,
  onError,
  onStatsUpdate,
  className = ''
}) => {
  // Use cache stats hook with configuration
  const {
    data: stats,
    loading,
    error,
    refetch,
    lastUpdated,
    retryCount
  } = (0, _useCacheStats.useCacheStats)({
    pollInterval: refreshInterval,
    onError: err => {
      onError?.(err);
    }
  });

  // Use cache health hook if enabled
  const healthResult = (0, _useCacheStats.useCacheHealth)();

  // Notify parent of stats updates
  _react.default.useEffect(() => {
    if (stats && onStatsUpdate) {
      onStatsUpdate(stats);
    }
  }, [stats, onStatsUpdate]);

  // Handle loading state
  if (loading && !stats) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: `bg-white shadow-lg rounded-lg p-6 ${className}`,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(LoadingState, {})
    });
  }

  // Handle error state
  if (error && !stats) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: `bg-white shadow-lg rounded-lg p-6 ${className}`,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ErrorState, {
        error: error,
        onRetry: refetch,
        retryCount: retryCount
      })
    });
  }

  // Handle empty state
  if (!stats) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: `bg-white shadow-lg rounded-lg p-6 ${className}`,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "text-center py-8 text-gray-500",
        children: "No cache statistics available"
      })
    });
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: `bg-white shadow-lg rounded-lg ${className}`,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "px-6 py-4 border-b border-gray-200",
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "flex items-center justify-between",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
          className: "text-lg font-semibold text-gray-800",
          children: "Cache Statistics"
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex items-center space-x-4",
          children: [showHealthIndicator && /*#__PURE__*/(0, _jsxRuntime.jsx)(HealthIndicator, {
            health: healthResult.data,
            loading: healthResult.loading,
            error: healthResult.error
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "text-xs text-gray-500",
            children: lastUpdated && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
              children: ["Last updated: ", lastUpdated.toLocaleTimeString(), loading && /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
                className: "ml-1 animate-pulse",
                children: "\u25CF"
              })]
            })
          })]
        })]
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "p-6 space-y-6",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "grid grid-cols-1 md:grid-cols-3 gap-4",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(PerformanceIndicator, {
          label: "Cache Hit Ratio",
          value: stats.hit_ratio,
          format: _useCacheStats.formatCacheStats.hitRatio,
          thresholds: {
            good: 0.9,
            warning: 0.75
          },
          higher_is_better: true
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(PerformanceIndicator, {
          label: "Average Latency",
          value: stats.average_get_latency_ms,
          format: _useCacheStats.formatCacheStats.latency,
          thresholds: {
            good: 5,
            warning: 20
          },
          higher_is_better: false
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(PerformanceIndicator, {
          label: "Total Keys",
          value: stats.total_keys,
          format: _useCacheStats.formatCacheStats.count,
          thresholds: {
            good: 1000,
            warning: 100
          },
          higher_is_better: true
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "bg-gray-50 p-4 rounded-lg",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(HitRatioBar, {
          ratio: stats.hit_ratio,
          total_operations: stats.total_operations
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "grid grid-cols-2 md:grid-cols-4 gap-4",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-center p-3 bg-gray-50 rounded-lg",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "text-xs text-gray-500 uppercase tracking-wide mb-1",
            children: "Rebuild Events"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "text-lg font-bold text-gray-800",
            children: _useCacheStats.formatCacheStats.count(stats.rebuild_events)
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-center p-3 bg-gray-50 rounded-lg",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "text-xs text-gray-500 uppercase tracking-wide mb-1",
            children: "Stampede Prevented"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "text-lg font-bold text-gray-800",
            children: _useCacheStats.formatCacheStats.count(stats.stampede_preventions)
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-center p-3 bg-gray-50 rounded-lg",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "text-xs text-gray-500 uppercase tracking-wide mb-1",
            children: "Active Locks"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "text-lg font-bold text-gray-800",
            children: stats.active_locks
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-center p-3 bg-gray-50 rounded-lg",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "text-xs text-gray-500 uppercase tracking-wide mb-1",
            children: "Uptime"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "text-lg font-bold text-gray-800",
            children: _useCacheStats.formatCacheStats.uptime(stats.uptime_seconds)
          })]
        })]
      }), showLatencyMetrics && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h4", {
          className: "text-sm font-semibold text-gray-700 mb-3",
          children: "Latency Percentiles"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(LatencyMetrics, {
          stats: stats
        })]
      }), showNamespaceBreakdown && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h4", {
          className: "text-sm font-semibold text-gray-700 mb-3",
          children: "Namespace Breakdown"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(NamespaceBreakdown, {
          stats: stats
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "pt-4 border-t border-gray-200",
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex justify-between items-center text-xs text-gray-500",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
            children: ["Cache Version: ", stats.cache_version]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
            children: ["Statistics from: ", new Date(stats.timestamp).toLocaleString()]
          })]
        })
      })]
    })]
  });
};

// Export default
exports.CacheStatsPanel = CacheStatsPanel;
var _default = exports.default = CacheStatsPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,