{"version":3,"names":["_WebSocketManager","require","_BackoffStrategy","_MockWebSocket","MockWebSocket","constructor","url","CONNECTING","WebSocket","OPEN","CLOSING","CLOSED","readyState","protocol","extensions","bufferedAmount","binaryType","onopen","onclose","onmessage","onerror","sentMessages","toString","instances","push","setTimeout","Event","send","data","Error","close","code","reason","event","wasClean","type","simulateMessage","JSON","stringify","simulateError","simulateClose","addEventListener","removeEventListener","dispatchEvent","reset","getLastInstance","length","originalWebSocket","global","beforeEach","jest","clearAllTimers","useFakeTimers","afterEach","useRealTimers","describe","it","manager","WebSocketManager","state","getState","expect","phase","toBe","client_id","toContain","stateChanges","onStateChange","connect","advanceTimersByTime","toEqual","mockWs","timestamp","Date","toISOString","server_time","accepted_version","features","request_id","heartbeat_interval_ms","last_hello_message","toBeTruthy","connection_features","disconnect","message","sent","toHaveLength","parse","stats","messages_sent","pingSent","ping","sentMessage","heartbeats_sent","heartbeats_received","messages","onMessage","msg","testMessage","payload","test","immediateStrategy","BackoffStrategy","createImmediateStrategy","backoffStrategy","testDelayBeforeAttemptMs","peek","peekNextDelay","quickFailStrategy","baseDelaysMs","maxAttempts","jitterRatio","is_fallback_mode","fallback_reason","strategy","current_attempt","next_retry_eta","errors","onError","error","context","recent_attempts","attempt","close_code","close_reason","classification","unsubscribe","not","toThrow","message_counts_by_type","alert","messages_received","current_uptime_ms","toBeGreaterThan","destroy"],"sources":["WebSocketManager.test.ts"],"sourcesContent":["/**\r\n * WebSocketManager Tests\r\n * \r\n * Tests for WebSocket connection management including:\r\n * - State machine transitions\r\n * - Connection lifecycle  \r\n * - Message handling\r\n * - Error classification\r\n * - Fallback behavior\r\n * - Event listeners\r\n * \r\n * Uses mock WebSocket implementation for controlled testing.\r\n */\r\n\r\nimport { WebSocketManager } from '../WebSocketManager';\r\nimport { BackoffStrategy } from '../BackoffStrategy';\r\nimport { WSConnectionPhase, WSMessage } from '../ConnectionState';\r\n\r\n// Mock WebSocket implementation\r\nclass MockWebSocket implements WebSocket {\r\n  static instances: MockWebSocket[] = [];\r\n  \r\n  readonly CONNECTING = WebSocket.CONNECTING;\r\n  readonly OPEN = WebSocket.OPEN;\r\n  readonly CLOSING = WebSocket.CLOSING;\r\n  readonly CLOSED = WebSocket.CLOSED;\r\n  \r\n  readyState: number = WebSocket.CONNECTING;\r\n  url: string;\r\n  protocol: string = '';\r\n  extensions: string = '';\r\n  bufferedAmount: number = 0;\r\n  binaryType: BinaryType = 'blob';\r\n  \r\n  onopen: ((this: WebSocket, ev: Event) => void) | null = null;\r\n  onclose: ((this: WebSocket, ev: CloseEvent) => void) | null = null;\r\n  onmessage: ((this: WebSocket, ev: MessageEvent) => void) | null = null;\r\n  onerror: ((this: WebSocket, ev: Event) => void) | null = null;\r\n  \r\n  sentMessages: string[] = [];\r\n  \r\n  constructor(url: string | URL) {\r\n    this.url = url.toString();\r\n    MockWebSocket.instances.push(this);\r\n    \r\n    // Simulate async connection\r\n    setTimeout(() => {\r\n      if (this.readyState === WebSocket.CONNECTING) {\r\n        this.readyState = WebSocket.OPEN;\r\n        this.onopen?.(new Event('open'));\r\n      }\r\n    }, 10);\r\n  }\r\n  \r\n  send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void {\r\n    if (this.readyState !== WebSocket.OPEN) {\r\n      throw new Error('WebSocket is not open');\r\n    }\r\n    this.sentMessages.push(data.toString());\r\n  }\r\n  \r\n  close(code?: number, reason?: string): void {\r\n    if (this.readyState === WebSocket.CLOSED) return;\r\n    \r\n    this.readyState = WebSocket.CLOSED;\r\n    \r\n    const event = {\r\n      code: code || 1000,\r\n      reason: reason || '',\r\n      wasClean: true,\r\n      type: 'close'\r\n    } as CloseEvent;\r\n    \r\n    this.onclose?.(event);\r\n  }\r\n  \r\n  // Test helper methods\r\n  simulateMessage(data: WSMessage): void {\r\n    if (this.readyState !== WebSocket.OPEN) return;\r\n    \r\n    const event = {\r\n      data: JSON.stringify(data),\r\n      type: 'message'\r\n    } as MessageEvent;\r\n    \r\n    this.onmessage?.(event);\r\n  }\r\n  \r\n  simulateError(): void {\r\n    const event = new Event('error');\r\n    this.onerror?.(event);\r\n  }\r\n  \r\n  simulateClose(code: number = 1006, reason: string = ''): void {\r\n    this.readyState = WebSocket.CLOSED;\r\n    \r\n    const event = {\r\n      code,\r\n      reason,\r\n      wasClean: code === 1000,\r\n      type: 'close'\r\n    } as CloseEvent;\r\n    \r\n    this.onclose?.(event);\r\n  }\r\n  \r\n  // Required methods for WebSocket interface\r\n  addEventListener(): void { /* mock */ }\r\n  removeEventListener(): void { /* mock */ }\r\n  dispatchEvent(): boolean { return true; }\r\n  \r\n  static reset(): void {\r\n    MockWebSocket.instances = [];\r\n  }\r\n  \r\n  static getLastInstance(): MockWebSocket | null {\r\n    return MockWebSocket.instances[MockWebSocket.instances.length - 1] || null;\r\n  }\r\n}\r\n\r\n// Mock global WebSocket\r\nconst originalWebSocket = global.WebSocket;\r\nbeforeEach(() => {\r\n  global.WebSocket = MockWebSocket as never;\r\n  MockWebSocket.reset();\r\n  jest.clearAllTimers();\r\n  jest.useFakeTimers();\r\n});\r\n\r\nafterEach(() => {\r\n  global.WebSocket = originalWebSocket;\r\n  jest.useRealTimers();\r\n});\r\n\r\ndescribe('WebSocketManager', () => {\r\n  describe('Connection lifecycle', () => {\r\n    it('starts in idle state', () => {\r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client');\r\n      const state = manager.getState();\r\n      \r\n      expect(state.phase).toBe('idle');\r\n      expect(state.client_id).toBe('test-client');\r\n      expect(state.url).toContain('ws://test:8000/ws/client');\r\n      expect(state.url).toContain('client_id=test-client');\r\n      expect(state.url).toContain('version=1');\r\n      expect(state.url).toContain('role=frontend');\r\n    });\r\n\r\n    it('transitions through connecting to open state', async () => {\r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client');\r\n      const stateChanges: WSConnectionPhase[] = [];\r\n      \r\n      manager.onStateChange((state) => {\r\n        stateChanges.push(state.phase);\r\n      });\r\n      \r\n      await manager.connect();\r\n      expect(manager.getState().phase).toBe('connecting');\r\n      \r\n      // Wait for mock connection to open\r\n      jest.advanceTimersByTime(20);\r\n      \r\n      expect(stateChanges).toEqual(['connecting', 'open']);\r\n      expect(manager.getState().phase).toBe('open');\r\n    });\r\n\r\n    it('handles hello message from server', async () => {\r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client');\r\n      \r\n      await manager.connect();\r\n      jest.advanceTimersByTime(20); // Open connection\r\n      \r\n      const mockWs = MockWebSocket.getLastInstance()!;\r\n      mockWs.simulateMessage({\r\n        type: 'hello',\r\n        timestamp: new Date().toISOString(),\r\n        server_time: '2025-08-15T10:00:00Z',\r\n        accepted_version: 1,\r\n        features: ['heartbeat', 'structured_messages'],\r\n        request_id: 'test-request',\r\n        client_id: 'test-client',\r\n        heartbeat_interval_ms: 25000\r\n      });\r\n      \r\n      const state = manager.getState();\r\n      expect(state.last_hello_message).toBeTruthy();\r\n      expect(state.connection_features).toEqual(['heartbeat', 'structured_messages']);\r\n    });\r\n\r\n    it('disconnects cleanly', async () => {\r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client');\r\n      \r\n      await manager.connect();\r\n      jest.advanceTimersByTime(20);\r\n      \r\n      expect(manager.getState().phase).toBe('open');\r\n      \r\n      manager.disconnect();\r\n      expect(manager.getState().phase).toBe('idle');\r\n    });\r\n  });\r\n\r\n  describe('Messaging', () => {\r\n    it('sends messages when connected', async () => {\r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client');\r\n      \r\n      await manager.connect();\r\n      jest.advanceTimersByTime(20);\r\n      \r\n      const message: WSMessage = {\r\n        type: 'test',\r\n        timestamp: new Date().toISOString(),\r\n        data: 'hello'\r\n      };\r\n      \r\n      const sent = manager.send(message);\r\n      expect(sent).toBe(true);\r\n      \r\n      const mockWs = MockWebSocket.getLastInstance()!;\r\n      expect(mockWs.sentMessages).toHaveLength(1);\r\n      expect(JSON.parse(mockWs.sentMessages[0])).toEqual(message);\r\n      \r\n      // Check stats updated\r\n      const state = manager.getState();\r\n      expect(state.stats.messages_sent).toBe(1);\r\n    });\r\n\r\n    it('fails to send when not connected', () => {\r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client');\r\n      \r\n      const message: WSMessage = {\r\n        type: 'test',\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      \r\n      const sent = manager.send(message);\r\n      expect(sent).toBe(false);\r\n    });\r\n\r\n    it('handles ping/pong messages', async () => {\r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client');\r\n      \r\n      await manager.connect();\r\n      jest.advanceTimersByTime(20);\r\n      \r\n      // Send ping\r\n      const pingSent = manager.ping();\r\n      expect(pingSent).toBe(true);\r\n      \r\n      const mockWs = MockWebSocket.getLastInstance()!;\r\n      const sentMessage = JSON.parse(mockWs.sentMessages[0]);\r\n      expect(sentMessage.type).toBe('ping');\r\n      \r\n      // Receive pong\r\n      mockWs.simulateMessage({\r\n        type: 'pong',\r\n        timestamp: new Date().toISOString(),\r\n        client_id: 'test-client'\r\n      });\r\n      \r\n      const state = manager.getState();\r\n      expect(state.stats.heartbeats_sent).toBe(1);\r\n      expect(state.stats.heartbeats_received).toBe(1);\r\n    });\r\n\r\n    it('forwards non-system messages to listeners', async () => {\r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client');\r\n      const messages: WSMessage[] = [];\r\n      \r\n      manager.onMessage((msg) => messages.push(msg));\r\n      \r\n      await manager.connect();\r\n      jest.advanceTimersByTime(20);\r\n      \r\n      const testMessage: WSMessage = {\r\n        type: 'custom_data',\r\n        timestamp: new Date().toISOString(),\r\n        payload: { test: 'data' }\r\n      };\r\n      \r\n      const mockWs = MockWebSocket.getLastInstance()!;\r\n      mockWs.simulateMessage(testMessage);\r\n      \r\n      expect(messages).toHaveLength(1);\r\n      expect(messages[0]).toEqual(testMessage);\r\n    });\r\n  });\r\n\r\n  describe('Reconnection and backoff', () => {\r\n    it('attempts reconnection on abnormal close', async () => {\r\n      const immediateStrategy = BackoffStrategy.createImmediateStrategy();\r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client', {\r\n        backoffStrategy: immediateStrategy,\r\n        testDelayBeforeAttemptMs: 20\r\n      });\r\n      \r\n      await manager.connect();\r\n      jest.advanceTimersByTime(20);\r\n      \r\n      expect(manager.getState().phase).toBe('open');\r\n      \r\n      // Simulate abnormal close\r\n      const mockWs = MockWebSocket.getLastInstance()!;\r\n      mockWs.simulateClose(1006, 'Connection lost');\r\n      \r\n      expect(manager.getState().phase).toBe('failed');\r\n      \r\n  // Advance timer to just after the scheduled reconnect timeout\r\n  const peek = immediateStrategy.peekNextDelay()!;\r\n  jest.advanceTimersByTime(peek + 5);\r\n\r\n  // Should be in reconnecting state before the testDelay before attempt\r\n  expect(manager.getState().phase).toBe('reconnecting');\r\n\r\n  // Let the testDelay elapse and the mock connection open (testDelay + mock open delay)\r\n  jest.advanceTimersByTime(20 + 10);\r\n\r\n  expect(manager.getState().phase).toBe('open');\r\n    });\r\n\r\n    it('enters fallback mode after max attempts', async () => {\r\n      const quickFailStrategy = new BackoffStrategy({\r\n        baseDelaysMs: [50],\r\n        maxAttempts: 2,\r\n        jitterRatio: 0\r\n      });\r\n      \r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client', {\r\n        backoffStrategy: quickFailStrategy,\r\n        testDelayBeforeAttemptMs: 20\r\n      });\r\n      \r\n      // Mock WebSocket to always fail\r\n      global.WebSocket = class extends MockWebSocket {\r\n        constructor(url: string | URL) {\r\n          super(url);\r\n          setTimeout(() => {\r\n            this.simulateClose(1006, 'Connection failed');\r\n          }, 5);\r\n        }\r\n      } as never;\r\n      \r\n      await manager.connect();\r\n      \r\n  // First attempt fails (mock closes at 5ms)\r\n  jest.advanceTimersByTime(10);\r\n  expect(manager.getState().phase).toBe('failed');\r\n\r\n  const peek = quickFailStrategy.peekNextDelay()!;\r\n\r\n  // Advance to first scheduled reconnect\r\n  jest.advanceTimersByTime(peek + 5);\r\n  expect(manager.getState().phase).toBe('reconnecting');\r\n\r\n  // Allow the reconnect attempt to run and fail (testDelay + mock close)\r\n  jest.advanceTimersByTime(20 + 5);\r\n  expect(manager.getState().phase).toBe('failed');\r\n\r\n  // Advance to second scheduled reconnect (which will consume the last allowed attempt)\r\n  jest.advanceTimersByTime(peek + 5);\r\n  expect(manager.getState().phase).toBe('reconnecting');\r\n\r\n  // Allow the final reconnect attempt to run and fail; after this the manager\r\n  // should transition to fallback because maxAttempts have been consumed\r\n  jest.advanceTimersByTime(20 + 5);\r\n\r\n  const state = manager.getState();\r\n  expect(state.phase).toBe('fallback');\r\n  expect(state.is_fallback_mode).toBe(true);\r\n  expect(state.fallback_reason).toContain('maximum attempts');\r\n    });\r\n\r\n    it('resets backoff strategy on successful connection', async () => {\r\n      const strategy = new BackoffStrategy({\r\n        baseDelaysMs: [100, 200],\r\n        maxAttempts: 5,\r\n        jitterRatio: 0\r\n      });\r\n      \r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client', {\r\n        backoffStrategy: strategy,\r\n        testDelayBeforeAttemptMs: 20\r\n      });\r\n      \r\n      // First connection fails\r\n      global.WebSocket = class extends MockWebSocket {\r\n        constructor(url: string | URL) {\r\n          super(url);\r\n          setTimeout(() => {\r\n            this.simulateClose(1006);\r\n          }, 5);\r\n        }\r\n      } as never;\r\n      \r\n      await manager.connect();\r\n      jest.advanceTimersByTime(10);\r\n      \r\n      // Now allow connections to succeed\r\n      global.WebSocket = MockWebSocket as never;\r\n      \r\n      jest.advanceTimersByTime(110); // Wait for backoff\r\n      jest.advanceTimersByTime(20);  // Connection succeeds\r\n      \r\n      expect(manager.getState().phase).toBe('open');\r\n      \r\n      // Disconnect and reconnect - should start from first delay again\r\n      manager.disconnect();\r\n      \r\n      // Mock a quick failure again\r\n      global.WebSocket = class extends MockWebSocket {\r\n        constructor(url: string | URL) {\r\n          super(url);\r\n          setTimeout(() => {\r\n            this.simulateClose(1006);\r\n          }, 5);\r\n        }\r\n      } as never;\r\n      \r\n      await manager.connect();\r\n      jest.advanceTimersByTime(10);\r\n      \r\n      // Should start with first delay (100ms), not second (200ms)\r\n      const state = manager.getState();\r\n      expect(state.current_attempt?.next_retry_eta).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  describe('Error handling', () => {\r\n    it('classifies connection errors correctly', async () => {\r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client');\r\n      const errors: Array<{ error: Error; context: string }> = [];\r\n      \r\n      manager.onError((error, context) => {\r\n        errors.push({ error, context });\r\n      });\r\n      \r\n      await manager.connect();\r\n      \r\n      const mockWs = MockWebSocket.getLastInstance()!;\r\n      mockWs.simulateError();\r\n      \r\n      expect(errors).toHaveLength(1);\r\n      expect(errors[0].context).toBe('websocket_error');\r\n    });\r\n\r\n    it('tracks recent connection attempts with classifications', async () => {\r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client');\r\n      \r\n      await manager.connect();\r\n      jest.advanceTimersByTime(20);\r\n      \r\n      const mockWs = MockWebSocket.getLastInstance()!;\r\n      mockWs.simulateClose(4400, 'Unsupported version');\r\n      \r\n      const state = manager.getState();\r\n      expect(state.recent_attempts).toHaveLength(1);\r\n      \r\n      const attempt = state.recent_attempts[0];\r\n      expect(attempt.close_code).toBe(4400);\r\n      expect(attempt.close_reason).toBe('Unsupported version');\r\n      expect(attempt.classification).toBe('handshake');\r\n    });\r\n  });\r\n\r\n  describe('Event listeners', () => {\r\n    it('notifies state change listeners', async () => {\r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client');\r\n      const stateChanges: WSConnectionPhase[] = [];\r\n      \r\n      const unsubscribe = manager.onStateChange((state) => {\r\n        stateChanges.push(state.phase);\r\n      });\r\n      \r\n      await manager.connect();\r\n      jest.advanceTimersByTime(20);\r\n      \r\n      expect(stateChanges).toEqual(['connecting', 'open']);\r\n      \r\n      unsubscribe();\r\n      \r\n      manager.disconnect();\r\n      \r\n      // Should not receive more updates after unsubscribe\r\n      expect(stateChanges).toEqual(['connecting', 'open']);\r\n    });\r\n\r\n    it('handles listener errors gracefully', async () => {\r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client');\r\n      \r\n      // Add a listener that throws an error\r\n      manager.onStateChange(() => {\r\n        throw new Error('Listener error');\r\n      });\r\n      \r\n      // Should not throw when state changes\r\n      expect(() => {\r\n        manager.connect();\r\n      }).not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('Statistics tracking', () => {\r\n    it('tracks message counts by type', async () => {\r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client');\r\n      \r\n      await manager.connect();\r\n      jest.advanceTimersByTime(20);\r\n      \r\n      const mockWs = MockWebSocket.getLastInstance()!;\r\n      \r\n      // Send different message types\r\n      mockWs.simulateMessage({ type: 'data', timestamp: new Date().toISOString() });\r\n      mockWs.simulateMessage({ type: 'data', timestamp: new Date().toISOString() });\r\n      mockWs.simulateMessage({ type: 'alert', timestamp: new Date().toISOString() });\r\n      \r\n      const state = manager.getState();\r\n      expect(state.stats.message_counts_by_type.data).toBe(2);\r\n      expect(state.stats.message_counts_by_type.alert).toBe(1);\r\n      expect(state.stats.messages_received).toBe(3);\r\n    });\r\n\r\n    it('tracks connection uptime', async () => {\r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client');\r\n      \r\n      await manager.connect();\r\n      jest.advanceTimersByTime(20);\r\n      \r\n      // Simulate some time passing\r\n      jest.advanceTimersByTime(5000);\r\n      \r\n      const state = manager.getState();\r\n      expect(state.stats.current_uptime_ms).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('Resource cleanup', () => {\r\n    it('cleans up resources on destroy', async () => {\r\n      const manager = new WebSocketManager('ws://test:8000', 'test-client');\r\n      \r\n      await manager.connect();\r\n      jest.advanceTimersByTime(20);\r\n      \r\n      expect(manager.getState().phase).toBe('open');\r\n      \r\n      manager.destroy();\r\n      \r\n      expect(manager.getState().phase).toBe('idle');\r\n      expect(MockWebSocket.getLastInstance()?.readyState).toBe(WebSocket.CLOSED);\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}