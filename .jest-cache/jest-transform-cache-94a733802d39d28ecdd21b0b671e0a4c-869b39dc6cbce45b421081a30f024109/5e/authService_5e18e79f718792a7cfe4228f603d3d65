e8c1fa21ce1d7ea5c7f58a2275bf805e
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._authService = void 0;
// frontend/src/services/AuthService.ts
const axios_1 = __importDefault(require("axios"));
const _API_URL = 'http://localhost:8000/api/auth';
class AuthService {
    constructor() {
        Object.defineProperty(this, "user", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "requiresPasswordChangeFlag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        this.loadFromLocalStorage();
    }
    loadFromLocalStorage() {
        const _token = localStorage.getItem('token');
        const _user = localStorage.getItem('user');
        if (_token && _user) {
            this.token = _token;
            this.user = JSON.parse(_user);
            axios_1.default.defaults.headers.common['Authorization'] = `Bearer ${this.token}`;
        }
    }
    saveToLocalStorage(token, user) {
        this.token = token;
        this.user = user;
        localStorage.setItem('token', token);
        localStorage.setItem('user', JSON.stringify(user));
        axios_1.default.defaults.headers.common['Authorization'] = `Bearer ${token}`;
    }
    clearLocalStorage() {
        this.token = null;
        this.user = null;
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        delete axios_1.default.defaults.headers.common['Authorization'];
    }
    isAuthenticated() {
        return !!this.token;
    }
    getUser() {
        return this.user;
    }
    isAdmin() {
        return this.user?.role === 'admin';
    }
    requiresPasswordChange() {
        return this.requiresPasswordChangeFlag;
    }
    async login(email, password) {
        try {
            const _response = await axios_1.default.post(`${_API_URL}/login`, {
                email,
                password,
            }, {
                headers: {
                    'Content-Type': 'application/json',
                },
            });
            if (_response.data.access_token) {
                const _user = { id: '1', email, role: 'admin' };
                this.saveToLocalStorage(_response.data.access_token, _user);
                return { success: true, user: _user, requiresPasswordChange: false };
            }
            return { success: false, message: 'Invalid credentials' };
        }
        catch (error) {
            console.error('Login API error:', error);
            return {
                success: false,
                message: error.message || 'Login failed due to API error',
            };
        }
    }
    async logout() {
        this.clearLocalStorage();
        return Promise.resolve();
    }
    async changePassword(data) {
        try {
            console.log(`Changing password for user ${data.userId}`);
            this.requiresPasswordChangeFlag = false;
            return { success: true };
        }
        catch (error) {
            console.error('Change password API error:', error);
            return {
                success: false,
                message: error.message || 'Password change failed due to API error',
            };
        }
    }
}
exports._authService = new AuthService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,