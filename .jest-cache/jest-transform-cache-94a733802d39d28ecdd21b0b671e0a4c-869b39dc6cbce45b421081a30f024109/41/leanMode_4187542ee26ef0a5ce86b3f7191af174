8b3952c548d6e9f961d184c38bc85386
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLeanModeStatus = getLeanModeStatus;
exports.isLeanMode = isLeanMode;
exports.logLeanModeStatus = logLeanModeStatus;
exports.setLeanMode = setLeanMode;
/**
 * Lean Mode Utility
 * Determines if the application should run in lean mode with reduced monitoring and features
 * 
 * Lean mode is activated by:
 * - Environment variable: VITE_DEV_LEAN_MODE=true
 * - URL parameter: ?lean=true
 * - localStorage: devLeanMode=true
 */

/**
 * Check if lean mode is enabled
 * @returns true if lean mode is active, false otherwise
 */
function isLeanMode() {
  // Check environment variable first
  if (import.meta.env.VITE_DEV_LEAN_MODE === "true") {
    return true;
  }

  // Check URL parameters
  try {
    const qs = new URLSearchParams(window.location.search);
    if (qs.has("lean") && qs.get("lean") !== "false") {
      return true;
    }
  } catch (error) {
    console.warn("[LeanMode] Failed to parse URL parameters:", error);
  }

  // Check localStorage
  try {
    if (localStorage.getItem("devLeanMode") === "true") {
      return true;
    }
  } catch (error) {
    console.warn("[LeanMode] Failed to access localStorage:", error);
  }
  return false;
}

/**
 * Set lean mode in localStorage
 * @param enabled whether to enable lean mode
 */
function setLeanMode(enabled) {
  try {
    if (enabled) {
      localStorage.setItem("devLeanMode", "true");
    } else {
      localStorage.removeItem("devLeanMode");
    }
  } catch (error) {
    console.warn("[LeanMode] Failed to update localStorage:", error);
  }
}

/**
 * Get lean mode status with details about how it was activated
 * @returns object with lean mode status and activation source
 */
function getLeanModeStatus() {
  // Check environment variable
  if (import.meta.env.VITE_DEV_LEAN_MODE === "true") {
    return {
      enabled: true,
      source: "environment"
    };
  }

  // Check URL parameters
  try {
    const qs = new URLSearchParams(window.location.search);
    if (qs.has("lean") && qs.get("lean") !== "false") {
      return {
        enabled: true,
        source: "url"
      };
    }
  } catch (error) {
    console.warn("[LeanMode] Failed to parse URL parameters:", error);
  }

  // Check localStorage
  try {
    if (localStorage.getItem("devLeanMode") === "true") {
      return {
        enabled: true,
        source: "localStorage"
      };
    }
  } catch (error) {
    console.warn("[LeanMode] Failed to access localStorage:", error);
  }
  return {
    enabled: false,
    source: "none"
  };
}

/**
 * Log lean mode status to console
 */
function logLeanModeStatus() {
  const status = getLeanModeStatus();
  if (status.enabled) {
    console.info(`[LeanMode] ACTIVE - source: ${status.source} - monitoring and features suppressed`);
  } else {
    console.info("[LeanMode] DISABLED - full monitoring and features active");
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0xlYW5Nb2RlIiwiaW1wb3J0IiwibWV0YSIsImVudiIsIlZJVEVfREVWX0xFQU5fTU9ERSIsInFzIiwiVVJMU2VhcmNoUGFyYW1zIiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJoYXMiLCJnZXQiLCJlcnJvciIsImNvbnNvbGUiLCJ3YXJuIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInNldExlYW5Nb2RlIiwiZW5hYmxlZCIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiZ2V0TGVhbk1vZGVTdGF0dXMiLCJzb3VyY2UiLCJsb2dMZWFuTW9kZVN0YXR1cyIsInN0YXR1cyIsImluZm8iXSwic291cmNlcyI6WyJsZWFuTW9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogTGVhbiBNb2RlIFV0aWxpdHlcclxuICogRGV0ZXJtaW5lcyBpZiB0aGUgYXBwbGljYXRpb24gc2hvdWxkIHJ1biBpbiBsZWFuIG1vZGUgd2l0aCByZWR1Y2VkIG1vbml0b3JpbmcgYW5kIGZlYXR1cmVzXHJcbiAqIFxyXG4gKiBMZWFuIG1vZGUgaXMgYWN0aXZhdGVkIGJ5OlxyXG4gKiAtIEVudmlyb25tZW50IHZhcmlhYmxlOiBWSVRFX0RFVl9MRUFOX01PREU9dHJ1ZVxyXG4gKiAtIFVSTCBwYXJhbWV0ZXI6ID9sZWFuPXRydWVcclxuICogLSBsb2NhbFN0b3JhZ2U6IGRldkxlYW5Nb2RlPXRydWVcclxuICovXHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgbGVhbiBtb2RlIGlzIGVuYWJsZWRcclxuICogQHJldHVybnMgdHJ1ZSBpZiBsZWFuIG1vZGUgaXMgYWN0aXZlLCBmYWxzZSBvdGhlcndpc2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0xlYW5Nb2RlKCk6IGJvb2xlYW4ge1xyXG4gIC8vIENoZWNrIGVudmlyb25tZW50IHZhcmlhYmxlIGZpcnN0XHJcbiAgaWYgKGltcG9ydC5tZXRhLmVudi5WSVRFX0RFVl9MRUFOX01PREUgPT09IFwidHJ1ZVwiKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgXHJcbiAgLy8gQ2hlY2sgVVJMIHBhcmFtZXRlcnNcclxuICB0cnkge1xyXG4gICAgY29uc3QgcXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG4gICAgaWYgKHFzLmhhcyhcImxlYW5cIikgJiYgcXMuZ2V0KFwibGVhblwiKSAhPT0gXCJmYWxzZVwiKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLndhcm4oXCJbTGVhbk1vZGVdIEZhaWxlZCB0byBwYXJzZSBVUkwgcGFyYW1ldGVyczpcIiwgZXJyb3IpO1xyXG4gIH1cclxuICBcclxuICAvLyBDaGVjayBsb2NhbFN0b3JhZ2VcclxuICB0cnkge1xyXG4gICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiZGV2TGVhbk1vZGVcIikgPT09IFwidHJ1ZVwiKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLndhcm4oXCJbTGVhbk1vZGVdIEZhaWxlZCB0byBhY2Nlc3MgbG9jYWxTdG9yYWdlOlwiLCBlcnJvcik7XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCBsZWFuIG1vZGUgaW4gbG9jYWxTdG9yYWdlXHJcbiAqIEBwYXJhbSBlbmFibGVkIHdoZXRoZXIgdG8gZW5hYmxlIGxlYW4gbW9kZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldExlYW5Nb2RlKGVuYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICB0cnkge1xyXG4gICAgaWYgKGVuYWJsZWQpIHtcclxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJkZXZMZWFuTW9kZVwiLCBcInRydWVcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImRldkxlYW5Nb2RlXCIpO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLndhcm4oXCJbTGVhbk1vZGVdIEZhaWxlZCB0byB1cGRhdGUgbG9jYWxTdG9yYWdlOlwiLCBlcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogR2V0IGxlYW4gbW9kZSBzdGF0dXMgd2l0aCBkZXRhaWxzIGFib3V0IGhvdyBpdCB3YXMgYWN0aXZhdGVkXHJcbiAqIEByZXR1cm5zIG9iamVjdCB3aXRoIGxlYW4gbW9kZSBzdGF0dXMgYW5kIGFjdGl2YXRpb24gc291cmNlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGVhbk1vZGVTdGF0dXMoKToge1xyXG4gIGVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgc291cmNlOiBcImVudmlyb25tZW50XCIgfCBcInVybFwiIHwgXCJsb2NhbFN0b3JhZ2VcIiB8IFwibm9uZVwiO1xyXG59IHtcclxuICAvLyBDaGVjayBlbnZpcm9ubWVudCB2YXJpYWJsZVxyXG4gIGlmIChpbXBvcnQubWV0YS5lbnYuVklURV9ERVZfTEVBTl9NT0RFID09PSBcInRydWVcIikge1xyXG4gICAgcmV0dXJuIHsgZW5hYmxlZDogdHJ1ZSwgc291cmNlOiBcImVudmlyb25tZW50XCIgfTtcclxuICB9XHJcbiAgXHJcbiAgLy8gQ2hlY2sgVVJMIHBhcmFtZXRlcnNcclxuICB0cnkge1xyXG4gICAgY29uc3QgcXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG4gICAgaWYgKHFzLmhhcyhcImxlYW5cIikgJiYgcXMuZ2V0KFwibGVhblwiKSAhPT0gXCJmYWxzZVwiKSB7XHJcbiAgICAgIHJldHVybiB7IGVuYWJsZWQ6IHRydWUsIHNvdXJjZTogXCJ1cmxcIiB9O1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLndhcm4oXCJbTGVhbk1vZGVdIEZhaWxlZCB0byBwYXJzZSBVUkwgcGFyYW1ldGVyczpcIiwgZXJyb3IpO1xyXG4gIH1cclxuICBcclxuICAvLyBDaGVjayBsb2NhbFN0b3JhZ2VcclxuICB0cnkge1xyXG4gICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiZGV2TGVhbk1vZGVcIikgPT09IFwidHJ1ZVwiKSB7XHJcbiAgICAgIHJldHVybiB7IGVuYWJsZWQ6IHRydWUsIHNvdXJjZTogXCJsb2NhbFN0b3JhZ2VcIiB9O1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLndhcm4oXCJbTGVhbk1vZGVdIEZhaWxlZCB0byBhY2Nlc3MgbG9jYWxTdG9yYWdlOlwiLCBlcnJvcik7XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiB7IGVuYWJsZWQ6IGZhbHNlLCBzb3VyY2U6IFwibm9uZVwiIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMb2cgbGVhbiBtb2RlIHN0YXR1cyB0byBjb25zb2xlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9nTGVhbk1vZGVTdGF0dXMoKTogdm9pZCB7XHJcbiAgY29uc3Qgc3RhdHVzID0gZ2V0TGVhbk1vZGVTdGF0dXMoKTtcclxuICBpZiAoc3RhdHVzLmVuYWJsZWQpIHtcclxuICAgIGNvbnNvbGUuaW5mbyhgW0xlYW5Nb2RlXSBBQ1RJVkUgLSBzb3VyY2U6ICR7c3RhdHVzLnNvdXJjZX0gLSBtb25pdG9yaW5nIGFuZCBmZWF0dXJlcyBzdXBwcmVzc2VkYCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnNvbGUuaW5mbyhcIltMZWFuTW9kZV0gRElTQUJMRUQgLSBmdWxsIG1vbml0b3JpbmcgYW5kIGZlYXR1cmVzIGFjdGl2ZVwiKTtcclxuICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQSxVQUFVQSxDQUFBLEVBQVk7RUFDcEM7RUFDQSxJQUFJQyxNQUFNLENBQUNDLElBQUksQ0FBQ0MsR0FBRyxDQUFDQyxrQkFBa0IsS0FBSyxNQUFNLEVBQUU7SUFDakQsT0FBTyxJQUFJO0VBQ2I7O0VBRUE7RUFDQSxJQUFJO0lBQ0YsTUFBTUMsRUFBRSxHQUFHLElBQUlDLGVBQWUsQ0FBQ0MsTUFBTSxDQUFDQyxRQUFRLENBQUNDLE1BQU0sQ0FBQztJQUN0RCxJQUFJSixFQUFFLENBQUNLLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSUwsRUFBRSxDQUFDTSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssT0FBTyxFQUFFO01BQ2hELE9BQU8sSUFBSTtJQUNiO0VBQ0YsQ0FBQyxDQUFDLE9BQU9DLEtBQUssRUFBRTtJQUNkQyxPQUFPLENBQUNDLElBQUksQ0FBQyw0Q0FBNEMsRUFBRUYsS0FBSyxDQUFDO0VBQ25FOztFQUVBO0VBQ0EsSUFBSTtJQUNGLElBQUlHLFlBQVksQ0FBQ0MsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLE1BQU0sRUFBRTtNQUNsRCxPQUFPLElBQUk7SUFDYjtFQUNGLENBQUMsQ0FBQyxPQUFPSixLQUFLLEVBQUU7SUFDZEMsT0FBTyxDQUFDQyxJQUFJLENBQUMsMkNBQTJDLEVBQUVGLEtBQUssQ0FBQztFQUNsRTtFQUVBLE9BQU8sS0FBSztBQUNkOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0ssV0FBV0EsQ0FBQ0MsT0FBZ0IsRUFBUTtFQUNsRCxJQUFJO0lBQ0YsSUFBSUEsT0FBTyxFQUFFO01BQ1hILFlBQVksQ0FBQ0ksT0FBTyxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUM7SUFDN0MsQ0FBQyxNQUFNO01BQ0xKLFlBQVksQ0FBQ0ssVUFBVSxDQUFDLGFBQWEsQ0FBQztJQUN4QztFQUNGLENBQUMsQ0FBQyxPQUFPUixLQUFLLEVBQUU7SUFDZEMsT0FBTyxDQUFDQyxJQUFJLENBQUMsMkNBQTJDLEVBQUVGLEtBQUssQ0FBQztFQUNsRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU1MsaUJBQWlCQSxDQUFBLEVBRy9CO0VBQ0E7RUFDQSxJQUFJcEIsTUFBTSxDQUFDQyxJQUFJLENBQUNDLEdBQUcsQ0FBQ0Msa0JBQWtCLEtBQUssTUFBTSxFQUFFO0lBQ2pELE9BQU87TUFBRWMsT0FBTyxFQUFFLElBQUk7TUFBRUksTUFBTSxFQUFFO0lBQWMsQ0FBQztFQUNqRDs7RUFFQTtFQUNBLElBQUk7SUFDRixNQUFNakIsRUFBRSxHQUFHLElBQUlDLGVBQWUsQ0FBQ0MsTUFBTSxDQUFDQyxRQUFRLENBQUNDLE1BQU0sQ0FBQztJQUN0RCxJQUFJSixFQUFFLENBQUNLLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSUwsRUFBRSxDQUFDTSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssT0FBTyxFQUFFO01BQ2hELE9BQU87UUFBRU8sT0FBTyxFQUFFLElBQUk7UUFBRUksTUFBTSxFQUFFO01BQU0sQ0FBQztJQUN6QztFQUNGLENBQUMsQ0FBQyxPQUFPVixLQUFLLEVBQUU7SUFDZEMsT0FBTyxDQUFDQyxJQUFJLENBQUMsNENBQTRDLEVBQUVGLEtBQUssQ0FBQztFQUNuRTs7RUFFQTtFQUNBLElBQUk7SUFDRixJQUFJRyxZQUFZLENBQUNDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxNQUFNLEVBQUU7TUFDbEQsT0FBTztRQUFFRSxPQUFPLEVBQUUsSUFBSTtRQUFFSSxNQUFNLEVBQUU7TUFBZSxDQUFDO0lBQ2xEO0VBQ0YsQ0FBQyxDQUFDLE9BQU9WLEtBQUssRUFBRTtJQUNkQyxPQUFPLENBQUNDLElBQUksQ0FBQywyQ0FBMkMsRUFBRUYsS0FBSyxDQUFDO0VBQ2xFO0VBRUEsT0FBTztJQUFFTSxPQUFPLEVBQUUsS0FBSztJQUFFSSxNQUFNLEVBQUU7RUFBTyxDQUFDO0FBQzNDOztBQUVBO0FBQ0E7QUFDQTtBQUNPLFNBQVNDLGlCQUFpQkEsQ0FBQSxFQUFTO0VBQ3hDLE1BQU1DLE1BQU0sR0FBR0gsaUJBQWlCLENBQUMsQ0FBQztFQUNsQyxJQUFJRyxNQUFNLENBQUNOLE9BQU8sRUFBRTtJQUNsQkwsT0FBTyxDQUFDWSxJQUFJLENBQUMsK0JBQStCRCxNQUFNLENBQUNGLE1BQU0sdUNBQXVDLENBQUM7RUFDbkcsQ0FBQyxNQUFNO0lBQ0xULE9BQU8sQ0FBQ1ksSUFBSSxDQUFDLDJEQUEyRCxDQUFDO0VBQzNFO0FBQ0YiLCJpZ25vcmVMaXN0IjpbXX0=