e015c31440f8f685e3f49e75cbedb0af
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const framer_motion_1 = require("framer-motion");
const react_1 = __importStar(require("react"));
const react_router_dom_1 = require("react-router-dom");
const AuthContext_1 = require("../../contexts/AuthContext");
const getBackendUrl_1 = require("../../utils/getBackendUrl");
const Register_1 = __importDefault(require("../Register"));
const AccessRequestForm_1 = __importDefault(require("./AccessRequestForm"));
const LoginForm_1 = __importDefault(require("./LoginForm"));
const PasswordChangeForm_1 = __importDefault(require("./PasswordChangeForm"));
// Import the simple user-friendly app as the default dashboard
const UserFriendlyApp = react_1.default.lazy(() => Promise.resolve().then(() => __importStar(require('../user-friendly/UserFriendlyApp'))).then(module => ({ default: module.default })));
const _AuthPage = () => {
    const navigate = (0, react_router_dom_1.useNavigate)();
    const [authMode, setAuthMode] = (0, react_1.useState)('login');
    const { login, changePassword, loading, error, user, isAuthenticated, requiresPasswordChange } = (0, AuthContext_1.useAuth)();
    // Forgot password state
    // Removed unused forgotPasswordLoading state
    // Forgot password modal state
    const [showForgotModal, setShowForgotModal] = (0, react_1.useState)(false);
    const [forgotEmail, setForgotEmail] = (0, react_1.useState)('');
    const [forgotStatus, setForgotStatus] = (0, react_1.useState)('idle');
    const [forgotMessage, setForgotMessage] = (0, react_1.useState)('');
    // Redirect to password change if required
    (0, react_1.useEffect)(() => {
        if (isAuthenticated && requiresPasswordChange) {
            setAuthMode('password-change');
        }
    }, [isAuthenticated, requiresPasswordChange]);
    const _handleLogin = async (email, password) => {
        await login(email, password);
    };
    // Forgot password handler
    const _handleForgotPassword = async (email) => {
        // Removed unused setForgotPasswordLoading
        try {
            // Call backend endpoint
            await fetch((0, getBackendUrl_1.getBackendUrl)() + '/api/auth/forgot-password', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email }),
            });
            // Success and error handling can be implemented here if needed
        }
        catch (error) {
            // Network error handling can be implemented here if needed
        }
        finally {
            // Removed unused setForgotPasswordLoading
        }
    };
    const _submitForgotPassword = async (e) => {
        e.preventDefault();
        setForgotStatus('loading');
        setForgotMessage('');
        try {
            // TODO: Replace with real API call
            await new Promise(resolve => setTimeout(resolve, 1200));
            setForgotStatus('success');
            setForgotMessage('If this email is registered, a password reset link has been sent.');
        }
        catch (err) {
            setForgotStatus('error');
            setForgotMessage('Failed to send reset email. Please try again later.');
        }
    };
    const _closeForgotModal = () => {
        setShowForgotModal(false);
        setForgotStatus('idle');
        setForgotMessage('');
    };
    const _handleRequestAccess = () => {
        setAuthMode('request-access');
    };
    // Removed unused _handleBackToLogin
    const _handleAccessRequestSubmitted = () => {
        // Optionally switch back to login after successful request
        setTimeout(() => {
            setAuthMode('login');
        }, 3000);
    };
    const _handlePasswordChange = async (currentPassword, newPassword) => {
        await changePassword({
            userId: user?.id || '',
            oldPassword: currentPassword,
            newPassword,
        });
    };
    // Registration success handler
    // Removed unused _handleRegisterSuccess
    // Redirect to dashboard after login
    (0, react_1.useEffect)(() => {
        if (isAuthenticated && !requiresPasswordChange) {
            navigate('/', { replace: true });
        }
    }, [isAuthenticated, requiresPasswordChange, navigate]);
    // If authenticated and not in password change mode, render the simple UI dashboard
    if (isAuthenticated && !requiresPasswordChange) {
        return ((0, jsx_runtime_1.jsx)(react_1.default.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { className: 'text-white p-8', children: "Loading dashboard..." }), children: (0, jsx_runtime_1.jsx)(UserFriendlyApp, {}) }));
    }
    // Otherwise, render the auth UI as before
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex items-center justify-center p-4', children: [(0, jsx_runtime_1.jsx)("div", { className: 'absolute inset-0 bg-quantum-grid opacity-5' }), (0, jsx_runtime_1.jsxs)("div", { className: 'absolute inset-0 overflow-hidden', children: [(0, jsx_runtime_1.jsx)("div", { className: 'absolute -top-10 -left-10 w-80 h-80 bg-cyber-primary/10 rounded-full blur-3xl animate-pulse' }), (0, jsx_runtime_1.jsx)("div", { className: 'absolute -bottom-10 -right-10 w-80 h-80 bg-cyber-accent/10 rounded-full blur-3xl animate-pulse delay-1000' }), (0, jsx_runtime_1.jsx)("div", { className: 'absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-cyber-purple/5 rounded-full blur-3xl animate-pulse delay-2000' })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'relative z-10 w-full max-w-md', children: [(0, jsx_runtime_1.jsxs)(framer_motion_1.motion.div, { initial: { opacity: 0, y: -20 }, animate: { opacity: 1, y: 0 }, className: 'text-center mb-8', children: [(0, jsx_runtime_1.jsx)("div", { className: 'inline-flex items-center justify-center w-20 h-20 bg-gradient-to-r from-yellow-400 to-purple-500 rounded-2xl mb-6 shadow-lg shadow-yellow-400/25', children: (0, jsx_runtime_1.jsx)("span", { className: 'text-2xl font-bold text-slate-900', children: "PropOllama" }) }), (0, jsx_runtime_1.jsx)("h1", { className: 'text-3xl font-bold text-yellow-400 mb-2', children: "PropOllama" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-400', children: "AI Prop Research & Analytics" })] }), authMode !== 'password-change' && ((0, jsx_runtime_1.jsx)(framer_motion_1.motion.div, { initial: { opacity: 0 }, animate: { opacity: 1 }, transition: { delay: 0.2 }, className: 'flex justify-center mb-8', children: (0, jsx_runtime_1.jsxs)("div", { className: 'bg-slate-800/50 backdrop-blur-lg border border-slate-700/50 rounded-lg p-1 flex', children: [(0, jsx_runtime_1.jsx)("button", { onClick: () => setAuthMode('login'), className: `px-4 py-2 rounded-md text-sm font-medium transition-all ${authMode === 'login'
                                        ? 'bg-cyber-primary text-slate-900'
                                        : 'text-gray-400 hover:text-white'}`, children: "Sign In" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => setAuthMode('signup'), className: `px-4 py-2 rounded-md text-sm font-medium transition-all ${authMode === 'signup'
                                        ? 'bg-cyber-primary text-slate-900'
                                        : 'text-gray-400 hover:text-white'}`, children: "Sign Up" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => setAuthMode('request-access'), className: `px-4 py-2 rounded-md text-sm font-medium transition-all ${authMode === 'request-access'
                                        ? 'bg-cyber-primary text-slate-900'
                                        : 'text-gray-400 hover:text-white'}`, children: "Request Access" })] }) })), (0, jsx_runtime_1.jsxs)(framer_motion_1.AnimatePresence, { mode: 'wait', children: [authMode === 'login' && ((0, jsx_runtime_1.jsx)(framer_motion_1.motion.div, { initial: { opacity: 0, x: -20 }, animate: { opacity: 1, x: 0 }, exit: { opacity: 0, x: 20 }, transition: { duration: 0.3 }, children: (0, jsx_runtime_1.jsx)(LoginForm_1.default, { onLogin: _handleLogin, onForgotPassword: _handleForgotPassword, onRequestAccess: _handleRequestAccess, loading: loading, error: error ?? undefined }) }, 'login')), authMode === 'signup' && ((0, jsx_runtime_1.jsx)(framer_motion_1.motion.div, { initial: { opacity: 0, x: 20 }, animate: { opacity: 1, x: 0 }, exit: { opacity: 0, x: -20 }, transition: { duration: 0.3 }, children: (0, jsx_runtime_1.jsx)(Register_1.default, {}) }, 'signup')), authMode === 'request-access' && ((0, jsx_runtime_1.jsx)(framer_motion_1.motion.div, { initial: { opacity: 0, x: 20 }, animate: { opacity: 1, x: 0 }, exit: { opacity: 0, x: -20 }, transition: { duration: 0.3 }, children: (0, jsx_runtime_1.jsx)(AccessRequestForm_1.default, { onRequestSubmitted: _handleAccessRequestSubmitted }) }, 'request-access')), authMode === 'password-change' && ((0, jsx_runtime_1.jsx)(framer_motion_1.motion.div, { initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, exit: { opacity: 0, y: -20 }, transition: { duration: 0.3 }, children: (0, jsx_runtime_1.jsx)(PasswordChangeForm_1.default, { onPasswordChange: _handlePasswordChange, loading: loading, error: error ?? undefined, userEmail: user?.email }) }, 'password-change'))] }), (0, jsx_runtime_1.jsx)(framer_motion_1.AnimatePresence, { children: showForgotModal && ((0, jsx_runtime_1.jsx)(framer_motion_1.motion.div, { initial: { opacity: 0, scale: 0.95 }, animate: { opacity: 1, scale: 1 }, exit: { opacity: 0, scale: 0.95 }, className: 'fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm', children: (0, jsx_runtime_1.jsxs)("div", { className: 'bg-slate-900 rounded-xl shadow-lg p-8 w-full max-w-sm relative', children: [(0, jsx_runtime_1.jsx)("button", { className: 'absolute top-2 right-2 text-gray-400 hover:text-white text-xl', onClick: _closeForgotModal, "aria-label": 'Close', children: "\u00D7" }), (0, jsx_runtime_1.jsx)("h2", { className: 'text-xl font-bold text-white mb-2', children: "Forgot Password" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-400 mb-4', children: "Enter your email address and we'll send you a password reset link." }), (0, jsx_runtime_1.jsxs)("form", { onSubmit: _submitForgotPassword, className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)("input", { type: 'email', className: 'w-full px-4 py-2 rounded-md bg-slate-800 text-white border border-slate-700 focus:outline-none focus:ring-2 focus:ring-cyber-primary', placeholder: 'Email address', value: forgotEmail, onChange: e => setForgotEmail(e.target.value), required: true }), (0, jsx_runtime_1.jsx)("button", { type: 'submit', className: 'w-full py-2 rounded-md bg-cyber-primary text-slate-900 font-semibold hover:bg-cyber-accent transition-colors disabled:opacity-60', disabled: forgotStatus === 'loading', children: forgotStatus === 'loading' ? 'Sending...' : 'Send Reset Link' })] }), forgotMessage && ((0, jsx_runtime_1.jsx)("div", { className: `mt-4 text-sm ${forgotStatus === 'success' ? 'text-green-400' : 'text-red-400'}`, children: forgotMessage }))] }) })) }), (0, jsx_runtime_1.jsxs)(framer_motion_1.motion.div, { initial: { opacity: 0 }, animate: { opacity: 1 }, transition: { delay: 0.4 }, className: 'mt-8 text-center', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-500', children: "\u00A9 2025 PropOllama. All rights reserved." }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-center space-x-4 mt-2', children: [(0, jsx_runtime_1.jsx)("button", { type: 'button', className: 'text-xs text-gray-500 hover:text-gray-400 transition-colors bg-transparent border-none p-0 cursor-pointer', children: "Terms" }), (0, jsx_runtime_1.jsx)("button", { type: 'button', className: 'text-xs text-gray-500 hover:text-gray-400 transition-colors bg-transparent border-none p-0 cursor-pointer', children: "Privacy" }), (0, jsx_runtime_1.jsx)("button", { type: 'button', className: 'text-xs text-gray-500 hover:text-gray-400 transition-colors bg-transparent border-none p-0 cursor-pointer', children: "Support" })] })] })] })] }));
};
exports.default = _AuthPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,