d4d40d173624fd94dc49240648a822d3
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * Predictions Display Component Tests - Phase 4.2 Frontend Tests
 * Test suite for prediction display functionality
 */

// Mock prediction data with proper typing

const mockPredictions = [{
  id: 'pred-1',
  sport: 'MLB',
  player_name: 'Mike Trout',
  prop_type: 'runs_scored',
  line: 1.5,
  prediction: 0.75,
  confidence_score: 0.82,
  recommendation: 'over',
  over_odds: 1.85,
  under_odds: 1.95,
  expected_value: 0.125,
  shap_explanation: {
    feature_importance: {
      'batting_avg': 0.3,
      'recent_form': 0.25,
      'pitcher_matchup': 0.2,
      'weather': 0.1,
      'venue': 0.15
    }
  },
  risk_score: 0.3,
  team: 'LAA',
  opponent: 'HOU',
  game_time: '2024-01-15T19:00:00Z'
}, {
  id: 'pred-2',
  sport: 'MLB',
  player_name: 'Aaron Judge',
  prop_type: 'hits',
  line: 1.5,
  prediction: 0.42,
  confidence_score: 0.68,
  recommendation: 'under',
  over_odds: 2.10,
  under_odds: 1.75,
  expected_value: -0.05,
  shap_explanation: {
    feature_importance: {
      'batting_avg': 0.4,
      'pitcher_era': 0.35,
      'ballpark_factor': 0.15,
      'recent_injuries': 0.1
    }
  },
  risk_score: 0.45,
  team: 'NYY',
  opponent: 'BOS',
  game_time: '2024-01-15T20:00:00Z'
}];

// Mock PredictionsDisplay Component

const MockPredictionsDisplay = ({
  predictions,
  loading = false,
  error = null,
  onRefresh,
  onPredictionSelect,
  showAdvancedMetrics = false,
  sortBy = 'confidence_score',
  sortOrder = 'desc'
}) => {
  const handlePredictionClick = prediction => {
    if (onPredictionSelect) {
      onPredictionSelect(prediction);
    }
  };
  if (loading) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      "data-testid": "predictions-loading",
      children: "Loading predictions..."
    });
  }
  if (error) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      "data-testid": "predictions-error",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
        children: ["Error: ", error]
      }), onRefresh && /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
        "data-testid": "retry-button",
        onClick: onRefresh,
        children: "Retry"
      })]
    });
  }
  if (predictions.length === 0) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      "data-testid": "predictions-empty",
      children: ["No predictions available", onRefresh && /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
        "data-testid": "refresh-button",
        onClick: onRefresh,
        children: "Refresh"
      })]
    });
  }

  // Sort predictions
  const sortedPredictions = [...predictions].sort((a, b) => {
    const aVal = a[sortBy];
    const bVal = b[sortBy];
    return sortOrder === 'desc' ? bVal - aVal : aVal - bVal;
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    "data-testid": "predictions-display",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      "data-testid": "predictions-header",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("h2", {
        children: ["Predictions (", predictions.length, ")"]
      }), onRefresh && /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
        "data-testid": "refresh-button",
        onClick: onRefresh,
        children: "Refresh"
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      "data-testid": "predictions-list",
      children: sortedPredictions.map(prediction => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        "data-testid": `prediction-${prediction.id}`,
        className: "prediction-card",
        onClick: () => handlePredictionClick(prediction),
        style: {
          cursor: onPredictionSelect ? 'pointer' : 'default'
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          "data-testid": "prediction-basic-info",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
            children: prediction.player_name
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            children: [prediction.prop_type, " - Line: ", prediction.line]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            children: ["Recommendation:", /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              "data-testid": `recommendation-${prediction.id}`,
              children: prediction.recommendation.toUpperCase()
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            children: ["Confidence:", /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
              "data-testid": `confidence-${prediction.id}`,
              children: [(prediction.confidence_score * 100).toFixed(1), "%"]
            })]
          })]
        }), showAdvancedMetrics && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          "data-testid": "prediction-advanced-metrics",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            children: ["Expected Value:", /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
              "data-testid": `ev-${prediction.id}`,
              children: [prediction.expected_value > 0 ? '+' : '', prediction.expected_value.toFixed(3)]
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            children: ["Risk Score:", /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
              "data-testid": `risk-${prediction.id}`,
              children: [(prediction.risk_score * 100).toFixed(1), "%"]
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            children: ["Prediction:", /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
              "data-testid": `prediction-value-${prediction.id}`,
              children: [(prediction.prediction * 100).toFixed(1), "%"]
            })]
          })]
        }), showAdvancedMetrics && prediction.shap_explanation && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          "data-testid": "shap-explanation",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h4", {
            children: "Feature Importance"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            "data-testid": `shap-features-${prediction.id}`,
            children: Object.entries(prediction.shap_explanation.feature_importance).sort(([, a], [, b]) => b - a).map(([feature, importance]) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              "data-testid": `shap-${feature}`,
              children: [feature, ": ", (importance * 100).toFixed(1), "%"]
            }, feature))
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          "data-testid": "prediction-odds",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
            children: ["Over: ", prediction.over_odds]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
            children: ["Under: ", prediction.under_odds]
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          "data-testid": "prediction-metadata",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            children: [prediction.team, " vs ", prediction.opponent]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
            children: ["Game: ", new Date(prediction.game_time).toLocaleString()]
          })]
        })]
      }, prediction.id))
    })]
  });
};
describe('PredictionsDisplay Component', () => {
  let user;
  const mockOnRefresh = jest.fn();
  const mockOnPredictionSelect = jest.fn();
  beforeEach(() => {
    user = _userEvent.default.setup();
    mockOnRefresh.mockClear();
    mockOnPredictionSelect.mockClear();
  });
  it('renders predictions correctly', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: mockPredictions
    }));
    expect(_react2.screen.getByTestId('predictions-display')).toBeInTheDocument();
    expect(_react2.screen.getByText('Predictions (2)')).toBeInTheDocument();

    // Check first prediction
    expect(_react2.screen.getByTestId('prediction-pred-1')).toBeInTheDocument();
    expect(_react2.screen.getByText('Mike Trout')).toBeInTheDocument();
    expect(_react2.screen.getByText('runs_scored - Line: 1.5')).toBeInTheDocument();
    expect(_react2.screen.getByTestId('recommendation-pred-1')).toHaveTextContent('OVER');
    expect(_react2.screen.getByTestId('confidence-pred-1')).toHaveTextContent('82.0%');
  });
  it('shows loading state correctly', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: [],
      loading: true
    }));
    expect(_react2.screen.getByTestId('predictions-loading')).toBeInTheDocument();
    expect(_react2.screen.getByText('Loading predictions...')).toBeInTheDocument();
  });
  it('shows error state correctly', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: [],
      error: "Failed to load predictions",
      onRefresh: mockOnRefresh
    }));
    expect(_react2.screen.getByTestId('predictions-error')).toBeInTheDocument();
    expect(_react2.screen.getByText('Error: Failed to load predictions')).toBeInTheDocument();
    expect(_react2.screen.getByTestId('retry-button')).toBeInTheDocument();
  });
  it('shows empty state correctly', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: [],
      onRefresh: mockOnRefresh
    }));
    expect(_react2.screen.getByTestId('predictions-empty')).toBeInTheDocument();
    expect(_react2.screen.getByText('No predictions available')).toBeInTheDocument();
    expect(_react2.screen.getByTestId('refresh-button')).toBeInTheDocument();
  });
  it('calls onRefresh when refresh button is clicked', async () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: mockPredictions,
      onRefresh: mockOnRefresh
    }));
    const refreshButton = _react2.screen.getByTestId('refresh-button');
    await user.click(refreshButton);
    expect(mockOnRefresh).toHaveBeenCalledTimes(1);
  });
  it('calls onRefresh when retry button is clicked in error state', async () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: [],
      error: "Network error",
      onRefresh: mockOnRefresh
    }));
    const retryButton = _react2.screen.getByTestId('retry-button');
    await user.click(retryButton);
    expect(mockOnRefresh).toHaveBeenCalledTimes(1);
  });
  it('calls onPredictionSelect when prediction is clicked', async () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: mockPredictions,
      onPredictionSelect: mockOnPredictionSelect
    }));
    const predictionCard = _react2.screen.getByTestId('prediction-pred-1');
    await user.click(predictionCard);
    expect(mockOnPredictionSelect).toHaveBeenCalledWith(mockPredictions[0]);
  });
  it('shows advanced metrics when enabled', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: mockPredictions,
      showAdvancedMetrics: true
    }));

    // Check advanced metrics for first prediction specifically
    const firstPrediction = _react2.screen.getByTestId('prediction-pred-1');
    const advancedSection = (0, _react2.within)(firstPrediction).getByTestId('prediction-advanced-metrics');
    expect(advancedSection).toBeInTheDocument();
    expect((0, _react2.within)(firstPrediction).getByTestId('ev-pred-1')).toHaveTextContent('+0.125');
    expect((0, _react2.within)(firstPrediction).getByTestId('risk-pred-1')).toHaveTextContent('30.0%');
    expect((0, _react2.within)(firstPrediction).getByTestId('prediction-value-pred-1')).toHaveTextContent('75.0%');
  });
  it('shows SHAP explanations when advanced metrics enabled', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: mockPredictions,
      showAdvancedMetrics: true
    }));

    // Find a specific prediction's SHAP section
    const firstPrediction = _react2.screen.getByTestId('prediction-pred-1');
    const shapSection = (0, _react2.within)(firstPrediction).getByTestId('shap-explanation');
    expect(shapSection).toBeInTheDocument();
    expect((0, _react2.within)(shapSection).getByText('Feature Importance')).toBeInTheDocument();
    expect((0, _react2.within)(firstPrediction).getByTestId('shap-features-pred-1')).toBeInTheDocument();

    // Check feature importance is displayed and sorted within the first prediction
    const shapFeatures = (0, _react2.within)(_react2.screen.getByTestId('shap-features-pred-1'));
    expect(shapFeatures.getByTestId('shap-batting_avg')).toHaveTextContent('batting_avg: 30.0%');
  });
  it('hides advanced metrics when disabled', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: mockPredictions,
      showAdvancedMetrics: false
    }));
    expect(_react2.screen.queryByTestId('prediction-advanced-metrics')).not.toBeInTheDocument();
    expect(_react2.screen.queryByTestId('shap-explanation')).not.toBeInTheDocument();
  });
  it('displays odds correctly', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: mockPredictions
    }));

    // Check odds for first prediction specifically
    const firstPrediction = _react2.screen.getByTestId('prediction-pred-1');
    const oddsSection = (0, _react2.within)(firstPrediction).getByTestId('prediction-odds');
    expect((0, _react2.within)(oddsSection).getByText('Over: 1.85')).toBeInTheDocument();
    expect((0, _react2.within)(oddsSection).getByText('Under: 1.95')).toBeInTheDocument();
  });
  it('displays metadata correctly', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: mockPredictions
    }));

    // Check metadata for first prediction specifically  
    const firstPrediction = _react2.screen.getByTestId('prediction-pred-1');
    const metadataSection = (0, _react2.within)(firstPrediction).getByTestId('prediction-metadata');
    expect((0, _react2.within)(metadataSection).getByText('LAA vs HOU')).toBeInTheDocument();
    // Game time should be formatted as locale string
    expect((0, _react2.within)(metadataSection).getByText(/Game:/)).toBeInTheDocument();
  });
  it('sorts predictions by confidence score descending by default', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: mockPredictions
    }));
    const predictionCards = _react2.screen.getAllByText(/Confidence:/);
    // First should be higher confidence (82.0%)
    expect(predictionCards[0]).toHaveTextContent('Confidence:');
    const firstConfidence = _react2.screen.getByTestId('confidence-pred-1');
    expect(firstConfidence).toHaveTextContent('82.0%');
  });
  it('sorts predictions by specified field and order', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: mockPredictions,
      sortBy: "expected_value",
      sortOrder: "asc"
    }));

    // Should be sorted by expected value ascending
    const predictionsList = _react2.screen.getByTestId('predictions-list');
    const predictionCards = (0, _react2.within)(predictionsList).getAllByTestId(/^prediction-pred-/);

    // First card should be the one with lower expected value
    expect(predictionCards[0]).toHaveAttribute('data-testid', 'prediction-pred-2'); // EV: -0.05
    expect(predictionCards[1]).toHaveAttribute('data-testid', 'prediction-pred-1'); // EV: 0.125
  });
  it('formats confidence scores correctly', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: mockPredictions
    }));
    expect(_react2.screen.getByTestId('confidence-pred-1')).toHaveTextContent('82.0%');
    expect(_react2.screen.getByTestId('confidence-pred-2')).toHaveTextContent('68.0%');
  });
  it('formats expected values correctly', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: mockPredictions,
      showAdvancedMetrics: true
    }));
    expect(_react2.screen.getByTestId('ev-pred-1')).toHaveTextContent('+0.125');
    expect(_react2.screen.getByTestId('ev-pred-2')).toHaveTextContent('-0.050');
  });
  it('handles predictions with missing SHAP data gracefully', () => {
    const predictionsWithoutShap = [{
      ...mockPredictions[0],
      shap_explanation: undefined
    }];
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: predictionsWithoutShap,
      showAdvancedMetrics: true
    }));
    expect(_react2.screen.getByTestId('prediction-advanced-metrics')).toBeInTheDocument();
    expect(_react2.screen.queryByTestId('shap-explanation')).not.toBeInTheDocument();
  });
  it('handles empty SHAP feature importance gracefully', () => {
    const predictionsWithEmptyShap = [{
      ...mockPredictions[0],
      shap_explanation: {
        feature_importance: {}
      }
    }];
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: predictionsWithEmptyShap,
      showAdvancedMetrics: true
    }));
    expect(_react2.screen.getByTestId('shap-explanation')).toBeInTheDocument();
    const shapFeatures = _react2.screen.getByTestId('shap-features-pred-1');
    expect(shapFeatures).toBeEmptyDOMElement();
  });
  it('applies pointer cursor when onPredictionSelect is provided', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: mockPredictions,
      onPredictionSelect: mockOnPredictionSelect
    }));
    const predictionCard = _react2.screen.getByTestId('prediction-pred-1');
    expect(predictionCard).toHaveStyle('cursor: pointer');
  });
  it('does not apply pointer cursor when onPredictionSelect is not provided', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(MockPredictionsDisplay, {
      predictions: mockPredictions
    }));
    const predictionCard = _react2.screen.getByTestId('prediction-pred-1');
    expect(predictionCard).toHaveStyle('cursor: default');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,