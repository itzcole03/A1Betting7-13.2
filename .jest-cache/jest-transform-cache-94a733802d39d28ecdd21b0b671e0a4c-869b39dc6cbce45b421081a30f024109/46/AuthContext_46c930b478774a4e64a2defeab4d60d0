bf60cbe3856ee77cbce2f39dece6a3fe
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAuth = exports._AuthProvider = exports._AuthContext = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * Authentication context and provider for managing user authentication state and actions.
 *
 * Provides login, logout, registration, and password management for the app.
 *
 * @module contexts/AuthContext
 */
const react_1 = __importStar(require("react"));
const authService_1 = require("../services/authService");
const logger_1 = require("../utils/logger");
// Stub register method for test compatibility
const register = async (_email, _password) => {
    // In a real implementation, this would call an API endpoint
    return Promise.resolve();
};
/**
 * React context for authentication state and actions.
 */
exports._AuthContext = (0, react_1.createContext)(undefined);
/**
 * AuthProvider component.
 * Wrap your app with this provider to enable authentication state and actions.
 * @param {object} props - React children.
 * @returns {JSX.Element} The provider component.
 */
/**
 * useAuthState
 * Custom hook to encapsulate authentication state logic for modularity and testability.
 */
function useAuthState() {
    const [user, setUser] = (0, react_1.useState)(null);
    const [loading, setLoading] = (0, react_1.useState)(false);
    const [error, setError] = (0, react_1.useState)(null);
    const [isAdmin, setIsAdmin] = (0, react_1.useState)(false);
    const [isAuthenticated, setIsAuthenticated] = (0, react_1.useState)(false);
    const [requiresPasswordChange, setRequiresPasswordChange] = (0, react_1.useState)(false);
    (0, react_1.useEffect)(() => {
        // Skip auth restoration if bootstrap already handled it
        const globalState = window;
        if (typeof window !== 'undefined' && globalState.__A1_AUTH_RESTORED) {
            return;
        }
        const _initializeAuth = () => {
            if (authService_1._authService.isAuthenticated()) {
                const _storedUser = authService_1._authService.getUser();
                if (_storedUser) {
                    setUser(_storedUser);
                    setIsAdmin(authService_1._authService.isAdmin());
                    setIsAuthenticated(true);
                    setRequiresPasswordChange(authService_1._authService.requiresPasswordChange());
                    // Mark as restored to prevent duplicate logs
                    if (typeof window !== 'undefined') {
                        globalState.__A1_AUTH_RESTORED = true;
                    }
                    // Structured logging for audit (only if not already restored by bootstrap)
                    logger_1.logger.info('🔐 Authentication restored', {
                        email: _storedUser.email,
                        role: _storedUser.role,
                        userId: _storedUser.id,
                    }, 'Auth');
                }
            }
        };
        setTimeout(_initializeAuth, 100);
    }, []);
    const login = async (email, password) => {
        setLoading(true);
        setError(null);
        try {
            const _response = await authService_1._authService.login(email, password);
            if (_response.success && _response.user) {
                setUser(_response.user);
                setIsAdmin(_response.user.role === 'admin' || _response.user.permissions?.includes('admin') || false);
                setIsAuthenticated(true);
                setRequiresPasswordChange(_response.requiresPasswordChange || false);
            }
            else {
                throw new Error(_response.message || 'Login failed');
            }
        }
        catch (e) {
            setError(e.message || 'Login failed');
            throw e;
        }
        finally {
            setLoading(false);
        }
    };
    const logout = async () => {
        setLoading(true);
        setError(null);
        try {
            await authService_1._authService.logout();
            setUser(null);
            setIsAdmin(false);
            setIsAuthenticated(false);
            setRequiresPasswordChange(false);
        }
        catch (e) {
            setError(e.message || 'Logout failed');
        }
        finally {
            setLoading(false);
        }
    };
    const changePassword = async (data) => {
        setLoading(true);
        setError(null);
        try {
            const _response = await authService_1._authService.changePassword(data);
            if (_response.success) {
                const _updatedUser = authService_1._authService.getUser();
                if (_updatedUser) {
                    setUser(_updatedUser);
                    setRequiresPasswordChange(false);
                }
            }
            else {
                throw new Error(_response.message || 'Password change failed');
            }
        }
        catch (e) {
            setError(e.message || 'Password change failed');
            throw e;
        }
        finally {
            setLoading(false);
        }
    };
    const clearError = () => {
        setError(null);
    };
    return {
        user,
        loading,
        error,
        isAdmin,
        isAuthenticated,
        requiresPasswordChange,
        login,
        logout,
        changePassword,
        clearError,
        register,
    };
}
/**
 * AuthProvider component.
 * Wrap your app with this provider to enable authentication state and actions.
 * Uses useAuthState for modularity and testability.
 * @param {object} props - React children.
 * @returns {JSX.Element} The provider component.
 */
const AuthProvider = ({ children }) => {
    const contextValue = useAuthState();
    return (0, jsx_runtime_1.jsx)(exports._AuthContext.Provider, { value: contextValue, children: children });
};
exports._AuthProvider = AuthProvider;
/**
 * useAuth
 * Access the authentication context in any component.
 */
const useAuth = () => {
    const ctx = (0, react_1.useContext)(exports._AuthContext);
    if (!ctx)
        throw new Error('useAuth must be used within AuthProvider');
    return ctx;
};
exports.useAuth = useAuth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,