{"file":"C:\\Users\\bcmad\\Downloads\\A1Betting7-13.2\\frontend\\src\\contexts\\AuthContext.tsx","mappings":"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","names":[],"sources":["C:\\Users\\bcmad\\Downloads\\A1Betting7-13.2\\frontend\\src\\contexts\\AuthContext.tsx"],"sourcesContent":["/**\r\n * Authentication context and provider for managing user authentication state and actions.\r\n *\r\n * Provides login, logout, registration, and password management for the app.\r\n *\r\n * @module contexts/AuthContext\r\n */\r\nimport React, { createContext, ReactNode, useContext, useEffect, useState } from 'react';\r\nimport {\r\n  AuthResponse,\r\n  _authService as authService,\r\n  PasswordChangeRequest,\r\n  User,\r\n} from '../services/authService';\r\nimport { logger } from '../utils/logger';\r\n\r\n/**\r\n * AuthContextType\r\n * Provides authentication state and actions for the app.\r\n */\r\nexport interface AuthContextType {\r\n  user: User | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  isAdmin: boolean;\r\n  isAuthenticated: boolean;\r\n  requiresPasswordChange: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n  changePassword: (data: PasswordChangeRequest) => Promise<void>;\r\n  clearError: () => void;\r\n  register: (email: string, password: string) => Promise<void>;\r\n}\r\n// Stub register method for test compatibility\r\nconst register = async (_email: string, _password: string) => {\r\n  // In a real implementation, this would call an API endpoint\r\n  return Promise.resolve();\r\n};\r\n\r\n/**\r\n * React context for authentication state and actions.\r\n */\r\nexport const _AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\n/**\r\n * AuthProvider component.\r\n * Wrap your app with this provider to enable authentication state and actions.\r\n * @param {object} props - React children.\r\n * @returns {JSX.Element} The provider component.\r\n */\r\n/**\r\n * useAuthState\r\n * Custom hook to encapsulate authentication state logic for modularity and testability.\r\n */\r\nfunction useAuthState(): AuthContextType {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [requiresPasswordChange, setRequiresPasswordChange] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Skip auth restoration if bootstrap already handled it\r\n    const globalState = window as typeof window & { __A1_AUTH_RESTORED?: boolean };\r\n    if (typeof window !== 'undefined' && globalState.__A1_AUTH_RESTORED) {\r\n      return;\r\n    }\r\n\r\n    const _initializeAuth = () => {\r\n      if (authService.isAuthenticated()) {\r\n        const _storedUser = authService.getUser();\r\n        if (_storedUser) {\r\n          setUser(_storedUser);\r\n          setIsAdmin(authService.isAdmin());\r\n          setIsAuthenticated(true);\r\n          setRequiresPasswordChange(authService.requiresPasswordChange());\r\n          \r\n          // Mark as restored to prevent duplicate logs\r\n          if (typeof window !== 'undefined') {\r\n            globalState.__A1_AUTH_RESTORED = true;\r\n          }\r\n          \r\n          // Structured logging for audit (only if not already restored by bootstrap)\r\n          logger.info(\r\n            '🔐 Authentication restored',\r\n            {\r\n              email: _storedUser.email,\r\n              role: _storedUser.role,\r\n              userId: _storedUser.id,\r\n            },\r\n            'Auth'\r\n          );\r\n        }\r\n      }\r\n    };\r\n    setTimeout(_initializeAuth, 100);\r\n  }, []);\r\n\r\n  const login = async (email: string, password: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const _response: AuthResponse = await authService.login(email, password);\r\n      if (_response.success && _response.user) {\r\n        setUser(_response.user);\r\n        setIsAdmin(\r\n          _response.user.role === 'admin' || _response.user.permissions?.includes('admin') || false\r\n        );\r\n        setIsAuthenticated(true);\r\n        setRequiresPasswordChange(_response.requiresPasswordChange || false);\r\n      } else {\r\n        throw new Error(_response.message || 'Login failed');\r\n      }\r\n    } catch (e: unknown) {\r\n      setError((e as Error).message || 'Login failed');\r\n      throw e;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      await authService.logout();\r\n      setUser(null);\r\n      setIsAdmin(false);\r\n      setIsAuthenticated(false);\r\n      setRequiresPasswordChange(false);\r\n    } catch (e: unknown) {\r\n      setError((e as Error).message || 'Logout failed');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const changePassword = async (data: PasswordChangeRequest) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const _response: AuthResponse = await authService.changePassword(data);\r\n      if (_response.success) {\r\n        const _updatedUser = authService.getUser();\r\n        if (_updatedUser) {\r\n          setUser(_updatedUser);\r\n          setRequiresPasswordChange(false);\r\n        }\r\n      } else {\r\n        throw new Error(_response.message || 'Password change failed');\r\n      }\r\n    } catch (e: unknown) {\r\n      setError((e as Error).message || 'Password change failed');\r\n      throw e;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const clearError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  return {\r\n    user,\r\n    loading,\r\n    error,\r\n    isAdmin,\r\n    isAuthenticated,\r\n    requiresPasswordChange,\r\n    login,\r\n    logout,\r\n    changePassword,\r\n    clearError,\r\n    register,\r\n  };\r\n}\r\n\r\n/**\r\n * AuthProvider component.\r\n * Wrap your app with this provider to enable authentication state and actions.\r\n * Uses useAuthState for modularity and testability.\r\n * @param {object} props - React children.\r\n * @returns {JSX.Element} The provider component.\r\n */\r\nconst AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const contextValue = useAuthState();\r\n  return <_AuthContext.Provider value={contextValue}>{children}</_AuthContext.Provider>;\r\n};\r\n\r\nexport const _AuthProvider = AuthProvider;\r\n\r\n/**\r\n * useAuth\r\n * Access the authentication context in any component.\r\n */\r\nexport const useAuth = () => {\r\n  const ctx = useContext(_AuthContext);\r\n  if (!ctx) throw new Error('useAuth must be used within AuthProvider');\r\n  return ctx;\r\n};\r\n"],"version":3}