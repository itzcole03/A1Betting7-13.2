da3adce82ff6f33cc9bc657a0f929bf4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PlayerDashboardContainer = void 0;
var _lucideReact = require("lucide-react");
var _react = _interopRequireWildcard(require("react"));
var _useOptimizedPlayerData = require("../../hooks/useOptimizedPlayerData");
var _usePlayerDashboardState = require("../../hooks/usePlayerDashboardState");
var _AIExplanationPanel = _interopRequireDefault(require("../ai/AIExplanationPanel"));
var _PlayerOverview = _interopRequireDefault(require("./PlayerOverview"));
var _PlayerPropHistory = _interopRequireDefault(require("./PlayerPropHistory"));
var _PlayerStatTrends = _interopRequireDefault(require("./PlayerStatTrends"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); } /**
 * PlayerDashboardContainer - Main orchestration component for Player Dashboard
 * Follows PropFinder modular architecture with comprehensive state management
 */ // ...existing code...
// Inside the main PlayerDashboardContainer function/component:
// Add this block inside the function, not inside the interface
// Example:
// if (loading) {
//   return (
//     <section aria-busy="true" className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900" role="region">
//       ...
//     </section>
//   );
// }
const PlayerDashboardContainer = ({
  playerId: initialPlayerId,
  sport = 'MLB',
  onPlayerChange,
  onClose,
  useOptimizedData = false,
  enableRealTimeUpdates = true
}) => {
  const [playerId, setPlayerId] = (0, _react.useState)(initialPlayerId || '');
  const [searchQuery, setSearchQuery] = (0, _react.useState)('');
  const [searchResults, setSearchResults] = (0, _react.useState)([]);

  // Use search results from appropriate source
  // Declare optimizedSearch only once at the top-level scope
  const optimizedSearch = (0, _useOptimizedPlayerData.useOptimizedPlayerSearch)();
  const displaySearchResults = useOptimizedData ? optimizedSearch.searchResults : searchResults;
  const [showSearch, setShowSearch] = (0, _react.useState)(false);
  const [activeTab, setActiveTab] = (0, _react.useState)('overview');

  // Choose between optimized and standard data loading
  const standardData = (0, _usePlayerDashboardState.usePlayerDashboardState)({
    playerId,
    sport
  });
  const optimizedData = (0, _useOptimizedPlayerData.useOptimizedPlayerData)({
    playerId,
    sport,
    enableRealTimeUpdates: useOptimizedData && enableRealTimeUpdates,
    fallbackToCache: true
  });
  // Removed duplicate declaration of optimizedSearch

  // Create stable reference for optimized search to prevent infinite loops
  const optimizedSearchRef = (0, _react.useRef)(optimizedSearch);
  optimizedSearchRef.current = optimizedSearch;

  // Select the appropriate data source
  const {
    player,
    loading,
    error,
    reload
  } = useOptimizedData ? {
    player: optimizedData.player,
    loading: optimizedData.loading,
    error: optimizedData.error,
    reload: optimizedData.refresh
  } : standardData;

  // Search players (keep as before, but use registry)
  const handlePlayerSelect = (0, _react.useCallback)(selectedPlayerId => {
    setPlayerId(selectedPlayerId);
    setShowSearch(false);
    setSearchQuery('');
    setSearchResults([]);
    if (optimizedSearchRef.current && optimizedSearchRef.current.clearSearch) {
      optimizedSearchRef.current.clearSearch();
    }
    onPlayerChange?.(selectedPlayerId);
  }, [onPlayerChange]);

  // Search players using optimized or standard service
  _react.default.useEffect(() => {
    let active = true;
    const doSearch = async () => {
      if (searchQuery.length < 2) {
        setSearchResults([]);
        return;
      }
      if (useOptimizedData) {
        // Use optimized search
        try {
          await optimizedSearchRef.current.searchPlayers(searchQuery, sport, 10);
          // Don't set search results here, let the hook manage it
        } catch {
          if (active) setSearchResults([]);
        }
      } else {
        // Use standard search (existing implementation)
        const {
          default: registry
        } = await Promise.resolve().then(() => _interopRequireWildcard(require('../../services/MasterServiceRegistry')));
        // Narrow the runtime service to the expected interface so TypeScript
        // recognizes `searchPlayers` and related methods.
        const playerDataService = registry.getService ? registry.getService('playerData') : undefined;
        // Update type for playerDataService to include searchPlayers
        if (playerDataService && typeof playerDataService.searchPlayers === 'function') {
          const results = await playerDataService.searchPlayers(searchQuery, sport, 10);
          try {
            const results = await playerDataService.searchPlayers(searchQuery, sport, 10);
            if (active) setSearchResults(results);
          } catch {
            if (active) setSearchResults([]);
          }
        } else {
          setSearchResults([]);
        }
      }
    };
    if (searchQuery) {
      const debounceTimeout = setTimeout(doSearch, 300);
      return () => {
        active = false;
        clearTimeout(debounceTimeout);
      };
    } else {
      setSearchResults([]);
      if (optimizedSearchRef.current && optimizedSearchRef.current.clearSearch) {
        optimizedSearchRef.current.clearSearch();
      }
    }
  }, [searchQuery, sport, useOptimizedData]);

  // Effect to handle mode switching
  (0, _react.useEffect)(() => {
    // Clear search when switching between optimized and standard modes
    setSearchResults([]);
    if (optimizedSearchRef.current && optimizedSearchRef.current.clearSearch) {
      optimizedSearchRef.current.clearSearch();
    }
    setSearchQuery('');
  }, [useOptimizedData]);

  // Show search interface when no playerId is provided
  if (!playerId || playerId.trim() === '') {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900",
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "max-w-4xl mx-auto px-4 py-8",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-center mb-8",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "flex items-center justify-center gap-3 mb-4",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h1", {
              className: "text-3xl font-bold text-white",
              children: "Player Research"
            }), useOptimizedData && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "flex items-center gap-1 px-3 py-1 bg-blue-900/50 text-blue-300 rounded-lg text-sm",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Zap, {
                className: "w-4 h-4"
              }), "Optimized"]
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
            className: "text-slate-300",
            children: useOptimizedData ? 'Enhanced with real-time data optimization and intelligent caching' : 'Search for a player to view their dashboard and analytics'
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "bg-slate-800/50 backdrop-blur rounded-lg p-6 mb-8",
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "relative",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
              type: "text",
              placeholder: "Search for players...",
              value: searchQuery,
              onChange: e => setSearchQuery(e.target.value),
              className: "w-full bg-slate-700 text-white border border-slate-600 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
            }), displaySearchResults.length > 0 && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: "absolute top-full left-0 right-0 bg-slate-700 border border-slate-600 rounded-lg mt-1 max-h-60 overflow-y-auto z-10",
              children: displaySearchResults.map(result => /*#__PURE__*/(0, _jsxRuntime.jsxs)("button", {
                onClick: () => handlePlayerSelect(result.id),
                className: "w-full text-left px-4 py-2 hover:bg-slate-600 transition-colors text-white",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "font-medium",
                  children: result.name
                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                  className: "text-sm text-slate-300",
                  children: [result.team, " \u2022 ", result.position]
                })]
              }, result.id))
            })]
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4",
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "bg-slate-800/30 rounded-lg p-4 text-center",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: "text-slate-400 text-sm mb-2",
              children: "Quick Access"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: "text-white",
              children: "Search above to get started"
            })]
          })
        })]
      })
    });
  }

  // Always render dashboard sections, passing loading prop for skeletons

  if (error) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "flex items-center justify-center min-h-96 bg-slate-900",
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "text-center max-w-md",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "text-red-400 text-2xl mb-4",
          children: "\u26A0\uFE0F"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
          className: "text-xl font-semibold text-white mb-2",
          children: "Dashboard Error"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          className: "text-slate-300 mb-6",
          children: error
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
          onClick: reload,
          className: "bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors",
          children: "Retry"
        })]
      })
    });
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("section", {
    role: "region",
    "aria-busy": loading ? 'true' : 'false',
    className: "min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "bg-slate-800 border-b border-slate-700 px-6 py-4",
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "flex items-center justify-between",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex items-center gap-4",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h1", {
            className: "text-xl font-bold text-white",
            children: "Player Dashboard"
          }), player && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "text-slate-300",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              className: "font-medium",
              children: player.name
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              className: "mx-2",
              children: "\u2022"
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
              children: [player.team, " ", player.position]
            })]
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex items-center gap-3",
          children: [useOptimizedData && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: `flex items-center gap-1 px-2 py-1 rounded text-xs ${optimizedData.isRealTime ? 'bg-green-900/50 text-green-300' : 'bg-slate-700 text-slate-400'}`,
              children: [optimizedData.isRealTime ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Activity, {
                className: "w-3 h-3"
              }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_lucideReact.Clock, {
                className: "w-3 h-3"
              }), optimizedData.isRealTime ? 'Live' : 'Cached']
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: `px-2 py-1 rounded text-xs ${optimizedData.dataQuality === 'high' ? 'bg-green-900/50 text-green-300' : optimizedData.dataQuality === 'medium' ? 'bg-yellow-900/50 text-yellow-300' : 'bg-orange-900/50 text-orange-300'}`,
              children: [optimizedData.dataQuality, " quality"]
            }), optimizedData.responseTime && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "px-2 py-1 bg-slate-700 text-slate-300 rounded text-xs",
              children: [optimizedData.responseTime, "ms"]
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: reload,
            disabled: loading,
            className: "text-slate-400 hover:text-white transition-colors disabled:opacity-50",
            title: "Refresh data",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("svg", {
              className: `w-5 h-5 ${loading ? 'animate-spin' : ''}`,
              fill: "none",
              stroke: "currentColor",
              viewBox: "0 0 24 24",
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: 2,
                d: "M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
              })
            })
          })]
        })]
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "max-w-5xl mx-auto px-4 py-8",
      "aria-live": "polite",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_PlayerOverview.default, {
        player: player || undefined,
        loading: loading
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "bg-slate-800/50 backdrop-blur rounded-lg border border-slate-700 mb-6",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "border-b border-slate-700",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("nav", {
            className: "flex space-x-8 px-6",
            children: [{
              id: 'overview',
              label: 'Stats & Performance',
              icon: _lucideReact.User
            }, {
              id: 'trends',
              label: 'Trends & Analysis',
              icon: _lucideReact.TrendingUp
            }, {
              id: 'history',
              label: 'Prop History',
              icon: _lucideReact.History
            }, {
              id: 'ai',
              label: 'AI Insights',
              icon: _lucideReact.Brain
            }].map(tab => {
              const Icon = tab.icon;
              return /*#__PURE__*/(0, _jsxRuntime.jsxs)("button", {
                onClick: () => setActiveTab(tab.id),
                className: `flex items-center gap-2 py-4 border-b-2 font-medium text-sm transition-colors ${activeTab === tab.id ? 'border-blue-500 text-blue-400' : 'border-transparent text-slate-400 hover:text-slate-300 hover:border-slate-600'}`,
                children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Icon, {
                  className: "w-4 h-4"
                }), tab.label]
              }, tab.id);
            })
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "p-6",
          children: [activeTab === 'overview' && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "space-y-6",
            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "text-slate-300",
              "aria-label": "Player Overview",
              "aria-busy": loading ? 'true' : 'false',
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
                className: "text-lg font-semibold mb-4 text-white",
                children: "Season Statistics & Recent Performance"
              }), player ? /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "grid grid-cols-2 md:grid-cols-4 gap-4",
                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                  className: "bg-slate-700/50 rounded-lg p-4",
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "text-slate-400 text-sm",
                    children: "Games Played"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "text-xl font-bold text-white",
                    children: player.season_stats?.games_played || 0
                  })]
                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                  className: "bg-slate-700/50 rounded-lg p-4",
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "text-slate-400 text-sm",
                    children: "Batting Avg"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "text-xl font-bold text-white",
                    children: player.season_stats?.batting_average?.toFixed(3) || '.000'
                  })]
                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                  className: "bg-slate-700/50 rounded-lg p-4",
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "text-slate-400 text-sm",
                    children: "Home Runs"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "text-xl font-bold text-white",
                    children: player.season_stats?.home_runs || 0
                  })]
                }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                  className: "bg-slate-700/50 rounded-lg p-4",
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "text-slate-400 text-sm",
                    children: "RBIs"
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                    className: "text-xl font-bold text-white",
                    children: player.season_stats?.rbis || 0
                  })]
                })]
              }) : /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                className: "text-slate-400",
                children: "No player data available"
              })]
            })
          }), activeTab === 'trends' && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            "aria-label": "Performance Trends",
            "aria-busy": loading ? 'true' : 'false',
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
              className: "text-lg font-semibold mb-4 text-white",
              children: "Performance Trends"
            }), loading && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: "text-slate-400 mb-2",
              children: "Performance Trends"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_PlayerStatTrends.default, {
              player: loading ? undefined : player ?? undefined,
              loading: loading
            })]
          }), activeTab === 'history' && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            "aria-label": "Prop History",
            "aria-busy": loading ? 'true' : 'false',
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
              className: "text-lg font-semibold mb-4 text-white",
              children: "Prop History"
            }), loading && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: "text-slate-400 mb-2",
              children: "Prop History"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_PlayerPropHistory.default, {
              player: loading ? undefined : player ?? undefined,
              loading: loading
            })]
          }), activeTab === 'ai' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_AIExplanationPanel.default, {
            context: player ? `Player: ${player.name} (${player.position}, ${player.team})
Season Stats: ${JSON.stringify(player.season_stats, null, 2)}
Sport: ${player.sport}
Active: ${player.active}
${useOptimizedData ? `
Data Optimization: Real-time optimized data enabled
Real-time Status: ${optimizedData.isRealTime ? 'Live updates active' : 'Using cached data'}
Data Quality: ${optimizedData.dataQuality}
Data Sources: ${optimizedData.dataSources.join(', ')}
Response Time: ${optimizedData.responseTime || 'N/A'}ms
Cache Hit: ${optimizedData.cacheHit ? 'Yes' : 'No'}
Last Updated: ${optimizedData.lastUpdated ? optimizedData.lastUpdated.toLocaleString() : 'N/A'}` : ''}
${player.injury_status ? `Injury Status: ${player.injury_status}` : ''}` : 'No player data available',
            question: `Please analyze this player's performance, trends, and potential prop opportunities. Include insights about recent form, matchup considerations, and any notable patterns.${useOptimizedData ? ' Note: This analysis uses real-time optimized data with enhanced performance monitoring.' : ''}`,
            playerIds: player ? [player.id] : undefined,
            sport: sport,
            className: "min-h-[500px]"
          })]
        })]
      })]
    })]
  });
};
exports.PlayerDashboardContainer = PlayerDashboardContainer;
var _default = exports.default = PlayerDashboardContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,