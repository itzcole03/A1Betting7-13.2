{"version":3,"names":["_BackoffStrategy","require","describe","it","strategy","BackoffStrategy","baseDelaysMs","jitterRatio","maxAttempts","expect","nextDelay","toBe","capDelayMs","toBeNull","hasExceededMaxAttempts","seed","delay1","delay2","delay3","strategy2","baseDelay","min","max","calculateJitterBounds","i","delay","not","toBeGreaterThanOrEqual","toBeLessThanOrEqual","reset","getCurrentAttempt","peekNextDelay","config","getConfig","baseDelays","toEqual","capDelay","strategy1","options","currentAttempt","createImmediateStrategy","createAggressiveStrategy","createProductionStrategy","bounds1","bounds2","bounds"],"sources":["BackoffStrategy.test.ts"],"sourcesContent":["/**\r\n * BackoffStrategy Tests\r\n * \r\n * Tests for the adaptive backoff strategy including:\r\n * - Deterministic jitter with seeded RNG\r\n * - Capped backoff sequence\r\n * - Reset functionality\r\n * - Edge cases and configuration validation\r\n */\r\n\r\nimport { BackoffStrategy } from '../BackoffStrategy';\r\n\r\ndescribe('BackoffStrategy', () => {\r\n  describe('Basic backoff sequence', () => {\r\n    it('generates correct base delay sequence', () => {\r\n      const strategy = new BackoffStrategy({\r\n        baseDelaysMs: [1000, 2000, 4000],\r\n        jitterRatio: 0,\r\n        maxAttempts: 5\r\n      });\r\n\r\n      expect(strategy.nextDelay()).toBe(1000);\r\n      expect(strategy.nextDelay()).toBe(2000);\r\n      expect(strategy.nextDelay()).toBe(4000);\r\n      expect(strategy.nextDelay()).toBe(4000); // Repeats last delay\r\n      expect(strategy.nextDelay()).toBe(4000);\r\n    });\r\n\r\n    it('respects delay cap', () => {\r\n      const strategy = new BackoffStrategy({\r\n        baseDelaysMs: [1000, 5000, 10000],\r\n        capDelayMs: 6000,\r\n        jitterRatio: 0,\r\n        maxAttempts: 5\r\n      });\r\n\r\n      expect(strategy.nextDelay()).toBe(1000);\r\n      expect(strategy.nextDelay()).toBe(5000);\r\n      expect(strategy.nextDelay()).toBe(6000); // Capped at 6000\r\n    });\r\n\r\n    it('returns null when max attempts exceeded', () => {\r\n      const strategy = new BackoffStrategy({\r\n        baseDelaysMs: [1000],\r\n        maxAttempts: 2\r\n      });\r\n\r\n      expect(strategy.nextDelay()).toBe(1000);\r\n      expect(strategy.nextDelay()).toBe(1000);\r\n      expect(strategy.nextDelay()).toBeNull();\r\n      expect(strategy.hasExceededMaxAttempts()).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Jitter functionality', () => {\r\n    it('applies deterministic jitter with seeded RNG', () => {\r\n      const strategy = new BackoffStrategy({\r\n        baseDelaysMs: [1000],\r\n        jitterRatio: 0.2,\r\n        seed: 12345,\r\n        maxAttempts: 3\r\n      });\r\n\r\n      const delay1 = strategy.nextDelay();\r\n      const delay2 = strategy.nextDelay();\r\n      const delay3 = strategy.nextDelay();\r\n\r\n      // With same seed, should get same sequence\r\n      const strategy2 = new BackoffStrategy({\r\n        baseDelaysMs: [1000],\r\n        jitterRatio: 0.2,\r\n        seed: 12345,\r\n        maxAttempts: 3\r\n      });\r\n\r\n      expect(strategy2.nextDelay()).toBe(delay1);\r\n      expect(strategy2.nextDelay()).toBe(delay2);\r\n      expect(strategy2.nextDelay()).toBe(delay3);\r\n    });\r\n\r\n    it('keeps jittered values within expected bounds', () => {\r\n      const baseDelay = 2000;\r\n      const jitterRatio = 0.3;\r\n      const strategy = new BackoffStrategy({\r\n        baseDelaysMs: [baseDelay],\r\n        jitterRatio,\r\n        seed: 42,\r\n        maxAttempts: 100\r\n      });\r\n\r\n      const { min, max } = BackoffStrategy.calculateJitterBounds(baseDelay, jitterRatio);\r\n\r\n      // Test multiple values to ensure they're all within bounds\r\n      for (let i = 0; i < 50; i++) {\r\n        const delay = strategy.nextDelay();\r\n        expect(delay).not.toBeNull();\r\n        expect(delay!).toBeGreaterThanOrEqual(min);\r\n        expect(delay!).toBeLessThanOrEqual(max);\r\n      }\r\n    });\r\n\r\n    it('enforces minimum delay of 100ms', () => {\r\n      const strategy = new BackoffStrategy({\r\n        baseDelaysMs: [200],\r\n        jitterRatio: 0.9, // High jitter could theoretically go below 100ms\r\n        seed: 999,\r\n        maxAttempts: 10\r\n      });\r\n\r\n      for (let i = 0; i < 5; i++) {\r\n        const delay = strategy.nextDelay();\r\n        expect(delay).toBeGreaterThanOrEqual(100);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Reset functionality', () => {\r\n    it('resets attempt counter and allows new sequence', () => {\r\n      const strategy = new BackoffStrategy({\r\n        baseDelaysMs: [1000, 2000],\r\n        jitterRatio: 0,\r\n        maxAttempts: 3\r\n      });\r\n\r\n      // Use up attempts\r\n      expect(strategy.nextDelay()).toBe(1000);\r\n      expect(strategy.nextDelay()).toBe(2000);\r\n      expect(strategy.nextDelay()).toBe(2000);\r\n      expect(strategy.nextDelay()).toBeNull(); // Max exceeded\r\n\r\n      // Reset and try again\r\n      strategy.reset();\r\n      expect(strategy.getCurrentAttempt()).toBe(0);\r\n      expect(strategy.hasExceededMaxAttempts()).toBe(false);\r\n      expect(strategy.nextDelay()).toBe(1000);\r\n    });\r\n  });\r\n\r\n  describe('Preview functionality', () => {\r\n    it('peeks at next delay without consuming attempt', () => {\r\n      const strategy = new BackoffStrategy({\r\n        baseDelaysMs: [1000, 2000, 4000],\r\n        jitterRatio: 0,\r\n        maxAttempts: 5\r\n      });\r\n\r\n      expect(strategy.peekNextDelay()).toBe(1000);\r\n      expect(strategy.getCurrentAttempt()).toBe(0); // No attempt consumed\r\n\r\n      expect(strategy.nextDelay()).toBe(1000);\r\n      expect(strategy.getCurrentAttempt()).toBe(1);\r\n\r\n      expect(strategy.peekNextDelay()).toBe(2000);\r\n      expect(strategy.getCurrentAttempt()).toBe(1); // Still 1\r\n    });\r\n  });\r\n\r\n  describe('Configuration validation', () => {\r\n    it('uses default configuration when no options provided', () => {\r\n      const strategy = new BackoffStrategy();\r\n      const config = strategy.getConfig();\r\n\r\n      expect(config.baseDelays).toEqual([1000, 2000, 4000, 8000, 12000]);\r\n      expect(config.capDelay).toBe(12000);\r\n      expect(config.jitterRatio).toBe(0.2);\r\n      expect(config.maxAttempts).toBe(8);\r\n    });\r\n\r\n    it('clamps jitter ratio to valid range', () => {\r\n      const strategy1 = new BackoffStrategy({ jitterRatio: -0.5 });\r\n      expect(strategy1.getConfig().jitterRatio).toBe(0);\r\n\r\n      const strategy2 = new BackoffStrategy({ jitterRatio: 1.5 });\r\n      expect(strategy2.getConfig().jitterRatio).toBe(1);\r\n    });\r\n\r\n    it('provides configuration summary', () => {\r\n      const options = {\r\n        baseDelaysMs: [500, 1000],\r\n        capDelayMs: 5000,\r\n        jitterRatio: 0.1,\r\n        maxAttempts: 3\r\n      };\r\n      const strategy = new BackoffStrategy(options);\r\n      const config = strategy.getConfig();\r\n\r\n      expect(config.baseDelays).toEqual(options.baseDelaysMs);\r\n      expect(config.capDelay).toBe(options.capDelayMs);\r\n      expect(config.jitterRatio).toBe(options.jitterRatio);\r\n      expect(config.maxAttempts).toBe(options.maxAttempts);\r\n      expect(config.currentAttempt).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('Static factory methods', () => {\r\n    it('creates immediate strategy for testing', () => {\r\n      const strategy = BackoffStrategy.createImmediateStrategy();\r\n      const config = strategy.getConfig();\r\n\r\n      expect(config.baseDelays).toEqual([100, 100, 100]);\r\n      expect(config.capDelay).toBe(100);\r\n      expect(config.jitterRatio).toBe(0);\r\n      expect(config.maxAttempts).toBe(3);\r\n    });\r\n\r\n    it('creates aggressive strategy', () => {\r\n      const strategy = BackoffStrategy.createAggressiveStrategy();\r\n      const config = strategy.getConfig();\r\n\r\n      expect(config.baseDelays).toEqual([500, 1000, 2000, 4000]);\r\n      expect(config.capDelay).toBe(4000);\r\n      expect(config.jitterRatio).toBe(0.1);\r\n      expect(config.maxAttempts).toBe(10);\r\n    });\r\n\r\n    it('creates production strategy', () => {\r\n      const strategy = BackoffStrategy.createProductionStrategy();\r\n      const config = strategy.getConfig();\r\n\r\n      expect(config.baseDelays).toEqual([1000, 2000, 4000, 8000, 12000]);\r\n      expect(config.capDelay).toBe(12000);\r\n      expect(config.jitterRatio).toBe(0.2);\r\n      expect(config.maxAttempts).toBe(8);\r\n    });\r\n  });\r\n\r\n  describe('Jitter bounds calculation', () => {\r\n    it('calculates correct jitter bounds', () => {\r\n      const bounds1 = BackoffStrategy.calculateJitterBounds(1000, 0.2);\r\n      expect(bounds1.min).toBe(800); // 1000 - (1000 * 0.2)\r\n      expect(bounds1.max).toBe(1200); // 1000 + (1000 * 0.2)\r\n\r\n      const bounds2 = BackoffStrategy.calculateJitterBounds(500, 0.5);\r\n      expect(bounds2.min).toBe(250); // 500 - (500 * 0.5)\r\n      expect(bounds2.max).toBe(750); // 500 + (500 * 0.5)\r\n    });\r\n\r\n    it('enforces minimum delay in bounds calculation', () => {\r\n      const bounds = BackoffStrategy.calculateJitterBounds(150, 0.8);\r\n      expect(bounds.min).toBe(100); // Should be clamped to minimum\r\n      expect(bounds.max).toBe(270); // 150 + (150 * 0.8)\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}