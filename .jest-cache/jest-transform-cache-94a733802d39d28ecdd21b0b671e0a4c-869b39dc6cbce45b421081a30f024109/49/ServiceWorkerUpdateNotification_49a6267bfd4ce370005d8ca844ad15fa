bae00421f4d44953ad970faa434be3a4
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceWorkerUpdateNotification = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * Service Worker Update Component - React 19 Best Practices
 *
 * Features:
 * - useOptimistic for instant UI updates
 * - Modern notification patterns
 * - Smooth animations with Framer Motion
 */
const framer_motion_1 = require("framer-motion");
const react_1 = __importStar(require("react"));
const serviceWorkerManager_1 = require("../../services/serviceWorkerManager");
// Action for applying service worker updates
async function applyUpdateAction(previousState, formData) {
    try {
        const { serviceWorkerManager } = await Promise.resolve().then(() => __importStar(require('../../services/serviceWorkerManager')));
        serviceWorkerManager.applyUpdate();
        return {
            updating: true,
            error: null,
        };
    }
    catch (error) {
        return {
            updating: false,
            error: error instanceof Error ? error.message : 'Update failed',
        };
    }
}
const ServiceWorkerUpdateNotification = ({ className = '', }) => {
    const { hasUpdate, isInstalling, error } = (0, serviceWorkerManager_1.useServiceWorkerUpdate)();
    // Standard optimistic UI state
    const [optimisticState, setOptimisticState] = (0, react_1.useState)({ updating: false, error: null });
    // React 19: useActionState for form actions
    const [actionState, submitAction, isPending] = (0, react_1.useActionState)(applyUpdateAction, {
        updating: false,
        error: null,
    });
    const handleUpdate = () => {
        // Optimistically update UI
        setOptimisticState({ updating: true, error: null });
        // Submit the actual action
        const formData = new FormData();
        submitAction(formData);
    };
    if (!hasUpdate && !isInstalling && !error) {
        return null;
    }
    return ((0, jsx_runtime_1.jsx)(framer_motion_1.AnimatePresence, { children: (hasUpdate || isInstalling || error) && ((0, jsx_runtime_1.jsx)(framer_motion_1.motion.div, { initial: { opacity: 0, y: -50 }, animate: { opacity: 1, y: 0 }, exit: { opacity: 0, y: -50 }, transition: { duration: 0.3, ease: 'easeInOut' }, className: `fixed top-4 right-4 z-50 max-w-sm ${className}`, children: (0, jsx_runtime_1.jsx)("div", { className: 'bg-gradient-to-br from-blue-600 to-purple-700 text-white rounded-lg shadow-lg border border-blue-500/20 backdrop-blur-sm', children: (0, jsx_runtime_1.jsxs)("div", { className: 'p-4', children: [error && ((0, jsx_runtime_1.jsxs)(framer_motion_1.motion.div, { initial: { scale: 0.95 }, animate: { scale: 1 }, className: 'flex items-start space-x-3', children: [(0, jsx_runtime_1.jsx)("div", { className: 'flex-shrink-0', children: (0, jsx_runtime_1.jsx)("svg", { className: 'w-5 h-5 text-red-400', fill: 'currentColor', viewBox: '0 0 20 20', children: (0, jsx_runtime_1.jsx)("path", { fillRule: 'evenodd', d: 'M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z', clipRule: 'evenodd' }) }) }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex-1', children: [(0, jsx_runtime_1.jsx)("h3", { className: 'text-sm font-medium', children: "Service Worker Error" }), (0, jsx_runtime_1.jsx)("p", { className: 'mt-1 text-xs text-white/80', children: error })] })] })), isInstalling && ((0, jsx_runtime_1.jsxs)(framer_motion_1.motion.div, { initial: { scale: 0.95 }, animate: { scale: 1 }, className: 'flex items-start space-x-3', children: [(0, jsx_runtime_1.jsx)("div", { className: 'flex-shrink-0', children: (0, jsx_runtime_1.jsx)(framer_motion_1.motion.div, { animate: { rotate: 360 }, transition: { duration: 2, repeat: Infinity, ease: 'linear' }, children: (0, jsx_runtime_1.jsx)("svg", { className: 'w-5 h-5 text-blue-400', fill: 'none', stroke: 'currentColor', viewBox: '0 0 24 24', children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: 'round', strokeLinejoin: 'round', strokeWidth: 2, d: 'M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15' }) }) }) }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex-1', children: [(0, jsx_runtime_1.jsx)("h3", { className: 'text-sm font-medium', children: "Installing Update" }), (0, jsx_runtime_1.jsx)("p", { className: 'mt-1 text-xs text-white/80', children: optimisticState.updating
                                                ? 'Applying update...'
                                                : 'A new version is being installed.' })] })] })), hasUpdate && !isInstalling && ((0, jsx_runtime_1.jsxs)(framer_motion_1.motion.div, { initial: { scale: 0.95 }, animate: { scale: 1 }, className: 'flex items-start space-x-3', children: [(0, jsx_runtime_1.jsx)("div", { className: 'flex-shrink-0', children: (0, jsx_runtime_1.jsx)("svg", { className: 'w-5 h-5 text-green-400', fill: 'currentColor', viewBox: '0 0 20 20', children: (0, jsx_runtime_1.jsx)("path", { fillRule: 'evenodd', d: 'M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z', clipRule: 'evenodd' }) }) }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex-1', children: [(0, jsx_runtime_1.jsx)("h3", { className: 'text-sm font-medium', children: "Update Available" }), (0, jsx_runtime_1.jsx)("p", { className: 'mt-1 text-xs text-white/80', children: "A new version with improvements is ready." }), (0, jsx_runtime_1.jsxs)("div", { className: 'mt-3 flex space-x-2', children: [(0, jsx_runtime_1.jsx)(framer_motion_1.motion.button, { whileHover: { scale: 1.02 }, whileTap: { scale: 0.98 }, onClick: handleUpdate, disabled: isPending || optimisticState.updating, className: 'px-3 py-1.5 bg-white/20 hover:bg-white/30 rounded-md text-xs font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed', children: isPending || optimisticState.updating ? ((0, jsx_runtime_1.jsxs)("span", { className: 'flex items-center space-x-1', children: [(0, jsx_runtime_1.jsx)(framer_motion_1.motion.div, { animate: { rotate: 360 }, transition: { duration: 1, repeat: Infinity, ease: 'linear' }, className: 'w-3 h-3', children: (0, jsx_runtime_1.jsx)("svg", { fill: 'currentColor', viewBox: '0 0 20 20', children: (0, jsx_runtime_1.jsx)("path", { fillRule: 'evenodd', d: 'M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z', clipRule: 'evenodd' }) }) }), (0, jsx_runtime_1.jsx)("span", { children: "Updating..." })] })) : ('Update Now') }), (0, jsx_runtime_1.jsx)(framer_motion_1.motion.button, { whileHover: { scale: 1.02 }, whileTap: { scale: 0.98 }, className: 'px-3 py-1.5 bg-white/10 hover:bg-white/20 rounded-md text-xs font-medium transition-colors', children: "Later" })] })] })] }))] }) }) })) }));
};
exports.ServiceWorkerUpdateNotification = ServiceWorkerUpdateNotification;
exports.default = exports.ServiceWorkerUpdateNotification;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,