{"version":3,"names":["_UnifiedDataService","require","describe","service","beforeEach","UnifiedDataService","getInstance","test","expect","cacheData","toBe","testData","id","value","timestamp","Date","now","resolves","toBeUndefined","getCachedData","retrieved","toBeDefined","toEqual","result","complexData","user","preferences","theme","notifications","settings","autoSave","syncEnabled","metadata","created","toISOString","version","stringResult","numberResult","booleanResult","arrayData","arrayResult","testKey","testValue","regression","fixed","not","toThrow","service1","service2","nullResult","toBeNull","undefined","undefinedResult","emptyStringResult","emptyObjectResult","emptyArrayResult"],"sources":["UnifiedDataService.regression.test.ts"],"sourcesContent":["/**\r\n * Test UnifiedDataService cacheData/getCachedData functionality\r\n * Prevents \"cacheData is not a function\" regression\r\n */\r\n\r\nimport { UnifiedDataService } from '../UnifiedDataService';\r\n\r\ninterface TestData {\r\n  id: string;\r\n  value: number;\r\n  timestamp: number;\r\n}\r\n\r\ndescribe('UnifiedDataService Cache Methods', () => {\r\n  let service: UnifiedDataService;\r\n\r\n  beforeEach(() => {\r\n    // Get singleton instance\r\n    service = UnifiedDataService.getInstance();\r\n  });\r\n\r\n  describe('cacheData method', () => {\r\n    test('should be defined as a function', () => {\r\n      expect(typeof service.cacheData).toBe('function');\r\n    });\r\n\r\n    test('should cache data successfully', async () => {\r\n      const testData: TestData = {\r\n        id: 'test-1',\r\n        value: 42,\r\n        timestamp: Date.now()\r\n      };\r\n\r\n      // Should not throw\r\n      await expect(service.cacheData('test-key', testData)).resolves.toBeUndefined();\r\n    });\r\n  });\r\n\r\n  describe('getCachedData method', () => {\r\n    test('should be defined as a function', () => {\r\n      expect(typeof service.getCachedData).toBe('function');\r\n    });\r\n\r\n    test('should return cached data', async () => {\r\n      const testData: TestData = {\r\n        id: 'test-2',\r\n        value: 123,\r\n        timestamp: Date.now()\r\n      };\r\n\r\n      // Cache the data\r\n      await service.cacheData('test-key-2', testData);\r\n\r\n      // Retrieve the data\r\n      const retrieved = await service.getCachedData<TestData>('test-key-2');\r\n\r\n      expect(retrieved).toBeDefined();\r\n      expect(retrieved).toEqual(testData);\r\n      expect(retrieved?.id).toBe('test-2');\r\n      expect(retrieved?.value).toBe(123);\r\n    });\r\n\r\n    test('should return undefined for unknown keys', async () => {\r\n      const result = await service.getCachedData('non-existent-key');\r\n      expect(result).toBeUndefined();\r\n    });\r\n  });\r\n\r\n  describe('round-trip caching', () => {\r\n    test('should preserve data integrity through cache cycle', async () => {\r\n      const complexData = {\r\n        user: 'test-user',\r\n        preferences: {\r\n          theme: 'dark',\r\n          notifications: true,\r\n          settings: {\r\n            autoSave: false,\r\n            syncEnabled: true\r\n          }\r\n        },\r\n        metadata: {\r\n          created: new Date().toISOString(),\r\n          version: '1.2.3'\r\n        }\r\n      };\r\n\r\n      // Cache complex object\r\n      await service.cacheData('complex-data', complexData);\r\n\r\n      // Retrieve and verify\r\n      const retrieved = await service.getCachedData('complex-data');\r\n      expect(retrieved).toEqual(complexData);\r\n    });\r\n\r\n    test('should handle different data types', async () => {\r\n      // Test string\r\n      await service.cacheData('string-test', 'hello world');\r\n      const stringResult = await service.getCachedData('string-test');\r\n      expect(stringResult).toBe('hello world');\r\n\r\n      // Test number\r\n      await service.cacheData('number-test', 42);\r\n      const numberResult = await service.getCachedData('number-test');\r\n      expect(numberResult).toBe(42);\r\n\r\n      // Test boolean\r\n      await service.cacheData('boolean-test', true);\r\n      const booleanResult = await service.getCachedData('boolean-test');\r\n      expect(booleanResult).toBe(true);\r\n\r\n      // Test array\r\n      const arrayData = [1, 2, 3, 'test'];\r\n      await service.cacheData('array-test', arrayData);\r\n      const arrayResult = await service.getCachedData('array-test');\r\n      expect(arrayResult).toEqual(arrayData);\r\n    });\r\n  });\r\n\r\n  describe('regression prevention', () => {\r\n    test('should not throw \"cacheData is not a function\" error', async () => {\r\n      // This test specifically targets the reported regression\r\n      const testKey = 'regression-test';\r\n      const testValue = { regression: false, fixed: true };\r\n\r\n      // These calls should not throw \"is not a function\" errors\r\n      await expect(service.cacheData(testKey, testValue)).resolves.not.toThrow();\r\n      await expect(service.getCachedData(testKey)).resolves.toEqual(testValue);\r\n    });\r\n\r\n    test('should maintain method availability after multiple instantiations', () => {\r\n      // Test that singleton pattern maintains method availability\r\n      const service1 = UnifiedDataService.getInstance();\r\n      const service2 = UnifiedDataService.getInstance();\r\n\r\n      expect(service1).toBe(service2); // Same instance\r\n      expect(typeof service1.cacheData).toBe('function');\r\n      expect(typeof service2.cacheData).toBe('function');\r\n      expect(typeof service1.getCachedData).toBe('function');\r\n      expect(typeof service2.getCachedData).toBe('function');\r\n    });\r\n  });\r\n\r\n  describe('error handling', () => {\r\n    test('should handle null and undefined values gracefully', async () => {\r\n      // Cache null value\r\n      await service.cacheData('null-test', null);\r\n      const nullResult = await service.getCachedData('null-test');\r\n      expect(nullResult).toBeNull();\r\n\r\n      // Cache undefined value\r\n      await service.cacheData('undefined-test', undefined);\r\n      const undefinedResult = await service.getCachedData('undefined-test');\r\n      expect(undefinedResult).toBeUndefined();\r\n    });\r\n\r\n    test('should handle empty strings and objects', async () => {\r\n      // Empty string\r\n      await service.cacheData('empty-string', '');\r\n      const emptyStringResult = await service.getCachedData('empty-string');\r\n      expect(emptyStringResult).toBe('');\r\n\r\n      // Empty object\r\n      await service.cacheData('empty-object', {});\r\n      const emptyObjectResult = await service.getCachedData('empty-object');\r\n      expect(emptyObjectResult).toEqual({});\r\n\r\n      // Empty array\r\n      await service.cacheData('empty-array', []);\r\n      const emptyArrayResult = await service.getCachedData('empty-array');\r\n      expect(emptyArrayResult).toEqual([]);\r\n    });\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]}