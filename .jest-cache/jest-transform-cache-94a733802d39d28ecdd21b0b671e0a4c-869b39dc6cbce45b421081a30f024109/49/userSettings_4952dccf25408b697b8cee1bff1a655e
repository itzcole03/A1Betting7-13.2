e0b130cb0dd4f94718bbcbe31f6cf8c2
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saveUserSettings = exports.isDarkMode = exports.initializeSettings = exports.getUserSettings = exports.getUserEmail = exports.getUserDisplayName = exports.applySettings = exports.DEFAULT_SETTINGS = void 0;
/**
 * User Settings Utilities;
 * Provides easy access to user settings throughout the application;
 */

const DEFAULT_SETTINGS = exports.DEFAULT_SETTINGS = {
  profile: {
    name: 'User',
    email: 'user@a1betting.com',
    timezone: 'UTC-5',
    currency: 'USD'
  },
  notifications: {
    email: true,
    push: true,
    sound: false
  },
  display: {
    darkMode: true,
    compactView: false,
    fontSize: 16
  },
  betting: {
    defaultStake: 10,
    maxStake: 100,
    currency: 'USD'
  },
  privacy: {
    sharePredictions: false,
    showStats: true
  }
};

/**
 * Get user settings from localStorage;
 */
function deepMerge(target, source) {
  if (typeof target !== 'object' || typeof source !== 'object' || !target || !source) return target;
  const result = Array.isArray(target) ? [...target] : {
    ...target
  };
  for (const key in source) {
    if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
      result[key] = deepMerge(target[key], source[key]);
    } else if (source[key] !== undefined) {
      result[key] = source[key];
    }
  }
  return result;
}
const getUserSettings = () => {
  try {
    const saved = localStorage.getItem('a1betting-user-settings');
    const parsed = saved ? JSON.parse(saved) : null;
    if (parsed) {
      return deepMerge(DEFAULT_SETTINGS, parsed);
    }
  } catch (error) {
    console.warn('getUserSettings error:', error);
  }
  return DEFAULT_SETTINGS;
};

/**
 * Apply settings to the DOM;
 */
exports.getUserSettings = getUserSettings;
const applySettings = settings => {
  // Dark mode;
  if (settings.display.darkMode) {
    document.documentElement.classList.add('dark');
    document.body.style.backgroundColor = '#0f172a';
  } else {
    document.documentElement.classList.remove('dark');
    document.body.style.backgroundColor = '#ffffff';
  }

  // Font size;
  document.documentElement.style.fontSize = `${settings.display.fontSize}px`;
};

/**
 * Save user settings to localStorage;
 */
exports.applySettings = applySettings;
const saveUserSettings = settings => {
  try {
    localStorage.setItem('a1betting-user-settings', JSON.stringify(settings));
    localStorage.setItem('a1betting-user-name', settings.profile.name);
    localStorage.setItem('a1betting-user-email', settings.profile.email);

    // Apply settings immediately;
    applySettings(settings);

    // Notify other components;
    window.dispatchEvent(new CustomEvent('settingsChanged', {
      detail: settings
    }));
  } catch (error) {
    console.warn('saveUserSettings error:', error);
  }
};

/**
 * Get user display name;
 */
exports.saveUserSettings = saveUserSettings;
const getUserDisplayName = () => {
  try {
    const saved = localStorage.getItem('a1betting-user-name');
    if (saved) return saved;
    const settings = getUserSettings();
    return settings.profile.name;
  } catch (error) {
    console.warn('getUserDisplayName error:', error);
    return 'User';
  }
};

/**
 * Get user email;
 */
exports.getUserDisplayName = getUserDisplayName;
const getUserEmail = () => {
  try {
    const saved = localStorage.getItem('a1betting-user-email');
    if (saved) return saved;
    const settings = getUserSettings();
    return settings.profile.email;
  } catch (error) {
    console.warn('getUserEmail error:', error);
    return 'user@a1betting.com';
  }
};

/**
 * Check if dark mode is enabled;
 */
exports.getUserEmail = getUserEmail;
const isDarkMode = () => {
  try {
    const settings = getUserSettings();
    return settings.display.darkMode;
  } catch (error) {
    console.warn('isDarkMode error:', error);
    return true; // Default to dark mode;
  }
};

/**
 * Initialize settings on app startup;
 */
exports.isDarkMode = isDarkMode;
const initializeSettings = () => {
  const settings = getUserSettings();
  applySettings(settings);
};
exports.initializeSettings = initializeSettings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,