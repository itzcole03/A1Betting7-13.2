d8ce27745d2baf45778676acac16453d
"use strict";

// Mock dependencies
_getJestObj().mock('../logger', () => ({
  logger: {
    debug: jest.fn(),
    info: jest.fn(),
    warn: jest.fn()
  }
}));
_getJestObj().mock('../../perf/performanceMetrics', () => ({
  initWebVitals: jest.fn(),
  getNavigationTiming: jest.fn(() => ({
    totalLoadTime: 1500,
    domContentLoaded: 1000,
    type: 'navigate',
    source: 'navigation-timing',
    startTime: 0,
    timestamp: Date.now()
  }))
}));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _performance = require("../performance");
var _logger = require("../logger");
var _performanceMetrics = require("../../perf/performanceMetrics");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('Performance Monitor', () => {
  let mockPerformanceNow;
  beforeEach(() => {
    // Mock performance.now to return predictable values
    mockPerformanceNow = jest.spyOn(performance, 'now').mockImplementation(() => 1000); // Default to 1000, override in specific tests

    // Clear metrics before each test
    _performance.performanceMonitor.clear();
    jest.clearAllMocks();
  });
  afterEach(() => {
    jest.restoreAllMocks();
  });
  describe('Component Performance Tracking', () => {
    it('should track component load times correctly', () => {
      const componentName = 'TestComponent';
      mockPerformanceNow.mockReturnValueOnce(1000); // startLoading
      _performance.performanceMonitor.startLoading(componentName);
      mockPerformanceNow.mockReturnValueOnce(1250); // endLoading
      _performance.performanceMonitor.endLoading(componentName);
      const metrics = _performance.performanceMonitor.getMetrics();
      expect(metrics).toHaveLength(1);
      expect(metrics[0]).toMatchObject({
        componentName,
        loadTime: 250,
        // 1250 - 1000
        timestamp: expect.any(Number),
        userAgent: expect.any(String)
      });
    });
    it('should not record metrics for components without start time', () => {
      _performance.performanceMonitor.endLoading('UnknownComponent');
      const metrics = _performance.performanceMonitor.getMetrics();
      expect(metrics).toHaveLength(0);
    });
    it('should track render performance with trackRender', () => {
      const renderFn = jest.fn(() => 'result');
      const result = _performance.performanceMonitor.trackRender('TestComponent', renderFn);
      expect(result).toBe('result');
      expect(renderFn).toHaveBeenCalledTimes(1);
      const metrics = _performance.performanceMonitor.getMetrics();
      expect(metrics).toHaveLength(1);
      expect(metrics[0].componentName).toBe('TestComponent');
    });
    it('should limit metrics storage to 100 entries', () => {
      // Add 150 metrics
      for (let i = 0; i < 150; i++) {
        _performance.performanceMonitor.startLoading(`Component${i}`);
        _performance.performanceMonitor.endLoading(`Component${i}`);
      }
      const metrics = _performance.performanceMonitor.getMetrics();
      expect(metrics).toHaveLength(100);
      // Should keep the most recent metrics
      expect(metrics[0].componentName).toBe('Component50');
      expect(metrics[99].componentName).toBe('Component149');
    });
  });
  describe('Performance Summary', () => {
    beforeEach(() => {
      // Clear any existing mocks
      jest.clearAllMocks();
      _performance.performanceMonitor.clear();

      // Add some test metrics with controlled timing
      mockPerformanceNow.mockReturnValueOnce(1000); // FastComponent start
      _performance.performanceMonitor.startLoading('FastComponent');
      mockPerformanceNow.mockReturnValueOnce(1100); // FastComponent end (100ms)
      _performance.performanceMonitor.endLoading('FastComponent');
      mockPerformanceNow.mockReturnValueOnce(1000); // SlowComponent start  
      _performance.performanceMonitor.startLoading('SlowComponent');
      mockPerformanceNow.mockReturnValueOnce(1500); // SlowComponent end (500ms)
      _performance.performanceMonitor.endLoading('SlowComponent');
    });
    it('should calculate summary statistics correctly', () => {
      const summary = _performance.performanceMonitor.getSummary();
      expect(summary).toMatchObject({
        totalComponents: 2,
        averageLoadTime: 300,
        // (100 + 500) / 2
        slowestComponent: expect.objectContaining({
          componentName: 'SlowComponent',
          loadTime: 500
        }),
        fastestComponent: expect.objectContaining({
          componentName: 'FastComponent',
          loadTime: 100
        })
      });
    });
    it('should handle empty metrics gracefully', () => {
      _performance.performanceMonitor.clear();
      const summary = _performance.performanceMonitor.getSummary();
      expect(summary).toMatchObject({
        totalComponents: 0,
        averageLoadTime: 0,
        slowestComponent: null,
        fastestComponent: null
      });
    });
  });
  describe('Performance Warnings', () => {
    it('should log warning for slow components', () => {
      const mockLogger = _logger.logger;
      mockPerformanceNow.mockReturnValueOnce(1000); // startLoading
      _performance.performanceMonitor.startLoading('SlowComponent');
      mockPerformanceNow.mockReturnValueOnce(3500); // endLoading (2500ms load time)
      _performance.performanceMonitor.endLoading('SlowComponent');
      expect(mockLogger.warn).toHaveBeenCalledWith(expect.stringContaining('Slow component load: SlowComponent took 2500.00ms'), expect.any(Object), 'Performance');
    });
    it('should not log warning for fast components', () => {
      const mockLogger = _logger.logger;
      mockPerformanceNow.mockReturnValueOnce(1000); // startLoading
      _performance.performanceMonitor.startLoading('FastComponent');
      mockPerformanceNow.mockReturnValueOnce(1500); // endLoading (500ms load time)
      _performance.performanceMonitor.endLoading('FastComponent');
      expect(mockLogger.warn).not.toHaveBeenCalled();
    });
  });
  describe('Web Vitals Integration', () => {
    it('should initialize web vitals with correct configuration', () => {
      const mockInitWebVitals = _performanceMetrics.initWebVitals;
      _performance.performanceMonitor.trackWebVitals();
      expect(mockInitWebVitals).toHaveBeenCalledWith({
        onMetric: expect.any(Function),
        includeNavigationMetrics: true
      });
    });
    it('should log web vital metrics through logger', () => {
      const mockLogger = _logger.logger;
      const mockInitWebVitals = _performanceMetrics.initWebVitals;
      _performance.performanceMonitor.trackWebVitals();

      // Get the onMetric callback and simulate a metric
      const callArgs = mockInitWebVitals.mock.calls[0][0];
      const onMetricCallback = callArgs?.onMetric;
      expect(onMetricCallback).toBeDefined();
      onMetricCallback({
        name: 'LCP',
        value: 1234.5,
        rating: 'good',
        timestamp: Date.now()
      });
      expect(mockLogger.info).toHaveBeenCalledWith('ðŸ“Š LCP: 1234.50ms', {
        metric: 'LCP',
        value: 1234.5,
        rating: 'good'
      }, 'WebVitals');
    });
    it('should handle CLS metrics without ms suffix', () => {
      const mockLogger = _logger.logger;
      const mockInitWebVitals = _performanceMetrics.initWebVitals;
      _performance.performanceMonitor.trackWebVitals();
      const callArgs = mockInitWebVitals.mock.calls[0][0];
      const onMetricCallback = callArgs?.onMetric;
      expect(onMetricCallback).toBeDefined();
      onMetricCallback({
        name: 'CLS',
        value: 0.05,
        rating: 'good',
        timestamp: Date.now()
      });
      expect(mockLogger.info).toHaveBeenCalledWith('ðŸ“Š CLS: 0.05',
      // No 'ms' suffix for CLS
      {
        metric: 'CLS',
        value: 0.05,
        rating: 'good'
      }, 'WebVitals');
    });
  });
});
describe('withPerformanceTracking HOC', () => {
  let mockPerformanceNow;
  beforeEach(() => {
    mockPerformanceNow = jest.spyOn(performance, 'now').mockImplementation(() => 1000); // Default value

    _performance.performanceMonitor.clear();
    jest.clearAllMocks();
  });
  afterEach(() => {
    jest.restoreAllMocks();
  });
  it('should wrap component with performance tracking', () => {
    const TestComponent = ({
      text
    }) => /*#__PURE__*/_react.default.createElement('div', {}, text);
    const WrappedComponent = (0, _performance.withPerformanceTracking)(TestComponent, 'CustomTestComponent');
    const {
      unmount
    } = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(WrappedComponent, {
      text: 'Hello'
    }));

    // Should start tracking on mount
    expect(performance.now).toHaveBeenCalled();

    // Simulate unmount with different time
    mockPerformanceNow.mockReturnValue(1250);
    unmount();

    // Should record performance metrics
    const metrics = _performance.performanceMonitor.getMetrics();
    expect(metrics).toHaveLength(1);
    expect(metrics[0].componentName).toBe('CustomTestComponent');
  });
  it('should use component name when custom name not provided', () => {
    const TestComponent = ({
      text
    }) => /*#__PURE__*/_react.default.createElement('div', {}, text);
    const WrappedComponent = (0, _performance.withPerformanceTracking)(TestComponent);
    const {
      unmount
    } = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(WrappedComponent, {
      text: 'Hello'
    }));
    mockPerformanceNow.mockReturnValue(1250);
    unmount();
    const metrics = _performance.performanceMonitor.getMetrics();
    expect(metrics[0].componentName).toBe('TestComponent');
  });
  it('should handle anonymous components gracefully', () => {
    const AnonymousComponent = ({
      text
    }) => /*#__PURE__*/_react.default.createElement('div', {}, text);
    // Remove the name property to simulate anonymous component
    Object.defineProperty(AnonymousComponent, 'name', {
      value: ''
    });
    const WrappedComponent = (0, _performance.withPerformanceTracking)(AnonymousComponent);
    const {
      unmount
    } = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(WrappedComponent, {
      text: 'Hello'
    }));
    mockPerformanceNow.mockReturnValue(1250);
    unmount();
    const metrics = _performance.performanceMonitor.getMetrics();
    expect(metrics[0].componentName).toBe('UnknownComponent');
  });
  it('should set correct displayName for wrapped component', () => {
    const TestComponent = () => /*#__PURE__*/_react.default.createElement('div', {}, 'Test');
    const WrappedComponent = (0, _performance.withPerformanceTracking)(TestComponent);
    expect(WrappedComponent.displayName).toBe('withPerformanceTracking(TestComponent)');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,