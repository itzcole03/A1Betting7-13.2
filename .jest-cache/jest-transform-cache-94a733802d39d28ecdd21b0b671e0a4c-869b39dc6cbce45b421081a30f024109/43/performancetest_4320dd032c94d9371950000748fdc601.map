{"version":3,"names":["_getJestObj","mock","logger","debug","jest","fn","info","warn","initWebVitals","getNavigationTiming","totalLoadTime","domContentLoaded","type","source","startTime","timestamp","Date","now","_interopRequireDefault","require","_react","_react2","_performance","_logger","_performanceMetrics","describe","mockPerformanceNow","beforeEach","spyOn","performance","mockImplementation","performanceMonitor","clear","clearAllMocks","afterEach","restoreAllMocks","it","componentName","mockReturnValueOnce","startLoading","endLoading","metrics","getMetrics","expect","toHaveLength","toMatchObject","loadTime","any","Number","userAgent","String","renderFn","result","trackRender","toBe","toHaveBeenCalledTimes","i","summary","getSummary","totalComponents","averageLoadTime","slowestComponent","objectContaining","fastestComponent","mockLogger","toHaveBeenCalledWith","stringContaining","Object","not","toHaveBeenCalled","mockInitWebVitals","trackWebVitals","onMetric","Function","includeNavigationMetrics","callArgs","calls","onMetricCallback","toBeDefined","name","value","rating","metric","TestComponent","text","React","createElement","WrappedComponent","withPerformanceTracking","unmount","render","mockReturnValue","AnonymousComponent","defineProperty","displayName"],"sources":["performance.test.ts"],"sourcesContent":["import React from 'react';\r\nimport { render } from '@testing-library/react';\r\nimport { performanceMonitor, withPerformanceTracking } from '../performance';\r\nimport { logger } from '../logger';\r\nimport { initWebVitals } from '../../perf/performanceMetrics';\r\n\r\n// Mock dependencies\r\njest.mock('../logger', () => ({\r\n  logger: {\r\n    debug: jest.fn(),\r\n    info: jest.fn(),\r\n    warn: jest.fn(),\r\n  },\r\n}));\r\n\r\njest.mock('../../perf/performanceMetrics', () => ({\r\n  initWebVitals: jest.fn(),\r\n  getNavigationTiming: jest.fn(() => ({\r\n    totalLoadTime: 1500,\r\n    domContentLoaded: 1000,\r\n    type: 'navigate',\r\n    source: 'navigation-timing',\r\n    startTime: 0,\r\n    timestamp: Date.now(),\r\n  })),\r\n}));\r\n\r\ndescribe('Performance Monitor', () => {\r\n  let mockPerformanceNow: jest.SpyInstance;\r\n  \r\n  beforeEach(() => {\r\n    // Mock performance.now to return predictable values\r\n    mockPerformanceNow = jest.spyOn(performance, 'now')\r\n      .mockImplementation(() => 1000); // Default to 1000, override in specific tests\r\n\r\n    // Clear metrics before each test\r\n    performanceMonitor.clear();\r\n    \r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.restoreAllMocks();\r\n  });\r\n\r\n  describe('Component Performance Tracking', () => {\r\n    it('should track component load times correctly', () => {\r\n      const componentName = 'TestComponent';\r\n\r\n      mockPerformanceNow.mockReturnValueOnce(1000); // startLoading\r\n      performanceMonitor.startLoading(componentName);\r\n      \r\n      mockPerformanceNow.mockReturnValueOnce(1250); // endLoading\r\n      performanceMonitor.endLoading(componentName);\r\n\r\n      const metrics = performanceMonitor.getMetrics();\r\n      \r\n      expect(metrics).toHaveLength(1);\r\n      expect(metrics[0]).toMatchObject({\r\n        componentName,\r\n        loadTime: 250, // 1250 - 1000\r\n        timestamp: expect.any(Number),\r\n        userAgent: expect.any(String),\r\n      });\r\n    });\r\n\r\n    it('should not record metrics for components without start time', () => {\r\n      performanceMonitor.endLoading('UnknownComponent');\r\n\r\n      const metrics = performanceMonitor.getMetrics();\r\n      \r\n      expect(metrics).toHaveLength(0);\r\n    });\r\n\r\n    it('should track render performance with trackRender', () => {\r\n      const renderFn = jest.fn(() => 'result');\r\n      \r\n      const result = performanceMonitor.trackRender('TestComponent', renderFn);\r\n\r\n      expect(result).toBe('result');\r\n      expect(renderFn).toHaveBeenCalledTimes(1);\r\n\r\n      const metrics = performanceMonitor.getMetrics();\r\n      expect(metrics).toHaveLength(1);\r\n      expect(metrics[0].componentName).toBe('TestComponent');\r\n    });\r\n\r\n    it('should limit metrics storage to 100 entries', () => {\r\n      // Add 150 metrics\r\n      for (let i = 0; i < 150; i++) {\r\n        performanceMonitor.startLoading(`Component${i}`);\r\n        performanceMonitor.endLoading(`Component${i}`);\r\n      }\r\n\r\n      const metrics = performanceMonitor.getMetrics();\r\n      \r\n      expect(metrics).toHaveLength(100);\r\n      // Should keep the most recent metrics\r\n      expect(metrics[0].componentName).toBe('Component50');\r\n      expect(metrics[99].componentName).toBe('Component149');\r\n    });\r\n  });\r\n\r\n  describe('Performance Summary', () => {\r\n    beforeEach(() => {\r\n      // Clear any existing mocks\r\n      jest.clearAllMocks();\r\n      performanceMonitor.clear();\r\n      \r\n      // Add some test metrics with controlled timing\r\n      mockPerformanceNow.mockReturnValueOnce(1000); // FastComponent start\r\n      performanceMonitor.startLoading('FastComponent');\r\n      mockPerformanceNow.mockReturnValueOnce(1100); // FastComponent end (100ms)\r\n      performanceMonitor.endLoading('FastComponent');\r\n\r\n      mockPerformanceNow.mockReturnValueOnce(1000); // SlowComponent start  \r\n      performanceMonitor.startLoading('SlowComponent');\r\n      mockPerformanceNow.mockReturnValueOnce(1500); // SlowComponent end (500ms)\r\n      performanceMonitor.endLoading('SlowComponent');\r\n    });\r\n\r\n    it('should calculate summary statistics correctly', () => {\r\n      const summary = performanceMonitor.getSummary();\r\n\r\n      expect(summary).toMatchObject({\r\n        totalComponents: 2,\r\n        averageLoadTime: 300, // (100 + 500) / 2\r\n        slowestComponent: expect.objectContaining({\r\n          componentName: 'SlowComponent',\r\n          loadTime: 500,\r\n        }),\r\n        fastestComponent: expect.objectContaining({\r\n          componentName: 'FastComponent',\r\n          loadTime: 100,\r\n        }),\r\n      });\r\n    });\r\n\r\n    it('should handle empty metrics gracefully', () => {\r\n      performanceMonitor.clear();\r\n      \r\n      const summary = performanceMonitor.getSummary();\r\n\r\n      expect(summary).toMatchObject({\r\n        totalComponents: 0,\r\n        averageLoadTime: 0,\r\n        slowestComponent: null,\r\n        fastestComponent: null,\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Performance Warnings', () => {\r\n    it('should log warning for slow components', () => {\r\n      const mockLogger = logger as jest.Mocked<typeof logger>;\r\n      \r\n      mockPerformanceNow.mockReturnValueOnce(1000); // startLoading\r\n      performanceMonitor.startLoading('SlowComponent');\r\n      \r\n      mockPerformanceNow.mockReturnValueOnce(3500); // endLoading (2500ms load time)\r\n      performanceMonitor.endLoading('SlowComponent');\r\n\r\n      expect(mockLogger.warn).toHaveBeenCalledWith(\r\n        expect.stringContaining('Slow component load: SlowComponent took 2500.00ms'),\r\n        expect.any(Object),\r\n        'Performance'\r\n      );\r\n    });\r\n\r\n    it('should not log warning for fast components', () => {\r\n      const mockLogger = logger as jest.Mocked<typeof logger>;\r\n      \r\n      mockPerformanceNow.mockReturnValueOnce(1000); // startLoading\r\n      performanceMonitor.startLoading('FastComponent');\r\n      \r\n      mockPerformanceNow.mockReturnValueOnce(1500); // endLoading (500ms load time)\r\n      performanceMonitor.endLoading('FastComponent');\r\n\r\n      expect(mockLogger.warn).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Web Vitals Integration', () => {\r\n    it('should initialize web vitals with correct configuration', () => {\r\n      const mockInitWebVitals = initWebVitals as jest.MockedFunction<typeof initWebVitals>;\r\n      \r\n      performanceMonitor.trackWebVitals();\r\n\r\n      expect(mockInitWebVitals).toHaveBeenCalledWith({\r\n        onMetric: expect.any(Function),\r\n        includeNavigationMetrics: true,\r\n      });\r\n    });\r\n\r\n    it('should log web vital metrics through logger', () => {\r\n      const mockLogger = logger as jest.Mocked<typeof logger>;\r\n      const mockInitWebVitals = initWebVitals as jest.MockedFunction<typeof initWebVitals>;\r\n      \r\n      performanceMonitor.trackWebVitals();\r\n\r\n      // Get the onMetric callback and simulate a metric\r\n      const callArgs = mockInitWebVitals.mock.calls[0][0];\r\n      const onMetricCallback = callArgs?.onMetric;\r\n      expect(onMetricCallback).toBeDefined();\r\n      \r\n      onMetricCallback!({\r\n        name: 'LCP',\r\n        value: 1234.5,\r\n        rating: 'good',\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith(\r\n        'ðŸ“Š LCP: 1234.50ms',\r\n        { metric: 'LCP', value: 1234.5, rating: 'good' },\r\n        'WebVitals'\r\n      );\r\n    });\r\n\r\n    it('should handle CLS metrics without ms suffix', () => {\r\n      const mockLogger = logger as jest.Mocked<typeof logger>;\r\n      const mockInitWebVitals = initWebVitals as jest.MockedFunction<typeof initWebVitals>;\r\n      \r\n      performanceMonitor.trackWebVitals();\r\n\r\n      const callArgs = mockInitWebVitals.mock.calls[0][0];\r\n      const onMetricCallback = callArgs?.onMetric;\r\n      expect(onMetricCallback).toBeDefined();\r\n      \r\n      onMetricCallback!({\r\n        name: 'CLS',\r\n        value: 0.05,\r\n        rating: 'good',\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith(\r\n        'ðŸ“Š CLS: 0.05', // No 'ms' suffix for CLS\r\n        { metric: 'CLS', value: 0.05, rating: 'good' },\r\n        'WebVitals'\r\n      );\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('withPerformanceTracking HOC', () => {\r\n  let mockPerformanceNow: jest.SpyInstance;\r\n\r\n  beforeEach(() => {\r\n    mockPerformanceNow = jest.spyOn(performance, 'now')\r\n      .mockImplementation(() => 1000); // Default value\r\n    \r\n    performanceMonitor.clear();\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.restoreAllMocks();\r\n  });\r\n\r\n  it('should wrap component with performance tracking', () => {\r\n    const TestComponent = ({ text }: { text: string }) => React.createElement('div', {}, text);\r\n    const WrappedComponent = withPerformanceTracking(TestComponent, 'CustomTestComponent');\r\n\r\n    const { unmount } = render(React.createElement(WrappedComponent, { text: 'Hello' }));\r\n\r\n    // Should start tracking on mount\r\n    expect(performance.now).toHaveBeenCalled();\r\n\r\n    // Simulate unmount with different time\r\n    mockPerformanceNow.mockReturnValue(1250);\r\n    unmount();\r\n\r\n    // Should record performance metrics\r\n    const metrics = performanceMonitor.getMetrics();\r\n    expect(metrics).toHaveLength(1);\r\n    expect(metrics[0].componentName).toBe('CustomTestComponent');\r\n  });\r\n\r\n  it('should use component name when custom name not provided', () => {\r\n    const TestComponent = ({ text }: { text: string }) => React.createElement('div', {}, text);\r\n    const WrappedComponent = withPerformanceTracking(TestComponent);\r\n\r\n    const { unmount } = render(React.createElement(WrappedComponent, { text: 'Hello' }));\r\n    mockPerformanceNow.mockReturnValue(1250);\r\n    unmount();\r\n\r\n    const metrics = performanceMonitor.getMetrics();\r\n    expect(metrics[0].componentName).toBe('TestComponent');\r\n  });\r\n\r\n  it('should handle anonymous components gracefully', () => {\r\n    const AnonymousComponent = ({ text }: { text: string }) => React.createElement('div', {}, text);\r\n    // Remove the name property to simulate anonymous component\r\n    Object.defineProperty(AnonymousComponent, 'name', { value: '' });\r\n    \r\n    const WrappedComponent = withPerformanceTracking(AnonymousComponent);\r\n\r\n    const { unmount } = render(React.createElement(WrappedComponent, { text: 'Hello' }));\r\n    mockPerformanceNow.mockReturnValue(1250);\r\n    unmount();\r\n\r\n    const metrics = performanceMonitor.getMetrics();\r\n    expect(metrics[0].componentName).toBe('UnknownComponent');\r\n  });\r\n\r\n  it('should set correct displayName for wrapped component', () => {\r\n    const TestComponent = () => React.createElement('div', {}, 'Test');\r\n    const WrappedComponent = withPerformanceTracking(TestComponent);\r\n\r\n    expect(WrappedComponent.displayName).toBe('withPerformanceTracking(TestComponent)');\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]}