538d38511b2a9f5cc8ce708821abb420
"use strict";

var _userSettings = require("../userSettings");
describe('userSettings utils', () => {
  const LOCAL_STORAGE_KEY = 'a1betting-user-settings';
  const LOCAL_STORAGE_NAME_KEY = 'a1betting-user-name';
  const LOCAL_STORAGE_EMAIL_KEY = 'a1betting-user-email';
  let localStorageMock;
  beforeEach(() => {
    localStorageMock = {
      getItem: jest.fn(key => {
        if (key === LOCAL_STORAGE_KEY) return null;
        if (key === LOCAL_STORAGE_NAME_KEY) return null;
        if (key === LOCAL_STORAGE_EMAIL_KEY) return null;
        return null;
      }),
      setItem: jest.fn(),
      clear: jest.fn()
    };
    Object.defineProperty(window, 'localStorage', {
      value: localStorageMock,
      writable: true
    });
    // Mock document.documentElement and document.body for applySettings
    Object.defineProperty(document, 'documentElement', {
      value: {
        classList: {
          add: jest.fn(),
          remove: jest.fn()
        },
        style: {
          fontSize: ''
        }
      },
      writable: true
    });
    Object.defineProperty(document, 'body', {
      value: {
        style: {
          backgroundColor: ''
        }
      },
      writable: true
    });
    // Mock window.dispatchEvent
    jest.spyOn(window, 'dispatchEvent').mockImplementation(jest.fn());
  });
  afterEach(() => {
    jest.restoreAllMocks();
  });
  it('getUserSettings should return default settings if nothing in localStorage', () => {
    expect((0, _userSettings.getUserSettings)()).toEqual(_userSettings.DEFAULT_SETTINGS);
  });
  it('getUserSettings should return parsed settings from localStorage', () => {
    const customSettings = {
      ..._userSettings.DEFAULT_SETTINGS,
      display: {
        ..._userSettings.DEFAULT_SETTINGS.display,
        darkMode: false
      }
    };
    localStorageMock.getItem.mockReturnValueOnce(JSON.stringify(customSettings));
    expect((0, _userSettings.getUserSettings)()).toEqual(customSettings);
  });
  it('getUserSettings should merge saved settings with defaults', () => {
    const partialSettings = {
      profile: {
        name: 'Test User'
      },
      display: {
        compactView: true
      },
      notifications: {},
      betting: {},
      privacy: {}
    };
    const expectedSettings = {
      ..._userSettings.DEFAULT_SETTINGS,
      profile: {
        ..._userSettings.DEFAULT_SETTINGS.profile,
        ...(partialSettings.profile || {})
      },
      notifications: {
        ..._userSettings.DEFAULT_SETTINGS.notifications,
        ...(partialSettings.notifications || {})
      },
      display: {
        ..._userSettings.DEFAULT_SETTINGS.display,
        ...(partialSettings.display || {})
      },
      betting: {
        ..._userSettings.DEFAULT_SETTINGS.betting,
        ...(partialSettings.betting || {})
      },
      privacy: {
        ..._userSettings.DEFAULT_SETTINGS.privacy,
        ...(partialSettings.privacy || {})
      }
    };
    localStorageMock.getItem.mockReturnValueOnce(JSON.stringify(partialSettings));
    expect((0, _userSettings.getUserSettings)()).toEqual(expectedSettings);
  });
  it('applySettings should apply dark mode class and background color', () => {
    // Test dark mode true
    const settingsDark = {
      ..._userSettings.DEFAULT_SETTINGS,
      display: {
        ..._userSettings.DEFAULT_SETTINGS.display,
        darkMode: true
      }
    };
    (0, _userSettings.applySettings)(settingsDark);
    expect(document.documentElement.classList.add).toHaveBeenCalledWith('dark');
    expect(document.documentElement.classList.remove).not.toHaveBeenCalledWith('dark');
    expect(document.body.style.backgroundColor).toBe('#0f172a');

    // Reset mocks for the next assertion within the same test
    document.documentElement.classList.add.mockClear();
    document.documentElement.classList.remove.mockClear();

    // Test dark mode false
    const settingsLight = {
      ..._userSettings.DEFAULT_SETTINGS,
      display: {
        ..._userSettings.DEFAULT_SETTINGS.display,
        darkMode: false
      }
    };
    (0, _userSettings.applySettings)(settingsLight);
    expect(document.documentElement.classList.remove).toHaveBeenCalledWith('dark');
    expect(document.documentElement.classList.add).not.toHaveBeenCalledWith('dark');
    expect(document.body.style.backgroundColor).toBe('#ffffff');
  });
  it('applySettings should set font size', () => {
    const settings = {
      ..._userSettings.DEFAULT_SETTINGS,
      display: {
        ..._userSettings.DEFAULT_SETTINGS.display,
        fontSize: 18
      }
    };
    (0, _userSettings.applySettings)(settings);
    expect(document.documentElement.style.fontSize).toBe('18px');
  });
  it('saveUserSettings should save settings to localStorage and apply them', () => {
    const customSettings = {
      ..._userSettings.DEFAULT_SETTINGS,
      profile: {
        ..._userSettings.DEFAULT_SETTINGS.profile,
        name: 'New Name'
      }
    };
    (0, _userSettings.saveUserSettings)(customSettings);
    expect(localStorageMock.setItem).toHaveBeenCalledWith(LOCAL_STORAGE_KEY, JSON.stringify(customSettings));
    expect(localStorageMock.setItem).toHaveBeenCalledWith(LOCAL_STORAGE_NAME_KEY, 'New Name');
    expect(localStorageMock.setItem).toHaveBeenCalledWith(LOCAL_STORAGE_EMAIL_KEY, _userSettings.DEFAULT_SETTINGS.profile.email);
    // Check if applySettings was called
    expect(document.documentElement.classList.add).toHaveBeenCalled(); // Dark mode applied
    expect(window.dispatchEvent).toHaveBeenCalledTimes(1);
    expect(window.dispatchEvent).toHaveBeenCalledWith(new CustomEvent('settingsChanged', {
      detail: customSettings
    }));
  });
  it('getUserDisplayName should return name from localStorage if available', () => {
    localStorageMock.getItem.mockReturnValueOnce('User From Storage');
    expect((0, _userSettings.getUserDisplayName)()).toBe('User From Storage');
  });
  it('getUserDisplayName should return name from settings if not in localStorage', () => {
    localStorageMock.getItem.mockImplementation(key => {
      if (key === LOCAL_STORAGE_KEY) return JSON.stringify({
        profile: {
          name: 'Name From Settings'
        }
      });
      return null;
    });
    expect((0, _userSettings.getUserDisplayName)()).toBe('Name From Settings');
  });
  it('getUserDisplayName should return default if no name found', () => {
    localStorageMock.getItem.mockReturnValue(null);
    expect((0, _userSettings.getUserDisplayName)()).toBe(_userSettings.DEFAULT_SETTINGS.profile.name);
  });
  it('getUserEmail should return email from localStorage if available', () => {
    localStorageMock.getItem.mockReturnValueOnce('email@storage.com');
    expect((0, _userSettings.getUserEmail)()).toBe('email@storage.com');
  });
  it('getUserEmail should return email from settings if not in localStorage', () => {
    localStorageMock.getItem.mockImplementation(key => {
      if (key === LOCAL_STORAGE_KEY) return JSON.stringify({
        profile: {
          email: 'email@settings.com'
        }
      });
      return null;
    });
    expect((0, _userSettings.getUserEmail)()).toBe('email@settings.com');
  });
  it('getUserEmail should return default if no email found', () => {
    localStorageMock.getItem.mockReturnValue(null);
    expect((0, _userSettings.getUserEmail)()).toBe(_userSettings.DEFAULT_SETTINGS.profile.email);
  });
  it('isDarkMode should return dark mode setting', () => {
    localStorageMock.getItem.mockReturnValueOnce(JSON.stringify({
      display: {
        darkMode: true
      }
    }));
    expect((0, _userSettings.isDarkMode)()).toBe(true);
    localStorageMock.getItem.mockReturnValueOnce(JSON.stringify({
      display: {
        darkMode: false
      }
    }));
    expect((0, _userSettings.isDarkMode)()).toBe(false);
  });
  it('isDarkMode should return default if settings not found', () => {
    localStorageMock.getItem.mockReturnValue(null);
    expect((0, _userSettings.isDarkMode)()).toBe(_userSettings.DEFAULT_SETTINGS.display.darkMode);
  });
  it('initializeSettings should get and apply settings', () => {
    const settingsToApply = {
      ..._userSettings.DEFAULT_SETTINGS,
      display: {
        ..._userSettings.DEFAULT_SETTINGS.display,
        darkMode: false
      }
    };
    localStorageMock.getItem.mockReturnValueOnce(JSON.stringify(settingsToApply));
    (0, _userSettings.initializeSettings)();

    // Verify settings were fetched and applied
    expect(document.documentElement.classList.remove).toHaveBeenCalledWith('dark');
    expect(document.body.style.backgroundColor).toBe('#ffffff');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,