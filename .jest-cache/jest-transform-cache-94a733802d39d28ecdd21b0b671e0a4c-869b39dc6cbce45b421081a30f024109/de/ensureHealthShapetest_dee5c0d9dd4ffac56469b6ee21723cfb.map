{"version":3,"names":["_ensureHealthShape","require","_oneTimeLog","describe","consoleLogSpy","beforeEach","jest","spyOn","console","mockImplementation","clearLoggedSignatures","afterEach","mockRestore","it","result1","ensureHealthShape","result2","undefined","expect","performance","cache_hit_rate","toBe","status","result","services","api","uptime_seconds","input","cache","database","hit_rate","toBeUndefined","infrastructure","hit_rate_percent","originFlags","mappedHitRate","originalEnv","process","env","NODE_ENV","toHaveBeenCalledWith","toEqual","cache_type","validStatuses","forEach","apiResponse","malformedInputs","completely","wrong","structure","cacheHitRate","apiStatus","uptime","systemHealth","toBeDefined","Number","MAX_SAFE_INTEGER","Infinity","NaN"],"sources":["ensureHealthShape.test.ts"],"sourcesContent":["/**\r\n * Comprehensive tests for ensureHealthShape utility\r\n * Focus: Preventing cache_hit_rate runtime errors and ensuring type safety\r\n * \r\n * @deprecated This tests a deprecated function. New code should use validateHealthResponse.\r\n * These tests remain to ensure backward compatibility during transition.\r\n */\r\n\r\nimport { ensureHealthShape, SystemHealth } from '../ensureHealthShape';\r\nimport { clearLoggedSignatures } from '../oneTimeLog';\r\n\r\ndescribe('ensureHealthShape', () => {\r\n  let consoleLogSpy: jest.SpyInstance;\r\n\r\n  beforeEach(() => {\r\n    consoleLogSpy = jest.spyOn(console, 'info').mockImplementation(() => {});\r\n    clearLoggedSignatures();\r\n  });\r\n\r\n  afterEach(() => {\r\n    consoleLogSpy.mockRestore();\r\n  });\r\n\r\n  describe('Basic normalization', () => {\r\n    it('should handle null/undefined input gracefully', () => {\r\n      const result1 = ensureHealthShape(null);\r\n      const result2 = ensureHealthShape(undefined);\r\n      \r\n      expect(result1.performance.cache_hit_rate).toBe(0);\r\n      expect(result2.performance.cache_hit_rate).toBe(0);\r\n      expect(result1.status).toBe('unknown');\r\n      expect(result2.status).toBe('unknown');\r\n    });\r\n\r\n    it('should handle empty object input', () => {\r\n      const result = ensureHealthShape({});\r\n      \r\n      expect(result.performance.cache_hit_rate).toBe(0);\r\n      expect(result.services.api).toBe('unknown');\r\n      expect(result.uptime_seconds).toBe(0);\r\n    });\r\n\r\n    it('should preserve valid existing data', () => {\r\n      const input = {\r\n        status: 'healthy',\r\n        performance: { cache_hit_rate: 85.5 },\r\n        services: { api: 'healthy', cache: 'healthy', database: 'healthy' },\r\n        uptime_seconds: 3600\r\n      };\r\n      \r\n      const result = ensureHealthShape(input);\r\n      \r\n      expect(result.status).toBe('healthy');\r\n      expect(result.performance.cache_hit_rate).toBe(85.5);\r\n      expect(result.services.api).toBe('healthy');\r\n      expect(result.uptime_seconds).toBe(3600);\r\n    });\r\n  });\r\n\r\n  describe('Field mapping (hit_rate â†’ cache_hit_rate)', () => {\r\n    it('should map hit_rate to cache_hit_rate', () => {\r\n      const input = {\r\n        performance: { hit_rate: 72.3 }\r\n      };\r\n      \r\n      const result = ensureHealthShape(input);\r\n      \r\n      expect(result.performance.cache_hit_rate).toBe(72.3);\r\n      expect((result.performance as any).hit_rate).toBeUndefined();\r\n    });\r\n\r\n    it('should prefer cache_hit_rate over hit_rate when both exist', () => {\r\n      const input = {\r\n        performance: { \r\n          hit_rate: 50.0,\r\n          cache_hit_rate: 75.0 \r\n        }\r\n      };\r\n      \r\n      const result = ensureHealthShape(input);\r\n      \r\n      expect(result.performance.cache_hit_rate).toBe(75.0);\r\n    });\r\n\r\n    it('should map infrastructure.cache.hit_rate_percent to cache_hit_rate', () => {\r\n      const input = {\r\n        infrastructure: {\r\n          cache: { hit_rate_percent: 88.7 }\r\n        }\r\n      };\r\n\r\n      const result = ensureHealthShape(input);\r\n      expect(result.performance.cache_hit_rate).toBe(88.7);\r\n      expect(result.originFlags?.mappedHitRate).toBe(true);\r\n    });\r\n\r\n    it('should prefer performance.cache_hit_rate over infrastructure structure', () => {\r\n      const input = {\r\n        performance: { cache_hit_rate: 95.3 },\r\n        infrastructure: {\r\n          cache: { hit_rate_percent: 88.7 }\r\n        }\r\n      };\r\n\r\n      const result = ensureHealthShape(input);\r\n      expect(result.performance.cache_hit_rate).toBe(95.3);\r\n      expect(result.originFlags?.mappedHitRate).toBe(false);\r\n    });\r\n\r\n    it('should log field mapping in development', () => {\r\n      const originalEnv = process.env.NODE_ENV;\r\n      process.env.NODE_ENV = 'development';\r\n      \r\n      const input = {\r\n        performance: { hit_rate: 80.0 }\r\n      };\r\n      \r\n      ensureHealthShape(input);\r\n      \r\n      expect(consoleLogSpy).toHaveBeenCalledWith(\r\n        '[DEPRECATED] ensureHealthShape is deprecated.'\r\n      );\r\n      \r\n      process.env.NODE_ENV = originalEnv;\r\n    });\r\n  });\r\n\r\n  describe('Type coercion', () => {\r\n    it('should coerce string numbers to numeric values', () => {\r\n      const input = {\r\n        performance: { cache_hit_rate: '85.5' },\r\n        uptime_seconds: '3600'\r\n      };\r\n      \r\n      const result = ensureHealthShape(input);\r\n      \r\n      expect(result.performance.cache_hit_rate).toBe(85.5);\r\n      expect(result.uptime_seconds).toBe(3600);\r\n    });\r\n\r\n    it('should handle invalid numeric strings gracefully', () => {\r\n      const input = {\r\n        performance: { cache_hit_rate: 'invalid' },\r\n        uptime_seconds: 'not-a-number'\r\n      };\r\n      \r\n      const result = ensureHealthShape(input);\r\n      \r\n      expect(result.performance.cache_hit_rate).toBe(0);\r\n      expect(result.uptime_seconds).toBe(0);\r\n    });\r\n\r\n    it('should handle boolean values as numbers', () => {\r\n      const input = {\r\n        performance: { cache_hit_rate: true },\r\n        uptime_seconds: false\r\n      };\r\n      \r\n      const result = ensureHealthShape(input);\r\n      \r\n      expect(result.performance.cache_hit_rate).toBe(1);\r\n      expect(result.uptime_seconds).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('Nested object handling', () => {\r\n    it('should handle missing services object', () => {\r\n      const input = { status: 'healthy' };\r\n      \r\n      const result = ensureHealthShape(input);\r\n      \r\n      expect(result.services).toEqual({\r\n        api: 'unknown',\r\n        cache: 'unknown', \r\n        database: 'unknown'\r\n      });\r\n    });\r\n\r\n    it('should handle partial services object', () => {\r\n      const input = {\r\n        services: { api: 'healthy' }\r\n      };\r\n      \r\n      const result = ensureHealthShape(input);\r\n      \r\n      expect(result.services).toEqual({\r\n        api: 'healthy',\r\n        cache: 'unknown',\r\n        database: 'unknown'\r\n      });\r\n    });\r\n\r\n    it('should handle missing performance object', () => {\r\n      const input = { status: 'healthy' };\r\n      \r\n      const result = ensureHealthShape(input);\r\n      \r\n      expect(result.performance).toEqual({\r\n        cache_hit_rate: 0,\r\n        cache_type: 'unknown'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Status normalization', () => {\r\n    it('should normalize boolean status values', () => {\r\n      const result1 = ensureHealthShape({ status: true });\r\n      const result2 = ensureHealthShape({ status: false });\r\n      \r\n      expect(result1.status).toBe('healthy');\r\n      expect(result2.status).toBe('unhealthy');\r\n    });\r\n\r\n    it('should handle numeric status values', () => {\r\n      const result1 = ensureHealthShape({ status: 1 });\r\n      const result2 = ensureHealthShape({ status: 0 });\r\n      \r\n      expect(result1.status).toBe('healthy');\r\n      expect(result2.status).toBe('unhealthy');\r\n    });\r\n\r\n    it('should preserve valid string status', () => {\r\n      const validStatuses = ['healthy', 'unhealthy', 'degraded', 'unknown'];\r\n      \r\n      validStatuses.forEach(status => {\r\n        const result = ensureHealthShape({ status });\r\n        expect(result.status).toBe(status);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Real-world scenarios', () => {\r\n    it('should handle API response with mixed types', () => {\r\n      const apiResponse = {\r\n        status: 'healthy',\r\n        services: {\r\n          api: true,\r\n          cache: 'degraded',\r\n          database: 1\r\n        },\r\n        performance: {\r\n          hit_rate: '92.5',\r\n          cache_type: null\r\n        },\r\n        uptime_seconds: '86400'\r\n      };\r\n      \r\n      const result = ensureHealthShape(apiResponse);\r\n      \r\n      expect(result.status).toBe('healthy');\r\n      expect(result.services.api).toBe('healthy');\r\n      expect(result.services.cache).toBe('degraded');\r\n      expect(result.services.database).toBe('healthy');\r\n      expect(result.performance.cache_hit_rate).toBe(92.5);\r\n      expect(result.performance.cache_type).toBe('unknown');\r\n      expect(result.uptime_seconds).toBe(86400);\r\n    });\r\n\r\n    it('should handle completely malformed input', () => {\r\n      const malformedInputs = [\r\n        'not an object',\r\n        123,\r\n        true,\r\n        [],\r\n        { completely: { wrong: { structure: true } } }\r\n      ];\r\n      \r\n      malformedInputs.forEach(input => {\r\n        const result = ensureHealthShape(input);\r\n        \r\n        expect(result.status).toBe('unknown');\r\n        expect(result.performance.cache_hit_rate).toBe(0);\r\n        expect(result.services.api).toBe('unknown');\r\n        expect(result.uptime_seconds).toBe(0);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Type safety validation', () => {\r\n    it('should return proper TypeScript types', () => {\r\n      const result = ensureHealthShape({});\r\n      \r\n      // TypeScript compilation validates these types\r\n      const status: string = result.status;\r\n      const cacheHitRate: number = result.performance.cache_hit_rate;\r\n      const apiStatus: string = result.services.api;\r\n      const uptime: number = result.uptime_seconds;\r\n      \r\n      expect(typeof status).toBe('string');\r\n      expect(typeof cacheHitRate).toBe('number');\r\n      expect(typeof apiStatus).toBe('string');\r\n      expect(typeof uptime).toBe('number');\r\n    });\r\n\r\n    it('should satisfy SystemHealth interface completely', () => {\r\n      const result = ensureHealthShape({});\r\n      \r\n      // Validate interface compliance\r\n      const systemHealth: SystemHealth = result;\r\n      \r\n      expect(systemHealth).toBeDefined();\r\n      expect(systemHealth.status).toBeDefined();\r\n      expect(systemHealth.services.api).toBeDefined();\r\n      expect(systemHealth.services.cache).toBeDefined();\r\n      expect(systemHealth.services.database).toBeDefined();\r\n      expect(systemHealth.performance.cache_hit_rate).toBeDefined();\r\n      expect(systemHealth.performance.cache_type).toBeDefined();\r\n      expect(systemHealth.uptime_seconds).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('Performance edge cases', () => {\r\n    it('should handle very large numbers', () => {\r\n      const input = {\r\n        performance: { cache_hit_rate: Number.MAX_SAFE_INTEGER },\r\n        uptime_seconds: Number.MAX_SAFE_INTEGER\r\n      };\r\n      \r\n      const result = ensureHealthShape(input);\r\n      \r\n      expect(result.performance.cache_hit_rate).toBe(Number.MAX_SAFE_INTEGER);\r\n      expect(result.uptime_seconds).toBe(Number.MAX_SAFE_INTEGER);\r\n    });\r\n\r\n    it('should handle negative numbers', () => {\r\n      const input = {\r\n        performance: { cache_hit_rate: -50 },\r\n        uptime_seconds: -1000\r\n      };\r\n      \r\n      const result = ensureHealthShape(input);\r\n      \r\n      expect(result.performance.cache_hit_rate).toBe(-50);\r\n      expect(result.uptime_seconds).toBe(-1000);\r\n    });\r\n\r\n    it('should handle Infinity and NaN', () => {\r\n      const input = {\r\n        performance: { cache_hit_rate: Infinity },\r\n        uptime_seconds: NaN\r\n      };\r\n      \r\n      const result = ensureHealthShape(input);\r\n      \r\n      expect(result.performance.cache_hit_rate).toBe(0); // NaN check converts Infinity to 0\r\n      expect(result.uptime_seconds).toBe(0); // NaN check converts NaN to 0\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}