{"version":3,"names":["_validateHealthResponse","require","_oneTimeLog","isRecord","x","mapStatus","s","toSafeNumber","v","n","Number","isFinite","ensureHealthShape","raw","options","oneTimeLog","console","info","validated","validateHealthResponse","vRec","perf","performance","undefined","cache","infra","infrastructure","perfHitMain","cache_hit_rate","perfHitLegacy","hit_rate","cacheHitAlt","infraHit","hit_rate_percent","computedRaw","computedHitRate","rawMappedHitRate","rawRec","rPerf","rCache","rInfraCache","hasPerfCache","hasPerfHit","hasCacheHit","hasInfraHit","overallStatus","overall_status","servicesList","services","findServiceStatus","name","Array","isArray","arr","found","find","status","api","database","cache_type","uptime_seconds","originFlags","hadCacheHitRate","mappedHitRate","usedMock","error","warn","rawObj","mapLegacyStatus","val","String","toLowerCase","servicesRaw","servicesRec","servicesOut","perfRec","infraRec","infraCacheRec","hitRate","cacheHit"],"sources":["ensureHealthShape.ts"],"sourcesContent":["/**\r\n * Clean, single implementation of ensureHealthShape.\r\n * Normalizes health responses and avoids direct property access on unknown.\r\n */\r\nimport { validateHealthResponse } from './validateHealthResponse';\r\nimport { oneTimeLog } from './oneTimeLog';\r\n\r\nexport interface SystemHealth {\r\n  status: string;\r\n  services: {\r\n    api: string;\r\n    cache: string;\r\n    database: string;\r\n  };\r\n  performance: {\r\n    cache_hit_rate: number;\r\n    cache_type: string;\r\n  };\r\n  uptime_seconds: number;\r\n  originFlags?: {\r\n    hadCacheHitRate?: boolean;\r\n    mappedHitRate?: boolean;\r\n    usedMock?: boolean;\r\n  };\r\n}\r\n\r\nconst isRecord = (x: unknown): x is Record<string, unknown> => typeof x === 'object' && x !== null;\r\n\r\nconst mapStatus = (s: unknown) => {\r\n  if (s === 'ok' || s === 'healthy') return 'healthy';\r\n  if (s === 'degraded') return 'degraded';\r\n  if (s === 'down' || s === 'unhealthy' || s === 'error') return 'unhealthy';\r\n  return 'unknown';\r\n};\r\n\r\nconst toSafeNumber = (v: unknown): number => {\r\n  if (typeof v === 'boolean') return v ? 1 : 0;\r\n  const n = Number(v);\r\n  if (!Number.isFinite(n)) return 0;\r\n  return n;\r\n};\r\n\r\nexport function ensureHealthShape(raw: unknown, options?: { usedMock?: boolean }): SystemHealth {\r\n  oneTimeLog('ensureHealthShape-deprecated', () => console.info('[DEPRECATED] ensureHealthShape is deprecated.'));\r\n\r\n  try {\r\n    const validated = validateHealthResponse(raw);\r\n    const vRec: Record<string, unknown> = isRecord(validated) ? validated as Record<string, unknown> : {};\r\n\r\n    const perf = isRecord(vRec.performance) ? (vRec.performance as Record<string, unknown>) : undefined;\r\n    const cache = isRecord(vRec.cache) ? (vRec.cache as Record<string, unknown>) : undefined;\r\n    const infra = isRecord(vRec.infrastructure) ? (vRec.infrastructure as Record<string, unknown>) : undefined;\r\n\r\n    const perfHitMain = perf ? perf.cache_hit_rate : undefined;\r\n    const perfHitLegacy = perf ? perf.hit_rate : undefined;\r\n    const cacheHitAlt = cache ? cache.hit_rate : undefined;\r\n    const infraHit = infra && isRecord(infra.cache) ? ((infra.cache as Record<string, unknown>).hit_rate_percent) : undefined;\r\n\r\n    const computedRaw = (\r\n      perfHitMain ?? perfHitLegacy ?? cacheHitAlt ?? infraHit ?? 0\r\n    );\r\n\r\n    const computedHitRate = toSafeNumber(computedRaw);\r\n\r\n    // mappedHitRate heuristics using original raw when possible\r\n    let rawMappedHitRate = false;\r\n    try {\r\n      if (isRecord(raw)) {\r\n        const rawRec = raw as Record<string, unknown>;\r\n        const rPerf = isRecord(rawRec.performance) ? rawRec.performance as Record<string, unknown> : undefined;\r\n        const rCache = isRecord(rawRec.cache) ? rawRec.cache as Record<string, unknown> : undefined;\r\n        const rInfraCache = isRecord(rawRec.infrastructure) && isRecord((rawRec.infrastructure as Record<string, unknown>).cache)\r\n          ? ((rawRec.infrastructure as Record<string, unknown>).cache as Record<string, unknown>)\r\n          : undefined;\r\n\r\n        const hasPerfCache = !!(rPerf && rPerf.cache_hit_rate !== undefined);\r\n        const hasPerfHit = !!(rPerf && rPerf.hit_rate !== undefined);\r\n        const hasCacheHit = !!(rCache && rCache.hit_rate !== undefined);\r\n        const hasInfraHit = !!(rInfraCache && rInfraCache.hit_rate_percent !== undefined);\r\n\r\n        rawMappedHitRate = !hasPerfCache && (hasPerfHit || hasCacheHit || hasInfraHit);\r\n      }\r\n    } catch {\r\n      // ignore\r\n    }\r\n\r\n    const overallStatus = vRec.overall_status as unknown;\r\n    const servicesList = vRec.services as unknown;\r\n    const findServiceStatus = (name: string): unknown => {\r\n      if (Array.isArray(servicesList)) {\r\n        const arr = servicesList as Array<Record<string, unknown>>;\r\n        const found = arr.find((s) => s && typeof s === 'object' && 'name' in s && (s as Record<string, unknown>).name === name);\r\n        return found ? (found as Record<string, unknown>).status : undefined;\r\n      }\r\n      return undefined;\r\n    };\r\n\r\n    return {\r\n      status: mapStatus(overallStatus),\r\n      services: {\r\n        api: mapStatus(findServiceStatus('api')) || 'unknown',\r\n        cache: mapStatus(infra && isRecord(infra.cache) ? (infra.cache as Record<string, unknown>).status : undefined) || 'unknown',\r\n        database: mapStatus(infra && isRecord(infra.database) ? (infra.database as Record<string, unknown>).status : undefined) || 'unknown',\r\n      },\r\n      performance: {\r\n        cache_hit_rate: computedHitRate,\r\n        cache_type: isRecord(vRec.cache) ? 'unified' : 'unknown',\r\n      },\r\n      uptime_seconds: toSafeNumber(vRec.uptime_seconds),\r\n      originFlags: {\r\n        hadCacheHitRate: !!(perfHitMain !== undefined && perfHitMain !== null) || !!(perfHitLegacy !== undefined && perfHitLegacy !== null) || !!(cacheHitAlt !== undefined && cacheHitAlt !== null) || !!(infraHit !== undefined && infraHit !== null),\r\n        mappedHitRate: rawMappedHitRate,\r\n        usedMock: options?.usedMock || false,\r\n      },\r\n    };\r\n  } catch (error) {\r\n    // Fallback: tolerant parsing for legacy shapes\r\n    oneTimeLog('ensureHealthShape-fallback', () => console.warn('[ensureHealthShape] Validation failed, using fallback data:', error));\r\n\r\n    if (raw && typeof raw === 'object') {\r\n      const rawObj = raw as Record<string, unknown>;\r\n      const mapLegacyStatus = (val: unknown) => {\r\n        if (val === true || val === 1 || String(val).toLowerCase() === '1' || String(val).toLowerCase() === 'true') return 'healthy';\r\n        if (val === false || val === 0 || String(val).toLowerCase() === '0' || String(val).toLowerCase() === 'false') return 'unhealthy';\r\n        if (typeof val === 'string') {\r\n          const s = val.toLowerCase();\r\n          if (s === 'healthy' || s === 'ok') return 'healthy';\r\n          if (s === 'unhealthy' || s === 'down' || s === 'error') return 'unhealthy';\r\n          if (s === 'degraded' || s === 'warning') return 'degraded';\r\n          return s;\r\n        }\r\n        return 'unknown';\r\n      };\r\n\r\n      const status = rawObj.status !== undefined ? mapLegacyStatus(rawObj.status) : 'unknown';\r\n      const servicesRaw: unknown = rawObj.services ?? {};\r\n      const servicesRec: Record<string, unknown> = isRecord(servicesRaw) ? servicesRaw as Record<string, unknown> : {} as Record<string, unknown>;\r\n      const servicesOut = {\r\n        api: servicesRec['api'] !== undefined ? mapLegacyStatus(servicesRec['api']) : 'unknown',\r\n        cache: servicesRec['cache'] !== undefined ? mapLegacyStatus(servicesRec['cache']) : 'unknown',\r\n        database: servicesRec['database'] !== undefined ? mapLegacyStatus(servicesRec['database']) : 'unknown',\r\n      };\r\n\r\n      const perfRec = isRecord(rawObj.performance) ? (rawObj.performance as Record<string, unknown>) : undefined;\r\n      const infraRec = isRecord(rawObj.infrastructure) ? (rawObj.infrastructure as Record<string, unknown>) : undefined;\r\n      const infraCacheRec = infraRec && isRecord(infraRec.cache) ? (infraRec.cache as Record<string, unknown>) : undefined;\r\n\r\n      let hitRate: unknown = undefined;\r\n      if (perfRec && perfRec.cache_hit_rate !== undefined) hitRate = perfRec.cache_hit_rate;\r\n      else if (perfRec && perfRec.hit_rate !== undefined) hitRate = perfRec.hit_rate;\r\n      else if (infraCacheRec && infraCacheRec.hit_rate_percent !== undefined) hitRate = infraCacheRec.hit_rate_percent;\r\n\r\n      const cacheHit = ((): number => {\r\n        if (typeof hitRate === 'boolean') return hitRate ? 1 : 0;\r\n        const n = Number(hitRate);\r\n        if (!Number.isFinite(n)) return 0;\r\n        return n;\r\n      })();\r\n\r\n      return {\r\n        status,\r\n        services: servicesOut,\r\n        performance: {\r\n          cache_hit_rate: cacheHit,\r\n          cache_type: rawObj.cache ? 'unified' : 'unknown',\r\n        },\r\n        uptime_seconds: ((): number => { const n = Number((rawObj.uptime_seconds as unknown) || 0); return Number.isFinite(n) ? n : 0; })(),\r\n        originFlags: {\r\n          hadCacheHitRate: !!hitRate,\r\n          mappedHitRate: !!(perfRec && perfRec.hit_rate !== undefined) || (!!(infraCacheRec && infraCacheRec.hit_rate_percent !== undefined) && !(perfRec && perfRec.cache_hit_rate !== undefined)),\r\n          usedMock: options?.usedMock || true,\r\n        },\r\n      };\r\n    }\r\n\r\n    return {\r\n      status: 'unknown',\r\n      services: { api: 'unknown', cache: 'unknown', database: 'unknown' },\r\n      performance: { cache_hit_rate: 0, cache_type: 'unknown' },\r\n      uptime_seconds: 0,\r\n      originFlags: { hadCacheHitRate: false, mappedHitRate: false, usedMock: options?.usedMock || true },\r\n    };\r\n  }\r\n}\r\n// Trimmed: keep only the single clean implementation above."],"mappings":";;;;;;AAIA,IAAAA,uBAAA,GAAAC,OAAA;AACA,IAAAC,WAAA,GAAAD,OAAA;AALA;AACA;AACA;AACA;;AAuBA,MAAME,QAAQ,GAAIC,CAAU,IAAmC,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,KAAK,IAAI;AAElG,MAAMC,SAAS,GAAIC,CAAU,IAAK;EAChC,IAAIA,CAAC,KAAK,IAAI,IAAIA,CAAC,KAAK,SAAS,EAAE,OAAO,SAAS;EACnD,IAAIA,CAAC,KAAK,UAAU,EAAE,OAAO,UAAU;EACvC,IAAIA,CAAC,KAAK,MAAM,IAAIA,CAAC,KAAK,WAAW,IAAIA,CAAC,KAAK,OAAO,EAAE,OAAO,WAAW;EAC1E,OAAO,SAAS;AAClB,CAAC;AAED,MAAMC,YAAY,GAAIC,CAAU,IAAa;EAC3C,IAAI,OAAOA,CAAC,KAAK,SAAS,EAAE,OAAOA,CAAC,GAAG,CAAC,GAAG,CAAC;EAC5C,MAAMC,CAAC,GAAGC,MAAM,CAACF,CAAC,CAAC;EACnB,IAAI,CAACE,MAAM,CAACC,QAAQ,CAACF,CAAC,CAAC,EAAE,OAAO,CAAC;EACjC,OAAOA,CAAC;AACV,CAAC;AAEM,SAASG,iBAAiBA,CAACC,GAAY,EAAEC,OAAgC,EAAgB;EAC9F,IAAAC,sBAAU,EAAC,8BAA8B,EAAE,MAAMC,OAAO,CAACC,IAAI,CAAC,+CAA+C,CAAC,CAAC;EAE/G,IAAI;IACF,MAAMC,SAAS,GAAG,IAAAC,8CAAsB,EAACN,GAAG,CAAC;IAC7C,MAAMO,IAA6B,GAAGjB,QAAQ,CAACe,SAAS,CAAC,GAAGA,SAAS,GAA8B,CAAC,CAAC;IAErG,MAAMG,IAAI,GAAGlB,QAAQ,CAACiB,IAAI,CAACE,WAAW,CAAC,GAAIF,IAAI,CAACE,WAAW,GAA+BC,SAAS;IACnG,MAAMC,KAAK,GAAGrB,QAAQ,CAACiB,IAAI,CAACI,KAAK,CAAC,GAAIJ,IAAI,CAACI,KAAK,GAA+BD,SAAS;IACxF,MAAME,KAAK,GAAGtB,QAAQ,CAACiB,IAAI,CAACM,cAAc,CAAC,GAAIN,IAAI,CAACM,cAAc,GAA+BH,SAAS;IAE1G,MAAMI,WAAW,GAAGN,IAAI,GAAGA,IAAI,CAACO,cAAc,GAAGL,SAAS;IAC1D,MAAMM,aAAa,GAAGR,IAAI,GAAGA,IAAI,CAACS,QAAQ,GAAGP,SAAS;IACtD,MAAMQ,WAAW,GAAGP,KAAK,GAAGA,KAAK,CAACM,QAAQ,GAAGP,SAAS;IACtD,MAAMS,QAAQ,GAAGP,KAAK,IAAItB,QAAQ,CAACsB,KAAK,CAACD,KAAK,CAAC,GAAKC,KAAK,CAACD,KAAK,CAA6BS,gBAAgB,GAAIV,SAAS;IAEzH,MAAMW,WAAW,GACfP,WAAW,IAAIE,aAAa,IAAIE,WAAW,IAAIC,QAAQ,IAAI,CAC5D;IAED,MAAMG,eAAe,GAAG5B,YAAY,CAAC2B,WAAW,CAAC;;IAEjD;IACA,IAAIE,gBAAgB,GAAG,KAAK;IAC5B,IAAI;MACF,IAAIjC,QAAQ,CAACU,GAAG,CAAC,EAAE;QACjB,MAAMwB,MAAM,GAAGxB,GAA8B;QAC7C,MAAMyB,KAAK,GAAGnC,QAAQ,CAACkC,MAAM,CAACf,WAAW,CAAC,GAAGe,MAAM,CAACf,WAAW,GAA8BC,SAAS;QACtG,MAAMgB,MAAM,GAAGpC,QAAQ,CAACkC,MAAM,CAACb,KAAK,CAAC,GAAGa,MAAM,CAACb,KAAK,GAA8BD,SAAS;QAC3F,MAAMiB,WAAW,GAAGrC,QAAQ,CAACkC,MAAM,CAACX,cAAc,CAAC,IAAIvB,QAAQ,CAAEkC,MAAM,CAACX,cAAc,CAA6BF,KAAK,CAAC,GACnHa,MAAM,CAACX,cAAc,CAA6BF,KAAK,GACzDD,SAAS;QAEb,MAAMkB,YAAY,GAAG,CAAC,EAAEH,KAAK,IAAIA,KAAK,CAACV,cAAc,KAAKL,SAAS,CAAC;QACpE,MAAMmB,UAAU,GAAG,CAAC,EAAEJ,KAAK,IAAIA,KAAK,CAACR,QAAQ,KAAKP,SAAS,CAAC;QAC5D,MAAMoB,WAAW,GAAG,CAAC,EAAEJ,MAAM,IAAIA,MAAM,CAACT,QAAQ,KAAKP,SAAS,CAAC;QAC/D,MAAMqB,WAAW,GAAG,CAAC,EAAEJ,WAAW,IAAIA,WAAW,CAACP,gBAAgB,KAAKV,SAAS,CAAC;QAEjFa,gBAAgB,GAAG,CAACK,YAAY,KAAKC,UAAU,IAAIC,WAAW,IAAIC,WAAW,CAAC;MAChF;IACF,CAAC,CAAC,MAAM;MACN;IAAA;IAGF,MAAMC,aAAa,GAAGzB,IAAI,CAAC0B,cAAyB;IACpD,MAAMC,YAAY,GAAG3B,IAAI,CAAC4B,QAAmB;IAC7C,MAAMC,iBAAiB,GAAIC,IAAY,IAAc;MACnD,IAAIC,KAAK,CAACC,OAAO,CAACL,YAAY,CAAC,EAAE;QAC/B,MAAMM,GAAG,GAAGN,YAA8C;QAC1D,MAAMO,KAAK,GAAGD,GAAG,CAACE,IAAI,CAAEjD,CAAC,IAAKA,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,IAAI,MAAM,IAAIA,CAAC,IAAKA,CAAC,CAA6B4C,IAAI,KAAKA,IAAI,CAAC;QACxH,OAAOI,KAAK,GAAIA,KAAK,CAA6BE,MAAM,GAAGjC,SAAS;MACtE;MACA,OAAOA,SAAS;IAClB,CAAC;IAED,OAAO;MACLiC,MAAM,EAAEnD,SAAS,CAACwC,aAAa,CAAC;MAChCG,QAAQ,EAAE;QACRS,GAAG,EAAEpD,SAAS,CAAC4C,iBAAiB,CAAC,KAAK,CAAC,CAAC,IAAI,SAAS;QACrDzB,KAAK,EAAEnB,SAAS,CAACoB,KAAK,IAAItB,QAAQ,CAACsB,KAAK,CAACD,KAAK,CAAC,GAAIC,KAAK,CAACD,KAAK,CAA6BgC,MAAM,GAAGjC,SAAS,CAAC,IAAI,SAAS;QAC3HmC,QAAQ,EAAErD,SAAS,CAACoB,KAAK,IAAItB,QAAQ,CAACsB,KAAK,CAACiC,QAAQ,CAAC,GAAIjC,KAAK,CAACiC,QAAQ,CAA6BF,MAAM,GAAGjC,SAAS,CAAC,IAAI;MAC7H,CAAC;MACDD,WAAW,EAAE;QACXM,cAAc,EAAEO,eAAe;QAC/BwB,UAAU,EAAExD,QAAQ,CAACiB,IAAI,CAACI,KAAK,CAAC,GAAG,SAAS,GAAG;MACjD,CAAC;MACDoC,cAAc,EAAErD,YAAY,CAACa,IAAI,CAACwC,cAAc,CAAC;MACjDC,WAAW,EAAE;QACXC,eAAe,EAAE,CAAC,EAAEnC,WAAW,KAAKJ,SAAS,IAAII,WAAW,KAAK,IAAI,CAAC,IAAI,CAAC,EAAEE,aAAa,KAAKN,SAAS,IAAIM,aAAa,KAAK,IAAI,CAAC,IAAI,CAAC,EAAEE,WAAW,KAAKR,SAAS,IAAIQ,WAAW,KAAK,IAAI,CAAC,IAAI,CAAC,EAAEC,QAAQ,KAAKT,SAAS,IAAIS,QAAQ,KAAK,IAAI,CAAC;QAC/O+B,aAAa,EAAE3B,gBAAgB;QAC/B4B,QAAQ,EAAElD,OAAO,EAAEkD,QAAQ,IAAI;MACjC;IACF,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,IAAAlD,sBAAU,EAAC,4BAA4B,EAAE,MAAMC,OAAO,CAACkD,IAAI,CAAC,6DAA6D,EAAED,KAAK,CAAC,CAAC;IAElI,IAAIpD,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;MAClC,MAAMsD,MAAM,GAAGtD,GAA8B;MAC7C,MAAMuD,eAAe,GAAIC,GAAY,IAAK;QACxC,IAAIA,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,CAAC,IAAIC,MAAM,CAACD,GAAG,CAAC,CAACE,WAAW,CAAC,CAAC,KAAK,GAAG,IAAID,MAAM,CAACD,GAAG,CAAC,CAACE,WAAW,CAAC,CAAC,KAAK,MAAM,EAAE,OAAO,SAAS;QAC5H,IAAIF,GAAG,KAAK,KAAK,IAAIA,GAAG,KAAK,CAAC,IAAIC,MAAM,CAACD,GAAG,CAAC,CAACE,WAAW,CAAC,CAAC,KAAK,GAAG,IAAID,MAAM,CAACD,GAAG,CAAC,CAACE,WAAW,CAAC,CAAC,KAAK,OAAO,EAAE,OAAO,WAAW;QAChI,IAAI,OAAOF,GAAG,KAAK,QAAQ,EAAE;UAC3B,MAAM/D,CAAC,GAAG+D,GAAG,CAACE,WAAW,CAAC,CAAC;UAC3B,IAAIjE,CAAC,KAAK,SAAS,IAAIA,CAAC,KAAK,IAAI,EAAE,OAAO,SAAS;UACnD,IAAIA,CAAC,KAAK,WAAW,IAAIA,CAAC,KAAK,MAAM,IAAIA,CAAC,KAAK,OAAO,EAAE,OAAO,WAAW;UAC1E,IAAIA,CAAC,KAAK,UAAU,IAAIA,CAAC,KAAK,SAAS,EAAE,OAAO,UAAU;UAC1D,OAAOA,CAAC;QACV;QACA,OAAO,SAAS;MAClB,CAAC;MAED,MAAMkD,MAAM,GAAGW,MAAM,CAACX,MAAM,KAAKjC,SAAS,GAAG6C,eAAe,CAACD,MAAM,CAACX,MAAM,CAAC,GAAG,SAAS;MACvF,MAAMgB,WAAoB,GAAGL,MAAM,CAACnB,QAAQ,IAAI,CAAC,CAAC;MAClD,MAAMyB,WAAoC,GAAGtE,QAAQ,CAACqE,WAAW,CAAC,GAAGA,WAAW,GAA8B,CAAC,CAA4B;MAC3I,MAAME,WAAW,GAAG;QAClBjB,GAAG,EAAEgB,WAAW,CAAC,KAAK,CAAC,KAAKlD,SAAS,GAAG6C,eAAe,CAACK,WAAW,CAAC,KAAK,CAAC,CAAC,GAAG,SAAS;QACvFjD,KAAK,EAAEiD,WAAW,CAAC,OAAO,CAAC,KAAKlD,SAAS,GAAG6C,eAAe,CAACK,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,SAAS;QAC7Ff,QAAQ,EAAEe,WAAW,CAAC,UAAU,CAAC,KAAKlD,SAAS,GAAG6C,eAAe,CAACK,WAAW,CAAC,UAAU,CAAC,CAAC,GAAG;MAC/F,CAAC;MAED,MAAME,OAAO,GAAGxE,QAAQ,CAACgE,MAAM,CAAC7C,WAAW,CAAC,GAAI6C,MAAM,CAAC7C,WAAW,GAA+BC,SAAS;MAC1G,MAAMqD,QAAQ,GAAGzE,QAAQ,CAACgE,MAAM,CAACzC,cAAc,CAAC,GAAIyC,MAAM,CAACzC,cAAc,GAA+BH,SAAS;MACjH,MAAMsD,aAAa,GAAGD,QAAQ,IAAIzE,QAAQ,CAACyE,QAAQ,CAACpD,KAAK,CAAC,GAAIoD,QAAQ,CAACpD,KAAK,GAA+BD,SAAS;MAEpH,IAAIuD,OAAgB,GAAGvD,SAAS;MAChC,IAAIoD,OAAO,IAAIA,OAAO,CAAC/C,cAAc,KAAKL,SAAS,EAAEuD,OAAO,GAAGH,OAAO,CAAC/C,cAAc,CAAC,KACjF,IAAI+C,OAAO,IAAIA,OAAO,CAAC7C,QAAQ,KAAKP,SAAS,EAAEuD,OAAO,GAAGH,OAAO,CAAC7C,QAAQ,CAAC,KAC1E,IAAI+C,aAAa,IAAIA,aAAa,CAAC5C,gBAAgB,KAAKV,SAAS,EAAEuD,OAAO,GAAGD,aAAa,CAAC5C,gBAAgB;MAEhH,MAAM8C,QAAQ,GAAG,CAAC,MAAc;QAC9B,IAAI,OAAOD,OAAO,KAAK,SAAS,EAAE,OAAOA,OAAO,GAAG,CAAC,GAAG,CAAC;QACxD,MAAMrE,CAAC,GAAGC,MAAM,CAACoE,OAAO,CAAC;QACzB,IAAI,CAACpE,MAAM,CAACC,QAAQ,CAACF,CAAC,CAAC,EAAE,OAAO,CAAC;QACjC,OAAOA,CAAC;MACV,CAAC,EAAE,CAAC;MAEJ,OAAO;QACL+C,MAAM;QACNR,QAAQ,EAAE0B,WAAW;QACrBpD,WAAW,EAAE;UACXM,cAAc,EAAEmD,QAAQ;UACxBpB,UAAU,EAAEQ,MAAM,CAAC3C,KAAK,GAAG,SAAS,GAAG;QACzC,CAAC;QACDoC,cAAc,EAAE,CAAC,MAAc;UAAE,MAAMnD,CAAC,GAAGC,MAAM,CAAEyD,MAAM,CAACP,cAAc,IAAgB,CAAC,CAAC;UAAE,OAAOlD,MAAM,CAACC,QAAQ,CAACF,CAAC,CAAC,GAAGA,CAAC,GAAG,CAAC;QAAE,CAAC,EAAE,CAAC;QACnIoD,WAAW,EAAE;UACXC,eAAe,EAAE,CAAC,CAACgB,OAAO;UAC1Bf,aAAa,EAAE,CAAC,EAAEY,OAAO,IAAIA,OAAO,CAAC7C,QAAQ,KAAKP,SAAS,CAAC,IAAK,CAAC,EAAEsD,aAAa,IAAIA,aAAa,CAAC5C,gBAAgB,KAAKV,SAAS,CAAC,IAAI,EAAEoD,OAAO,IAAIA,OAAO,CAAC/C,cAAc,KAAKL,SAAS,CAAE;UACzLyC,QAAQ,EAAElD,OAAO,EAAEkD,QAAQ,IAAI;QACjC;MACF,CAAC;IACH;IAEA,OAAO;MACLR,MAAM,EAAE,SAAS;MACjBR,QAAQ,EAAE;QAAES,GAAG,EAAE,SAAS;QAAEjC,KAAK,EAAE,SAAS;QAAEkC,QAAQ,EAAE;MAAU,CAAC;MACnEpC,WAAW,EAAE;QAAEM,cAAc,EAAE,CAAC;QAAE+B,UAAU,EAAE;MAAU,CAAC;MACzDC,cAAc,EAAE,CAAC;MACjBC,WAAW,EAAE;QAAEC,eAAe,EAAE,KAAK;QAAEC,aAAa,EAAE,KAAK;QAAEC,QAAQ,EAAElD,OAAO,EAAEkD,QAAQ,IAAI;MAAK;IACnG,CAAC;EACH;AACF;AACA","ignoreList":[]}