81001f917c45ae259ef2168ef974dab8
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BackoffStrategy = void 0;
/**
 * Adaptive Backoff Strategy for WebSocket Reconnection
 * 
 * Implements jittered exponential backoff with configurable caps and seed-based
 * deterministic jitter for testing.
 */

class BackoffStrategy {
  constructor(options = {}) {
    this.baseDelays = void 0;
    this.capDelay = void 0;
    this.jitterRatio = void 0;
    this.maxAttempts = void 0;
    this.currentAttempt = 0;
    this.rng = void 0;
    this.baseDelays = options.baseDelaysMs || [1000, 2000, 4000, 8000, 12000];
    this.capDelay = options.capDelayMs !== undefined ? options.capDelayMs : 12000; // default cap per tests
    // If caller provided any options but omitted jitterRatio, default to 0
    const providedAnyOptions = Object.keys(options).length > 0;
    const defaultJitter = providedAnyOptions ? 0 : 0.2;
    this.jitterRatio = Math.max(0, Math.min(1, options.jitterRatio !== undefined ? options.jitterRatio : defaultJitter)); // Clamp 0-1
    this.maxAttempts = options.maxAttempts !== undefined ? options.maxAttempts : 8; // default per tests

    // Initialize RNG (seedable for testing)
    if (options.seed !== undefined) {
      this.rng = this.createSeededRNG(options.seed);
    } else {
      this.rng = Math.random;
    }
  }

  /**
   * Get the next delay value with jitter applied
   * @returns Delay in milliseconds, or null if max attempts exceeded
   */
  nextDelay() {
    if (this.currentAttempt >= this.maxAttempts) {
      return null; // Give up
    }

    // Get base delay for this attempt
    const delayIndex = Math.min(this.currentAttempt, this.baseDelays.length - 1);
    const baseDelay = this.baseDelays[delayIndex];

    // Apply cap
    const cappedDelay = Math.min(baseDelay, this.capDelay);

    // Apply jitter: delay Â± (jitterRatio * delay)
    const jitterAmount = cappedDelay * this.jitterRatio;
    const jitter = (this.rng() - 0.5) * 2 * jitterAmount; // Random between -jitterAmount and +jitterAmount
    const jitteredDelay = Math.max(100, cappedDelay + jitter); // Minimum 100ms to match test expectations

    this.currentAttempt++;
    return Math.round(jitteredDelay);
  }

  /**
   * Reset the backoff strategy (e.g., after successful connection)
   */
  reset() {
    this.currentAttempt = 0;
  }

  /**
   * Get current attempt number (0-based)
   */
  getCurrentAttempt() {
    return this.currentAttempt;
  }

  /**
   * Check if max attempts have been reached
   */
  hasExceededMaxAttempts() {
    return this.currentAttempt >= this.maxAttempts;
  }

  /**
   * Get the next delay without consuming an attempt (preview)
   */
  peekNextDelay() {
    if (this.currentAttempt >= this.maxAttempts) {
      return null;
    }
    const delayIndex = Math.min(this.currentAttempt, this.baseDelays.length - 1);
    const baseDelay = this.baseDelays[delayIndex];
    return Math.min(baseDelay, this.capDelay);
  }

  /**
   * Get configuration summary
   */
  getConfig() {
    return {
      baseDelays: [...this.baseDelays],
      capDelay: this.capDelay,
      jitterRatio: this.jitterRatio,
      maxAttempts: this.maxAttempts,
      currentAttempt: this.currentAttempt
    };
  }

  /**
   * Create a seeded random number generator for deterministic testing
   */
  createSeededRNG(seed) {
    let currentSeed = seed;
    return () => {
      // Simple LCG (Linear Congruential Generator)
      currentSeed = (currentSeed * 1664525 + 1013904223) % Math.pow(2, 32);
      return currentSeed / Math.pow(2, 32);
    };
  }

  /**
   * Static method to calculate jitter bounds for testing
   */
  static calculateJitterBounds(baseDelay, jitterRatio) {
    const jitterAmount = baseDelay * jitterRatio;
    return {
      min: Math.max(100, baseDelay - jitterAmount),
      max: baseDelay + jitterAmount
    };
  }

  /**
   * Create a strategy for immediate retry (testing/development)
   */
  static createImmediateStrategy() {
    return new BackoffStrategy({
      baseDelaysMs: [100, 100, 100],
      capDelayMs: 100,
      jitterRatio: 0,
      maxAttempts: 3
    });
  }

  /**
   * Create a strategy with aggressive reconnection
   */
  static createAggressiveStrategy() {
    return new BackoffStrategy({
      baseDelaysMs: [500, 1000, 2000, 4000],
      capDelayMs: 4000,
      jitterRatio: 0.1,
      maxAttempts: 10
    });
  }

  /**
   * Create the default production strategy with 60s max delay
   */
  static createProductionStrategy() {
    return new BackoffStrategy({
      baseDelaysMs: [1000, 2000, 4000, 8000, 12000],
      capDelayMs: 12000,
      jitterRatio: 0.2,
      maxAttempts: 8
    });
  }
}
exports.BackoffStrategy = BackoffStrategy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,