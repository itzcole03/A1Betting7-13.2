{"version":3,"names":["_react","_interopRequireDefault","require","_react2","robustApi","_interopRequireWildcard","_PerformanceMonitoringDashboard","_jsxRuntime","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","describe","consoleLogSpy","beforeEach","jest","clearAllMocks","spyOn","console","mockImplementation","mockResolvedValue","undefined","afterEach","mockRestore","it","status","services","api","cache","database","performance","cache_type","uptime_seconds","render","jsx","waitFor","expect","fetchHealthData","toHaveBeenCalled","cacheHitRate","screen","getByText","toBeInTheDocument","percentages","getAllByText","length","toBeGreaterThan","content","_node","test","cache_hit_rate","problematicApiResponse","container","hit_rate"],"sources":["PerformanceMonitoringDashboard.test.tsx"],"sourcesContent":["/**\r\n * Component tests for PerformanceMonitoringDashboard\r\n * Focus: Safe cache_hit_rate rendering without runtime errors\r\n */\r\n\r\nimport React from 'react';\r\nimport { render, screen, waitFor } from '@testing-library/react';\r\nimport '@testing-library/jest-dom';\r\nimport * as robustApi from '../../../utils/robustApi';\r\nimport PerformanceMonitoringDashboard from '../PerformanceMonitoringDashboard';\r\n\r\ndescribe('PerformanceMonitoringDashboard - Cache Hit Rate Safety', () => {\r\n  let consoleLogSpy: jest.SpyInstance;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    // Suppress console.log for development diagnostics\r\n    consoleLogSpy = jest.spyOn(console, 'log').mockImplementation(() => {});\r\n    // Default: stub fetchPerformanceStats to resolve to undefined (component handles missing perf)\r\n    jest.spyOn(robustApi, 'fetchPerformanceStats').mockResolvedValue(undefined as any);\r\n  });\r\n\r\n  afterEach(() => {\r\n    consoleLogSpy.mockRestore();\r\n  });\r\n\r\n  describe('Safe cache_hit_rate rendering', () => {\r\n    it('should render 0% when cache_hit_rate is undefined', async () => {\r\n  // Mock API response with missing cache_hit_rate\r\n  jest.spyOn(robustApi, 'fetchHealthData').mockResolvedValue({\r\n        status: 'healthy',\r\n        services: {\r\n          api: 'healthy',\r\n          cache: 'healthy', \r\n          database: 'healthy'\r\n        },\r\n        performance: {\r\n          // cache_hit_rate is missing/undefined\r\n          cache_type: 'redis'\r\n        },\r\n        uptime_seconds: 3600\r\n  } as any);\r\n\r\n      render(<PerformanceMonitoringDashboard />);\r\n\r\n      // Ensure the component invoked the health API mock\r\n      await waitFor(() => expect(robustApi.fetchHealthData).toHaveBeenCalled());\r\n\r\n      await waitFor(() => {\r\n        const cacheHitRate = screen.getByText(/Cache Hit Rate/);\r\n        expect(cacheHitRate).toBeInTheDocument();\r\n\r\n        // Should display 0% instead of crashing (allow multiple matching nodes)\r\n  const percentages = screen.getAllByText('0.0%');\r\n        expect(percentages.length).toBeGreaterThan(0);\r\n      });\r\n    });\r\n\r\n    it('should render 0% when performance object is null', async () => {\r\n  jest.spyOn(robustApi, 'fetchHealthData').mockResolvedValue({\r\n        status: 'healthy',\r\n        services: {\r\n          api: 'healthy',\r\n          cache: 'healthy',\r\n          database: 'healthy'\r\n        },\r\n        performance: null, // Null performance object\r\n        uptime_seconds: 3600\r\n  } as any);\r\n\r\n      render(<PerformanceMonitoringDashboard />);\r\n\r\n      await waitFor(() => {\r\n  const percentages = screen.getAllByText('0.0%');\r\n        expect(percentages.length).toBeGreaterThan(0);\r\n      });\r\n    });\r\n\r\n    it('should render 0% when entire health data is malformed', async () => {\r\n  jest.spyOn(robustApi, 'fetchHealthData').mockResolvedValue(null as any);\r\n\r\n      render(<PerformanceMonitoringDashboard />);\r\n\r\n      await waitFor(() => {\r\n        // Should still render something instead of crashing\r\n        // Accept any percent-like text (e.g., '0.0%', '82.3%') or numeric values\r\n  const percentages = screen.getAllByText((content, _node) => /\\d+(?:\\.\\d+)?%/.test(content));\r\n        expect(percentages.length).toBeGreaterThan(0);\r\n      });\r\n    });\r\n\r\n    it('should format valid cache_hit_rate correctly', async () => {\r\n  jest.spyOn(robustApi, 'fetchHealthData').mockResolvedValue({\r\n        status: 'healthy',\r\n        services: {\r\n          api: 'healthy',\r\n          cache: 'healthy',\r\n          database: 'healthy'\r\n        },\r\n        performance: {\r\n          cache_hit_rate: 87.654,\r\n          cache_type: 'redis'\r\n        },\r\n        uptime_seconds: 3600\r\n  });\r\n\r\n      render(<PerformanceMonitoringDashboard />);\r\n\r\n      await waitFor(() => {\r\n        // Should format to 1 decimal place\r\n        const percentages = screen.getAllByText('87.7%');\r\n        expect(percentages.length).toBeGreaterThan(0);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Regression prevention', () => {\r\n    it('should prevent \"Cannot read properties of undefined\" errors', async () => {\r\n      // Test the exact error condition that was reported\r\n      const problematicApiResponse = {\r\n        status: 'healthy',\r\n        services: {\r\n          api: 'healthy',\r\n          cache: 'degraded',\r\n          database: 'healthy'\r\n        },\r\n        // performance object exists but cache_hit_rate is undefined\r\n        performance: {\r\n          cache_type: 'redis'\r\n          // cache_hit_rate is missing\r\n        },\r\n        uptime_seconds: 3600\r\n      };\r\n\r\n  jest.spyOn(robustApi, 'fetchHealthData').mockResolvedValue(problematicApiResponse as any);\r\n\r\n      // This should not throw any errors\r\n      const { container } = render(<PerformanceMonitoringDashboard />);\r\n\r\n      await waitFor(() => {\r\n        expect(container).toBeInTheDocument();\r\n  const percentages = screen.getAllByText('0.0%');\r\n        expect(percentages.length).toBeGreaterThan(0);\r\n      });\r\n    });\r\n\r\n    it('should work with hit_rate field mapping', async () => {\r\n  jest.spyOn(robustApi, 'fetchHealthData').mockResolvedValue({\r\n        status: 'healthy',\r\n        services: {\r\n          api: 'healthy',\r\n          cache: 'healthy',\r\n          database: 'healthy'\r\n        },\r\n        performance: {\r\n          hit_rate: 92.3, // Old field name\r\n          cache_type: 'redis'\r\n        },\r\n        uptime_seconds: 3600\r\n  } as any);\r\n\r\n      render(<PerformanceMonitoringDashboard />);\r\n\r\n      await waitFor(() => {\r\n        // Should map hit_rate to cache_hit_rate\r\n        const percentages = screen.getAllByText('92.3%');\r\n        expect(percentages.length).toBeGreaterThan(0);\r\n      });\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}