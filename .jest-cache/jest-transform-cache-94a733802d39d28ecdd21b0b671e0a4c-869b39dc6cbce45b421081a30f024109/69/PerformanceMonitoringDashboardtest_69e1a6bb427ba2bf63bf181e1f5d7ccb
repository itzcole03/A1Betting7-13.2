c3b0f643620fd9428f689555319f926e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom");
var robustApi = _interopRequireWildcard(require("../../../utils/robustApi"));
var _PerformanceMonitoringDashboard = _interopRequireDefault(require("../PerformanceMonitoringDashboard"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Component tests for PerformanceMonitoringDashboard
 * Focus: Safe cache_hit_rate rendering without runtime errors
 */

describe('PerformanceMonitoringDashboard - Cache Hit Rate Safety', () => {
  let consoleLogSpy;
  beforeEach(() => {
    jest.clearAllMocks();
    // Suppress console.log for development diagnostics
    consoleLogSpy = jest.spyOn(console, 'log').mockImplementation(() => {});
    // Default: stub fetchPerformanceStats to resolve to undefined (component handles missing perf)
    jest.spyOn(robustApi, 'fetchPerformanceStats').mockResolvedValue(undefined);
  });
  afterEach(() => {
    consoleLogSpy.mockRestore();
  });
  describe('Safe cache_hit_rate rendering', () => {
    it('should render 0% when cache_hit_rate is undefined', async () => {
      // Mock API response with missing cache_hit_rate
      jest.spyOn(robustApi, 'fetchHealthData').mockResolvedValue({
        status: 'healthy',
        services: {
          api: 'healthy',
          cache: 'healthy',
          database: 'healthy'
        },
        performance: {
          // cache_hit_rate is missing/undefined
          cache_type: 'redis'
        },
        uptime_seconds: 3600
      });
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceMonitoringDashboard.default, {}));

      // Ensure the component invoked the health API mock
      await (0, _react2.waitFor)(() => expect(robustApi.fetchHealthData).toHaveBeenCalled());
      await (0, _react2.waitFor)(() => {
        const cacheHitRate = _react2.screen.getByText(/Cache Hit Rate/);
        expect(cacheHitRate).toBeInTheDocument();

        // Should display 0% instead of crashing (allow multiple matching nodes)
        const percentages = _react2.screen.getAllByText('0.0%');
        expect(percentages.length).toBeGreaterThan(0);
      });
    });
    it('should render 0% when performance object is null', async () => {
      jest.spyOn(robustApi, 'fetchHealthData').mockResolvedValue({
        status: 'healthy',
        services: {
          api: 'healthy',
          cache: 'healthy',
          database: 'healthy'
        },
        performance: null,
        // Null performance object
        uptime_seconds: 3600
      });
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceMonitoringDashboard.default, {}));
      await (0, _react2.waitFor)(() => {
        const percentages = _react2.screen.getAllByText('0.0%');
        expect(percentages.length).toBeGreaterThan(0);
      });
    });
    it('should render 0% when entire health data is malformed', async () => {
      jest.spyOn(robustApi, 'fetchHealthData').mockResolvedValue(null);
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceMonitoringDashboard.default, {}));
      await (0, _react2.waitFor)(() => {
        // Should still render something instead of crashing
        // Accept any percent-like text (e.g., '0.0%', '82.3%') or numeric values
        const percentages = _react2.screen.getAllByText((content, _node) => /\d+(?:\.\d+)?%/.test(content));
        expect(percentages.length).toBeGreaterThan(0);
      });
    });
    it('should format valid cache_hit_rate correctly', async () => {
      jest.spyOn(robustApi, 'fetchHealthData').mockResolvedValue({
        status: 'healthy',
        services: {
          api: 'healthy',
          cache: 'healthy',
          database: 'healthy'
        },
        performance: {
          cache_hit_rate: 87.654,
          cache_type: 'redis'
        },
        uptime_seconds: 3600
      });
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceMonitoringDashboard.default, {}));
      await (0, _react2.waitFor)(() => {
        // Should format to 1 decimal place
        const percentages = _react2.screen.getAllByText('87.7%');
        expect(percentages.length).toBeGreaterThan(0);
      });
    });
  });
  describe('Regression prevention', () => {
    it('should prevent "Cannot read properties of undefined" errors', async () => {
      // Test the exact error condition that was reported
      const problematicApiResponse = {
        status: 'healthy',
        services: {
          api: 'healthy',
          cache: 'degraded',
          database: 'healthy'
        },
        // performance object exists but cache_hit_rate is undefined
        performance: {
          cache_type: 'redis'
          // cache_hit_rate is missing
        },
        uptime_seconds: 3600
      };
      jest.spyOn(robustApi, 'fetchHealthData').mockResolvedValue(problematicApiResponse);

      // This should not throw any errors
      const {
        container
      } = (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceMonitoringDashboard.default, {}));
      await (0, _react2.waitFor)(() => {
        expect(container).toBeInTheDocument();
        const percentages = _react2.screen.getAllByText('0.0%');
        expect(percentages.length).toBeGreaterThan(0);
      });
    });
    it('should work with hit_rate field mapping', async () => {
      jest.spyOn(robustApi, 'fetchHealthData').mockResolvedValue({
        status: 'healthy',
        services: {
          api: 'healthy',
          cache: 'healthy',
          database: 'healthy'
        },
        performance: {
          hit_rate: 92.3,
          // Old field name
          cache_type: 'redis'
        },
        uptime_seconds: 3600
      });
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceMonitoringDashboard.default, {}));
      await (0, _react2.waitFor)(() => {
        // Should map hit_rate to cache_hit_rate
        const percentages = _react2.screen.getAllByText('92.3%');
        expect(percentages.length).toBeGreaterThan(0);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,