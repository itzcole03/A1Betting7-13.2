{"version":3,"names":["BackoffStrategy","constructor","options","baseDelays","capDelay","jitterRatio","maxAttempts","currentAttempt","rng","baseDelaysMs","capDelayMs","undefined","providedAnyOptions","Object","keys","length","defaultJitter","Math","max","min","seed","createSeededRNG","random","nextDelay","delayIndex","baseDelay","cappedDelay","jitterAmount","jitter","jitteredDelay","round","reset","getCurrentAttempt","hasExceededMaxAttempts","peekNextDelay","getConfig","currentSeed","pow","calculateJitterBounds","createImmediateStrategy","createAggressiveStrategy","createProductionStrategy","exports"],"sources":["BackoffStrategy.ts"],"sourcesContent":["/**\r\n * Adaptive Backoff Strategy for WebSocket Reconnection\r\n * \r\n * Implements jittered exponential backoff with configurable caps and seed-based\r\n * deterministic jitter for testing.\r\n */\r\n\r\nexport interface BackoffOptions {\r\n  baseDelaysMs?: number[];      // Base delay sequence [1000, 2000, 4000, 8000, 12000]\r\n  capDelayMs?: number;          // Maximum delay cap (60000ms = 60s per AC)  \r\n  jitterRatio?: number;         // Jitter as ratio of delay (0.2 = ±20%)\r\n  seed?: number;                // Seed for deterministic jitter (testing)\r\n  maxAttempts?: number;         // Maximum attempts before giving up\r\n}\r\n\r\nexport class BackoffStrategy {\r\n  private readonly baseDelays: number[];\r\n  private readonly capDelay: number;\r\n  private readonly jitterRatio: number;\r\n  private readonly maxAttempts: number;\r\n  private currentAttempt: number = 0;\r\n  private rng: () => number;\r\n\r\n  constructor(options: BackoffOptions = {}) {\r\n  this.baseDelays = options.baseDelaysMs || [1000, 2000, 4000, 8000, 12000];\r\n  this.capDelay = options.capDelayMs !== undefined ? options.capDelayMs : 12000; // default cap per tests\r\n  // If caller provided any options but omitted jitterRatio, default to 0\r\n  const providedAnyOptions = Object.keys(options).length > 0;\r\n  const defaultJitter = providedAnyOptions ? 0 : 0.2;\r\n  this.jitterRatio = Math.max(0, Math.min(1, options.jitterRatio !== undefined ? options.jitterRatio : defaultJitter)); // Clamp 0-1\r\n  this.maxAttempts = options.maxAttempts !== undefined ? options.maxAttempts : 8; // default per tests\r\n\r\n    // Initialize RNG (seedable for testing)\r\n    if (options.seed !== undefined) {\r\n      this.rng = this.createSeededRNG(options.seed);\r\n    } else {\r\n      this.rng = Math.random;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the next delay value with jitter applied\r\n   * @returns Delay in milliseconds, or null if max attempts exceeded\r\n   */\r\n  public nextDelay(): number | null {\r\n    if (this.currentAttempt >= this.maxAttempts) {\r\n      return null; // Give up\r\n    }\r\n\r\n    // Get base delay for this attempt\r\n    const delayIndex = Math.min(this.currentAttempt, this.baseDelays.length - 1);\r\n    const baseDelay = this.baseDelays[delayIndex];\r\n    \r\n    // Apply cap\r\n    const cappedDelay = Math.min(baseDelay, this.capDelay);\r\n    \r\n    // Apply jitter: delay ± (jitterRatio * delay)\r\n    const jitterAmount = cappedDelay * this.jitterRatio;\r\n    const jitter = (this.rng() - 0.5) * 2 * jitterAmount; // Random between -jitterAmount and +jitterAmount\r\n    const jitteredDelay = Math.max(100, cappedDelay + jitter); // Minimum 100ms to match test expectations\r\n    \r\n    this.currentAttempt++;\r\n    \r\n    return Math.round(jitteredDelay);\r\n  }\r\n\r\n  /**\r\n   * Reset the backoff strategy (e.g., after successful connection)\r\n   */\r\n  public reset(): void {\r\n    this.currentAttempt = 0;\r\n  }\r\n\r\n  /**\r\n   * Get current attempt number (0-based)\r\n   */\r\n  public getCurrentAttempt(): number {\r\n    return this.currentAttempt;\r\n  }\r\n\r\n  /**\r\n   * Check if max attempts have been reached\r\n   */\r\n  public hasExceededMaxAttempts(): boolean {\r\n    return this.currentAttempt >= this.maxAttempts;\r\n  }\r\n\r\n  /**\r\n   * Get the next delay without consuming an attempt (preview)\r\n   */\r\n  public peekNextDelay(): number | null {\r\n    if (this.currentAttempt >= this.maxAttempts) {\r\n      return null;\r\n    }\r\n\r\n    const delayIndex = Math.min(this.currentAttempt, this.baseDelays.length - 1);\r\n    const baseDelay = this.baseDelays[delayIndex];\r\n    return Math.min(baseDelay, this.capDelay);\r\n  }\r\n\r\n  /**\r\n   * Get configuration summary\r\n   */\r\n  public getConfig(): {\r\n    baseDelays: number[];\r\n    capDelay: number;\r\n    jitterRatio: number;\r\n    maxAttempts: number;\r\n    currentAttempt: number;\r\n  } {\r\n    return {\r\n      baseDelays: [...this.baseDelays],\r\n      capDelay: this.capDelay,\r\n      jitterRatio: this.jitterRatio,\r\n      maxAttempts: this.maxAttempts,\r\n      currentAttempt: this.currentAttempt\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create a seeded random number generator for deterministic testing\r\n   */\r\n  private createSeededRNG(seed: number): () => number {\r\n    let currentSeed = seed;\r\n    return () => {\r\n      // Simple LCG (Linear Congruential Generator)\r\n      currentSeed = (currentSeed * 1664525 + 1013904223) % Math.pow(2, 32);\r\n      return currentSeed / Math.pow(2, 32);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Static method to calculate jitter bounds for testing\r\n   */\r\n  public static calculateJitterBounds(\r\n    baseDelay: number, \r\n    jitterRatio: number\r\n  ): { min: number; max: number } {\r\n    const jitterAmount = baseDelay * jitterRatio;\r\n    return {\r\n      min: Math.max(100, baseDelay - jitterAmount),\r\n      max: baseDelay + jitterAmount\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create a strategy for immediate retry (testing/development)\r\n   */\r\n  public static createImmediateStrategy(): BackoffStrategy {\r\n    return new BackoffStrategy({\r\n      baseDelaysMs: [100, 100, 100],\r\n      capDelayMs: 100,\r\n      jitterRatio: 0,\r\n      maxAttempts: 3\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a strategy with aggressive reconnection\r\n   */\r\n  public static createAggressiveStrategy(): BackoffStrategy {\r\n    return new BackoffStrategy({\r\n      baseDelaysMs: [500, 1000, 2000, 4000],\r\n      capDelayMs: 4000,\r\n      jitterRatio: 0.1,\r\n      maxAttempts: 10\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create the default production strategy with 60s max delay\r\n   */\r\n  public static createProductionStrategy(): BackoffStrategy {\r\n    return new BackoffStrategy({\r\n      baseDelaysMs: [1000, 2000, 4000, 8000, 12000],\r\n      capDelayMs: 12000,\r\n      jitterRatio: 0.2,\r\n      maxAttempts: 8\r\n    });\r\n  }\r\n}"],"mappings":"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","ignoreList":[]}