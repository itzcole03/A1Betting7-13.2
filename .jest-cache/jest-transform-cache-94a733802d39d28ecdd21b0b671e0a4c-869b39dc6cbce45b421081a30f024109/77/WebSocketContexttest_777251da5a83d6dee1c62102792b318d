6d995e1a3cfba355fb954e5e13324d2e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _WebSocketContext = require("../WebSocketContext");
var _jsxRuntime = require("react/jsx-runtime");
function TestComponent() {
  const ctx = (0, _WebSocketContext._useWebSocket)();
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    "data-testid": "ws-context",
    children: ctx ? 'context-present' : 'context-absent'
  });
}
describe('WebSocketContext', () => {
  let originalWebSocket;
  let originalEnv;
  beforeAll(() => {
    originalWebSocket = global.WebSocket;
    originalEnv = process.env;
  });
  afterAll(() => {
    global.WebSocket = originalWebSocket;
    process.env = originalEnv;
  });
  function setupMockWebSocket() {
    let wsInstance = null;
    const wsMock = jest.fn().mockImplementation(() => {
      wsInstance = {
        readyState: 1,
        send: jest.fn(),
        close: jest.fn(),
        // Initialize hooks as functions to prevent undefined errors
        _onclose: () => {},
        _onerror: () => {},
        _onmessage: () => {},
        set onopen(fn) {
          setTimeout(() => fn && fn.call(wsInstance, new Event('open')), 10);
        },
        set onclose(fn) {
          this._onclose = fn;
        },
        set onerror(fn) {
          this._onerror = fn;
        },
        set onmessage(fn) {
          this._onmessage = fn;
        }
      };
      return wsInstance;
    });
    // Add static properties to mock
    wsMock.CONNECTING = 0;
    wsMock.OPEN = 1;
    wsMock.CLOSING = 2;
    wsMock.CLOSED = 3;
    global.WebSocket = wsMock;
    return wsInstance;
  }
  it('provides default values', () => {
    // Enable WebSocket for this test
    process.env.VITE_WEBSOCKET_ENABLED = 'true';
    // Also set on window for compatibility
    global.window.__VITE_ENV__ = {
      VITE_WEBSOCKET_ENABLED: 'true'
    };
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_WebSocketContext._WebSocketProvider, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    expect(_react2.screen.getByTestId('ws-context')).toHaveTextContent('context-present');
  });
  it('handles transient connection failures and recovery', async () => {
    // Enable WebSocket for this test
    process.env.VITE_WEBSOCKET_ENABLED = 'true';
    // Also set on window for compatibility
    global.window.__VITE_ENV__ = {
      VITE_WEBSOCKET_ENABLED: 'true'
    };
    let wsInstance;
    let onopenHandler = null;
    const wsMock = jest.fn().mockImplementation(() => {
      wsInstance = {
        readyState: 1,
        send: jest.fn(),
        close: jest.fn(),
        // Initialize hooks as functions to prevent undefined errors
        _onclose: () => {},
        _onerror: () => {},
        _onmessage: () => {},
        set onopen(fn) {
          onopenHandler = fn;
          // Simulate immediate connection for test
          setTimeout(() => {
            if (fn) {
              fn.call(wsInstance, new Event('open'));
            }
          }, 10);
        },
        set onclose(fn) {
          this._onclose = fn;
        },
        set onerror(fn) {
          this._onerror = fn;
        },
        set onmessage(fn) {
          this._onmessage = fn;
        },
        // Method to manually trigger onopen for testing
        triggerOpen: () => {
          if (onopenHandler) {
            onopenHandler.call(wsInstance, new Event('open'));
          }
        }
      };
      return wsInstance;
    });
    wsMock.CONNECTING = 0;
    wsMock.OPEN = 1;
    wsMock.CLOSING = 2;
    wsMock.CLOSED = 3;
    global.WebSocket = wsMock;
    function StatusComponent() {
      const ctx = (0, _WebSocketContext._useWebSocket)();
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        "data-testid": "ws-status",
        children: ctx.status
      });
    }
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_WebSocketContext._WebSocketProvider, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(StatusComponent, {})
    }));

    // Wait for initial connection
    await (0, _react2.act)(async () => {
      await new Promise(resolve => setTimeout(resolve, 20));
    });

    // Should be connected initially
    expect(_react2.screen.getByTestId('ws-status').textContent).toBe('connected');

    // Simulate close event (transient failure)
    await (0, _react2.act)(async () => {
      if (wsInstance && wsInstance._onclose) {
        wsInstance._onclose({
          code: 1006,
          reason: 'test',
          wasClean: false
        });
      }
    });

    // Should enter disconnected state after close
    expect(_react2.screen.getByTestId('ws-status').textContent).toBe('disconnected');

    // Simulate recovery by triggering onopen
    await (0, _react2.act)(async () => {
      if (wsInstance && wsInstance.triggerOpen) {
        wsInstance.triggerOpen();
      }
    });

    // Should be connected after recovery
    expect(_react2.screen.getByTestId('ws-status').textContent).toBe('connected');
  });
  it('reconnects immediately on network online event', async () => {
    // Enable WebSocket for this test
    process.env.VITE_WEBSOCKET_ENABLED = 'true';
    // Also set on window for compatibility
    global.window.__VITE_ENV__ = {
      VITE_WEBSOCKET_ENABLED: 'true'
    };
    let wsInstance;
    const wsMock = jest.fn().mockImplementation(() => {
      wsInstance = {
        readyState: 1,
        send: jest.fn(),
        close: jest.fn(),
        set onopen(fn) {
          setTimeout(() => fn && fn.call(wsInstance, new Event('open')), 10);
        },
        set onclose(fn) {
          this._onclose = fn;
        },
        set onerror(fn) {
          this._onerror = fn;
        },
        set onmessage(fn) {
          this._onmessage = fn;
        },
        // Initialize hooks as functions to prevent undefined errors
        _onclose: () => {},
        _onerror: () => {},
        _onmessage: () => {}
      };
      return wsInstance;
    });
    wsMock.CONNECTING = 0;
    wsMock.OPEN = 1;
    wsMock.CLOSING = 2;
    wsMock.CLOSED = 3;
    global.WebSocket = wsMock;
    function StatusComponent() {
      const ctx = (0, _WebSocketContext._useWebSocket)();
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        "data-testid": "ws-status",
        children: ctx.status
      });
    }
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_WebSocketContext._WebSocketProvider, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(StatusComponent, {})
    }));

    // Wait for initial connection
    await (0, _react2.act)(async () => {
      await new Promise(resolve => setTimeout(resolve, 20));
    });

    // Simulate offline event
    await (0, _react2.act)(async () => {
      window.dispatchEvent(new Event('offline'));
    });
    expect(_react2.screen.getByTestId('ws-status').textContent).toBe('disconnected');

    // Simulate online event - this should trigger reconnection
    await (0, _react2.act)(async () => {
      window.dispatchEvent(new Event('online'));
    });

    // Should enter reconnecting state immediately
    expect(_react2.screen.getByTestId('ws-status').textContent).toBe('reconnecting');
  });
  it('exposes lastError in context on error', async () => {
    // Enable WebSocket for this test
    process.env.VITE_WEBSOCKET_ENABLED = 'true';
    // Also set on window for compatibility
    global.window.__VITE_ENV__ = {
      VITE_WEBSOCKET_ENABLED: 'true'
    };
    let wsInstance;
    const wsMock = jest.fn().mockImplementation(() => {
      wsInstance = {
        readyState: 1,
        send: jest.fn(),
        close: jest.fn(),
        set onopen(fn) {
          setTimeout(() => fn && fn.call(wsInstance, new Event('open')), 10);
        },
        set onclose(fn) {
          this._onclose = fn;
        },
        set onerror(fn) {
          this._onerror = fn;
        },
        set onmessage(fn) {
          this._onmessage = fn;
        },
        // Initialize hooks as functions to prevent undefined errors
        _onclose: () => {},
        _onerror: () => {},
        _onmessage: () => {}
      };
      return wsInstance;
    });
    wsMock.CONNECTING = 0;
    wsMock.OPEN = 1;
    wsMock.CLOSING = 2;
    wsMock.CLOSED = 3;
    global.WebSocket = wsMock;
    function ErrorComponent() {
      const ctx = (0, _WebSocketContext._useWebSocket)();
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        "data-testid": "ws-error",
        children: ctx.lastError || 'none'
      });
    }
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_WebSocketContext._WebSocketProvider, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ErrorComponent, {})
    }));

    // Simulate error event
    await (0, _react2.act)(async () => {
      if (wsInstance._onerror) {
        wsInstance._onerror(new Event('error'));
      }
    });
    expect(_react2.screen.getByTestId('ws-error').textContent).not.toBe('none');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,