{"version":3,"names":["_oneTimeLog","require","createFieldAccessor","descriptor","obj","default","rawObj","current","foundCanonical","segment","canonical","undefined","usedLegacy","legacy","legacyPath","legacyCurrent","foundLegacy","isDevOrTest","process","env","NODE_ENV","jest","oneTimeLog","name","console","warn","transform","type","num","Number","isFinite","String","getOptimizationLevel","exports","getModelName","getProvider","getThroughputRps","getAvgLatencyMs","getP95LatencyMs","getSuccessRate","value","rate","getTotalRequests","getTotalTokens","tokens","getTemperature","safeMetricsAccess","path","defaultValue","isNormalizedModelMetrics","typed","model","performance","usage"],"sources":["modelMetricsAccessors.ts"],"sourcesContent":["// NOTE: All model/inference metric field access must go through these accessors. Do not access raw nested fields directly.\r\n\r\n/**\r\n * Model metrics accessor library to prevent property access crashes\r\n * Provides safe field access with legacy mapping and dev warnings\r\n * \r\n * @module modelMetricsAccessors\r\n */\r\n\r\nimport type { ModelMetricsShape } from './ensureModelMetricsShape';\r\nimport { oneTimeLog } from './oneTimeLog';\r\n\r\n/**\r\n * Generic field accessor descriptor\r\n */\r\ninterface FieldAccessorDescriptor<T> {\r\n  name: string;\r\n  canonical: string[];\r\n  legacy?: string[][];\r\n  type: 'number' | 'string';\r\n  default: T;\r\n  transform?: (value: unknown) => T;\r\n}\r\n\r\n/**\r\n * Creates a safe field accessor with legacy fallback\r\n */\r\nfunction createFieldAccessor<T extends string | number>(\r\n  descriptor: FieldAccessorDescriptor<T>\r\n): (obj: unknown) => T {\r\n  return (obj: unknown): T => {\r\n    // Handle null/undefined objects\r\n    if (!obj || typeof obj !== 'object') {\r\n      return descriptor.default;\r\n    }\r\n\r\n    const rawObj = obj as Record<string, unknown>;\r\n\r\n    // Try to get from canonical ModelMetricsShape first (post-normalization)\r\n    let current: unknown = rawObj;\r\n    let foundCanonical = true;\r\n\r\n    for (const segment of descriptor.canonical) {\r\n      if (current && typeof current === 'object' && segment in current) {\r\n        current = (current as Record<string, unknown>)[segment];\r\n      } else {\r\n        foundCanonical = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n  if (!(foundCanonical && current !== undefined)) {\r\n      // Try legacy paths if canonical not found\r\n  let usedLegacy = false;\r\n      if (descriptor.legacy) {\r\n        for (const legacyPath of descriptor.legacy) {\r\n          let legacyCurrent: unknown = rawObj;\r\n          let foundLegacy = true;\r\n          \r\n          for (const segment of legacyPath) {\r\n            if (legacyCurrent && typeof legacyCurrent === 'object' && segment in legacyCurrent) {\r\n              legacyCurrent = (legacyCurrent as Record<string, unknown>)[segment];\r\n            } else {\r\n              foundLegacy = false;\r\n              break;\r\n            }\r\n          }\r\n          \r\n          if (foundLegacy && legacyCurrent !== undefined) {\r\n            usedLegacy = true;\r\n            current = legacyCurrent;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Log one-time development warning for legacy usage\r\n      if (usedLegacy) {\r\n        // Check if we're in a development or test environment\r\n        const isDevOrTest = process.env.NODE_ENV === 'development' ||\r\n                           process.env.NODE_ENV === 'test' ||\r\n                           typeof jest !== 'undefined';\r\n\r\n        if (isDevOrTest) {\r\n          oneTimeLog(\r\n            descriptor.name,\r\n            () => {\r\n              // eslint-disable-next-line no-console\r\n              console.warn(\r\n                `[AIMetricsCompat] Field \"${descriptor.name}\" accessed via legacy path. Consider using normalized ModelMetricsShape for consistent access.`\r\n              );\r\n            },\r\n            descriptor.name\r\n          );\r\n        }\r\n      }      // If neither canonical nor legacy path was found, clear current so defaults are returned\r\n      if (!foundCanonical && !usedLegacy) {\r\n        current = undefined;\r\n      }\r\n    } else {\r\n      // canonical found; leave current as-is\r\n    }\r\n\r\n    // Apply transform if available\r\n    if (current !== undefined && descriptor.transform) {\r\n      return descriptor.transform(current);\r\n    }\r\n\r\n    // Type coercion for direct values (apply for canonical and legacy)\r\n    if (current !== undefined) {\r\n      if (descriptor.type === 'number') {\r\n        const num = Number(current);\r\n        return (isFinite(num) ? num : descriptor.default) as T;\r\n      } else {\r\n        return String(current) as T;\r\n      }\r\n    }\r\n\r\n    return descriptor.default;\r\n  };\r\n}\r\n\r\n/**\r\n * Safe accessors for model metadata\r\n */\r\nexport const getOptimizationLevel = createFieldAccessor<string>({\r\n  name: 'optimization_level',\r\n  canonical: ['model', 'optimization_level'],\r\n  legacy: [\r\n    ['optimizationLevel'],\r\n    ['opt_level'], \r\n    ['optimization_mode'],\r\n    ['system_info', 'optimization_level'],\r\n    ['optimizationTier'],\r\n    ['optTier']\r\n  ],\r\n  type: 'string',\r\n  default: 'Basic'\r\n});\r\n\r\nexport const getModelName = createFieldAccessor<string>({\r\n  name: 'model_name',\r\n  canonical: ['model', 'name'],\r\n  legacy: [\r\n    ['modelName'],\r\n    ['model_name'], \r\n    ['name']\r\n  ],\r\n  type: 'string',\r\n  default: 'Unknown Model'\r\n});\r\n\r\nexport const getProvider = createFieldAccessor<string>({\r\n  name: 'provider',\r\n  canonical: ['model', 'provider'],\r\n  legacy: [\r\n    ['provider'],\r\n    ['model_provider'], \r\n    ['modelProvider']\r\n  ],\r\n  type: 'string',\r\n  default: 'Unknown Provider'\r\n});\r\n\r\n/**\r\n * Safe accessors for performance metrics\r\n */\r\nexport const getThroughputRps = createFieldAccessor<number>({\r\n  name: 'throughput_rps',\r\n  canonical: ['performance', 'throughput_rps'],\r\n  legacy: [\r\n    ['throughput'],\r\n    ['throughput_per_second'], \r\n    ['rps']\r\n  ],\r\n  type: 'number',\r\n  default: 0\r\n});\r\n\r\nexport const getAvgLatencyMs = createFieldAccessor<number>({\r\n  name: 'avg_latency_ms',\r\n  canonical: ['performance', 'avg_latency_ms'],\r\n  legacy: [\r\n    ['avg_latency'],\r\n    ['latency_ms'], \r\n    ['avg_latency_ms']\r\n  ],\r\n  type: 'number',\r\n  default: 0\r\n});\r\n\r\nexport const getP95LatencyMs = createFieldAccessor<number>({\r\n  name: 'p95_latency_ms',\r\n  canonical: ['performance', 'p95_latency_ms'],\r\n  legacy: [\r\n    ['p95_latency'],\r\n    ['p95_latency_ms']\r\n  ],\r\n  type: 'number',\r\n  default: 0\r\n});\r\n\r\nexport const getSuccessRate = createFieldAccessor<number>({\r\n  name: 'success_rate',\r\n  canonical: ['performance', 'success_rate'],\r\n  legacy: [\r\n    ['success_rate']\r\n  ],\r\n  type: 'number',\r\n  default: 0,\r\n  transform: (value: unknown): number => {\r\n    const rate = Number(value);\r\n    if (isFinite(rate)) {\r\n      // Normalize to 0-1 range if it appears to be a percentage\r\n      return rate > 1 ? rate / 100 : rate;\r\n    }\r\n    return 0;\r\n  }\r\n});\r\n\r\n/**\r\n * Safe accessors for usage metrics\r\n */\r\nexport const getTotalRequests = createFieldAccessor<number>({\r\n  name: 'total_requests',\r\n  canonical: ['usage', 'total_requests'],\r\n  legacy: [\r\n    ['total_requests'],\r\n    ['total_inferences'], \r\n    ['totalRequests']\r\n  ],\r\n  type: 'number',\r\n  default: 0\r\n});\r\n\r\nexport const getTotalTokens = createFieldAccessor<number>({\r\n  name: 'total_tokens',\r\n  canonical: ['usage', 'total_tokens'],\r\n  legacy: [\r\n    ['total_tokens'],\r\n    ['totalTokens']\r\n  ],\r\n  type: 'number',\r\n  default: 0,\r\n  transform: (value: unknown): number => {\r\n    const tokens = Number(value);\r\n    if (isFinite(tokens) && tokens > 0) {\r\n      return tokens;\r\n    }\r\n    \r\n    // Try to derive from input + output tokens if total is missing/zero\r\n    // This would require access to the parent object, but for now we'll return the default\r\n    return 0;\r\n  }\r\n});\r\n\r\n/**\r\n * Safe accessors for tuning parameters\r\n */\r\nexport const getTemperature = createFieldAccessor<number>({\r\n  name: 'temperature',\r\n  canonical: ['tuning', 'temperature'],\r\n  legacy: [\r\n    ['temperature']\r\n  ],\r\n  type: 'number',\r\n  default: 0.7\r\n});\r\n\r\n/**\r\n * Utility function to safely access nested metrics without crashes\r\n * Use this for one-off field access that doesn't need a dedicated accessor\r\n */\r\nexport function safeMetricsAccess<T>(\r\n  obj: unknown, \r\n  path: string[], \r\n  defaultValue: T\r\n): T {\r\n  if (!obj || typeof obj !== 'object') {\r\n    return defaultValue;\r\n  }\r\n  \r\n  let current: unknown = obj;\r\n  for (const segment of path) {\r\n    if (current && typeof current === 'object' && segment in current) {\r\n      current = (current as Record<string, unknown>)[segment];\r\n    } else {\r\n      return defaultValue;\r\n    }\r\n  }\r\n  \r\n  return current !== undefined ? (current as T) : defaultValue;\r\n}\r\n\r\n/**\r\n * Helper to check if metrics object has been normalized\r\n */\r\nexport function isNormalizedModelMetrics(obj: unknown): obj is ModelMetricsShape {\r\n  if (!obj || typeof obj !== 'object') {\r\n    return false;\r\n  }\r\n  \r\n  const typed = obj as Record<string, unknown>;\r\n  return !!(\r\n    typed.model && \r\n    typeof typed.model === 'object' &&\r\n    typed.performance && \r\n    typeof typed.performance === 'object' &&\r\n    typed.usage && \r\n    typeof typed.usage === 'object'\r\n  );\r\n}"],"mappings":"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","ignoreList":[]}