{"version":3,"names":["_leanMode","require","_LiveDemoPerformanceMonitor","LiveDemoPerformanceMonitor","constructor","metrics","isMonitoring","monitoringInterval","performanceObserver","mutationObserver","lastMemoryLogTime","MEMORY_LOG_THROTTLE","PERFORMANCE_TARGETS","pageLoadTime","firstContentfulPaint","largestContentfulPaint","cumulativeLayoutShift","timeToInteractive","apiResponseTime","memoryThreshold","initializePerformanceObserver","initializeMutationObserver","getInstance","instance","window","PerformanceObserver","list","entries","getEntries","forEach","entry","processPerformanceEntry","observe","entryTypes","error","console","warn","MutationObserver","mutations","trackDOMChanges","document","body","childList","subtree","attributes","attributeOldValue","entryType","updateNavigationMetrics","updatePaintMetrics","updateLCPMetrics","updateCLSMetrics","loadTime","loadEventEnd","fetchStart","interactiveTime","domInteractive","recordMetric","name","startTime","hadRecentInput","value","significantChanges","mutation","type","addedNodes","length","removedNodes","recordEvent","count","metric","event","CustomEvent","detail","timestamp","Date","now","dispatchEvent","data","startMonitoring","intervalMs","isLeanMode","log","collectCurrentMetrics","setInterval","analyzePerformanceTrends","stopMonitoring","clearInterval","disconnect","memoryInfo","getMemoryUsage","apiTimes","measureAPIResponseTimes","componentTimes","measureComponentRenderTimes","getPageLoadTime","getFCP","getLCP","getCLS","getTTI","memoryUsage","apiResponseTimes","errorCount","getErrorCount","userInteractions","getUserInteractionCount","componentRenderTimes","push","slice","performance","memory","usedJSHeapSize","used","toFixed","total","totalJSHeapSize","limit","jsHeapSizeLimit","toLocaleTimeString","apiEndpoints","responseTimes","endpoint","start","fetch","method","end","getEntriesByType","includes","duration","Math","round","timing","navigationStart","getEntriesByName","reduce","cls","__demoErrorCount","__demoInteractionCount","recent","older","recentAvg","calculateAverageMetrics","olderAvg","trends","compareMetics","avg","keys","Object","key","sum","m","calculateChange","current","previous","generateHealthReport","getDefaultHealthReport","latest","score","calculateOverallScore","grade","getPerformanceGrade","issues","identifyCriticalIssues","recommendations","generateRecommendations","analyzeTrends","overallScore","performanceGrade","criticalIssues","trendAnalysis","values","time","max","direction","changePercentage","recentScore","olderScore","change","abs","getOptimizationSuggestions","id","priority","category","title","description","impact","effort","implementation","getCurrentMetrics","getMetricsHistory","isMonitoringActive","_default","exports","default"],"sources":["liveDemoPerformanceMonitor.ts"],"sourcesContent":["import { isLeanMode } from '../utils/leanMode';\r\n\r\ninterface PerformanceMetrics {\r\n  timestamp: Date;\r\n  pageLoadTime: number;\r\n  firstContentfulPaint: number;\r\n  largestContentfulPaint: number;\r\n  cumulativeLayoutShift: number;\r\n  timeToInteractive: number;\r\n  memoryUsage: number;\r\n  apiResponseTimes: Record<string, number>;\r\n  errorCount: number;\r\n  userInteractions: number;\r\n  componentRenderTimes: Record<string, number>;\r\n}\r\n\r\ninterface DemoHealthReport {\r\n  overallScore: number;\r\n  performanceGrade: 'A' | 'B' | 'C' | 'D' | 'F';\r\n  criticalIssues: string[];\r\n  recommendations: string[];\r\n  trendAnalysis: {\r\n    direction: 'improving' | 'stable' | 'declining';\r\n    changePercentage: number;\r\n  };\r\n  metrics: PerformanceMetrics;\r\n}\r\n\r\ninterface OptimizationSuggestion {\r\n  id: string;\r\n  priority: 'high' | 'medium' | 'low';\r\n  category: 'performance' | 'user-experience' | 'reliability' | 'accessibility';\r\n  title: string;\r\n  description: string;\r\n  impact: string;\r\n  effort: 'low' | 'medium' | 'high';\r\n  implementation: string;\r\n}\r\n\r\nclass LiveDemoPerformanceMonitor {\r\n  private static instance: LiveDemoPerformanceMonitor;\r\n  private metrics: PerformanceMetrics[] = [];\r\n  private isMonitoring = false;\r\n  private monitoringInterval: NodeJS.Timeout | null = null;\r\n  private performanceObserver: PerformanceObserver | null = null;\r\n  private mutationObserver: MutationObserver | null = null;\r\n  private lastMemoryLogTime = 0;\r\n  private readonly MEMORY_LOG_THROTTLE = 30000; // 30 seconds\r\n  \r\n  private readonly PERFORMANCE_TARGETS = {\r\n    pageLoadTime: 3000,     // 3 seconds\r\n    firstContentfulPaint: 1800,   // 1.8 seconds\r\n    largestContentfulPaint: 2500, // 2.5 seconds\r\n    cumulativeLayoutShift: 0.1,   // CLS score\r\n    timeToInteractive: 3500,      // 3.5 seconds\r\n    apiResponseTime: 1000,        // 1 second\r\n    memoryThreshold: 100 * 1024 * 1024, // 100MB\r\n  };\r\n\r\n  private constructor() {\r\n    this.initializePerformanceObserver();\r\n    this.initializeMutationObserver();\r\n  }\r\n\r\n  static getInstance(): LiveDemoPerformanceMonitor {\r\n    if (!LiveDemoPerformanceMonitor.instance) {\r\n      LiveDemoPerformanceMonitor.instance = new LiveDemoPerformanceMonitor();\r\n    }\r\n    return LiveDemoPerformanceMonitor.instance;\r\n  }\r\n\r\n  private initializePerformanceObserver(): void {\r\n    if (typeof window === 'undefined' || !('PerformanceObserver' in window)) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.performanceObserver = new PerformanceObserver((list) => {\r\n        const entries = list.getEntries();\r\n        entries.forEach((entry) => {\r\n          this.processPerformanceEntry(entry);\r\n        });\r\n      });\r\n\r\n      this.performanceObserver.observe({ \r\n        entryTypes: ['navigation', 'paint', 'layout-shift', 'largest-contentful-paint'] \r\n      });\r\n    } catch (error) {\r\n      console.warn('PerformanceObserver not supported:', error);\r\n    }\r\n  }\r\n\r\n  private initializeMutationObserver(): void {\r\n    if (typeof window === 'undefined' || !('MutationObserver' in window)) {\r\n      return;\r\n    }\r\n\r\n    this.mutationObserver = new MutationObserver((mutations) => {\r\n      this.trackDOMChanges(mutations);\r\n    });\r\n\r\n    if (document.body) {\r\n      this.mutationObserver.observe(document.body, {\r\n        childList: true,\r\n        subtree: true,\r\n        attributes: true,\r\n        attributeOldValue: true\r\n      });\r\n    }\r\n  }\r\n\r\n  private processPerformanceEntry(entry: PerformanceEntry): void {\r\n    // Process different types of performance entries\r\n    if (entry.entryType === 'navigation') {\r\n      this.updateNavigationMetrics(entry as PerformanceNavigationTiming);\r\n    } else if (entry.entryType === 'paint') {\r\n      this.updatePaintMetrics(entry as PerformancePaintTiming);\r\n    } else if (entry.entryType === 'largest-contentful-paint') {\r\n      this.updateLCPMetrics(entry as any);\r\n    } else if (entry.entryType === 'layout-shift') {\r\n      this.updateCLSMetrics(entry as any);\r\n    }\r\n  }\r\n\r\n  private updateNavigationMetrics(entry: PerformanceNavigationTiming): void {\r\n    const loadTime = entry.loadEventEnd - entry.fetchStart;\r\n    const interactiveTime = entry.domInteractive - entry.fetchStart;\r\n    \r\n    this.recordMetric('pageLoadTime', loadTime);\r\n    this.recordMetric('timeToInteractive', interactiveTime);\r\n  }\r\n\r\n  private updatePaintMetrics(entry: PerformancePaintTiming): void {\r\n    if (entry.name === 'first-contentful-paint') {\r\n      this.recordMetric('firstContentfulPaint', entry.startTime);\r\n    }\r\n  }\r\n\r\n  private updateLCPMetrics(entry: any): void {\r\n    this.recordMetric('largestContentfulPaint', entry.startTime);\r\n  }\r\n\r\n  private updateCLSMetrics(entry: any): void {\r\n    if (!entry.hadRecentInput) {\r\n      this.recordMetric('cumulativeLayoutShift', entry.value);\r\n    }\r\n  }\r\n\r\n  private trackDOMChanges(mutations: MutationRecord[]): void {\r\n    // Track significant DOM changes that might affect performance\r\n    let significantChanges = 0;\r\n    \r\n    mutations.forEach((mutation) => {\r\n      if (mutation.type === 'childList') {\r\n        significantChanges += mutation.addedNodes.length + mutation.removedNodes.length;\r\n      }\r\n    });\r\n\r\n    if (significantChanges > 10) {\r\n      this.recordEvent('significant-dom-changes', { count: significantChanges });\r\n    }\r\n  }\r\n\r\n  private recordMetric(metric: string, value: number): void {\r\n    // Store metrics for analysis\r\n    const event = new CustomEvent('demo-performance-metric', {\r\n      detail: { metric, value, timestamp: Date.now() }\r\n    });\r\n    window.dispatchEvent(event);\r\n  }\r\n\r\n  private recordEvent(type: string, data: any): void {\r\n    const event = new CustomEvent('demo-performance-event', {\r\n      detail: { type, data, timestamp: Date.now() }\r\n    });\r\n    window.dispatchEvent(event);\r\n  }\r\n\r\n  async startMonitoring(intervalMs: number = 30000): Promise<void> {\r\n    if (this.isMonitoring) {\r\n      // eslint-disable-next-line no-console\r\n      console.warn('Live demo monitoring is already running');\r\n      return;\r\n    }\r\n\r\n    // Skip entirely if lean mode is active\r\n    if (isLeanMode()) {\r\n      // eslint-disable-next-line no-console\r\n      console.log('Lean mode active - skipping performance monitoring');\r\n      return;\r\n    }\r\n\r\n    this.isMonitoring = true;\r\n    // eslint-disable-next-line no-console\r\n    console.log('Starting live demo performance monitoring...');\r\n\r\n    // Initial metrics collection\r\n    await this.collectCurrentMetrics();\r\n\r\n    // Set up periodic monitoring\r\n    this.monitoringInterval = setInterval(async () => {\r\n      try {\r\n        await this.collectCurrentMetrics();\r\n        await this.analyzePerformanceTrends();\r\n      } catch (error) {\r\n        // eslint-disable-next-line no-console\r\n        console.error('Error during performance monitoring:', error);\r\n      }\r\n    }, intervalMs);\r\n  }\r\n\r\n  stopMonitoring(): void {\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval);\r\n      this.monitoringInterval = null;\r\n    }\r\n    \r\n    if (this.performanceObserver) {\r\n      this.performanceObserver.disconnect();\r\n    }\r\n    \r\n    if (this.mutationObserver) {\r\n      this.mutationObserver.disconnect();\r\n    }\r\n    \r\n    this.isMonitoring = false;\r\n    console.log('Live demo performance monitoring stopped');\r\n  }\r\n\r\n  private async collectCurrentMetrics(): Promise<PerformanceMetrics> {\r\n    const now = new Date();\r\n    const memoryInfo = this.getMemoryUsage();\r\n    const apiTimes = await this.measureAPIResponseTimes();\r\n    const componentTimes = this.measureComponentRenderTimes();\r\n\r\n    const metrics: PerformanceMetrics = {\r\n      timestamp: now,\r\n      pageLoadTime: this.getPageLoadTime(),\r\n      firstContentfulPaint: this.getFCP(),\r\n      largestContentfulPaint: this.getLCP(),\r\n      cumulativeLayoutShift: this.getCLS(),\r\n      timeToInteractive: this.getTTI(),\r\n      memoryUsage: memoryInfo,\r\n      apiResponseTimes: apiTimes,\r\n      errorCount: this.getErrorCount(),\r\n      userInteractions: this.getUserInteractionCount(),\r\n      componentRenderTimes: componentTimes,\r\n    };\r\n\r\n    this.metrics.push(metrics);\r\n    \r\n    // Keep only last 100 metrics for memory efficiency\r\n    if (this.metrics.length > 100) {\r\n      this.metrics = this.metrics.slice(-100);\r\n    }\r\n\r\n    return metrics;\r\n  }\r\n\r\n  private getMemoryUsage(): number {\r\n    if (typeof window !== 'undefined' && 'performance' in window && 'memory' in (window.performance as any)) {\r\n      const memoryUsage = (window.performance as any).memory.usedJSHeapSize;\r\n      \r\n      // Throttle memory logging to at most once every 30 seconds\r\n      const now = Date.now();\r\n      if (now - this.lastMemoryLogTime > this.MEMORY_LOG_THROTTLE) {\r\n        this.lastMemoryLogTime = now;\r\n        const memoryInfo = (window.performance as any).memory;\r\n        // eslint-disable-next-line no-console\r\n        console.log('[Performance] Memory Usage:', {\r\n          used: `${(memoryInfo.usedJSHeapSize / 1024 / 1024).toFixed(2)} MB`,\r\n          total: `${(memoryInfo.totalJSHeapSize / 1024 / 1024).toFixed(2)} MB`,\r\n          limit: `${(memoryInfo.jsHeapSizeLimit / 1024 / 1024).toFixed(2)} MB`,\r\n          timestamp: new Date().toLocaleTimeString()\r\n        });\r\n      }\r\n      \r\n      return memoryUsage;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  private async measureAPIResponseTimes(): Promise<Record<string, number>> {\r\n    const apiEndpoints = [\r\n      '/api/health',\r\n      '/api/props',\r\n      '/api/predictions',\r\n      '/api/analytics'\r\n    ];\r\n\r\n    const responseTimes: Record<string, number> = {};\r\n\r\n    for (const endpoint of apiEndpoints) {\r\n      try {\r\n        const start = performance.now();\r\n        await fetch(endpoint, { method: 'HEAD' });\r\n        const end = performance.now();\r\n        responseTimes[endpoint] = end - start;\r\n      } catch (error) {\r\n        responseTimes[endpoint] = -1; // Indicate error\r\n      }\r\n    }\r\n\r\n    return responseTimes;\r\n  }\r\n\r\n  private measureComponentRenderTimes(): Record<string, number> {\r\n    // Measure render times for key components\r\n    const componentTimes: Record<string, number> = {};\r\n    \r\n    if (typeof window !== 'undefined' && window.performance) {\r\n      const entries = window.performance.getEntriesByType('measure');\r\n      entries.forEach((entry) => {\r\n        if (entry.name.includes('React')) {\r\n          componentTimes[entry.name] = entry.duration;\r\n        }\r\n      });\r\n    }\r\n\r\n    return componentTimes;\r\n  }\r\n\r\n  private getPageLoadTime(): number {\r\n    if (typeof window !== 'undefined' && window.performance) {\r\n      try {\r\n        // Use modern Navigation Timing API\r\n        const start = performance.getEntriesByType(\"navigation\")[0] as PerformanceNavigationTiming;\r\n        return Math.round(start.duration);\r\n      } catch (error) {\r\n        // Fallback to deprecated timing API if available\r\n        if (window.performance.timing) {\r\n          return window.performance.timing.loadEventEnd - window.performance.timing.navigationStart;\r\n        }\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  private getFCP(): number {\r\n    if (typeof window !== 'undefined' && window.performance) {\r\n      const entries = window.performance.getEntriesByName('first-contentful-paint');\r\n      return entries.length > 0 ? entries[0].startTime : 0;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  private getLCP(): number {\r\n    if (typeof window !== 'undefined' && window.performance) {\r\n      try {\r\n        // Check if largest-contentful-paint is supported\r\n        if ('getEntriesByType' in window.performance) {\r\n          const entries = window.performance.getEntriesByType('largest-contentful-paint');\r\n          return entries.length > 0 ? entries[entries.length - 1].startTime : 0;\r\n        }\r\n      } catch (error) {\r\n        // Silently handle unsupported entry type\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  private getCLS(): number {\r\n    if (typeof window !== 'undefined' && window.performance) {\r\n      const entries = window.performance.getEntriesByType('layout-shift');\r\n      return entries.reduce((cls: number, entry: any) => {\r\n        if (!entry.hadRecentInput) {\r\n          return cls + entry.value;\r\n        }\r\n        return cls;\r\n      }, 0);\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  private getTTI(): number {\r\n    // Simplified TTI calculation\r\n    return this.getPageLoadTime() * 1.2; // Approximate\r\n  }\r\n\r\n  private getErrorCount(): number {\r\n    // Track JavaScript errors\r\n    return (window as any).__demoErrorCount || 0;\r\n  }\r\n\r\n  private getUserInteractionCount(): number {\r\n    // Track user interactions\r\n    return (window as any).__demoInteractionCount || 0;\r\n  }\r\n\r\n  private async analyzePerformanceTrends(): Promise<void> {\r\n    if (this.metrics.length < 5) return; // Need sufficient data\r\n\r\n    const recent = this.metrics.slice(-5);\r\n    const older = this.metrics.slice(-10, -5);\r\n\r\n    if (older.length === 0) return;\r\n\r\n    const recentAvg = this.calculateAverageMetrics(recent);\r\n    const olderAvg = this.calculateAverageMetrics(older);\r\n\r\n    const trends = this.compareMetics(recentAvg, olderAvg);\r\n    \r\n    // Dispatch trend analysis event\r\n    const event = new CustomEvent('demo-performance-trends', {\r\n      detail: { trends, timestamp: Date.now() }\r\n    });\r\n    window.dispatchEvent(event);\r\n  }\r\n\r\n  private calculateAverageMetrics(metrics: PerformanceMetrics[]): PerformanceMetrics {\r\n    const avg: any = {};\r\n    const keys = Object.keys(metrics[0]) as (keyof PerformanceMetrics)[];\r\n    \r\n    keys.forEach(key => {\r\n      if (typeof metrics[0][key] === 'number') {\r\n        avg[key] = metrics.reduce((sum, m) => sum + (m[key] as number), 0) / metrics.length;\r\n      }\r\n    });\r\n\r\n    return avg as PerformanceMetrics;\r\n  }\r\n\r\n  private compareMetics(recent: PerformanceMetrics, older: PerformanceMetrics): any {\r\n    return {\r\n      pageLoadTime: this.calculateChange(recent.pageLoadTime, older.pageLoadTime),\r\n      memoryUsage: this.calculateChange(recent.memoryUsage, older.memoryUsage),\r\n      errorCount: this.calculateChange(recent.errorCount, older.errorCount),\r\n    };\r\n  }\r\n\r\n  private calculateChange(current: number, previous: number): number {\r\n    if (previous === 0) return 0;\r\n    return ((current - previous) / previous) * 100;\r\n  }\r\n\r\n  generateHealthReport(): DemoHealthReport {\r\n    if (this.metrics.length === 0) {\r\n      return this.getDefaultHealthReport();\r\n    }\r\n\r\n    const latest = this.metrics[this.metrics.length - 1];\r\n    const score = this.calculateOverallScore(latest);\r\n    const grade = this.getPerformanceGrade(score);\r\n    const issues = this.identifyCriticalIssues(latest);\r\n    const recommendations = this.generateRecommendations(latest);\r\n    const trends = this.analyzeTrends();\r\n\r\n    return {\r\n      overallScore: score,\r\n      performanceGrade: grade,\r\n      criticalIssues: issues,\r\n      recommendations,\r\n      trendAnalysis: trends,\r\n      metrics: latest,\r\n    };\r\n  }\r\n\r\n  private calculateOverallScore(metrics: PerformanceMetrics): number {\r\n    let score = 100;\r\n    \r\n    // Page load time penalty\r\n    if (metrics.pageLoadTime > this.PERFORMANCE_TARGETS.pageLoadTime) {\r\n      score -= 15;\r\n    }\r\n    \r\n    // FCP penalty\r\n    if (metrics.firstContentfulPaint > this.PERFORMANCE_TARGETS.firstContentfulPaint) {\r\n      score -= 10;\r\n    }\r\n    \r\n    // LCP penalty\r\n    if (metrics.largestContentfulPaint > this.PERFORMANCE_TARGETS.largestContentfulPaint) {\r\n      score -= 15;\r\n    }\r\n    \r\n    // CLS penalty\r\n    if (metrics.cumulativeLayoutShift > this.PERFORMANCE_TARGETS.cumulativeLayoutShift) {\r\n      score -= 20;\r\n    }\r\n    \r\n    // Memory usage penalty\r\n    if (metrics.memoryUsage > this.PERFORMANCE_TARGETS.memoryThreshold) {\r\n      score -= 10;\r\n    }\r\n    \r\n    // API response time penalty\r\n    Object.values(metrics.apiResponseTimes).forEach(time => {\r\n      if (time > this.PERFORMANCE_TARGETS.apiResponseTime) {\r\n        score -= 5;\r\n      }\r\n    });\r\n    \r\n    // Error penalty\r\n    if (metrics.errorCount > 0) {\r\n      score -= metrics.errorCount * 5;\r\n    }\r\n\r\n    return Math.max(0, score);\r\n  }\r\n\r\n  private getPerformanceGrade(score: number): 'A' | 'B' | 'C' | 'D' | 'F' {\r\n    if (score >= 90) return 'A';\r\n    if (score >= 80) return 'B';\r\n    if (score >= 70) return 'C';\r\n    if (score >= 60) return 'D';\r\n    return 'F';\r\n  }\r\n\r\n  private identifyCriticalIssues(metrics: PerformanceMetrics): string[] {\r\n    const issues: string[] = [];\r\n    \r\n    if (metrics.pageLoadTime > this.PERFORMANCE_TARGETS.pageLoadTime) {\r\n      issues.push(`Page load time (${(metrics.pageLoadTime / 1000).toFixed(1)}s) exceeds target`);\r\n    }\r\n    \r\n    if (metrics.cumulativeLayoutShift > this.PERFORMANCE_TARGETS.cumulativeLayoutShift) {\r\n      issues.push(`Layout shift (${metrics.cumulativeLayoutShift.toFixed(3)}) causes visual instability`);\r\n    }\r\n    \r\n    if (metrics.memoryUsage > this.PERFORMANCE_TARGETS.memoryThreshold) {\r\n      issues.push(`High memory usage (${(metrics.memoryUsage / 1024 / 1024).toFixed(1)}MB)`);\r\n    }\r\n    \r\n    if (metrics.errorCount > 0) {\r\n      issues.push(`${metrics.errorCount} JavaScript errors detected`);\r\n    }\r\n\r\n    return issues;\r\n  }\r\n\r\n  private generateRecommendations(metrics: PerformanceMetrics): string[] {\r\n    const recommendations: string[] = [];\r\n    \r\n    if (metrics.pageLoadTime > this.PERFORMANCE_TARGETS.pageLoadTime) {\r\n      recommendations.push('Optimize bundle size and implement code splitting');\r\n      recommendations.push('Enable gzip compression and browser caching');\r\n    }\r\n    \r\n    if (metrics.firstContentfulPaint > this.PERFORMANCE_TARGETS.firstContentfulPaint) {\r\n      recommendations.push('Optimize critical rendering path');\r\n      recommendations.push('Preload essential resources');\r\n    }\r\n    \r\n    if (metrics.cumulativeLayoutShift > this.PERFORMANCE_TARGETS.cumulativeLayoutShift) {\r\n      recommendations.push('Add size attributes to images and media');\r\n      recommendations.push('Reserve space for dynamic content');\r\n    }\r\n    \r\n    if (metrics.memoryUsage > this.PERFORMANCE_TARGETS.memoryThreshold) {\r\n      recommendations.push('Implement virtual scrolling for large lists');\r\n      recommendations.push('Clean up event listeners and subscriptions');\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  private analyzeTrends(): { direction: 'improving' | 'stable' | 'declining'; changePercentage: number } {\r\n    if (this.metrics.length < 5) {\r\n      return { direction: 'stable', changePercentage: 0 };\r\n    }\r\n\r\n    const recent = this.metrics.slice(-3);\r\n    const older = this.metrics.slice(-6, -3);\r\n    \r\n    const recentScore = this.calculateOverallScore(this.calculateAverageMetrics(recent));\r\n    const olderScore = this.calculateOverallScore(this.calculateAverageMetrics(older));\r\n    \r\n    const change = ((recentScore - olderScore) / olderScore) * 100;\r\n    \r\n    let direction: 'improving' | 'stable' | 'declining' = 'stable';\r\n    if (change > 5) direction = 'improving';\r\n    else if (change < -5) direction = 'declining';\r\n    \r\n    return { direction, changePercentage: Math.abs(change) };\r\n  }\r\n\r\n  private getDefaultHealthReport(): DemoHealthReport {\r\n    return {\r\n      overallScore: 0,\r\n      performanceGrade: 'F',\r\n      criticalIssues: ['No performance data available'],\r\n      recommendations: ['Start performance monitoring'],\r\n      trendAnalysis: { direction: 'stable', changePercentage: 0 },\r\n      metrics: {\r\n        timestamp: new Date(),\r\n        pageLoadTime: 0,\r\n        firstContentfulPaint: 0,\r\n        largestContentfulPaint: 0,\r\n        cumulativeLayoutShift: 0,\r\n        timeToInteractive: 0,\r\n        memoryUsage: 0,\r\n        apiResponseTimes: {},\r\n        errorCount: 0,\r\n        userInteractions: 0,\r\n        componentRenderTimes: {},\r\n      },\r\n    };\r\n  }\r\n\r\n  getOptimizationSuggestions(): OptimizationSuggestion[] {\r\n    return [\r\n      {\r\n        id: 'bundle-optimization',\r\n        priority: 'high',\r\n        category: 'performance',\r\n        title: 'Optimize JavaScript Bundle Size',\r\n        description: 'Reduce bundle size through code splitting and tree shaking',\r\n        impact: 'Improve page load time by 20-30%',\r\n        effort: 'medium',\r\n        implementation: 'Implement dynamic imports and remove unused dependencies',\r\n      },\r\n      {\r\n        id: 'image-optimization',\r\n        priority: 'high',\r\n        category: 'performance',\r\n        title: 'Optimize Image Loading',\r\n        description: 'Implement lazy loading and modern image formats',\r\n        impact: 'Reduce LCP by 15-25%',\r\n        effort: 'low',\r\n        implementation: 'Use next/image or similar optimization libraries',\r\n      },\r\n      {\r\n        id: 'api-caching',\r\n        priority: 'medium',\r\n        category: 'performance',\r\n        title: 'Implement API Response Caching',\r\n        description: 'Cache frequently requested API responses',\r\n        impact: 'Improve API response times by 40-60%',\r\n        effort: 'medium',\r\n        implementation: 'Use React Query or SWR for intelligent caching',\r\n      },\r\n      {\r\n        id: 'virtual-scrolling',\r\n        priority: 'medium',\r\n        category: 'performance',\r\n        title: 'Implement Virtual Scrolling',\r\n        description: 'Virtualize large data lists to reduce DOM nodes',\r\n        impact: 'Reduce memory usage by 30-50%',\r\n        effort: 'high',\r\n        implementation: 'Use react-window or react-virtualized',\r\n      },\r\n      {\r\n        id: 'error-boundary',\r\n        priority: 'high',\r\n        category: 'reliability',\r\n        title: 'Add Comprehensive Error Boundaries',\r\n        description: 'Implement error boundaries to prevent app crashes',\r\n        impact: 'Improve app stability and user experience',\r\n        effort: 'low',\r\n        implementation: 'Wrap components with React error boundaries',\r\n      },\r\n    ];\r\n  }\r\n\r\n  getCurrentMetrics(): PerformanceMetrics | null {\r\n    return this.metrics.length > 0 ? this.metrics[this.metrics.length - 1] : null;\r\n  }\r\n\r\n  getMetricsHistory(): PerformanceMetrics[] {\r\n    return [...this.metrics];\r\n  }\r\n\r\n  isMonitoringActive(): boolean {\r\n    return this.isMonitoring;\r\n  }\r\n}\r\n\r\nexport default LiveDemoPerformanceMonitor;\r\nexport type { PerformanceMetrics, DemoHealthReport, OptimizationSuggestion };\r\n"],"mappings":";;;;;;AAAA,IAAAA,SAAA,GAAAC,OAAA;AAA+C,IAAAC,2BAAA;AAuC/C,MAAMC,0BAA0B,CAAC;EAoBvBC,WAAWA,CAAA,EAAG;IAAA,KAlBdC,OAAO,GAAyB,EAAE;IAAA,KAClCC,YAAY,GAAG,KAAK;IAAA,KACpBC,kBAAkB,GAA0B,IAAI;IAAA,KAChDC,mBAAmB,GAA+B,IAAI;IAAA,KACtDC,gBAAgB,GAA4B,IAAI;IAAA,KAChDC,iBAAiB,GAAG,CAAC;IAAA,KACZC,mBAAmB,GAAG,KAAK;IAAE;IAAA,KAE7BC,mBAAmB,GAAG;MACrCC,YAAY,EAAE,IAAI;MAAM;MACxBC,oBAAoB,EAAE,IAAI;MAAI;MAC9BC,sBAAsB,EAAE,IAAI;MAAE;MAC9BC,qBAAqB,EAAE,GAAG;MAAI;MAC9BC,iBAAiB,EAAE,IAAI;MAAO;MAC9BC,eAAe,EAAE,IAAI;MAAS;MAC9BC,eAAe,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI,CAAE;IACtC,CAAC;IAGC,IAAI,CAACC,6BAA6B,CAAC,CAAC;IACpC,IAAI,CAACC,0BAA0B,CAAC,CAAC;EACnC;EAEA,OAAOC,WAAWA,CAAA,EAA+B;IAC/C,IAAI,CAACnB,0BAA0B,CAACoB,QAAQ,EAAE;MACxCpB,0BAA0B,CAACoB,QAAQ,GAAG,IAAIpB,0BAA0B,CAAC,CAAC;IACxE;IACA,OAAOA,0BAA0B,CAACoB,QAAQ;EAC5C;EAEQH,6BAA6BA,CAAA,EAAS;IAC5C,IAAI,OAAOI,MAAM,KAAK,WAAW,IAAI,EAAE,qBAAqB,IAAIA,MAAM,CAAC,EAAE;MACvE;IACF;IAEA,IAAI;MACF,IAAI,CAAChB,mBAAmB,GAAG,IAAIiB,mBAAmB,CAAEC,IAAI,IAAK;QAC3D,MAAMC,OAAO,GAAGD,IAAI,CAACE,UAAU,CAAC,CAAC;QACjCD,OAAO,CAACE,OAAO,CAAEC,KAAK,IAAK;UACzB,IAAI,CAACC,uBAAuB,CAACD,KAAK,CAAC;QACrC,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,IAAI,CAACtB,mBAAmB,CAACwB,OAAO,CAAC;QAC/BC,UAAU,EAAE,CAAC,YAAY,EAAE,OAAO,EAAE,cAAc,EAAE,0BAA0B;MAChF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,oCAAoC,EAAEF,KAAK,CAAC;IAC3D;EACF;EAEQb,0BAA0BA,CAAA,EAAS;IACzC,IAAI,OAAOG,MAAM,KAAK,WAAW,IAAI,EAAE,kBAAkB,IAAIA,MAAM,CAAC,EAAE;MACpE;IACF;IAEA,IAAI,CAACf,gBAAgB,GAAG,IAAI4B,gBAAgB,CAAEC,SAAS,IAAK;MAC1D,IAAI,CAACC,eAAe,CAACD,SAAS,CAAC;IACjC,CAAC,CAAC;IAEF,IAAIE,QAAQ,CAACC,IAAI,EAAE;MACjB,IAAI,CAAChC,gBAAgB,CAACuB,OAAO,CAACQ,QAAQ,CAACC,IAAI,EAAE;QAC3CC,SAAS,EAAE,IAAI;QACfC,OAAO,EAAE,IAAI;QACbC,UAAU,EAAE,IAAI;QAChBC,iBAAiB,EAAE;MACrB,CAAC,CAAC;IACJ;EACF;EAEQd,uBAAuBA,CAACD,KAAuB,EAAQ;IAC7D;IACA,IAAIA,KAAK,CAACgB,SAAS,KAAK,YAAY,EAAE;MACpC,IAAI,CAACC,uBAAuB,CAACjB,KAAoC,CAAC;IACpE,CAAC,MAAM,IAAIA,KAAK,CAACgB,SAAS,KAAK,OAAO,EAAE;MACtC,IAAI,CAACE,kBAAkB,CAAClB,KAA+B,CAAC;IAC1D,CAAC,MAAM,IAAIA,KAAK,CAACgB,SAAS,KAAK,0BAA0B,EAAE;MACzD,IAAI,CAACG,gBAAgB,CAACnB,KAAY,CAAC;IACrC,CAAC,MAAM,IAAIA,KAAK,CAACgB,SAAS,KAAK,cAAc,EAAE;MAC7C,IAAI,CAACI,gBAAgB,CAACpB,KAAY,CAAC;IACrC;EACF;EAEQiB,uBAAuBA,CAACjB,KAAkC,EAAQ;IACxE,MAAMqB,QAAQ,GAAGrB,KAAK,CAACsB,YAAY,GAAGtB,KAAK,CAACuB,UAAU;IACtD,MAAMC,eAAe,GAAGxB,KAAK,CAACyB,cAAc,GAAGzB,KAAK,CAACuB,UAAU;IAE/D,IAAI,CAACG,YAAY,CAAC,cAAc,EAAEL,QAAQ,CAAC;IAC3C,IAAI,CAACK,YAAY,CAAC,mBAAmB,EAAEF,eAAe,CAAC;EACzD;EAEQN,kBAAkBA,CAAClB,KAA6B,EAAQ;IAC9D,IAAIA,KAAK,CAAC2B,IAAI,KAAK,wBAAwB,EAAE;MAC3C,IAAI,CAACD,YAAY,CAAC,sBAAsB,EAAE1B,KAAK,CAAC4B,SAAS,CAAC;IAC5D;EACF;EAEQT,gBAAgBA,CAACnB,KAAU,EAAQ;IACzC,IAAI,CAAC0B,YAAY,CAAC,wBAAwB,EAAE1B,KAAK,CAAC4B,SAAS,CAAC;EAC9D;EAEQR,gBAAgBA,CAACpB,KAAU,EAAQ;IACzC,IAAI,CAACA,KAAK,CAAC6B,cAAc,EAAE;MACzB,IAAI,CAACH,YAAY,CAAC,uBAAuB,EAAE1B,KAAK,CAAC8B,KAAK,CAAC;IACzD;EACF;EAEQrB,eAAeA,CAACD,SAA2B,EAAQ;IACzD;IACA,IAAIuB,kBAAkB,GAAG,CAAC;IAE1BvB,SAAS,CAACT,OAAO,CAAEiC,QAAQ,IAAK;MAC9B,IAAIA,QAAQ,CAACC,IAAI,KAAK,WAAW,EAAE;QACjCF,kBAAkB,IAAIC,QAAQ,CAACE,UAAU,CAACC,MAAM,GAAGH,QAAQ,CAACI,YAAY,CAACD,MAAM;MACjF;IACF,CAAC,CAAC;IAEF,IAAIJ,kBAAkB,GAAG,EAAE,EAAE;MAC3B,IAAI,CAACM,WAAW,CAAC,yBAAyB,EAAE;QAAEC,KAAK,EAAEP;MAAmB,CAAC,CAAC;IAC5E;EACF;EAEQL,YAAYA,CAACa,MAAc,EAAET,KAAa,EAAQ;IACxD;IACA,MAAMU,KAAK,GAAG,IAAIC,WAAW,CAAC,yBAAyB,EAAE;MACvDC,MAAM,EAAE;QAAEH,MAAM;QAAET,KAAK;QAAEa,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;MAAE;IACjD,CAAC,CAAC;IACFnD,MAAM,CAACoD,aAAa,CAACN,KAAK,CAAC;EAC7B;EAEQH,WAAWA,CAACJ,IAAY,EAAEc,IAAS,EAAQ;IACjD,MAAMP,KAAK,GAAG,IAAIC,WAAW,CAAC,wBAAwB,EAAE;MACtDC,MAAM,EAAE;QAAET,IAAI;QAAEc,IAAI;QAAEJ,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;MAAE;IAC9C,CAAC,CAAC;IACFnD,MAAM,CAACoD,aAAa,CAACN,KAAK,CAAC;EAC7B;EAEA,MAAMQ,eAAeA,CAACC,UAAkB,GAAG,KAAK,EAAiB;IAC/D,IAAI,IAAI,CAACzE,YAAY,EAAE;MACrB;MACA6B,OAAO,CAACC,IAAI,CAAC,yCAAyC,CAAC;MACvD;IACF;;IAEA;IACA,IAAI,IAAA4C,oBAAU,EAAC,CAAC,EAAE;MAChB;MACA7C,OAAO,CAAC8C,GAAG,CAAC,oDAAoD,CAAC;MACjE;IACF;IAEA,IAAI,CAAC3E,YAAY,GAAG,IAAI;IACxB;IACA6B,OAAO,CAAC8C,GAAG,CAAC,8CAA8C,CAAC;;IAE3D;IACA,MAAM,IAAI,CAACC,qBAAqB,CAAC,CAAC;;IAElC;IACA,IAAI,CAAC3E,kBAAkB,GAAG4E,WAAW,CAAC,YAAY;MAChD,IAAI;QACF,MAAM,IAAI,CAACD,qBAAqB,CAAC,CAAC;QAClC,MAAM,IAAI,CAACE,wBAAwB,CAAC,CAAC;MACvC,CAAC,CAAC,OAAOlD,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF,CAAC,EAAE6C,UAAU,CAAC;EAChB;EAEAM,cAAcA,CAAA,EAAS;IACrB,IAAI,IAAI,CAAC9E,kBAAkB,EAAE;MAC3B+E,aAAa,CAAC,IAAI,CAAC/E,kBAAkB,CAAC;MACtC,IAAI,CAACA,kBAAkB,GAAG,IAAI;IAChC;IAEA,IAAI,IAAI,CAACC,mBAAmB,EAAE;MAC5B,IAAI,CAACA,mBAAmB,CAAC+E,UAAU,CAAC,CAAC;IACvC;IAEA,IAAI,IAAI,CAAC9E,gBAAgB,EAAE;MACzB,IAAI,CAACA,gBAAgB,CAAC8E,UAAU,CAAC,CAAC;IACpC;IAEA,IAAI,CAACjF,YAAY,GAAG,KAAK;IACzB6B,OAAO,CAAC8C,GAAG,CAAC,0CAA0C,CAAC;EACzD;EAEA,MAAcC,qBAAqBA,CAAA,EAAgC;IACjE,MAAMP,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;IACtB,MAAMc,UAAU,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;IACxC,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACC,uBAAuB,CAAC,CAAC;IACrD,MAAMC,cAAc,GAAG,IAAI,CAACC,2BAA2B,CAAC,CAAC;IAEzD,MAAMxF,OAA2B,GAAG;MAClCoE,SAAS,EAAEE,GAAG;MACd9D,YAAY,EAAE,IAAI,CAACiF,eAAe,CAAC,CAAC;MACpChF,oBAAoB,EAAE,IAAI,CAACiF,MAAM,CAAC,CAAC;MACnChF,sBAAsB,EAAE,IAAI,CAACiF,MAAM,CAAC,CAAC;MACrChF,qBAAqB,EAAE,IAAI,CAACiF,MAAM,CAAC,CAAC;MACpChF,iBAAiB,EAAE,IAAI,CAACiF,MAAM,CAAC,CAAC;MAChCC,WAAW,EAAEX,UAAU;MACvBY,gBAAgB,EAAEV,QAAQ;MAC1BW,UAAU,EAAE,IAAI,CAACC,aAAa,CAAC,CAAC;MAChCC,gBAAgB,EAAE,IAAI,CAACC,uBAAuB,CAAC,CAAC;MAChDC,oBAAoB,EAAEb;IACxB,CAAC;IAED,IAAI,CAACvF,OAAO,CAACqG,IAAI,CAACrG,OAAO,CAAC;;IAE1B;IACA,IAAI,IAAI,CAACA,OAAO,CAAC4D,MAAM,GAAG,GAAG,EAAE;MAC7B,IAAI,CAAC5D,OAAO,GAAG,IAAI,CAACA,OAAO,CAACsG,KAAK,CAAC,CAAC,GAAG,CAAC;IACzC;IAEA,OAAOtG,OAAO;EAChB;EAEQoF,cAAcA,CAAA,EAAW;IAC/B,IAAI,OAAOjE,MAAM,KAAK,WAAW,IAAI,aAAa,IAAIA,MAAM,IAAI,QAAQ,IAAKA,MAAM,CAACoF,WAAmB,EAAE;MACvG,MAAMT,WAAW,GAAI3E,MAAM,CAACoF,WAAW,CAASC,MAAM,CAACC,cAAc;;MAErE;MACA,MAAMnC,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;MACtB,IAAIA,GAAG,GAAG,IAAI,CAACjE,iBAAiB,GAAG,IAAI,CAACC,mBAAmB,EAAE;QAC3D,IAAI,CAACD,iBAAiB,GAAGiE,GAAG;QAC5B,MAAMa,UAAU,GAAIhE,MAAM,CAACoF,WAAW,CAASC,MAAM;QACrD;QACA1E,OAAO,CAAC8C,GAAG,CAAC,6BAA6B,EAAE;UACzC8B,IAAI,EAAE,GAAG,CAACvB,UAAU,CAACsB,cAAc,GAAG,IAAI,GAAG,IAAI,EAAEE,OAAO,CAAC,CAAC,CAAC,KAAK;UAClEC,KAAK,EAAE,GAAG,CAACzB,UAAU,CAAC0B,eAAe,GAAG,IAAI,GAAG,IAAI,EAAEF,OAAO,CAAC,CAAC,CAAC,KAAK;UACpEG,KAAK,EAAE,GAAG,CAAC3B,UAAU,CAAC4B,eAAe,GAAG,IAAI,GAAG,IAAI,EAAEJ,OAAO,CAAC,CAAC,CAAC,KAAK;UACpEvC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAAC2C,kBAAkB,CAAC;QAC3C,CAAC,CAAC;MACJ;MAEA,OAAOlB,WAAW;IACpB;IACA,OAAO,CAAC;EACV;EAEA,MAAcR,uBAAuBA,CAAA,EAAoC;IACvE,MAAM2B,YAAY,GAAG,CACnB,aAAa,EACb,YAAY,EACZ,kBAAkB,EAClB,gBAAgB,CACjB;IAED,MAAMC,aAAqC,GAAG,CAAC,CAAC;IAEhD,KAAK,MAAMC,QAAQ,IAAIF,YAAY,EAAE;MACnC,IAAI;QACF,MAAMG,KAAK,GAAGb,WAAW,CAACjC,GAAG,CAAC,CAAC;QAC/B,MAAM+C,KAAK,CAACF,QAAQ,EAAE;UAAEG,MAAM,EAAE;QAAO,CAAC,CAAC;QACzC,MAAMC,GAAG,GAAGhB,WAAW,CAACjC,GAAG,CAAC,CAAC;QAC7B4C,aAAa,CAACC,QAAQ,CAAC,GAAGI,GAAG,GAAGH,KAAK;MACvC,CAAC,CAAC,OAAOvF,KAAK,EAAE;QACdqF,aAAa,CAACC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAChC;IACF;IAEA,OAAOD,aAAa;EACtB;EAEQ1B,2BAA2BA,CAAA,EAA2B;IAC5D;IACA,MAAMD,cAAsC,GAAG,CAAC,CAAC;IAEjD,IAAI,OAAOpE,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACoF,WAAW,EAAE;MACvD,MAAMjF,OAAO,GAAGH,MAAM,CAACoF,WAAW,CAACiB,gBAAgB,CAAC,SAAS,CAAC;MAC9DlG,OAAO,CAACE,OAAO,CAAEC,KAAK,IAAK;QACzB,IAAIA,KAAK,CAAC2B,IAAI,CAACqE,QAAQ,CAAC,OAAO,CAAC,EAAE;UAChClC,cAAc,CAAC9D,KAAK,CAAC2B,IAAI,CAAC,GAAG3B,KAAK,CAACiG,QAAQ;QAC7C;MACF,CAAC,CAAC;IACJ;IAEA,OAAOnC,cAAc;EACvB;EAEQE,eAAeA,CAAA,EAAW;IAChC,IAAI,OAAOtE,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACoF,WAAW,EAAE;MACvD,IAAI;QACF;QACA,MAAMa,KAAK,GAAGb,WAAW,CAACiB,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAgC;QAC1F,OAAOG,IAAI,CAACC,KAAK,CAACR,KAAK,CAACM,QAAQ,CAAC;MACnC,CAAC,CAAC,OAAO7F,KAAK,EAAE;QACd;QACA,IAAIV,MAAM,CAACoF,WAAW,CAACsB,MAAM,EAAE;UAC7B,OAAO1G,MAAM,CAACoF,WAAW,CAACsB,MAAM,CAAC9E,YAAY,GAAG5B,MAAM,CAACoF,WAAW,CAACsB,MAAM,CAACC,eAAe;QAC3F;MACF;IACF;IACA,OAAO,CAAC;EACV;EAEQpC,MAAMA,CAAA,EAAW;IACvB,IAAI,OAAOvE,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACoF,WAAW,EAAE;MACvD,MAAMjF,OAAO,GAAGH,MAAM,CAACoF,WAAW,CAACwB,gBAAgB,CAAC,wBAAwB,CAAC;MAC7E,OAAOzG,OAAO,CAACsC,MAAM,GAAG,CAAC,GAAGtC,OAAO,CAAC,CAAC,CAAC,CAAC+B,SAAS,GAAG,CAAC;IACtD;IACA,OAAO,CAAC;EACV;EAEQsC,MAAMA,CAAA,EAAW;IACvB,IAAI,OAAOxE,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACoF,WAAW,EAAE;MACvD,IAAI;QACF;QACA,IAAI,kBAAkB,IAAIpF,MAAM,CAACoF,WAAW,EAAE;UAC5C,MAAMjF,OAAO,GAAGH,MAAM,CAACoF,WAAW,CAACiB,gBAAgB,CAAC,0BAA0B,CAAC;UAC/E,OAAOlG,OAAO,CAACsC,MAAM,GAAG,CAAC,GAAGtC,OAAO,CAACA,OAAO,CAACsC,MAAM,GAAG,CAAC,CAAC,CAACP,SAAS,GAAG,CAAC;QACvE;MACF,CAAC,CAAC,OAAOxB,KAAK,EAAE;QACd;MAAA;IAEJ;IACA,OAAO,CAAC;EACV;EAEQ+D,MAAMA,CAAA,EAAW;IACvB,IAAI,OAAOzE,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACoF,WAAW,EAAE;MACvD,MAAMjF,OAAO,GAAGH,MAAM,CAACoF,WAAW,CAACiB,gBAAgB,CAAC,cAAc,CAAC;MACnE,OAAOlG,OAAO,CAAC0G,MAAM,CAAC,CAACC,GAAW,EAAExG,KAAU,KAAK;QACjD,IAAI,CAACA,KAAK,CAAC6B,cAAc,EAAE;UACzB,OAAO2E,GAAG,GAAGxG,KAAK,CAAC8B,KAAK;QAC1B;QACA,OAAO0E,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC;IACP;IACA,OAAO,CAAC;EACV;EAEQpC,MAAMA,CAAA,EAAW;IACvB;IACA,OAAO,IAAI,CAACJ,eAAe,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;EACvC;EAEQQ,aAAaA,CAAA,EAAW;IAC9B;IACA,OAAQ9E,MAAM,CAAS+G,gBAAgB,IAAI,CAAC;EAC9C;EAEQ/B,uBAAuBA,CAAA,EAAW;IACxC;IACA,OAAQhF,MAAM,CAASgH,sBAAsB,IAAI,CAAC;EACpD;EAEA,MAAcpD,wBAAwBA,CAAA,EAAkB;IACtD,IAAI,IAAI,CAAC/E,OAAO,CAAC4D,MAAM,GAAG,CAAC,EAAE,OAAO,CAAC;;IAErC,MAAMwE,MAAM,GAAG,IAAI,CAACpI,OAAO,CAACsG,KAAK,CAAC,CAAC,CAAC,CAAC;IACrC,MAAM+B,KAAK,GAAG,IAAI,CAACrI,OAAO,CAACsG,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAEzC,IAAI+B,KAAK,CAACzE,MAAM,KAAK,CAAC,EAAE;IAExB,MAAM0E,SAAS,GAAG,IAAI,CAACC,uBAAuB,CAACH,MAAM,CAAC;IACtD,MAAMI,QAAQ,GAAG,IAAI,CAACD,uBAAuB,CAACF,KAAK,CAAC;IAEpD,MAAMI,MAAM,GAAG,IAAI,CAACC,aAAa,CAACJ,SAAS,EAAEE,QAAQ,CAAC;;IAEtD;IACA,MAAMvE,KAAK,GAAG,IAAIC,WAAW,CAAC,yBAAyB,EAAE;MACvDC,MAAM,EAAE;QAAEsE,MAAM;QAAErE,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;MAAE;IAC1C,CAAC,CAAC;IACFnD,MAAM,CAACoD,aAAa,CAACN,KAAK,CAAC;EAC7B;EAEQsE,uBAAuBA,CAACvI,OAA6B,EAAsB;IACjF,MAAM2I,GAAQ,GAAG,CAAC,CAAC;IACnB,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC5I,OAAO,CAAC,CAAC,CAAC,CAAiC;IAEpE4I,IAAI,CAACpH,OAAO,CAACsH,GAAG,IAAI;MAClB,IAAI,OAAO9I,OAAO,CAAC,CAAC,CAAC,CAAC8I,GAAG,CAAC,KAAK,QAAQ,EAAE;QACvCH,GAAG,CAACG,GAAG,CAAC,GAAG9I,OAAO,CAACgI,MAAM,CAAC,CAACe,GAAG,EAAEC,CAAC,KAAKD,GAAG,GAAIC,CAAC,CAACF,GAAG,CAAY,EAAE,CAAC,CAAC,GAAG9I,OAAO,CAAC4D,MAAM;MACrF;IACF,CAAC,CAAC;IAEF,OAAO+E,GAAG;EACZ;EAEQD,aAAaA,CAACN,MAA0B,EAAEC,KAAyB,EAAO;IAChF,OAAO;MACL7H,YAAY,EAAE,IAAI,CAACyI,eAAe,CAACb,MAAM,CAAC5H,YAAY,EAAE6H,KAAK,CAAC7H,YAAY,CAAC;MAC3EsF,WAAW,EAAE,IAAI,CAACmD,eAAe,CAACb,MAAM,CAACtC,WAAW,EAAEuC,KAAK,CAACvC,WAAW,CAAC;MACxEE,UAAU,EAAE,IAAI,CAACiD,eAAe,CAACb,MAAM,CAACpC,UAAU,EAAEqC,KAAK,CAACrC,UAAU;IACtE,CAAC;EACH;EAEQiD,eAAeA,CAACC,OAAe,EAAEC,QAAgB,EAAU;IACjE,IAAIA,QAAQ,KAAK,CAAC,EAAE,OAAO,CAAC;IAC5B,OAAQ,CAACD,OAAO,GAAGC,QAAQ,IAAIA,QAAQ,GAAI,GAAG;EAChD;EAEAC,oBAAoBA,CAAA,EAAqB;IACvC,IAAI,IAAI,CAACpJ,OAAO,CAAC4D,MAAM,KAAK,CAAC,EAAE;MAC7B,OAAO,IAAI,CAACyF,sBAAsB,CAAC,CAAC;IACtC;IAEA,MAAMC,MAAM,GAAG,IAAI,CAACtJ,OAAO,CAAC,IAAI,CAACA,OAAO,CAAC4D,MAAM,GAAG,CAAC,CAAC;IACpD,MAAM2F,KAAK,GAAG,IAAI,CAACC,qBAAqB,CAACF,MAAM,CAAC;IAChD,MAAMG,KAAK,GAAG,IAAI,CAACC,mBAAmB,CAACH,KAAK,CAAC;IAC7C,MAAMI,MAAM,GAAG,IAAI,CAACC,sBAAsB,CAACN,MAAM,CAAC;IAClD,MAAMO,eAAe,GAAG,IAAI,CAACC,uBAAuB,CAACR,MAAM,CAAC;IAC5D,MAAMb,MAAM,GAAG,IAAI,CAACsB,aAAa,CAAC,CAAC;IAEnC,OAAO;MACLC,YAAY,EAAET,KAAK;MACnBU,gBAAgB,EAAER,KAAK;MACvBS,cAAc,EAAEP,MAAM;MACtBE,eAAe;MACfM,aAAa,EAAE1B,MAAM;MACrBzI,OAAO,EAAEsJ;IACX,CAAC;EACH;EAEQE,qBAAqBA,CAACxJ,OAA2B,EAAU;IACjE,IAAIuJ,KAAK,GAAG,GAAG;;IAEf;IACA,IAAIvJ,OAAO,CAACQ,YAAY,GAAG,IAAI,CAACD,mBAAmB,CAACC,YAAY,EAAE;MAChE+I,KAAK,IAAI,EAAE;IACb;;IAEA;IACA,IAAIvJ,OAAO,CAACS,oBAAoB,GAAG,IAAI,CAACF,mBAAmB,CAACE,oBAAoB,EAAE;MAChF8I,KAAK,IAAI,EAAE;IACb;;IAEA;IACA,IAAIvJ,OAAO,CAACU,sBAAsB,GAAG,IAAI,CAACH,mBAAmB,CAACG,sBAAsB,EAAE;MACpF6I,KAAK,IAAI,EAAE;IACb;;IAEA;IACA,IAAIvJ,OAAO,CAACW,qBAAqB,GAAG,IAAI,CAACJ,mBAAmB,CAACI,qBAAqB,EAAE;MAClF4I,KAAK,IAAI,EAAE;IACb;;IAEA;IACA,IAAIvJ,OAAO,CAAC8F,WAAW,GAAG,IAAI,CAACvF,mBAAmB,CAACO,eAAe,EAAE;MAClEyI,KAAK,IAAI,EAAE;IACb;;IAEA;IACAV,MAAM,CAACuB,MAAM,CAACpK,OAAO,CAAC+F,gBAAgB,CAAC,CAACvE,OAAO,CAAC6I,IAAI,IAAI;MACtD,IAAIA,IAAI,GAAG,IAAI,CAAC9J,mBAAmB,CAACM,eAAe,EAAE;QACnD0I,KAAK,IAAI,CAAC;MACZ;IACF,CAAC,CAAC;;IAEF;IACA,IAAIvJ,OAAO,CAACgG,UAAU,GAAG,CAAC,EAAE;MAC1BuD,KAAK,IAAIvJ,OAAO,CAACgG,UAAU,GAAG,CAAC;IACjC;IAEA,OAAO2B,IAAI,CAAC2C,GAAG,CAAC,CAAC,EAAEf,KAAK,CAAC;EAC3B;EAEQG,mBAAmBA,CAACH,KAAa,EAA+B;IACtE,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,GAAG;IAC3B,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,GAAG;IAC3B,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,GAAG;IAC3B,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,GAAG;IAC3B,OAAO,GAAG;EACZ;EAEQK,sBAAsBA,CAAC5J,OAA2B,EAAY;IACpE,MAAM2J,MAAgB,GAAG,EAAE;IAE3B,IAAI3J,OAAO,CAACQ,YAAY,GAAG,IAAI,CAACD,mBAAmB,CAACC,YAAY,EAAE;MAChEmJ,MAAM,CAACtD,IAAI,CAAC,mBAAmB,CAACrG,OAAO,CAACQ,YAAY,GAAG,IAAI,EAAEmG,OAAO,CAAC,CAAC,CAAC,mBAAmB,CAAC;IAC7F;IAEA,IAAI3G,OAAO,CAACW,qBAAqB,GAAG,IAAI,CAACJ,mBAAmB,CAACI,qBAAqB,EAAE;MAClFgJ,MAAM,CAACtD,IAAI,CAAC,iBAAiBrG,OAAO,CAACW,qBAAqB,CAACgG,OAAO,CAAC,CAAC,CAAC,6BAA6B,CAAC;IACrG;IAEA,IAAI3G,OAAO,CAAC8F,WAAW,GAAG,IAAI,CAACvF,mBAAmB,CAACO,eAAe,EAAE;MAClE6I,MAAM,CAACtD,IAAI,CAAC,sBAAsB,CAACrG,OAAO,CAAC8F,WAAW,GAAG,IAAI,GAAG,IAAI,EAAEa,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;IACxF;IAEA,IAAI3G,OAAO,CAACgG,UAAU,GAAG,CAAC,EAAE;MAC1B2D,MAAM,CAACtD,IAAI,CAAC,GAAGrG,OAAO,CAACgG,UAAU,6BAA6B,CAAC;IACjE;IAEA,OAAO2D,MAAM;EACf;EAEQG,uBAAuBA,CAAC9J,OAA2B,EAAY;IACrE,MAAM6J,eAAyB,GAAG,EAAE;IAEpC,IAAI7J,OAAO,CAACQ,YAAY,GAAG,IAAI,CAACD,mBAAmB,CAACC,YAAY,EAAE;MAChEqJ,eAAe,CAACxD,IAAI,CAAC,mDAAmD,CAAC;MACzEwD,eAAe,CAACxD,IAAI,CAAC,6CAA6C,CAAC;IACrE;IAEA,IAAIrG,OAAO,CAACS,oBAAoB,GAAG,IAAI,CAACF,mBAAmB,CAACE,oBAAoB,EAAE;MAChFoJ,eAAe,CAACxD,IAAI,CAAC,kCAAkC,CAAC;MACxDwD,eAAe,CAACxD,IAAI,CAAC,6BAA6B,CAAC;IACrD;IAEA,IAAIrG,OAAO,CAACW,qBAAqB,GAAG,IAAI,CAACJ,mBAAmB,CAACI,qBAAqB,EAAE;MAClFkJ,eAAe,CAACxD,IAAI,CAAC,yCAAyC,CAAC;MAC/DwD,eAAe,CAACxD,IAAI,CAAC,mCAAmC,CAAC;IAC3D;IAEA,IAAIrG,OAAO,CAAC8F,WAAW,GAAG,IAAI,CAACvF,mBAAmB,CAACO,eAAe,EAAE;MAClE+I,eAAe,CAACxD,IAAI,CAAC,6CAA6C,CAAC;MACnEwD,eAAe,CAACxD,IAAI,CAAC,4CAA4C,CAAC;IACpE;IAEA,OAAOwD,eAAe;EACxB;EAEQE,aAAaA,CAAA,EAAkF;IACrG,IAAI,IAAI,CAAC/J,OAAO,CAAC4D,MAAM,GAAG,CAAC,EAAE;MAC3B,OAAO;QAAE2G,SAAS,EAAE,QAAQ;QAAEC,gBAAgB,EAAE;MAAE,CAAC;IACrD;IAEA,MAAMpC,MAAM,GAAG,IAAI,CAACpI,OAAO,CAACsG,KAAK,CAAC,CAAC,CAAC,CAAC;IACrC,MAAM+B,KAAK,GAAG,IAAI,CAACrI,OAAO,CAACsG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAExC,MAAMmE,WAAW,GAAG,IAAI,CAACjB,qBAAqB,CAAC,IAAI,CAACjB,uBAAuB,CAACH,MAAM,CAAC,CAAC;IACpF,MAAMsC,UAAU,GAAG,IAAI,CAAClB,qBAAqB,CAAC,IAAI,CAACjB,uBAAuB,CAACF,KAAK,CAAC,CAAC;IAElF,MAAMsC,MAAM,GAAI,CAACF,WAAW,GAAGC,UAAU,IAAIA,UAAU,GAAI,GAAG;IAE9D,IAAIH,SAA+C,GAAG,QAAQ;IAC9D,IAAII,MAAM,GAAG,CAAC,EAAEJ,SAAS,GAAG,WAAW,CAAC,KACnC,IAAII,MAAM,GAAG,CAAC,CAAC,EAAEJ,SAAS,GAAG,WAAW;IAE7C,OAAO;MAAEA,SAAS;MAAEC,gBAAgB,EAAE7C,IAAI,CAACiD,GAAG,CAACD,MAAM;IAAE,CAAC;EAC1D;EAEQtB,sBAAsBA,CAAA,EAAqB;IACjD,OAAO;MACLW,YAAY,EAAE,CAAC;MACfC,gBAAgB,EAAE,GAAG;MACrBC,cAAc,EAAE,CAAC,+BAA+B,CAAC;MACjDL,eAAe,EAAE,CAAC,8BAA8B,CAAC;MACjDM,aAAa,EAAE;QAAEI,SAAS,EAAE,QAAQ;QAAEC,gBAAgB,EAAE;MAAE,CAAC;MAC3DxK,OAAO,EAAE;QACPoE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrB7D,YAAY,EAAE,CAAC;QACfC,oBAAoB,EAAE,CAAC;QACvBC,sBAAsB,EAAE,CAAC;QACzBC,qBAAqB,EAAE,CAAC;QACxBC,iBAAiB,EAAE,CAAC;QACpBkF,WAAW,EAAE,CAAC;QACdC,gBAAgB,EAAE,CAAC,CAAC;QACpBC,UAAU,EAAE,CAAC;QACbE,gBAAgB,EAAE,CAAC;QACnBE,oBAAoB,EAAE,CAAC;MACzB;IACF,CAAC;EACH;EAEAyE,0BAA0BA,CAAA,EAA6B;IACrD,OAAO,CACL;MACEC,EAAE,EAAE,qBAAqB;MACzBC,QAAQ,EAAE,MAAM;MAChBC,QAAQ,EAAE,aAAa;MACvBC,KAAK,EAAE,iCAAiC;MACxCC,WAAW,EAAE,4DAA4D;MACzEC,MAAM,EAAE,kCAAkC;MAC1CC,MAAM,EAAE,QAAQ;MAChBC,cAAc,EAAE;IAClB,CAAC,EACD;MACEP,EAAE,EAAE,oBAAoB;MACxBC,QAAQ,EAAE,MAAM;MAChBC,QAAQ,EAAE,aAAa;MACvBC,KAAK,EAAE,wBAAwB;MAC/BC,WAAW,EAAE,iDAAiD;MAC9DC,MAAM,EAAE,sBAAsB;MAC9BC,MAAM,EAAE,KAAK;MACbC,cAAc,EAAE;IAClB,CAAC,EACD;MACEP,EAAE,EAAE,aAAa;MACjBC,QAAQ,EAAE,QAAQ;MAClBC,QAAQ,EAAE,aAAa;MACvBC,KAAK,EAAE,gCAAgC;MACvCC,WAAW,EAAE,0CAA0C;MACvDC,MAAM,EAAE,sCAAsC;MAC9CC,MAAM,EAAE,QAAQ;MAChBC,cAAc,EAAE;IAClB,CAAC,EACD;MACEP,EAAE,EAAE,mBAAmB;MACvBC,QAAQ,EAAE,QAAQ;MAClBC,QAAQ,EAAE,aAAa;MACvBC,KAAK,EAAE,6BAA6B;MACpCC,WAAW,EAAE,iDAAiD;MAC9DC,MAAM,EAAE,+BAA+B;MACvCC,MAAM,EAAE,MAAM;MACdC,cAAc,EAAE;IAClB,CAAC,EACD;MACEP,EAAE,EAAE,gBAAgB;MACpBC,QAAQ,EAAE,MAAM;MAChBC,QAAQ,EAAE,aAAa;MACvBC,KAAK,EAAE,oCAAoC;MAC3CC,WAAW,EAAE,mDAAmD;MAChEC,MAAM,EAAE,2CAA2C;MACnDC,MAAM,EAAE,KAAK;MACbC,cAAc,EAAE;IAClB,CAAC,CACF;EACH;EAEAC,iBAAiBA,CAAA,EAA8B;IAC7C,OAAO,IAAI,CAACtL,OAAO,CAAC4D,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC5D,OAAO,CAAC,IAAI,CAACA,OAAO,CAAC4D,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;EAC/E;EAEA2H,iBAAiBA,CAAA,EAAyB;IACxC,OAAO,CAAC,GAAG,IAAI,CAACvL,OAAO,CAAC;EAC1B;EAEAwL,kBAAkBA,CAAA,EAAY;IAC5B,OAAO,IAAI,CAACvL,YAAY;EAC1B;AACF;AAACJ,2BAAA,GAlnBKC,0BAA0B;AAA1BA,0BAA0B,CACfoB,QAAQ;AAAA,IAAAuK,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAmnBV7L,0BAA0B","ignoreList":[]}