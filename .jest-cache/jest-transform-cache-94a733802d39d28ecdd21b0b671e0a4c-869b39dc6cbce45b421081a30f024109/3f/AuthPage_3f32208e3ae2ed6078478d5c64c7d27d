f72b9f74fd91a4fe45969e6b215100b7
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _framerMotion = require("framer-motion");
var _react = _interopRequireWildcard(require("react"));
var _reactRouterDom = require("react-router-dom");
var _AuthContext = require("../../contexts/AuthContext");
var _getBackendUrl = require("../../utils/getBackendUrl");
var _Register = _interopRequireDefault(require("../Register"));
var _AccessRequestForm = _interopRequireDefault(require("./AccessRequestForm"));
var _LoginForm = _interopRequireDefault(require("./LoginForm"));
var _PasswordChangeForm = _interopRequireDefault(require("./PasswordChangeForm"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); } // Import the simple user-friendly app as the default dashboard
const UserFriendlyApp = /*#__PURE__*/_react.default.lazy(() => Promise.resolve().then(() => _interopRequireWildcard(require('../user-friendly/UserFriendlyApp'))).then(module => ({
  default: module.default
})));
const _AuthPage = () => {
  const navigate = (0, _reactRouterDom.useNavigate)();
  const [authMode, setAuthMode] = (0, _react.useState)('login');
  const {
    login,
    changePassword,
    loading,
    error,
    user,
    isAuthenticated,
    requiresPasswordChange
  } = (0, _AuthContext.useAuth)();

  // Forgot password state
  // Removed unused forgotPasswordLoading state

  // Forgot password modal state
  const [showForgotModal, setShowForgotModal] = (0, _react.useState)(false);
  const [forgotEmail, setForgotEmail] = (0, _react.useState)('');
  const [forgotStatus, setForgotStatus] = (0, _react.useState)('idle');
  const [forgotMessage, setForgotMessage] = (0, _react.useState)('');

  // Redirect to password change if required
  (0, _react.useEffect)(() => {
    if (isAuthenticated && requiresPasswordChange) {
      setAuthMode('password-change');
    }
  }, [isAuthenticated, requiresPasswordChange]);
  const _handleLogin = async (email, password) => {
    await login(email, password);
  };

  // Forgot password handler
  const _handleForgotPassword = async email => {
    // Removed unused setForgotPasswordLoading
    try {
      // Call backend endpoint
      await fetch((0, _getBackendUrl.getBackendUrl)() + '/api/auth/forgot-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          email
        })
      });
      // Success and error handling can be implemented here if needed
    } catch (error) {
      // Network error handling can be implemented here if needed
    } finally {
      // Removed unused setForgotPasswordLoading
    }
  };
  const _submitForgotPassword = async e => {
    e.preventDefault();
    setForgotStatus('loading');
    setForgotMessage('');
    try {
      // TODO: Replace with real API call
      await new Promise(resolve => setTimeout(resolve, 1200));
      setForgotStatus('success');
      setForgotMessage('If this email is registered, a password reset link has been sent.');
    } catch (err) {
      setForgotStatus('error');
      setForgotMessage('Failed to send reset email. Please try again later.');
    }
  };
  const _closeForgotModal = () => {
    setShowForgotModal(false);
    setForgotStatus('idle');
    setForgotMessage('');
  };
  const _handleRequestAccess = () => {
    setAuthMode('request-access');
  };

  // Removed unused _handleBackToLogin

  const _handleAccessRequestSubmitted = () => {
    // Optionally switch back to login after successful request
    setTimeout(() => {
      setAuthMode('login');
    }, 3000);
  };
  const _handlePasswordChange = async (currentPassword, newPassword) => {
    await changePassword({
      userId: user?.id || '',
      oldPassword: currentPassword,
      newPassword
    });
  };

  // Registration success handler
  // Removed unused _handleRegisterSuccess

  // Redirect to dashboard after login
  (0, _react.useEffect)(() => {
    if (isAuthenticated && !requiresPasswordChange) {
      navigate('/', {
        replace: true
      });
    }
  }, [isAuthenticated, requiresPasswordChange, navigate]);

  // If authenticated and not in password change mode, render the simple UI dashboard
  if (isAuthenticated && !requiresPasswordChange) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_react.default.Suspense, {
      fallback: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "text-white p-8",
        children: "Loading dashboard..."
      }),
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(UserFriendlyApp, {})
    });
  }

  // Otherwise, render the auth UI as before
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex items-center justify-center p-4",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "absolute inset-0 bg-quantum-grid opacity-5"
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "absolute inset-0 overflow-hidden",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "absolute -top-10 -left-10 w-80 h-80 bg-cyber-primary/10 rounded-full blur-3xl animate-pulse"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "absolute -bottom-10 -right-10 w-80 h-80 bg-cyber-accent/10 rounded-full blur-3xl animate-pulse delay-1000"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-cyber-purple/5 rounded-full blur-3xl animate-pulse delay-2000"
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "relative z-10 w-full max-w-md",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_framerMotion.motion.div, {
        initial: {
          opacity: 0,
          y: -20
        },
        animate: {
          opacity: 1,
          y: 0
        },
        className: "text-center mb-8",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "inline-flex items-center justify-center w-20 h-20 bg-gradient-to-r from-yellow-400 to-purple-500 rounded-2xl mb-6 shadow-lg shadow-yellow-400/25",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            className: "text-2xl font-bold text-slate-900",
            children: "PropOllama"
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h1", {
          className: "text-3xl font-bold text-yellow-400 mb-2",
          children: "PropOllama"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          className: "text-gray-400",
          children: "AI Prop Research & Analytics"
        })]
      }), authMode !== 'password-change' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.motion.div, {
        initial: {
          opacity: 0
        },
        animate: {
          opacity: 1
        },
        transition: {
          delay: 0.2
        },
        className: "flex justify-center mb-8",
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "bg-slate-800/50 backdrop-blur-lg border border-slate-700/50 rounded-lg p-1 flex",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: () => setAuthMode('login'),
            className: `px-4 py-2 rounded-md text-sm font-medium transition-all ${authMode === 'login' ? 'bg-cyber-primary text-slate-900' : 'text-gray-400 hover:text-white'}`,
            children: "Sign In"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: () => setAuthMode('signup'),
            className: `px-4 py-2 rounded-md text-sm font-medium transition-all ${authMode === 'signup' ? 'bg-cyber-primary text-slate-900' : 'text-gray-400 hover:text-white'}`,
            children: "Sign Up"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: () => setAuthMode('request-access'),
            className: `px-4 py-2 rounded-md text-sm font-medium transition-all ${authMode === 'request-access' ? 'bg-cyber-primary text-slate-900' : 'text-gray-400 hover:text-white'}`,
            children: "Request Access"
          })]
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_framerMotion.AnimatePresence, {
        mode: "wait",
        children: [authMode === 'login' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.motion.div, {
          initial: {
            opacity: 0,
            x: -20
          },
          animate: {
            opacity: 1,
            x: 0
          },
          exit: {
            opacity: 0,
            x: 20
          },
          transition: {
            duration: 0.3
          },
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginForm.default, {
            onLogin: _handleLogin,
            onForgotPassword: _handleForgotPassword,
            onRequestAccess: _handleRequestAccess,
            loading: loading,
            error: error ?? undefined
          })
        }, 'login'), authMode === 'signup' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.motion.div, {
          initial: {
            opacity: 0,
            x: 20
          },
          animate: {
            opacity: 1,
            x: 0
          },
          exit: {
            opacity: 0,
            x: -20
          },
          transition: {
            duration: 0.3
          },
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Register.default, {})
        }, 'signup'), authMode === 'request-access' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.motion.div, {
          initial: {
            opacity: 0,
            x: 20
          },
          animate: {
            opacity: 1,
            x: 0
          },
          exit: {
            opacity: 0,
            x: -20
          },
          transition: {
            duration: 0.3
          },
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AccessRequestForm.default, {
            onRequestSubmitted: _handleAccessRequestSubmitted
          })
        }, 'request-access'), authMode === 'password-change' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.motion.div, {
          initial: {
            opacity: 0,
            y: 20
          },
          animate: {
            opacity: 1,
            y: 0
          },
          exit: {
            opacity: 0,
            y: -20
          },
          transition: {
            duration: 0.3
          },
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_PasswordChangeForm.default, {
            onPasswordChange: _handlePasswordChange,
            loading: loading,
            error: error ?? undefined,
            userEmail: user?.email
          })
        }, 'password-change')]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.AnimatePresence, {
        children: showForgotModal && /*#__PURE__*/(0, _jsxRuntime.jsx)(_framerMotion.motion.div, {
          initial: {
            opacity: 0,
            scale: 0.95
          },
          animate: {
            opacity: 1,
            scale: 1
          },
          exit: {
            opacity: 0,
            scale: 0.95
          },
          className: "fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm",
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "bg-slate-900 rounded-xl shadow-lg p-8 w-full max-w-sm relative",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
              className: "absolute top-2 right-2 text-gray-400 hover:text-white text-xl",
              onClick: _closeForgotModal,
              "aria-label": "Close",
              children: "\xD7"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("h2", {
              className: "text-xl font-bold text-white mb-2",
              children: "Forgot Password"
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
              className: "text-gray-400 mb-4",
              children: "Enter your email address and we'll send you a password reset link."
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("form", {
              onSubmit: _submitForgotPassword,
              className: "space-y-4",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
                type: "email",
                className: "w-full px-4 py-2 rounded-md bg-slate-800 text-white border border-slate-700 focus:outline-none focus:ring-2 focus:ring-cyber-primary",
                placeholder: "Email address",
                value: forgotEmail,
                onChange: e => setForgotEmail(e.target.value),
                required: true
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
                type: "submit",
                className: "w-full py-2 rounded-md bg-cyber-primary text-slate-900 font-semibold hover:bg-cyber-accent transition-colors disabled:opacity-60",
                disabled: forgotStatus === 'loading',
                children: forgotStatus === 'loading' ? 'Sending...' : 'Send Reset Link'
              })]
            }), forgotMessage && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: `mt-4 text-sm ${forgotStatus === 'success' ? 'text-green-400' : 'text-red-400'}`,
              children: forgotMessage
            })]
          })
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_framerMotion.motion.div, {
        initial: {
          opacity: 0
        },
        animate: {
          opacity: 1
        },
        transition: {
          delay: 0.4
        },
        className: "mt-8 text-center",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          className: "text-xs text-gray-500",
          children: "\xA9 2025 PropOllama. All rights reserved."
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex justify-center space-x-4 mt-2",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            type: "button",
            className: "text-xs text-gray-500 hover:text-gray-400 transition-colors bg-transparent border-none p-0 cursor-pointer",
            children: "Terms"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            type: "button",
            className: "text-xs text-gray-500 hover:text-gray-400 transition-colors bg-transparent border-none p-0 cursor-pointer",
            children: "Privacy"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            type: "button",
            className: "text-xs text-gray-500 hover:text-gray-400 transition-colors bg-transparent border-none p-0 cursor-pointer",
            children: "Support"
          })]
        })]
      })]
    })]
  });
};
var _default = exports.default = _AuthPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,