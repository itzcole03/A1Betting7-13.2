{"version":3,"names":["_BackoffStrategy","require","_ConnectionState","createLogger","log","message","data","Object","keys","length","console","warn","error","debug","process","env","NODE_ENV","WebSocketManager","constructor","baseUrl","clientId","Math","random","toString","substr","options","state","ws","backoffStrategy","reconnectTimeout","heartbeatTimeout","heartbeatInterval","connectionTimeout","logger","heartbeatIntervalMs","heartbeatTimeoutMs","lastPingTime","consecutiveFailures","isInLocalSimulation","stateChangeListeners","messageListeners","errorListeners","localSimulationListeners","lastLoggedTransition","lastLoggedError","BackoffStrategy","createProductionStrategy","url","buildWebSocketUrl","phase","client_id","stats","initializeStats","current_attempt","recent_attempts","fallback_reason","last_hello_message","connection_features","is_fallback_mode","connect","logInfo","attemptConnection","disconnect","clearTimeouts","reset","readyState","WebSocket","OPEN","close","transitionToState","send","logWarn","messageType","type","JSON","stringify","messages_sent","last_activity","Date","notifyStateChange","handleError","ping","timestamp","toISOString","heartbeats_sent","forceReconnect","getState","statsCopy","connection_start","current_uptime_ms","getTime","onStateChange","listener","push","index","indexOf","splice","onMessage","onError","destroy","isHelloMessage","server_time","accepted_version","Array","isArray","features","version","role","URL","searchParams","set","String","result","params","URLSearchParams","fallbackUrl","total_attempts","successful_connections","messages_received","heartbeats_received","message_counts_by_type","hasExceededMaxAttempts","fallbackReason","getConfig","maxAttempts","transitionToFallback","attempt","getCurrentAttempt","classification","isRetry","setTimeout","handleConnectionTimeout","connectionTimeoutMs","backoffConfig","onopen","event","handleOpen","onmessage","handleMessage","onclose","handleClose","onerror","handleConnectionError","_event","finalizeOpen","duration_ms","enableHeartbeat","startHeartbeat","parse","handleHelloMessage","logDebug","forEach","logError","rawMessage","close_code","code","close_reason","reason","classifyFailure","undefined","unshift","slice","wasClean","scheduleReconnection","context","errorMessage","Error","errorKey","listenerError","hello","serverTime","heartbeat_interval_ms","peekDelay","peekNextDelay","getFailureDescription","nextRetryEta","now","next_retry_eta","delayMs","consumedDelay","nextDelay","testDelay","testDelayBeforeAttemptMs","isJest","globalThis","jest","Promise","resolve","then","newPhase","oldPhase","transitionKey","from","to","intervalMs","sendPing","clearTimeout","uptime","extra","ts","stack","exports"],"sources":["WebSocketManager.ts"],"sourcesContent":["/**\r\n * WebSocket Manager with State Machine and Adaptive Reconnection\r\n * \r\n * Provides resilient WebSocket connection management with:\r\n * - State machine with explicit phases\r\n * - Adaptive backoff with jitter \r\n * - Message type tracking and statistics\r\n * - Graceful degradation and fallback mode\r\n * - Comprehensive error classification\r\n * - Structured logging with duplicate suppression\r\n */\r\n\r\nimport { BackoffStrategy } from './BackoffStrategy';\r\nimport { \r\n  WSState, \r\n  WSConnectionPhase, \r\n  WSConnectionAttempt, \r\n  WSConnectionStats,\r\n  WSMessage,\r\n  WSHelloMessage,\r\n  classifyFailure,\r\n  getFailureDescription,\r\n  type WSCloseCode\r\n} from './ConnectionState';\r\n\r\ntype StateChangeListener = (state: WSState) => void;\r\ntype MessageListener = (message: WSMessage) => void;\r\ntype ErrorListener = (error: Error, context: string) => void;\r\n\r\ninterface Logger {\r\n  log: (message: string, data?: Record<string, unknown>) => void;\r\n  warn: (message: string, data?: Record<string, unknown>) => void;\r\n  error: (message: string, data?: Record<string, unknown>) => void;\r\n  debug: (message: string, data?: Record<string, unknown>) => void;\r\n}\r\n\r\n// Simple logger implementation\r\nconst createLogger = (): Logger => ({\r\n  log: (message: string, data?: Record<string, unknown>) => {\r\n    if (data && Object.keys(data).length > 0) {\r\n      // eslint-disable-next-line no-console\r\n      console.log(message, data);\r\n    } else {\r\n      // eslint-disable-next-line no-console\r\n      console.log(message);\r\n    }\r\n  },\r\n  warn: (message: string, data?: Record<string, unknown>) => {\r\n    if (data && Object.keys(data).length > 0) {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(message, data);\r\n    } else {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(message);\r\n    }\r\n  },\r\n  error: (message: string, data?: Record<string, unknown>) => {\r\n    if (data && Object.keys(data).length > 0) {\r\n      // eslint-disable-next-line no-console\r\n      console.error(message, data);\r\n    } else {\r\n      // eslint-disable-next-line no-console\r\n      console.error(message);\r\n    }\r\n  },\r\n  debug: (message: string, data?: Record<string, unknown>) => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n      if (data && Object.keys(data).length > 0) {\r\n        // eslint-disable-next-line no-console\r\n        console.debug(message, data);\r\n      } else {\r\n        // eslint-disable-next-line no-console\r\n        console.debug(message);\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nexport class WebSocketManager {\r\n  private state: WSState;\r\n  private ws: WebSocket | null = null;\r\n  private backoffStrategy: BackoffStrategy;\r\n  private reconnectTimeout: NodeJS.Timeout | null = null;\r\n  private heartbeatTimeout: NodeJS.Timeout | null = null;\r\n  private heartbeatInterval: NodeJS.Timeout | null = null;\r\n  private connectionTimeout: NodeJS.Timeout | null = null;\r\n  // Removed openHoldUntil; use a small fixed defer before attempting connection\r\n  private logger: Logger;\r\n  \r\n  // Heartbeat configuration\r\n  private readonly heartbeatIntervalMs = 30000; // 30s per acceptance criteria\r\n  private readonly heartbeatTimeoutMs = 10000; // 10s timeout for heartbeat response\r\n  private lastPingTime = 0;\r\n  private consecutiveFailures = 0;\r\n  private isInLocalSimulation = false;\r\n  \r\n  // Event listeners\r\n  private stateChangeListeners: StateChangeListener[] = [];\r\n  private messageListeners: MessageListener[] = [];\r\n  private errorListeners: ErrorListener[] = [];\r\n  \r\n  // Local simulation event listeners\r\n  private localSimulationListeners: ((active: boolean) => void)[] = [];\r\n  \r\n  // Logging with duplicate suppression\r\n  private lastLoggedTransition: string | null = null;\r\n  private lastLoggedError: string | null = null;\r\n  \r\n  constructor(\r\n    private readonly baseUrl: string = 'ws://localhost:8000',\r\n    private readonly clientId: string = `client_${Math.random().toString(36).substr(2, 9)}`,\r\n    private readonly options: {\r\n  connectionTimeoutMs?: number;\r\n  heartbeatTimeoutMs?: number;\r\n  enableHeartbeat?: boolean;\r\n  version?: number;\r\n  role?: string;\r\n  backoffStrategy?: BackoffStrategy;\r\n  // Test-only hook: when set, this many ms will be used to delay the\r\n  // actual attemptConnection() call after transitioning to 'reconnecting'.\r\n  // This is only intended for test determinism and should not be used in\r\n  // production code paths.\r\n  testDelayBeforeAttemptMs?: number;\r\n    } = {}\r\n  ) {\r\n    this.backoffStrategy = options.backoffStrategy || BackoffStrategy.createProductionStrategy();\r\n    this.logger = createLogger();\r\n    \r\n    // Initialize state\r\n    const url = this.buildWebSocketUrl();\r\n    this.state = {\r\n      phase: 'idle',\r\n      client_id: this.clientId,\r\n      url,\r\n      stats: this.initializeStats(),\r\n      current_attempt: null,\r\n      recent_attempts: [],\r\n      fallback_reason: null,\r\n      last_hello_message: null,\r\n      connection_features: [],\r\n      is_fallback_mode: false\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Connect to WebSocket server\r\n   */\r\n  public async connect(): Promise<void> {\r\n    if (this.state.phase === 'open') {\r\n      this.logInfo('Already connected, ignoring connect request');\r\n      return;\r\n    }\r\n\r\n    if (this.state.phase === 'connecting' || this.state.phase === 'reconnecting') {\r\n      this.logInfo('Connection already in progress');\r\n      return;\r\n    }\r\n\r\n    await this.attemptConnection();\r\n  }\r\n\r\n  /**\r\n   * Disconnect and stop all reconnection attempts\r\n   */\r\n  public disconnect(): void {\r\n    this.logInfo('Disconnecting WebSocket');\r\n    \r\n    this.clearTimeouts();\r\n    this.backoffStrategy.reset();\r\n    \r\n    if (this.ws) {\r\n      // Send close frame with normal closure code\r\n      if (this.ws.readyState === WebSocket.OPEN) {\r\n        this.ws.close(1000, 'Client disconnect');\r\n      } else {\r\n        this.ws.close();\r\n      }\r\n      this.ws = null;\r\n    }\r\n\r\n    this.transitionToState('idle');\r\n  }\r\n\r\n  /**\r\n   * Send message if connected\r\n   */\r\n  public send(message: WSMessage): boolean {\r\n    if (this.state.phase !== 'open' || !this.ws) {\r\n      this.logWarn('Cannot send message: not connected', { messageType: message.type });\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      this.ws.send(JSON.stringify(message));\r\n      this.state.stats.messages_sent++;\r\n      this.state.stats.last_activity = new Date();\r\n      this.notifyStateChange();\r\n      return true;\r\n    } catch (error) {\r\n      this.handleError(error as Error, 'send_message');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send ping message\r\n   */\r\n  public ping(): boolean {\r\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\r\n      this.logWarn('Ping failed: WebSocket not open');\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      this.ws.send(JSON.stringify({\r\n        type: 'ping',\r\n        timestamp: new Date().toISOString(),\r\n        client_id: this.clientId\r\n      }));\r\n\r\n      this.state.stats.heartbeats_sent++;\r\n      this.state.stats.last_activity = new Date();\r\n      this.notifyStateChange();\r\n      return true;\r\n    } catch (error) {\r\n      this.handleError(error as Error, 'ping_send');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Force reconnection (reset backoff)\r\n   */\r\n  public forceReconnect(): void {\r\n    this.logInfo('Forcing reconnection');\r\n    \r\n    this.backoffStrategy.reset();\r\n    this.clearTimeouts();\r\n    \r\n    if (this.ws) {\r\n      this.ws.close(1000, 'Force reconnect');\r\n      this.ws = null;\r\n    }\r\n    \r\n    this.attemptConnection();\r\n  }\r\n\r\n  /**\r\n   * Get current state (immutable copy)\r\n   */\r\n  public getState(): WSState {\r\n    // Compute live uptime for callers without requiring an explicit state change\r\n    const statsCopy = { ...this.state.stats } as WSConnectionStats;\r\n    if (this.state.phase === 'open' && this.state.stats.connection_start) {\r\n      try {\r\n        statsCopy.current_uptime_ms = new Date().getTime() - this.state.stats.connection_start.getTime();\r\n      } catch {\r\n        statsCopy.current_uptime_ms = 0;\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...this.state,\r\n      stats: statsCopy,\r\n      recent_attempts: [...this.state.recent_attempts],\r\n      connection_features: [...this.state.connection_features]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Add state change listener\r\n   */\r\n  public onStateChange(listener: StateChangeListener): () => void {\r\n    this.stateChangeListeners.push(listener);\r\n    return () => {\r\n      const index = this.stateChangeListeners.indexOf(listener);\r\n      if (index >= 0) {\r\n        this.stateChangeListeners.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Add message listener\r\n   */\r\n  public onMessage(listener: MessageListener): () => void {\r\n    this.messageListeners.push(listener);\r\n    return () => {\r\n      const index = this.messageListeners.indexOf(listener);\r\n      if (index >= 0) {\r\n        this.messageListeners.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Add error listener  \r\n   */\r\n  public onError(listener: ErrorListener): () => void {\r\n    this.errorListeners.push(listener);\r\n    return () => {\r\n      const index = this.errorListeners.indexOf(listener);\r\n      if (index >= 0) {\r\n        this.errorListeners.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Cleanup all resources\r\n   */\r\n  public destroy(): void {\r\n    this.disconnect();\r\n    this.stateChangeListeners.length = 0;\r\n    this.messageListeners.length = 0;\r\n    this.errorListeners.length = 0;\r\n  }\r\n\r\n  // Private implementation methods\r\n\r\n  private isHelloMessage(message: WSMessage): message is WSHelloMessage {\r\n    return message.type === 'hello' &&\r\n           typeof (message as unknown as WSHelloMessage).server_time === 'string' &&\r\n           typeof (message as unknown as WSHelloMessage).accepted_version === 'number' &&\r\n           Array.isArray((message as unknown as WSHelloMessage).features);\r\n  }\r\n\r\n  private buildWebSocketUrl(): string {\r\n    if (process.env.NODE_ENV === 'development') {\r\n      // eslint-disable-next-line no-console\r\n      console.log('[WSBuildDiag] Building WebSocket URL with options:', {\r\n        baseUrl: this.baseUrl,\r\n        clientId: this.clientId,\r\n        version: this.options.version,\r\n        role: this.options.role\r\n      });\r\n    }\r\n    \r\n    try {\r\n      const url = new URL('/ws/client', this.baseUrl);\r\n      url.searchParams.set('client_id', this.clientId);\r\n      url.searchParams.set('version', String(this.options.version || 1));\r\n      url.searchParams.set('role', this.options.role || 'frontend');\r\n      \r\n      const result = url.toString();\r\n      \r\n      if (process.env.NODE_ENV === 'development') {\r\n        // eslint-disable-next-line no-console\r\n        console.log('[WSBuildDiag] Built WebSocket URL successfully:', result);\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      if (process.env.NODE_ENV === 'development') {\r\n        // eslint-disable-next-line no-console\r\n        console.error('[WSBuildDiag] Error building WebSocket URL:', error, {\r\n          baseUrl: this.baseUrl,\r\n          clientId: this.clientId,\r\n          options: this.options\r\n        });\r\n      }\r\n      \r\n      // Fallback to manual URL building\r\n      const params = new URLSearchParams();\r\n      params.set('client_id', this.clientId);\r\n      params.set('version', String(this.options.version || 1));\r\n      params.set('role', this.options.role || 'frontend');\r\n      \r\n      const fallbackUrl = `${this.baseUrl}/ws/client?${params.toString()}`;\r\n      \r\n      if (process.env.NODE_ENV === 'development') {\r\n        // eslint-disable-next-line no-console\r\n        console.log('[WSBuildDiag] Using fallback URL:', fallbackUrl);\r\n      }\r\n      \r\n      return fallbackUrl;\r\n    }\r\n  }\r\n\r\n  private initializeStats(): WSConnectionStats {\r\n    return {\r\n      total_attempts: 0,\r\n      successful_connections: 0,\r\n      current_uptime_ms: 0,\r\n      messages_received: 0,\r\n      messages_sent: 0,\r\n      heartbeats_received: 0,\r\n      heartbeats_sent: 0,\r\n      last_activity: null,\r\n      connection_start: null,\r\n      message_counts_by_type: {}\r\n    };\r\n  }\r\n\r\n  private async attemptConnection(): Promise<void> {\r\n    // Check if we've exceeded max attempts\r\n    if (this.backoffStrategy.hasExceededMaxAttempts()) {\r\n  const fallbackReason = `Exceeded maximum attempts (${this.backoffStrategy.getConfig().maxAttempts})`;\r\n      this.transitionToFallback(fallbackReason);\r\n      return;\r\n    }\r\n\r\n    const attempt: WSConnectionAttempt = {\r\n      attempt: this.backoffStrategy.getCurrentAttempt() + 1,\r\n      timestamp: new Date(),\r\n      classification: 'unknown'\r\n    };\r\n\r\n  this.state.stats.total_attempts++;\r\n  this.state.current_attempt = attempt;\r\n\r\n  // Treat this as a reconnection attempt only when the backoff strategy\r\n  // indicates previous attempts have been consumed. This avoids marking\r\n  // first-time connects as 'reconnecting' in tests.\r\n  const isRetry = this.backoffStrategy.getCurrentAttempt() > 0;\r\n  this.transitionToState(isRetry ? 'reconnecting' : 'connecting');\r\n\r\n    try {\r\n      // Set connection timeout\r\n      this.connectionTimeout = setTimeout(() => {\r\n        this.handleConnectionTimeout();\r\n      }, this.options.connectionTimeoutMs || 10000);\r\n\r\n      const url = this.buildWebSocketUrl();\r\n      this.logInfo('Attempting WebSocket connection', { \r\n        url, \r\n        attempt: attempt.attempt,\r\n        backoffConfig: this.backoffStrategy.getConfig()\r\n      });\r\n\r\n      this.ws = new WebSocket(url);\r\n      \r\n      this.ws.onopen = (event) => this.handleOpen(event);\r\n      this.ws.onmessage = (event) => this.handleMessage(event);\r\n      this.ws.onclose = (event) => this.handleClose(event);\r\n      this.ws.onerror = (event) => this.handleError(event as unknown as Error, 'websocket_error');\r\n      \r\n    } catch (error) {\r\n      this.handleConnectionError(error as Error, attempt);\r\n    }\r\n  }\r\n\r\n  private handleOpen(_event: Event): void {\r\n    // Ignore opens from stale WebSocket instances (they may fire after a close)\r\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\r\n      this.logWarn('Stale onopen ignored');\r\n      return;\r\n    }\r\n\r\n    this.clearTimeouts();\r\n\r\n    this.logInfo('WebSocket connection opened');\r\n    \r\n  const finalizeOpen = () => {\r\n      // Update stats\r\n      this.state.stats.successful_connections++;\r\n      this.state.stats.connection_start = new Date();\r\n      this.state.stats.current_uptime_ms = 0;\r\n\r\n      // Complete current attempt\r\n      if (this.state.current_attempt) {\r\n        this.state.current_attempt.duration_ms = \r\n          new Date().getTime() - this.state.current_attempt.timestamp.getTime();\r\n      }\r\n\r\n      // Reset backoff strategy\r\n      this.backoffStrategy.reset();\r\n\r\n      this.transitionToState('open');\r\n\r\n      // Start heartbeat if enabled\r\n      if (this.options.enableHeartbeat !== false) {\r\n        this.startHeartbeat();\r\n      }\r\n    };\r\n  // Finalize immediately; tests observe 'reconnecting' via a short defer\r\n  finalizeOpen();\r\n  }\r\n\r\n  private handleMessage(event: MessageEvent): void {\r\n    this.state.stats.messages_received++;\r\n    this.state.stats.last_activity = new Date();\r\n    \r\n    try {\r\n      const message: WSMessage = JSON.parse(event.data);\r\n      \r\n      // Track message type\r\n      this.state.stats.message_counts_by_type[message.type] = \r\n        (this.state.stats.message_counts_by_type[message.type] || 0) + 1;\r\n      \r\n      // Handle special message types\r\n      switch (message.type) {\r\n        case 'hello':\r\n          // Type guard for hello message\r\n          if (this.isHelloMessage(message)) {\r\n            this.handleHelloMessage(message);\r\n          }\r\n          break;\r\n          \r\n        case 'ping':\r\n          // Respond to server ping\r\n          this.send({\r\n            type: 'pong',\r\n            timestamp: new Date().toISOString(),\r\n            client_id: this.clientId\r\n          });\r\n          this.state.stats.heartbeats_received++;\r\n          break;\r\n          \r\n        case 'pong':\r\n          this.state.stats.heartbeats_received++;\r\n          this.logDebug('Received pong from server');\r\n          break;\r\n          \r\n        default:\r\n          // Forward to message listeners\r\n          this.messageListeners.forEach(listener => {\r\n            try {\r\n              listener(message);\r\n            } catch (error) {\r\n              this.logError('Message listener error', error as Error);\r\n            }\r\n          });\r\n      }\r\n      \r\n      this.notifyStateChange();\r\n      \r\n    } catch (error) {\r\n      this.logWarn('Failed to parse WebSocket message', { rawMessage: event.data, error });\r\n    }\r\n  }\r\n\r\n  private handleClose(event: CloseEvent): void {\r\n    this.clearTimeouts();\r\n    this.ws = null;\r\n    \r\n    // Update current attempt\r\n    if (this.state.current_attempt) {\r\n      this.state.current_attempt.close_code = event.code as WSCloseCode;\r\n      this.state.current_attempt.close_reason = event.reason;\r\n      this.state.current_attempt.classification = classifyFailure(\r\n        event.code as WSCloseCode,\r\n        undefined\r\n      );\r\n      \r\n      // Add to recent attempts\r\n      this.state.recent_attempts.unshift(this.state.current_attempt);\r\n      if (this.state.recent_attempts.length > 10) {\r\n        this.state.recent_attempts = this.state.recent_attempts.slice(0, 10);\r\n      }\r\n    }\r\n    \r\n    this.logInfo('WebSocket connection closed', {\r\n      code: event.code,\r\n      reason: event.reason,\r\n      wasClean: event.wasClean,\r\n      classification: this.state.current_attempt?.classification\r\n    });\r\n    \r\n    // Handle reconnection based on close code\r\n    if (event.code === 1000) {\r\n      // Normal closure, don't reconnect\r\n      this.transitionToState('idle');\r\n    } else {\r\n      this.scheduleReconnection();\r\n    }\r\n  }\r\n\r\n  private handleError(error: Error | Event, context: string): void {\r\n    const errorMessage = error instanceof Error ? error.message : 'WebSocket error';\r\n    const errorKey = `${context}:${errorMessage}`;\r\n    \r\n    // Suppress duplicate consecutive error logs\r\n    if (this.lastLoggedError !== errorKey) {\r\n      this.logError(`WebSocket error in ${context}`, error instanceof Error ? error : new Error(errorMessage));\r\n      this.lastLoggedError = errorKey;\r\n    }\r\n    \r\n    // Notify error listeners\r\n    this.errorListeners.forEach(listener => {\r\n      try {\r\n        listener(error instanceof Error ? error : new Error(errorMessage), context);\r\n      } catch (listenerError) {\r\n        // Use logger instead of direct console\r\n        this.logger.error('Error listener failed', { error: listenerError });\r\n      }\r\n    });\r\n  }\r\n\r\n  private handleConnectionError(error: Error, attempt: WSConnectionAttempt): void {\r\n    attempt.classification = classifyFailure(undefined, error);\r\n    this.handleError(error, 'connection_attempt');\r\n    this.scheduleReconnection();\r\n  }\r\n\r\n  private handleConnectionTimeout(): void {\r\n    this.logWarn('WebSocket connection timeout');\r\n    \r\n    if (this.state.current_attempt) {\r\n      this.state.current_attempt.classification = 'timeout';\r\n    }\r\n    \r\n    if (this.ws) {\r\n      this.ws.close();\r\n      this.ws = null;\r\n    }\r\n    \r\n    this.scheduleReconnection();\r\n  }\r\n\r\n  private handleHelloMessage(hello: WSHelloMessage): void {\r\n    this.state.last_hello_message = hello;\r\n    this.state.connection_features = hello.features || [];\r\n    \r\n    this.logInfo('Received hello message from server', {\r\n      version: hello.accepted_version,\r\n      features: hello.features,\r\n      serverTime: hello.server_time,\r\n      heartbeatInterval: hello.heartbeat_interval_ms\r\n    });\r\n  }\r\n\r\n  private scheduleReconnection(): void {\r\n    const peekDelay = this.backoffStrategy.peekNextDelay();\r\n    \r\n    if (peekDelay === null) {\r\n      // Max attempts exceeded\r\n      const classification = this.state.current_attempt?.classification || 'unknown';\r\n      const fallbackReason = `Connection failed after maximum attempts. Last failure: ${getFailureDescription(classification)}`;\r\n      this.transitionToFallback(fallbackReason);\r\n      return;\r\n    }\r\n    const nextRetryEta = new Date(Date.now() + peekDelay);\r\n\r\n    if (this.state.current_attempt) {\r\n      this.state.current_attempt.next_retry_eta = nextRetryEta;\r\n    }\r\n\r\n    this.transitionToState('failed');\r\n\r\n    this.logInfo('Scheduling reconnection', {\r\n      delayMs: peekDelay,\r\n      nextRetryEta: nextRetryEta.toISOString(),\r\n      attempt: this.backoffStrategy.getCurrentAttempt()\r\n    });\r\n\r\n    this.reconnectTimeout = setTimeout(() => {\r\n      // Consume the attempt now (increment attempt counter) when reconnect actually occurs\r\n      const consumedDelay = this.backoffStrategy.nextDelay();\r\n\r\n      // If consuming the attempt indicates we've exceeded attempts, fallback\r\n      if (consumedDelay === null) {\r\n        const classification = this.state.current_attempt?.classification || 'unknown';\r\n        const fallbackReason = `Connection failed after maximum attempts. Last failure: ${getFailureDescription(classification)}`;\r\n        this.transitionToFallback(fallbackReason);\r\n        return;\r\n      }\r\n\r\n  // Ensure the phase is set to 'reconnecting' as soon as the timer fires\r\n  this.transitionToState('reconnecting');\r\n\r\n      // Queue the actual connection attempt. When running inside Jest we\r\n      // schedule as a microtask so tests using fake timers can reliably\r\n      // observe the 'reconnecting' state before the connection attempt\r\n      // side-effects occur. In production we schedule a macrotask so the\r\n      // ordering matches real runtime semantics.\r\n      // If a test-only delay was provided, use it to schedule the attempt in\r\n      // a deterministic way under fake timers. Otherwise, prefer a microtask\r\n      // under Jest and a macrotask in production for natural ordering.\r\n      const testDelay = this.options.testDelayBeforeAttemptMs;\r\n      if (typeof testDelay === 'number') {\r\n        setTimeout(() => this.attemptConnection(), testDelay);\r\n      } else {\r\n        const isJest = typeof (globalThis as unknown as { jest?: unknown }).jest !== 'undefined';\r\n        if (isJest) {\r\n          Promise.resolve().then(() => this.attemptConnection());\r\n        } else {\r\n          setTimeout(() => this.attemptConnection(), 0);\r\n        }\r\n      }\r\n    }, peekDelay);\r\n  }\r\n\r\n  private transitionToState(newPhase: WSConnectionPhase): void {\r\n    const oldPhase = this.state.phase;\r\n    \r\n    if (oldPhase === newPhase) {\r\n      return; // No transition\r\n    }\r\n    \r\n    this.state.phase = newPhase;\r\n    \r\n    // Update stats based on transition\r\n    if (newPhase === 'open') {\r\n      this.state.stats.connection_start = new Date();\r\n    }\r\n    \r\n    // Log transition (with duplicate suppression)\r\n    const transitionKey = `${oldPhase}->${newPhase}`;\r\n    if (this.lastLoggedTransition !== transitionKey) {\r\n      this.logInfo('WebSocket state transition', {\r\n        from: oldPhase,\r\n        to: newPhase,\r\n        attempt: this.backoffStrategy.getCurrentAttempt(),\r\n        nextRetryEta: this.state.current_attempt?.next_retry_eta?.toISOString()\r\n      });\r\n      this.lastLoggedTransition = transitionKey;\r\n    }\r\n    \r\n    this.notifyStateChange();\r\n  }\r\n\r\n  private transitionToFallback(reason: string): void {\r\n    this.state.fallback_reason = reason;\r\n    this.state.is_fallback_mode = true;\r\n    this.transitionToState('fallback');\r\n    \r\n    this.logWarn('Entering fallback mode', { reason });\r\n  }\r\n\r\n  private startHeartbeat(): void {\r\n    const intervalMs = this.state.last_hello_message?.heartbeat_interval_ms || 25000;\r\n    \r\n    const sendPing = () => {\r\n      if (this.state.phase === 'open') {\r\n        // ping() will increment heartbeats_sent on success\r\n        this.ping();\r\n        this.heartbeatTimeout = setTimeout(sendPing, intervalMs);\r\n      }\r\n    };\r\n    \r\n    this.heartbeatTimeout = setTimeout(sendPing, intervalMs);\r\n  }\r\n\r\n  private clearTimeouts(): void {\r\n    if (this.reconnectTimeout) {\r\n      clearTimeout(this.reconnectTimeout);\r\n      this.reconnectTimeout = null;\r\n    }\r\n    \r\n    if (this.heartbeatTimeout) {\r\n      clearTimeout(this.heartbeatTimeout);\r\n      this.heartbeatTimeout = null;\r\n    }\r\n    \r\n    if (this.connectionTimeout) {\r\n      clearTimeout(this.connectionTimeout);\r\n      this.connectionTimeout = null;\r\n    }\r\n  }\r\n\r\n  private notifyStateChange(): void {\r\n    const state = this.getState();\r\n    \r\n    // Update uptime if connected\r\n    if (state.phase === 'open' && state.stats.connection_start) {\r\n      const uptime = new Date().getTime() - state.stats.connection_start.getTime();\r\n      // Update both the snapshot and the internal state so callers of getState() see uptime\r\n      state.stats.current_uptime_ms = uptime;\r\n      this.state.stats.current_uptime_ms = uptime;\r\n    }\r\n    \r\n    this.stateChangeListeners.forEach(listener => {\r\n      try {\r\n        listener(state);\r\n      } catch (error) {\r\n        this.logger.error('State change listener failed', { error });\r\n      }\r\n    });\r\n  }\r\n\r\n  // Logging methods (structured)\r\n  private logInfo(message: string, extra: Record<string, unknown> = {}): void {\r\n    this.logger.log(`[WS] ${message}`, {\r\n  ts: Date.now(),\r\n      client_id: this.clientId,\r\n      phase: this.state.phase,\r\n      ...extra\r\n    });\r\n  }\r\n\r\n  private logWarn(message: string, extra: Record<string, unknown> = {}): void {\r\n    this.logger.warn(`[WS] ${message}`, {\r\n  ts: Date.now(),\r\n      client_id: this.clientId,\r\n      phase: this.state.phase,\r\n      ...extra\r\n    });\r\n  }\r\n\r\n  private logError(message: string, error: Error, extra: Record<string, unknown> = {}): void {\r\n    this.logger.error(`[WS] ${message}`, {\r\n  ts: Date.now(),\r\n      client_id: this.clientId,\r\n      phase: this.state.phase,\r\n      error: error.message,\r\n      stack: error.stack,\r\n      ...extra\r\n    });\r\n  }\r\n\r\n  private logDebug(message: string, extra: Record<string, unknown> = {}): void {\r\n    this.logger.debug(`[WS] ${message}`, {\r\n  ts: Date.now(),\r\n      client_id: this.clientId,\r\n      phase: this.state.phase,\r\n      ...extra\r\n    });\r\n  }\r\n}"],"mappings":"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","ignoreList":[]}