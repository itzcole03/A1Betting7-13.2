{"version":3,"names":["UnifiedRegistryAdapter","constructor","registry","services","Map","getAllServices","register","name","service","registerService","set","get","getService","undefined","has","unregister","ok","delete","clear","k","Array","from","keys","exports","_default","default"],"sources":["UnifiedRegistryAdapter.ts"],"sourcesContent":["import { MasterServiceRegistry } from './MasterServiceRegistry';\r\n\r\n/** Public-facing shape mirrors the external UnifiedServiceRegistry */\r\nexport type RegistryValue = unknown;\r\n\r\n/**\r\n * Lightweight adapter that provides the public API expected by unified services.\r\n * Delegates calls to the central MasterServiceRegistry instance.\r\n */\r\nexport class UnifiedRegistryAdapter {\r\n  // expose services map publicly to match external registry shape\r\n  public services: Map<string, RegistryValue>;\r\n\r\n  private registry: MasterServiceRegistry;\r\n\r\n  constructor(registry: MasterServiceRegistry) {\r\n    this.registry = registry;\r\n    // Initialize public services map from the master registry\r\n    this.services = new Map(this.registry.getAllServices());\r\n  }\r\n\r\n  register(name: string, service: RegistryValue): void {\r\n    this.registry.registerService(name, service);\r\n    this.services.set(name, service);\r\n  }\r\n\r\n  get<T = RegistryValue>(name: string): T | undefined {\r\n    return (this.registry.getService<T>(name) as T) ?? undefined;\r\n  }\r\n\r\n  has(name: string): boolean {\r\n    return this.registry.getAllServices().has(name);\r\n  }\r\n\r\n  unregister(name: string): boolean {\r\n    const ok = this.registry.getAllServices().delete(name);\r\n    this.services.delete(name);\r\n    return ok;\r\n  }\r\n\r\n  getAllServices(): Map<string, RegistryValue> {\r\n    return new Map(this.registry.getAllServices());\r\n  }\r\n\r\n  clear(): void {\r\n    for (const k of Array.from(this.registry.getAllServices().keys())) {\r\n      this.registry.registerService(k, undefined as unknown as RegistryValue);\r\n      this.services.delete(k);\r\n    }\r\n  }\r\n}\r\n\r\nexport default UnifiedRegistryAdapter;\r\n"],"mappings":";;;;;;AAEA;;AAGA;AACA;AACA;AACA;AACO,MAAMA,sBAAsB,CAAC;EAMlCC,WAAWA,CAACC,QAA+B,EAAE;IAL7C;IAAA,KACOC,QAAQ;IAAA,KAEPD,QAAQ;IAGd,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB;IACA,IAAI,CAACC,QAAQ,GAAG,IAAIC,GAAG,CAAC,IAAI,CAACF,QAAQ,CAACG,cAAc,CAAC,CAAC,CAAC;EACzD;EAEAC,QAAQA,CAACC,IAAY,EAAEC,OAAsB,EAAQ;IACnD,IAAI,CAACN,QAAQ,CAACO,eAAe,CAACF,IAAI,EAAEC,OAAO,CAAC;IAC5C,IAAI,CAACL,QAAQ,CAACO,GAAG,CAACH,IAAI,EAAEC,OAAO,CAAC;EAClC;EAEAG,GAAGA,CAAoBJ,IAAY,EAAiB;IAClD,OAAQ,IAAI,CAACL,QAAQ,CAACU,UAAU,CAAIL,IAAI,CAAC,IAAUM,SAAS;EAC9D;EAEAC,GAAGA,CAACP,IAAY,EAAW;IACzB,OAAO,IAAI,CAACL,QAAQ,CAACG,cAAc,CAAC,CAAC,CAACS,GAAG,CAACP,IAAI,CAAC;EACjD;EAEAQ,UAAUA,CAACR,IAAY,EAAW;IAChC,MAAMS,EAAE,GAAG,IAAI,CAACd,QAAQ,CAACG,cAAc,CAAC,CAAC,CAACY,MAAM,CAACV,IAAI,CAAC;IACtD,IAAI,CAACJ,QAAQ,CAACc,MAAM,CAACV,IAAI,CAAC;IAC1B,OAAOS,EAAE;EACX;EAEAX,cAAcA,CAAA,EAA+B;IAC3C,OAAO,IAAID,GAAG,CAAC,IAAI,CAACF,QAAQ,CAACG,cAAc,CAAC,CAAC,CAAC;EAChD;EAEAa,KAAKA,CAAA,EAAS;IACZ,KAAK,MAAMC,CAAC,IAAIC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACnB,QAAQ,CAACG,cAAc,CAAC,CAAC,CAACiB,IAAI,CAAC,CAAC,CAAC,EAAE;MACjE,IAAI,CAACpB,QAAQ,CAACO,eAAe,CAACU,CAAC,EAAEN,SAAqC,CAAC;MACvE,IAAI,CAACV,QAAQ,CAACc,MAAM,CAACE,CAAC,CAAC;IACzB;EACF;AACF;AAACI,OAAA,CAAAvB,sBAAA,GAAAA,sBAAA;AAAA,IAAAwB,QAAA,GAAAD,OAAA,CAAAE,OAAA,GAEczB,sBAAsB","ignoreList":[]}