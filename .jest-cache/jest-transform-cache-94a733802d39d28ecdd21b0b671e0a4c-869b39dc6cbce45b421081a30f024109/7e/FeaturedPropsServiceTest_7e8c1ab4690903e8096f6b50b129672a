6e829d94edd0e291c08003043cf512ca
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _FeaturedPropsService = require("../../services/unified/FeaturedPropsService");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * FeaturedPropsService Direct Test
 * This component directly tests the FeaturedPropsService methods
 * to isolate where the data fetching issue is occurring
 */

const FeaturedPropsServiceTest = () => {
  const [results, setResults] = (0, _react.useState)([]);
  const [isRunning, setIsRunning] = (0, _react.useState)(false);
  const runServiceTests = async () => {
    setIsRunning(true);
    setResults([]);
    console.log('[FeaturedPropsServiceTest] Starting FeaturedPropsService tests...');
    const tests = [{
      name: 'MLB Props (Default Options)',
      sport: 'MLB',
      marketType: 'player',
      options: {}
    }, {
      name: 'MLB Props (No Cache)',
      sport: 'MLB',
      marketType: 'player',
      options: {
        useCache: false,
        limit: 5
      }
    }, {
      name: 'MLB Props (With Stat Types)',
      sport: 'MLB',
      marketType: 'player',
      options: {
        statTypes: ['hits', 'home_runs'],
        limit: 5
      }
    }, {
      name: 'MLB Props (High Priority)',
      sport: 'MLB',
      marketType: 'player',
      options: {
        priority: 'high',
        limit: 3
      }
    }];
    for (const test of tests) {
      const startTime = Date.now();
      try {
        console.log(`[FeaturedPropsServiceTest] Running: ${test.name}`);
        const props = await (0, _FeaturedPropsService.fetchFeaturedProps)(test.sport, test.marketType, test.options);
        const duration = Date.now() - startTime;
        setResults(prev => [...prev, {
          testName: test.name,
          success: true,
          propsCount: props.length,
          props: props.slice(0, 3),
          // Keep first 3 for display
          duration,
          timestamp: new Date().toISOString()
        }]);
        console.log(`[FeaturedPropsServiceTest] ✅ ${test.name}: ${props.length} props (${duration}ms)`);
      } catch (error) {
        const duration = Date.now() - startTime;
        setResults(prev => [...prev, {
          testName: test.name,
          success: false,
          propsCount: 0,
          error: error instanceof Error ? error.message : String(error),
          duration,
          timestamp: new Date().toISOString()
        }]);
        console.error(`[FeaturedPropsServiceTest] ❌ ${test.name}:`, error);
      }
    }
    setIsRunning(false);
  };
  (0, _react.useEffect)(() => {
    // Auto-run tests on component mount with delay
    const timeoutId = setTimeout(() => {
      runServiceTests().catch(error => {
        console.log('[FeaturedPropsServiceTest] Auto-run completed with fallback data');
      });
    }, 3000); // Give it a bit more time for proper initialization

    return () => clearTimeout(timeoutId);
  }, []);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "featured-props-service-test bg-blue-900/20 p-6 rounded-lg border border-blue-500",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h2", {
      className: "text-xl font-bold text-blue-400 mb-4",
      children: "\uD83E\uDDEA FeaturedPropsService Test"
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
      onClick: runServiceTests,
      disabled: isRunning,
      className: "bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white px-6 py-2 rounded font-medium mb-6",
      children: isRunning ? '🔄 Running Tests...' : '▶️ Test FeaturedPropsService'
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "space-y-4",
      children: results.map((result, index) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: `p-4 rounded border-l-4 ${result.success ? 'bg-green-900/20 border-green-500' : 'bg-red-900/20 border-red-500'}`,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex items-center justify-between mb-2",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
            className: "font-medium text-white flex items-center gap-2",
            children: [result.success ? '✅' : '❌', result.testName]
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: "text-xs text-gray-400 flex gap-4",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
              children: [result.duration, "ms"]
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              children: result.timestamp.split('T')[1].split('.')[0]
            })]
          })]
        }), result.success && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-sm text-green-300 mb-2",
          children: ["\uD83D\uDCCA Fetched ", result.propsCount, " props successfully"]
        }), result.error && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "text-sm text-red-300 mb-2",
          children: ["\u26A0\uFE0F Error: ", result.error]
        }), result.props && result.props.length > 0 && /*#__PURE__*/(0, _jsxRuntime.jsxs)("details", {
          className: "text-xs",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("summary", {
            className: "cursor-pointer text-gray-300 hover:text-white",
            children: "View Sample Props (first 3)"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "mt-2 space-y-2",
            children: result.props.map((prop, propIndex) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "bg-slate-800/50 p-3 rounded",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "text-white font-medium",
                children: [prop.player, " - ", prop.stat]
              }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "text-gray-300 text-xs",
                children: [prop.matchup, " | Line: ", prop.line, " | Confidence: ", prop.confidence, "%"]
              }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "text-gray-400 text-xs mt-1",
                children: ["ID: ", prop.id, " | Sport: ", prop.sport]
              })]
            }, propIndex))
          })]
        })]
      }, index))
    }), results.length === 0 && !isRunning && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "text-gray-400 text-center py-8",
      children: "FeaturedPropsService tests will run automatically..."
    }), isRunning && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "text-blue-400 text-center py-4 flex items-center justify-center gap-2",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "animate-spin w-4 h-4 border-2 border-blue-400 border-t-transparent rounded-full"
      }), "Testing FeaturedPropsService..."]
    })]
  });
};
var _default = exports.default = FeaturedPropsServiceTest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,