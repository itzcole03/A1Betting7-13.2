9907f3931e27b7c853e8cd3a7b3cd872
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.UnifiedRegistryAdapter = void 0;
/** Public-facing shape mirrors the external UnifiedServiceRegistry */

/**
 * Lightweight adapter that provides the public API expected by unified services.
 * Delegates calls to the central MasterServiceRegistry instance.
 */
class UnifiedRegistryAdapter {
  constructor(registry) {
    // expose services map publicly to match external registry shape
    this.services = void 0;
    this.registry = void 0;
    this.registry = registry;
    // Initialize public services map from the master registry
    this.services = new Map(this.registry.getAllServices());
  }
  register(name, service) {
    this.registry.registerService(name, service);
    this.services.set(name, service);
  }
  get(name) {
    return this.registry.getService(name) ?? undefined;
  }
  has(name) {
    return this.registry.getAllServices().has(name);
  }
  unregister(name) {
    const ok = this.registry.getAllServices().delete(name);
    this.services.delete(name);
    return ok;
  }
  getAllServices() {
    return new Map(this.registry.getAllServices());
  }
  clear() {
    for (const k of Array.from(this.registry.getAllServices().keys())) {
      this.registry.registerService(k, undefined);
      this.services.delete(k);
    }
  }
}
exports.UnifiedRegistryAdapter = UnifiedRegistryAdapter;
var _default = exports.default = UnifiedRegistryAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVbmlmaWVkUmVnaXN0cnlBZGFwdGVyIiwiY29uc3RydWN0b3IiLCJyZWdpc3RyeSIsInNlcnZpY2VzIiwiTWFwIiwiZ2V0QWxsU2VydmljZXMiLCJyZWdpc3RlciIsIm5hbWUiLCJzZXJ2aWNlIiwicmVnaXN0ZXJTZXJ2aWNlIiwic2V0IiwiZ2V0IiwiZ2V0U2VydmljZSIsInVuZGVmaW5lZCIsImhhcyIsInVucmVnaXN0ZXIiLCJvayIsImRlbGV0ZSIsImNsZWFyIiwiayIsIkFycmF5IiwiZnJvbSIsImtleXMiLCJleHBvcnRzIiwiX2RlZmF1bHQiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiVW5pZmllZFJlZ2lzdHJ5QWRhcHRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXN0ZXJTZXJ2aWNlUmVnaXN0cnkgfSBmcm9tICcuL01hc3RlclNlcnZpY2VSZWdpc3RyeSc7XHJcblxyXG4vKiogUHVibGljLWZhY2luZyBzaGFwZSBtaXJyb3JzIHRoZSBleHRlcm5hbCBVbmlmaWVkU2VydmljZVJlZ2lzdHJ5ICovXHJcbmV4cG9ydCB0eXBlIFJlZ2lzdHJ5VmFsdWUgPSB1bmtub3duO1xyXG5cclxuLyoqXHJcbiAqIExpZ2h0d2VpZ2h0IGFkYXB0ZXIgdGhhdCBwcm92aWRlcyB0aGUgcHVibGljIEFQSSBleHBlY3RlZCBieSB1bmlmaWVkIHNlcnZpY2VzLlxyXG4gKiBEZWxlZ2F0ZXMgY2FsbHMgdG8gdGhlIGNlbnRyYWwgTWFzdGVyU2VydmljZVJlZ2lzdHJ5IGluc3RhbmNlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFVuaWZpZWRSZWdpc3RyeUFkYXB0ZXIge1xyXG4gIC8vIGV4cG9zZSBzZXJ2aWNlcyBtYXAgcHVibGljbHkgdG8gbWF0Y2ggZXh0ZXJuYWwgcmVnaXN0cnkgc2hhcGVcclxuICBwdWJsaWMgc2VydmljZXM6IE1hcDxzdHJpbmcsIFJlZ2lzdHJ5VmFsdWU+O1xyXG5cclxuICBwcml2YXRlIHJlZ2lzdHJ5OiBNYXN0ZXJTZXJ2aWNlUmVnaXN0cnk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHJlZ2lzdHJ5OiBNYXN0ZXJTZXJ2aWNlUmVnaXN0cnkpIHtcclxuICAgIHRoaXMucmVnaXN0cnkgPSByZWdpc3RyeTtcclxuICAgIC8vIEluaXRpYWxpemUgcHVibGljIHNlcnZpY2VzIG1hcCBmcm9tIHRoZSBtYXN0ZXIgcmVnaXN0cnlcclxuICAgIHRoaXMuc2VydmljZXMgPSBuZXcgTWFwKHRoaXMucmVnaXN0cnkuZ2V0QWxsU2VydmljZXMoKSk7XHJcbiAgfVxyXG5cclxuICByZWdpc3RlcihuYW1lOiBzdHJpbmcsIHNlcnZpY2U6IFJlZ2lzdHJ5VmFsdWUpOiB2b2lkIHtcclxuICAgIHRoaXMucmVnaXN0cnkucmVnaXN0ZXJTZXJ2aWNlKG5hbWUsIHNlcnZpY2UpO1xyXG4gICAgdGhpcy5zZXJ2aWNlcy5zZXQobmFtZSwgc2VydmljZSk7XHJcbiAgfVxyXG5cclxuICBnZXQ8VCA9IFJlZ2lzdHJ5VmFsdWU+KG5hbWU6IHN0cmluZyk6IFQgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuICh0aGlzLnJlZ2lzdHJ5LmdldFNlcnZpY2U8VD4obmFtZSkgYXMgVCkgPz8gdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgaGFzKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVnaXN0cnkuZ2V0QWxsU2VydmljZXMoKS5oYXMobmFtZSk7XHJcbiAgfVxyXG5cclxuICB1bnJlZ2lzdGVyKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3Qgb2sgPSB0aGlzLnJlZ2lzdHJ5LmdldEFsbFNlcnZpY2VzKCkuZGVsZXRlKG5hbWUpO1xyXG4gICAgdGhpcy5zZXJ2aWNlcy5kZWxldGUobmFtZSk7XHJcbiAgICByZXR1cm4gb2s7XHJcbiAgfVxyXG5cclxuICBnZXRBbGxTZXJ2aWNlcygpOiBNYXA8c3RyaW5nLCBSZWdpc3RyeVZhbHVlPiB7XHJcbiAgICByZXR1cm4gbmV3IE1hcCh0aGlzLnJlZ2lzdHJ5LmdldEFsbFNlcnZpY2VzKCkpO1xyXG4gIH1cclxuXHJcbiAgY2xlYXIoKTogdm9pZCB7XHJcbiAgICBmb3IgKGNvbnN0IGsgb2YgQXJyYXkuZnJvbSh0aGlzLnJlZ2lzdHJ5LmdldEFsbFNlcnZpY2VzKCkua2V5cygpKSkge1xyXG4gICAgICB0aGlzLnJlZ2lzdHJ5LnJlZ2lzdGVyU2VydmljZShrLCB1bmRlZmluZWQgYXMgdW5rbm93biBhcyBSZWdpc3RyeVZhbHVlKTtcclxuICAgICAgdGhpcy5zZXJ2aWNlcy5kZWxldGUoayk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBVbmlmaWVkUmVnaXN0cnlBZGFwdGVyO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBOztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsc0JBQXNCLENBQUM7RUFNbENDLFdBQVdBLENBQUNDLFFBQStCLEVBQUU7SUFMN0M7SUFBQSxLQUNPQyxRQUFRO0lBQUEsS0FFUEQsUUFBUTtJQUdkLElBQUksQ0FBQ0EsUUFBUSxHQUFHQSxRQUFRO0lBQ3hCO0lBQ0EsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSUMsR0FBRyxDQUFDLElBQUksQ0FBQ0YsUUFBUSxDQUFDRyxjQUFjLENBQUMsQ0FBQyxDQUFDO0VBQ3pEO0VBRUFDLFFBQVFBLENBQUNDLElBQVksRUFBRUMsT0FBc0IsRUFBUTtJQUNuRCxJQUFJLENBQUNOLFFBQVEsQ0FBQ08sZUFBZSxDQUFDRixJQUFJLEVBQUVDLE9BQU8sQ0FBQztJQUM1QyxJQUFJLENBQUNMLFFBQVEsQ0FBQ08sR0FBRyxDQUFDSCxJQUFJLEVBQUVDLE9BQU8sQ0FBQztFQUNsQztFQUVBRyxHQUFHQSxDQUFvQkosSUFBWSxFQUFpQjtJQUNsRCxPQUFRLElBQUksQ0FBQ0wsUUFBUSxDQUFDVSxVQUFVLENBQUlMLElBQUksQ0FBQyxJQUFVTSxTQUFTO0VBQzlEO0VBRUFDLEdBQUdBLENBQUNQLElBQVksRUFBVztJQUN6QixPQUFPLElBQUksQ0FBQ0wsUUFBUSxDQUFDRyxjQUFjLENBQUMsQ0FBQyxDQUFDUyxHQUFHLENBQUNQLElBQUksQ0FBQztFQUNqRDtFQUVBUSxVQUFVQSxDQUFDUixJQUFZLEVBQVc7SUFDaEMsTUFBTVMsRUFBRSxHQUFHLElBQUksQ0FBQ2QsUUFBUSxDQUFDRyxjQUFjLENBQUMsQ0FBQyxDQUFDWSxNQUFNLENBQUNWLElBQUksQ0FBQztJQUN0RCxJQUFJLENBQUNKLFFBQVEsQ0FBQ2MsTUFBTSxDQUFDVixJQUFJLENBQUM7SUFDMUIsT0FBT1MsRUFBRTtFQUNYO0VBRUFYLGNBQWNBLENBQUEsRUFBK0I7SUFDM0MsT0FBTyxJQUFJRCxHQUFHLENBQUMsSUFBSSxDQUFDRixRQUFRLENBQUNHLGNBQWMsQ0FBQyxDQUFDLENBQUM7RUFDaEQ7RUFFQWEsS0FBS0EsQ0FBQSxFQUFTO0lBQ1osS0FBSyxNQUFNQyxDQUFDLElBQUlDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQ25CLFFBQVEsQ0FBQ0csY0FBYyxDQUFDLENBQUMsQ0FBQ2lCLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtNQUNqRSxJQUFJLENBQUNwQixRQUFRLENBQUNPLGVBQWUsQ0FBQ1UsQ0FBQyxFQUFFTixTQUFxQyxDQUFDO01BQ3ZFLElBQUksQ0FBQ1YsUUFBUSxDQUFDYyxNQUFNLENBQUNFLENBQUMsQ0FBQztJQUN6QjtFQUNGO0FBQ0Y7QUFBQ0ksT0FBQSxDQUFBdkIsc0JBQUEsR0FBQUEsc0JBQUE7QUFBQSxJQUFBd0IsUUFBQSxHQUFBRCxPQUFBLENBQUFFLE9BQUEsR0FFY3pCLHNCQUFzQiIsImlnbm9yZUxpc3QiOltdfQ==