a0c4c4448fc7ad4d8c734c256e0ef652
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PropOllamaErrorType = exports.PropOllamaError = void 0;
/**
 * PropOllama Error Types and Error Class
 */
let PropOllamaErrorType = exports.PropOllamaErrorType = /*#__PURE__*/function (PropOllamaErrorType) {
  PropOllamaErrorType["NETWORK_ERROR"] = "NETWORK_ERROR";
  PropOllamaErrorType["TIMEOUT_ERROR"] = "TIMEOUT_ERROR";
  PropOllamaErrorType["LLM_UNAVAILABLE"] = "LLM_UNAVAILABLE";
  PropOllamaErrorType["DATA_FETCH_ERROR"] = "DATA_FETCH_ERROR";
  PropOllamaErrorType["INSUFFICIENT_DATA"] = "INSUFFICIENT_DATA";
  PropOllamaErrorType["PARSING_ERROR"] = "PARSING_ERROR";
  PropOllamaErrorType["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
  return PropOllamaErrorType;
}({});
class PropOllamaError extends Error {
  constructor(message, type, retryable = false, fallbackAvailable = false, details) {
    super(message);
    this.type = void 0;
    this.retryable = void 0;
    this.fallbackAvailable = void 0;
    this.details = void 0;
    this.name = 'PropOllamaError';
    this.type = type;
    this.retryable = retryable;
    this.fallbackAvailable = fallbackAvailable;
    this.details = details === undefined ? undefined : details;
  }
  static networkError(message, details) {
    return new PropOllamaError(message, PropOllamaErrorType.NETWORK_ERROR, true,
    // retryable
    true,
    // fallback available
    details);
  }
  static timeoutError(message, details) {
    return new PropOllamaError(message, PropOllamaErrorType.TIMEOUT_ERROR, true,
    // retryable
    true,
    // fallback available
    details);
  }
  static llmUnavailableError(message, details) {
    return new PropOllamaError(message, PropOllamaErrorType.LLM_UNAVAILABLE, true,
    // retryable
    true,
    // fallback available
    details);
  }
  static dataFetchError(message, details) {
    return new PropOllamaError(message, PropOllamaErrorType.DATA_FETCH_ERROR, true,
    // retryable
    true,
    // fallback available
    details);
  }
  static insufficientDataError(message, details) {
    return new PropOllamaError(message, PropOllamaErrorType.INSUFFICIENT_DATA, false,
    // not retryable
    true,
    // fallback available
    details);
  }
  static parsingError(message, details) {
    return new PropOllamaError(message, PropOllamaErrorType.PARSING_ERROR, false,
    // not retryable
    true,
    // fallback available
    details);
  }
  static unknownError(message, details) {
    return new PropOllamaError(message, PropOllamaErrorType.UNKNOWN_ERROR, false,
    // not retryable
    true,
    // fallback available
    details);
  }
  static fromError(error) {
    // Handle timeout errors first
    if (error && error.code === 'ECONNABORTED') {
      return PropOllamaError.timeoutError('Request timed out', {
        originalError: error.message
      });
    }
    // Handle Axios errors
    if (error && error.isAxiosError) {
      if (!error.response) {
        return PropOllamaError.networkError('Network error: Unable to connect to the server', {
          originalError: error.message
        });
      }
      const status = error.response.status;
      // Handle different HTTP status codes
      if (status === 404) {
        return PropOllamaError.networkError('Resource not found', {
          status,
          originalError: error.message
        });
      } else if (status === 401 || status === 403) {
        return PropOllamaError.networkError('Authentication error', {
          status,
          originalError: error.message
        });
      } else if (status === 429) {
        return PropOllamaError.networkError('Rate limit exceeded', {
          status,
          originalError: error.message
        });
      } else if (status >= 500) {
        return PropOllamaError.llmUnavailableError('LLM service is unavailable', {
          status,
          originalError: error.message
        });
      }
      return PropOllamaError.networkError(`HTTP error: ${error.response.status}`, {
        status,
        originalError: error.message
      });
    }

    // Handle PropOllamaError instances
    if (error instanceof PropOllamaError) {
      return error;
    }

    // Handle generic errors
    return PropOllamaError.unknownError(error?.message || 'Unknown error occurred', {
      originalError: error
    });
  }
}
exports.PropOllamaError = PropOllamaError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wT2xsYW1hRXJyb3JUeXBlIiwiZXhwb3J0cyIsIlByb3BPbGxhbWFFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwidHlwZSIsInJldHJ5YWJsZSIsImZhbGxiYWNrQXZhaWxhYmxlIiwiZGV0YWlscyIsIm5hbWUiLCJ1bmRlZmluZWQiLCJuZXR3b3JrRXJyb3IiLCJORVRXT1JLX0VSUk9SIiwidGltZW91dEVycm9yIiwiVElNRU9VVF9FUlJPUiIsImxsbVVuYXZhaWxhYmxlRXJyb3IiLCJMTE1fVU5BVkFJTEFCTEUiLCJkYXRhRmV0Y2hFcnJvciIsIkRBVEFfRkVUQ0hfRVJST1IiLCJpbnN1ZmZpY2llbnREYXRhRXJyb3IiLCJJTlNVRkZJQ0lFTlRfREFUQSIsInBhcnNpbmdFcnJvciIsIlBBUlNJTkdfRVJST1IiLCJ1bmtub3duRXJyb3IiLCJVTktOT1dOX0VSUk9SIiwiZnJvbUVycm9yIiwiZXJyb3IiLCJjb2RlIiwib3JpZ2luYWxFcnJvciIsImlzQXhpb3NFcnJvciIsInJlc3BvbnNlIiwic3RhdHVzIl0sInNvdXJjZXMiOlsiZXJyb3JzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBQcm9wT2xsYW1hIEVycm9yIFR5cGVzIGFuZCBFcnJvciBDbGFzc1xyXG4gKi9cclxuXHJcbmV4cG9ydCBlbnVtIFByb3BPbGxhbWFFcnJvclR5cGUge1xyXG4gIE5FVFdPUktfRVJST1IgPSAnTkVUV09SS19FUlJPUicsXHJcbiAgVElNRU9VVF9FUlJPUiA9ICdUSU1FT1VUX0VSUk9SJyxcclxuICBMTE1fVU5BVkFJTEFCTEUgPSAnTExNX1VOQVZBSUxBQkxFJyxcclxuICBEQVRBX0ZFVENIX0VSUk9SID0gJ0RBVEFfRkVUQ0hfRVJST1InLFxyXG4gIElOU1VGRklDSUVOVF9EQVRBID0gJ0lOU1VGRklDSUVOVF9EQVRBJyxcclxuICBQQVJTSU5HX0VSUk9SID0gJ1BBUlNJTkdfRVJST1InLFxyXG4gIFVOS05PV05fRVJST1IgPSAnVU5LTk9XTl9FUlJPUicsXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9wT2xsYW1hRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgdHlwZTogUHJvcE9sbGFtYUVycm9yVHlwZTtcclxuICByZXRyeWFibGU6IGJvb2xlYW47XHJcbiAgZmFsbGJhY2tBdmFpbGFibGU6IGJvb2xlYW47XHJcbiAgZGV0YWlscz86IFJlY29yZDxzdHJpbmcsIGFueT4gfCB1bmRlZmluZWQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgbWVzc2FnZTogc3RyaW5nLFxyXG4gICAgdHlwZTogUHJvcE9sbGFtYUVycm9yVHlwZSxcclxuICAgIHJldHJ5YWJsZTogYm9vbGVhbiA9IGZhbHNlLFxyXG4gICAgZmFsbGJhY2tBdmFpbGFibGU6IGJvb2xlYW4gPSBmYWxzZSxcclxuICAgIGRldGFpbHM/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XHJcbiAgKSB7XHJcbiAgICBzdXBlcihtZXNzYWdlKTtcclxuICAgIHRoaXMubmFtZSA9ICdQcm9wT2xsYW1hRXJyb3InO1xyXG4gICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgIHRoaXMucmV0cnlhYmxlID0gcmV0cnlhYmxlO1xyXG4gICAgdGhpcy5mYWxsYmFja0F2YWlsYWJsZSA9IGZhbGxiYWNrQXZhaWxhYmxlO1xyXG4gICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscyA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogZGV0YWlscztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBuZXR3b3JrRXJyb3IobWVzc2FnZTogc3RyaW5nLCBkZXRhaWxzPzogUmVjb3JkPHN0cmluZywgYW55Pik6IFByb3BPbGxhbWFFcnJvciB7XHJcbiAgICByZXR1cm4gbmV3IFByb3BPbGxhbWFFcnJvcihcclxuICAgICAgbWVzc2FnZSxcclxuICAgICAgUHJvcE9sbGFtYUVycm9yVHlwZS5ORVRXT1JLX0VSUk9SLFxyXG4gICAgICB0cnVlLCAvLyByZXRyeWFibGVcclxuICAgICAgdHJ1ZSwgLy8gZmFsbGJhY2sgYXZhaWxhYmxlXHJcbiAgICAgIGRldGFpbHNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdGltZW91dEVycm9yKG1lc3NhZ2U6IHN0cmluZywgZGV0YWlscz86IFJlY29yZDxzdHJpbmcsIGFueT4pOiBQcm9wT2xsYW1hRXJyb3Ige1xyXG4gICAgcmV0dXJuIG5ldyBQcm9wT2xsYW1hRXJyb3IoXHJcbiAgICAgIG1lc3NhZ2UsXHJcbiAgICAgIFByb3BPbGxhbWFFcnJvclR5cGUuVElNRU9VVF9FUlJPUixcclxuICAgICAgdHJ1ZSwgLy8gcmV0cnlhYmxlXHJcbiAgICAgIHRydWUsIC8vIGZhbGxiYWNrIGF2YWlsYWJsZVxyXG4gICAgICBkZXRhaWxzXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGxsbVVuYXZhaWxhYmxlRXJyb3IobWVzc2FnZTogc3RyaW5nLCBkZXRhaWxzPzogUmVjb3JkPHN0cmluZywgYW55Pik6IFByb3BPbGxhbWFFcnJvciB7XHJcbiAgICByZXR1cm4gbmV3IFByb3BPbGxhbWFFcnJvcihcclxuICAgICAgbWVzc2FnZSxcclxuICAgICAgUHJvcE9sbGFtYUVycm9yVHlwZS5MTE1fVU5BVkFJTEFCTEUsXHJcbiAgICAgIHRydWUsIC8vIHJldHJ5YWJsZVxyXG4gICAgICB0cnVlLCAvLyBmYWxsYmFjayBhdmFpbGFibGVcclxuICAgICAgZGV0YWlsc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkYXRhRmV0Y2hFcnJvcihtZXNzYWdlOiBzdHJpbmcsIGRldGFpbHM/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogUHJvcE9sbGFtYUVycm9yIHtcclxuICAgIHJldHVybiBuZXcgUHJvcE9sbGFtYUVycm9yKFxyXG4gICAgICBtZXNzYWdlLFxyXG4gICAgICBQcm9wT2xsYW1hRXJyb3JUeXBlLkRBVEFfRkVUQ0hfRVJST1IsXHJcbiAgICAgIHRydWUsIC8vIHJldHJ5YWJsZVxyXG4gICAgICB0cnVlLCAvLyBmYWxsYmFjayBhdmFpbGFibGVcclxuICAgICAgZGV0YWlsc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBpbnN1ZmZpY2llbnREYXRhRXJyb3IobWVzc2FnZTogc3RyaW5nLCBkZXRhaWxzPzogUmVjb3JkPHN0cmluZywgYW55Pik6IFByb3BPbGxhbWFFcnJvciB7XHJcbiAgICByZXR1cm4gbmV3IFByb3BPbGxhbWFFcnJvcihcclxuICAgICAgbWVzc2FnZSxcclxuICAgICAgUHJvcE9sbGFtYUVycm9yVHlwZS5JTlNVRkZJQ0lFTlRfREFUQSxcclxuICAgICAgZmFsc2UsIC8vIG5vdCByZXRyeWFibGVcclxuICAgICAgdHJ1ZSwgLy8gZmFsbGJhY2sgYXZhaWxhYmxlXHJcbiAgICAgIGRldGFpbHNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcGFyc2luZ0Vycm9yKG1lc3NhZ2U6IHN0cmluZywgZGV0YWlscz86IFJlY29yZDxzdHJpbmcsIGFueT4pOiBQcm9wT2xsYW1hRXJyb3Ige1xyXG4gICAgcmV0dXJuIG5ldyBQcm9wT2xsYW1hRXJyb3IoXHJcbiAgICAgIG1lc3NhZ2UsXHJcbiAgICAgIFByb3BPbGxhbWFFcnJvclR5cGUuUEFSU0lOR19FUlJPUixcclxuICAgICAgZmFsc2UsIC8vIG5vdCByZXRyeWFibGVcclxuICAgICAgdHJ1ZSwgLy8gZmFsbGJhY2sgYXZhaWxhYmxlXHJcbiAgICAgIGRldGFpbHNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdW5rbm93bkVycm9yKG1lc3NhZ2U6IHN0cmluZywgZGV0YWlscz86IFJlY29yZDxzdHJpbmcsIGFueT4pOiBQcm9wT2xsYW1hRXJyb3Ige1xyXG4gICAgcmV0dXJuIG5ldyBQcm9wT2xsYW1hRXJyb3IoXHJcbiAgICAgIG1lc3NhZ2UsXHJcbiAgICAgIFByb3BPbGxhbWFFcnJvclR5cGUuVU5LTk9XTl9FUlJPUixcclxuICAgICAgZmFsc2UsIC8vIG5vdCByZXRyeWFibGVcclxuICAgICAgdHJ1ZSwgLy8gZmFsbGJhY2sgYXZhaWxhYmxlXHJcbiAgICAgIGRldGFpbHNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZnJvbUVycm9yKGVycm9yOiBhbnkpOiBQcm9wT2xsYW1hRXJyb3Ige1xyXG4gICAgLy8gSGFuZGxlIHRpbWVvdXQgZXJyb3JzIGZpcnN0XHJcbiAgICBpZiAoZXJyb3IgJiYgZXJyb3IuY29kZSA9PT0gJ0VDT05OQUJPUlRFRCcpIHtcclxuICAgICAgcmV0dXJuIFByb3BPbGxhbWFFcnJvci50aW1lb3V0RXJyb3IoJ1JlcXVlc3QgdGltZWQgb3V0JywgeyBvcmlnaW5hbEVycm9yOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gSGFuZGxlIEF4aW9zIGVycm9yc1xyXG4gICAgaWYgKGVycm9yICYmIGVycm9yLmlzQXhpb3NFcnJvcikge1xyXG4gICAgICBpZiAoIWVycm9yLnJlc3BvbnNlKSB7XHJcbiAgICAgICAgcmV0dXJuIFByb3BPbGxhbWFFcnJvci5uZXR3b3JrRXJyb3IoJ05ldHdvcmsgZXJyb3I6IFVuYWJsZSB0byBjb25uZWN0IHRvIHRoZSBzZXJ2ZXInLCB7XHJcbiAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnJvci5tZXNzYWdlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBzdGF0dXMgPSBlcnJvci5yZXNwb25zZS5zdGF0dXM7XHJcbiAgICAgIC8vIEhhbmRsZSBkaWZmZXJlbnQgSFRUUCBzdGF0dXMgY29kZXNcclxuICAgICAgaWYgKHN0YXR1cyA9PT0gNDA0KSB7XHJcbiAgICAgICAgcmV0dXJuIFByb3BPbGxhbWFFcnJvci5uZXR3b3JrRXJyb3IoJ1Jlc291cmNlIG5vdCBmb3VuZCcsIHtcclxuICAgICAgICAgIHN0YXR1cyxcclxuICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGVycm9yLm1lc3NhZ2UsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDEgfHwgc3RhdHVzID09PSA0MDMpIHtcclxuICAgICAgICByZXR1cm4gUHJvcE9sbGFtYUVycm9yLm5ldHdvcmtFcnJvcignQXV0aGVudGljYXRpb24gZXJyb3InLCB7XHJcbiAgICAgICAgICBzdGF0dXMsXHJcbiAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnJvci5tZXNzYWdlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDI5KSB7XHJcbiAgICAgICAgcmV0dXJuIFByb3BPbGxhbWFFcnJvci5uZXR3b3JrRXJyb3IoJ1JhdGUgbGltaXQgZXhjZWVkZWQnLCB7XHJcbiAgICAgICAgICBzdGF0dXMsXHJcbiAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnJvci5tZXNzYWdlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cyA+PSA1MDApIHtcclxuICAgICAgICByZXR1cm4gUHJvcE9sbGFtYUVycm9yLmxsbVVuYXZhaWxhYmxlRXJyb3IoJ0xMTSBzZXJ2aWNlIGlzIHVuYXZhaWxhYmxlJywge1xyXG4gICAgICAgICAgc3RhdHVzLFxyXG4gICAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyb3IubWVzc2FnZSxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gUHJvcE9sbGFtYUVycm9yLm5ldHdvcmtFcnJvcihgSFRUUCBlcnJvcjogJHtlcnJvci5yZXNwb25zZS5zdGF0dXN9YCwge1xyXG4gICAgICAgIHN0YXR1cyxcclxuICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnJvci5tZXNzYWdlLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIYW5kbGUgUHJvcE9sbGFtYUVycm9yIGluc3RhbmNlc1xyXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgUHJvcE9sbGFtYUVycm9yKSB7XHJcbiAgICAgIHJldHVybiBlcnJvcjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIYW5kbGUgZ2VuZXJpYyBlcnJvcnNcclxuICAgIHJldHVybiBQcm9wT2xsYW1hRXJyb3IudW5rbm93bkVycm9yKGVycm9yPy5tZXNzYWdlIHx8ICdVbmtub3duIGVycm9yIG9jY3VycmVkJywge1xyXG4gICAgICBvcmlnaW5hbEVycm9yOiBlcnJvcixcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUZBLElBSVlBLG1CQUFtQixHQUFBQyxPQUFBLENBQUFELG1CQUFBLDBCQUFuQkEsbUJBQW1CO0VBQW5CQSxtQkFBbUI7RUFBbkJBLG1CQUFtQjtFQUFuQkEsbUJBQW1CO0VBQW5CQSxtQkFBbUI7RUFBbkJBLG1CQUFtQjtFQUFuQkEsbUJBQW1CO0VBQW5CQSxtQkFBbUI7RUFBQSxPQUFuQkEsbUJBQW1CO0FBQUE7QUFVeEIsTUFBTUUsZUFBZSxTQUFTQyxLQUFLLENBQUM7RUFNekNDLFdBQVdBLENBQ1RDLE9BQWUsRUFDZkMsSUFBeUIsRUFDekJDLFNBQWtCLEdBQUcsS0FBSyxFQUMxQkMsaUJBQTBCLEdBQUcsS0FBSyxFQUNsQ0MsT0FBNkIsRUFDN0I7SUFDQSxLQUFLLENBQUNKLE9BQU8sQ0FBQztJQUFDLEtBWmpCQyxJQUFJO0lBQUEsS0FDSkMsU0FBUztJQUFBLEtBQ1RDLGlCQUFpQjtJQUFBLEtBQ2pCQyxPQUFPO0lBVUwsSUFBSSxDQUFDQyxJQUFJLEdBQUcsaUJBQWlCO0lBQzdCLElBQUksQ0FBQ0osSUFBSSxHQUFHQSxJQUFJO0lBQ2hCLElBQUksQ0FBQ0MsU0FBUyxHQUFHQSxTQUFTO0lBQzFCLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUdBLGlCQUFpQjtJQUMxQyxJQUFJLENBQUNDLE9BQU8sR0FBR0EsT0FBTyxLQUFLRSxTQUFTLEdBQUdBLFNBQVMsR0FBR0YsT0FBTztFQUM1RDtFQUVBLE9BQU9HLFlBQVlBLENBQUNQLE9BQWUsRUFBRUksT0FBNkIsRUFBbUI7SUFDbkYsT0FBTyxJQUFJUCxlQUFlLENBQ3hCRyxPQUFPLEVBQ1BMLG1CQUFtQixDQUFDYSxhQUFh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