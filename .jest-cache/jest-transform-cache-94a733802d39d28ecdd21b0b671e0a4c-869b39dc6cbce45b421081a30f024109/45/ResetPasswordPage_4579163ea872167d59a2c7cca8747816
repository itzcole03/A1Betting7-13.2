4d605fdbe9e24f879db7d6a567e0197b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRouterDom = require("react-router-dom");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const ResetPasswordPage = () => {
  const [searchParams] = (0, _reactRouterDom.useSearchParams)();
  const token = searchParams.get('token');
  const [newPassword, setNewPassword] = (0, _react.useState)('');
  const [confirmPassword, setConfirmPassword] = (0, _react.useState)('');
  const [loading, setLoading] = (0, _react.useState)(false);
  const [error, setError] = (0, _react.useState)(null);
  const [success, setSuccess] = (0, _react.useState)(null);
  const navigate = (0, _reactRouterDom.useNavigate)();
  const handleSubmit = async e => {
    e.preventDefault();
    setError(null);
    setSuccess(null);
    if (!token) {
      setError('Invalid or missing reset token.');
      return;
    }
    if (!newPassword || !confirmPassword) {
      setError('Please enter and confirm your new password.');
      return;
    }
    if (newPassword !== confirmPassword) {
      setError('Passwords do not match.');
      return;
    }
    setLoading(true);
    try {
      const response = await fetch(require('@/utils/getEnvVar').getEnvVar('VITE_API_URL', 'http://localhost:8000') + '/api/auth/reset-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          token,
          new_password: newPassword
        })
      });
      const data = await response.json();
      if (response.ok && data.success) {
        setSuccess('Your password has been reset. You can now sign in.');
        setTimeout(() => navigate('/login'), 2000);
      } else {
        setError(data.message || 'Failed to reset password.');
      }
    } catch (err) {
      setError('Network error. Please try again later.');
    } finally {
      setLoading(false);
    }
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: "min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8",
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "max-w-md w-full space-y-8",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("h2", {
          className: "mt-6 text-center text-3xl font-extrabold text-gray-900",
          children: "Reset Your Password"
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("form", {
        className: "mt-8 space-y-6",
        onSubmit: handleSubmit,
        children: [error && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded",
          children: error
        }), success && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded",
          children: success
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
            htmlFor: "new-password",
            className: "block text-sm font-medium text-gray-700",
            children: "New Password"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
            id: "new-password",
            name: "new-password",
            type: "password",
            required: true,
            className: "appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm",
            placeholder: "Enter new password",
            value: newPassword,
            onChange: e => setNewPassword(e.target.value),
            disabled: loading
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("label", {
            htmlFor: "confirm-password",
            className: "block text-sm font-medium text-gray-700",
            children: "Confirm Password"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
            id: "confirm-password",
            name: "confirm-password",
            type: "password",
            required: true,
            className: "appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm",
            placeholder: "Confirm new password",
            value: confirmPassword,
            onChange: e => setConfirmPassword(e.target.value),
            disabled: loading
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            type: "submit",
            disabled: loading,
            className: "group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50",
            children: loading ? 'Resetting...' : 'Reset Password'
          })
        })]
      })]
    })
  });
};
var _default = exports.default = ResetPasswordPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3RSb3V0ZXJEb20iLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlc2V0UGFzc3dvcmRQYWdlIiwic2VhcmNoUGFyYW1zIiwidXNlU2VhcmNoUGFyYW1zIiwidG9rZW4iLCJuZXdQYXNzd29yZCIsInNldE5ld1Bhc3N3b3JkIiwidXNlU3RhdGUiLCJjb25maXJtUGFzc3dvcmQiLCJzZXRDb25maXJtUGFzc3dvcmQiLCJsb2FkaW5nIiwic2V0TG9hZGluZyIsImVycm9yIiwic2V0RXJyb3IiLCJzdWNjZXNzIiwic2V0U3VjY2VzcyIsIm5hdmlnYXRlIiwidXNlTmF2aWdhdGUiLCJoYW5kbGVTdWJtaXQiLCJwcmV2ZW50RGVmYXVsdCIsInJlc3BvbnNlIiwiZmV0Y2giLCJnZXRFbnZWYXIiLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJuZXdfcGFzc3dvcmQiLCJkYXRhIiwianNvbiIsIm9rIiwic2V0VGltZW91dCIsIm1lc3NhZ2UiLCJlcnIiLCJqc3giLCJjbGFzc05hbWUiLCJjaGlsZHJlbiIsImpzeHMiLCJvblN1Ym1pdCIsImh0bWxGb3IiLCJpZCIsIm5hbWUiLCJ0eXBlIiwicmVxdWlyZWQiLCJwbGFjZWhvbGRlciIsInZhbHVlIiwib25DaGFuZ2UiLCJ0YXJnZXQiLCJkaXNhYmxlZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlJlc2V0UGFzc3dvcmRQYWdlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHVzZU5hdmlnYXRlLCB1c2VTZWFyY2hQYXJhbXMgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuXHJcbmNvbnN0IFJlc2V0UGFzc3dvcmRQYWdlOiBSZWFjdC5GQyA9ICgpID0+IHtcclxuICBjb25zdCBbc2VhcmNoUGFyYW1zXSA9IHVzZVNlYXJjaFBhcmFtcygpO1xyXG4gIGNvbnN0IHRva2VuID0gc2VhcmNoUGFyYW1zLmdldCgndG9rZW4nKTtcclxuICBjb25zdCBbbmV3UGFzc3dvcmQsIHNldE5ld1Bhc3N3b3JkXSA9IHVzZVN0YXRlKCcnKTtcclxuICBjb25zdCBbY29uZmlybVBhc3N3b3JkLCBzZXRDb25maXJtUGFzc3dvcmRdID0gdXNlU3RhdGUoJycpO1xyXG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IFtzdWNjZXNzLCBzZXRTdWNjZXNzXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcclxuXHJcbiAgY29uc3QgaGFuZGxlU3VibWl0ID0gYXN5bmMgKGU6IFJlYWN0LkZvcm1FdmVudCkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgc2V0RXJyb3IobnVsbCk7XHJcbiAgICBzZXRTdWNjZXNzKG51bGwpO1xyXG4gICAgaWYgKCF0b2tlbikge1xyXG4gICAgICBzZXRFcnJvcignSW52YWxpZCBvciBtaXNzaW5nIHJlc2V0IHRva2VuLicpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIW5ld1Bhc3N3b3JkIHx8ICFjb25maXJtUGFzc3dvcmQpIHtcclxuICAgICAgc2V0RXJyb3IoJ1BsZWFzZSBlbnRlciBhbmQgY29uZmlybSB5b3VyIG5ldyBwYXNzd29yZC4nKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKG5ld1Bhc3N3b3JkICE9PSBjb25maXJtUGFzc3dvcmQpIHtcclxuICAgICAgc2V0RXJyb3IoJ1Bhc3N3b3JkcyBkbyBub3QgbWF0Y2guJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHNldExvYWRpbmcodHJ1ZSk7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxyXG4gICAgICAgIHJlcXVpcmUoJ0AvdXRpbHMvZ2V0RW52VmFyJykuZ2V0RW52VmFyKCdWSVRFX0FQSV9VUkwnLCAnaHR0cDovL2xvY2FsaG9zdDo4MDAwJykgK1xyXG4gICAgICAgICAgJy9hcGkvYXV0aC9yZXNldC1wYXNzd29yZCcsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcclxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgdG9rZW4sIG5ld19wYXNzd29yZDogbmV3UGFzc3dvcmQgfSksXHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICBpZiAocmVzcG9uc2Uub2sgJiYgZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgc2V0U3VjY2VzcygnWW91ciBwYXNzd29yZCBoYXMgYmVlbiByZXNldC4gWW91IGNhbiBub3cgc2lnbiBpbi4nKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IG5hdmlnYXRlKCcvbG9naW4nKSwgMjAwMCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2V0RXJyb3IoZGF0YS5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gcmVzZXQgcGFzc3dvcmQuJyk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBzZXRFcnJvcignTmV0d29yayBlcnJvci4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci4nKTtcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT0nbWluLWgtc2NyZWVuIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGJnLWdyYXktNTAgcHktMTIgcHgtNCBzbTpweC02IGxnOnB4LTgnPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nbWF4LXctbWQgdy1mdWxsIHNwYWNlLXktOCc+XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIDxoMiBjbGFzc05hbWU9J210LTYgdGV4dC1jZW50ZXIgdGV4dC0zeGwgZm9udC1leHRyYWJvbGQgdGV4dC1ncmF5LTkwMCc+XHJcbiAgICAgICAgICAgIFJlc2V0IFlvdXIgUGFzc3dvcmRcclxuICAgICAgICAgIDwvaDI+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGZvcm0gY2xhc3NOYW1lPSdtdC04IHNwYWNlLXktNicgb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdH0+XHJcbiAgICAgICAgICB7ZXJyb3IgJiYgKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYmctcmVkLTEwMCBib3JkZXIgYm9yZGVyLXJlZC00MDAgdGV4dC1yZWQtNzAwIHB4LTQgcHktMyByb3VuZGVkJz5cclxuICAgICAgICAgICAgICB7ZXJyb3J9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICAgIHtzdWNjZXNzICYmIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2JnLWdyZWVuLTEwMCBib3JkZXIgYm9yZGVyLWdyZWVuLTQwMCB0ZXh0LWdyZWVuLTcwMCBweC00IHB5LTMgcm91bmRlZCc+XHJcbiAgICAgICAgICAgICAge3N1Y2Nlc3N9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPSduZXctcGFzc3dvcmQnIGNsYXNzTmFtZT0nYmxvY2sgdGV4dC1zbSBmb250LW1lZGl1bSB0ZXh0LWdyYXktNzAwJz5cclxuICAgICAgICAgICAgICBOZXcgUGFzc3dvcmRcclxuICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgaWQ9J25ldy1wYXNzd29yZCdcclxuICAgICAgICAgICAgICBuYW1lPSduZXctcGFzc3dvcmQnXHJcbiAgICAgICAgICAgICAgdHlwZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgICAgcmVxdWlyZWRcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9J2FwcGVhcmFuY2Utbm9uZSByb3VuZGVkLW1kIHJlbGF0aXZlIGJsb2NrIHctZnVsbCBweC0zIHB5LTIgYm9yZGVyIGJvcmRlci1ncmF5LTMwMCBwbGFjZWhvbGRlci1ncmF5LTUwMCB0ZXh0LWdyYXktOTAwIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLWluZGlnby01MDAgZm9jdXM6Ym9yZGVyLWluZGlnby01MDAgc206dGV4dC1zbSdcclxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0nRW50ZXIgbmV3IHBhc3N3b3JkJ1xyXG4gICAgICAgICAgICAgIHZhbHVlPXtuZXdQYXNzd29yZH1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiBzZXROZXdQYXNzd29yZChlLnRhcmdldC52YWx1ZSl9XHJcbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2xvYWRpbmd9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPSdjb25maXJtLXBhc3N3b3JkJyBjbGFzc05hbWU9J2Jsb2NrIHRleHQtc20gZm9udC1tZWRpdW0gdGV4dC1ncmF5LTcwMCc+XHJcbiAgICAgICAgICAgICAgQ29uZmlybSBQYXNzd29yZFxyXG4gICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICBpZD0nY29uZmlybS1wYXNzd29yZCdcclxuICAgICAgICAgICAgICBuYW1lPSdjb25maXJtLXBhc3N3b3JkJ1xyXG4gICAgICAgICAgICAgIHR5cGU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICAgIHJlcXVpcmVkXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPSdhcHBlYXJhbmNlLW5vbmUgcm91bmRlZC1tZCByZWxhdGl2ZSBibG9jayB3LWZ1bGwgcHgtMyBweS0yIGJvcmRlciBib3JkZXItZ3JheS0zMDAgcGxhY2Vob2xkZXItZ3JheS01MDAgdGV4dC1ncmF5LTkwMCBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6cmluZy1pbmRpZ28tNTAwIGZvY3VzOmJvcmRlci1pbmRpZ28tNTAwIHNtOnRleHQtc20nXHJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9J0NvbmZpcm0gbmV3IHBhc3N3b3JkJ1xyXG4gICAgICAgICAgICAgIHZhbHVlPXtjb25maXJtUGFzc3dvcmR9XHJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gc2V0Q29uZmlybVBhc3N3b3JkKGUudGFyZ2V0LnZhbHVlKX1cclxuICAgICAgICAgICAgICBkaXNhYmxlZD17bG9hZGluZ31cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgIHR5cGU9J3N1Ym1pdCdcclxuICAgICAgICAgICAgICBkaXNhYmxlZD17bG9hZGluZ31cclxuICAgICAgICAgICAgICBjbGFzc05hbWU9J2dyb3VwIHJlbGF0aXZlIHctZnVsbCBmbGV4IGp1c3RpZnktY2VudGVyIHB5LTIgcHgtNCBib3JkZXIgYm9yZGVyLXRyYW5zcGFyZW50IHRleHQtc20gZm9udC1tZWRpdW0gcm91bmRlZC1tZCB0ZXh0LXdoaXRlIGJnLWluZGlnby02MDAgaG92ZXI6YmctaW5kaWdvLTcwMCBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6cmluZy0yIGZvY3VzOnJpbmctb2Zmc2V0LTIgZm9jdXM6cmluZy1pbmRpZ28tNTAwIGRpc2FibGVkOm9wYWNpdHktNTAnXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICB7bG9hZGluZyA/ICdSZXNldHRpbmcuLi4nIDogJ1Jlc2V0IFBhc3N3b3JkJ31cclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Zvcm0+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJlc2V0UGFzc3dvcmRQYWdlO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGVBQUEsR0FBQUQsT0FBQTtBQUFnRSxJQUFBRSxXQUFBLEdBQUFGLE9BQUE7QUFBQSxTQUFBRCx3QkFBQUksQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQU4sdUJBQUEsWUFBQUEsQ0FBQUksQ0FBQSxFQUFBQyxDQUFBLFNBQUFBLENBQUEsSUFBQUQsQ0FBQSxJQUFBQSxDQUFBLENBQUFLLFVBQUEsU0FBQUwsQ0FBQSxNQUFBTSxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxLQUFBQyxTQUFBLFFBQUFDLE9BQUEsRUFBQVYsQ0FBQSxpQkFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxTQUFBUSxDQUFBLE1BQUFGLENBQUEsR0FBQUwsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsUUFB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QUFDLFFBQUEsRUFBQztVQUVsRixDQUFPLENBQUMsZUFDUixJQUFBeEQsV0FBQSxDQUFBc0QsR0FBQTtZQUNFTSxFQUFFLEVBQUMsY0FBYztZQUNqQkMsSUFBSSxFQUFDLGNBQWM7WUFDbkJDLElBQUksRUFBQyxVQUFVO1lBQ2ZDLFFBQVE7WUFDUlIsU0FBUyxFQUFDLGtNQUFrTTtZQUM1TVMsV0FBVyxFQUFDLG9CQUFvQjtZQUNoQ0MsS0FBSyxFQUFFekMsV0FBWTtZQUNuQjBDLFFBQVEsRUFBRWpFLENBQUMsSUFBSXdCLGNBQWMsQ0FBQ3hCLENBQUMsQ0FBQ2tFLE1BQU0sQ0FBQ0YsS0FBSyxDQUFFO1lBQzlDRyxRQUFRLEVBQUV2QztVQUFRLENBQ25CLENBQUM7UUFBQSxDQUNDLENBQUMsZUFDTixJQUFBN0IsV0FBQSxDQUFBeUQsSUFBQTtVQUFBRCxRQUFBLGdCQUNFLElBQUF4RCxXQUFBLENBQUFzRCxHQUFBO1lBQU9LLE9BQU8sRUFBQyxrQkFBa0I7WUFBQ0osU0FBUyxFQUFDLHlDQUF5QztZQUFBQyxRQUFBLEVBQUM7VUFFdEYsQ0FBTyxDQUFDLGVBQ1IsSUFBQXhELFdBQUEsQ0FBQXNELEdBQUE7WUFDRU0sRUFBRSxFQUFDLGtCQUFrQjtZQUNyQkMsSUFBSSxFQUFDLGtCQUFrQjtZQUN2QkMsSUFBSSxFQUFDLFVBQVU7WUFDZkMsUUFBUTtZQUNSUixTQUFTLEVBQUMsa01BQWtNO1lBQzVNUyxXQUFXLEVBQUMsc0JBQXNCO1lBQ2xDQyxLQUFLLEVBQUV0QyxlQUFnQjtZQUN2QnVDLFFBQVEsRUFBRWpFLENBQUMsSUFBSTJCLGtCQUFrQixDQUFDM0IsQ0FBQyxDQUFDa0UsTUFBTSxDQUFDRixLQUFLLENBQUU7WUFDbERHLFFBQVEsRUFBRXZDO1VBQVEsQ0FDbkIsQ0FBQztRQUFBLENBQ0MsQ0FBQyxlQUNOLElBQUE3QixXQUFBLENBQUFzRCxHQUFBO1VBQUFFLFFBQUEsZUFDRSxJQUFBeEQsV0FBQSxDQUFBc0QsR0FBQTtZQUNFUSxJQUFJLEVBQUMsUUFBUTtZQUNiTSxRQUFRLEVBQUV2QyxPQUFRO1lBQ2xCMEIsU0FBUyxFQUFDLHlQQUF5UDtZQUFBQyxRQUFBLEVBRWxRM0IsT0FBTyxHQUFHLGNBQWMsR0FBRztVQUFnQixDQUN0QztRQUFDLENBQ04sQ0FBQztNQUFBLENBQ0YsQ0FBQztJQUFBLENBQ0o7RUFBQyxDQUNILENBQUM7QUFFVixDQUFDO0FBQUMsSUFBQXdDLFFBQUEsR0FBQUMsT0FBQSxDQUFBM0QsT0FBQSxHQUVhUyxpQkFBaUIiLCJpZ25vcmVMaXN0IjpbXX0=