687f8a25a58e294b2c5efcde7577d780
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enhancedDataManager = void 0;
var _axios = _interopRequireDefault(require("axios"));
var _apiConfig = require("../config/apiConfig");
var _EnhancedDataValidator = require("./EnhancedDataValidator");
var _enhancedLogger = require("../utils/enhancedLogger");
var _websocketBuilder = require("../utils/websocketBuilder");
var _objectGuards = require("../utils/objectGuards");
/**
 * Enhanced Frontend Data Management Service
 * Optimized data fetching, caching, and real-time updates for the frontend
 */

class EnhancedDataManager {
  // 10KB

  constructor() {
    this.cache = new Map();
    this.subscriptions = new Map();
    this.pendingRequests = new Map();
    this.batchQueue = [];
    this.metrics = {
      totalRequests: 0,
      cacheHits: 0,
      cacheMisses: 0,
      errors: 0,
      avgResponseTime: 0,
      lastUpdate: Date.now()
    };
    this.websocket = null;
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 5;
    this.batchTimeout = 100;
    // 100ms batch window
    this.maxCacheSize = 1000;
    this.compressionThreshold = 10240;
    this.startBatchProcessor();
    this.startCacheCleanup();
    this.initializeWebSocket();
  }

  /**
   * Get the backend base URL for API requests
   */
  getBackendUrl() {
    // Use unified API configuration
    return _apiConfig.API_BASE_URL;
  }

  /**
   * Enhanced data fetching with intelligent caching and batching
   */
  async fetchData(endpoint, params, options = {}) {
    const {
      cache = true,
      ttl = 300000,
      // 5 minutes default
      priority = 'normal',
      compression = false,
      retries = 3
    } = options;
    const cacheKey = this.generateCacheKey(endpoint, params);
    const startTime = Date.now();
    _enhancedLogger.enhancedLogger.debug('DataManager', 'fetchData', `Starting request to ${endpoint}`, {
      endpoint,
      params,
      cacheKey,
      priority,
      cache
    });
    try {
      // Check cache first
      if (cache) {
        const cached = this.getCachedData(cacheKey);
        if (cached) {
          this.metrics.cacheHits++;
          const duration = Date.now() - startTime;
          this.updateMetrics(duration);
          _enhancedLogger.enhancedLogger.logCacheOperation('hit', cacheKey, {
            endpoint,
            duration
          });
          _enhancedLogger.enhancedLogger.logApiRequest(endpoint, 'GET', params, duration, 'cached', {
            priority
          });
          return cached;
        }
        _enhancedLogger.enhancedLogger.logCacheOperation('miss', cacheKey, {
          endpoint
        });
      }

      // Check if request is already pending (deduplication)
      if (this.pendingRequests.has(cacheKey)) {
        _enhancedLogger.enhancedLogger.debug('DataManager', 'deduplication', `Deduplicating request for ${cacheKey}`, {
          endpoint,
          cacheKey
        });
        return await this.pendingRequests.get(cacheKey);
      }

      // Create the request promise
      const requestPromise = this.executeRequest(endpoint, params, {
        priority,
        compression,
        retries
      });

      // Store pending request
      this.pendingRequests.set(cacheKey, requestPromise);
      try {
        const data = await requestPromise;
        const duration = Date.now() - startTime;

        // Cache successful response
        if (cache && data) {
          this.setCachedData(cacheKey, data, ttl);
          _enhancedLogger.enhancedLogger.logCacheOperation('set', cacheKey, {
            endpoint,
            ttl,
            duration
          });
        }
        this.metrics.cacheMisses++;
        this.updateMetrics(duration);
        _enhancedLogger.enhancedLogger.logApiRequest(endpoint, 'GET', params, duration, 'success', {
          priority,
          cacheKey,
          dataSize: JSON.stringify(data).length
        });
        return data;
      } finally {
        // Clean up pending request
        this.pendingRequests.delete(cacheKey);
      }
    } catch (error) {
      const duration = Date.now() - startTime;
      this.metrics.errors++;
      this.updateMetrics(duration);
      _enhancedLogger.enhancedLogger.logApiRequest(endpoint, 'GET', params, duration, 'error', {
        priority,
        cacheKey,
        errorType: error instanceof Error ? error.name : 'UnknownError'
      });

      // Try to return stale cache data as fallback
      if (cache) {
        const staleData = this.getStaleData(cacheKey);
        if (staleData) {
          _enhancedLogger.enhancedLogger.warn('DataManager', 'staleDataFallback', `Returning stale data for ${cacheKey}`, {
            endpoint,
            cacheKey,
            error: error instanceof Error ? error.message : String(error)
          }, error instanceof Error ? error : new Error(String(error)));
          return staleData;
        }
      }
      _enhancedLogger.enhancedLogger.error('DataManager', 'fetchData', `Request failed for ${endpoint}`, {
        endpoint,
        params,
        cacheKey,
        duration,
        priority,
        retries
      }, error instanceof Error ? error : new Error(String(error)));
      throw error;
    }
  }

  /**
   * Batch multiple requests for optimal performance
   */
  async fetchBatch(requests) {
    // Special handling for batch predictions endpoint
    if (requests.length > 0 && requests[0].endpoint.includes('batch-predictions')) {
      return this.fetchBatchPredictions(requests);
    }
    const results = {};
    const pendingRequests = [];

    // Group requests by priority
    const groupedRequests = {
      high: requests.filter(r => r.priority === 'high'),
      normal: requests.filter(r => r.priority === 'normal' || !r.priority),
      low: requests.filter(r => r.priority === 'low')
    };

    // Process high priority requests first
    for (const group of [groupedRequests.high, groupedRequests.normal, groupedRequests.low]) {
      for (const request of group) {
        const promise = this.fetchData(request.endpoint, request.params, {
          priority: request.priority
        }).then(data => {
          results[request.id] = data;
        }).catch(error => {
          _enhancedLogger.enhancedLogger.error('DataManager', 'batchRequest', `Batch request failed for ${request.id}`, undefined, error);
          results[request.id] = null;
        });
        pendingRequests.push(promise);

        // Add small delay between requests to avoid overwhelming the server
        if (group.length > 5) {
          await new Promise(resolve => setTimeout(resolve, 10));
        }
      }
    }
    await Promise.all(pendingRequests);
    return results;
  }

  /**
   * Special method for batch predictions - makes a single POST request to backend
   */
  async fetchBatchPredictions(requests) {
    const results = {};
    try {
      // Handle the case where we have a single request with an array of props
      let props;
      if (requests.length === 1 && Array.isArray(requests[0].params)) {
        // Single batch request containing array of props
        props = requests[0].params;
      } else {
        // Multiple individual requests - convert to props array
        props = requests.map(request => request.params);
      }

      // Make single POST request to batch predictions endpoint
      const url = `${this.getBackendUrl()}/api/unified/batch-predictions`;
      _enhancedLogger.enhancedLogger.info('DataManager', 'batchPredictions', `Making batch predictions request to ${url} with ${props.length} props`);
      const response = await _axios.default.post(url, props, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 8000 // 8 second timeout for batch operations - faster fallback
      });

      // Handle backend response format
      if (response.data && Array.isArray(response.data.predictions)) {
        // Backend returns { predictions: [...], errors: [...] }
        if (requests.length === 1 && Array.isArray(requests[0].params)) {
          // Single batch request - store entire response under the single request ID
          results[requests[0].id] = response.data;
        } else {
          // Multiple individual requests
          response.data.predictions.forEach((result, index) => {
            if (index < requests.length) {
              results[requests[index].id] = result;
            }
          });
        }
      } else if (response.data && Array.isArray(response.data.results)) {
        // Backend returns { results: [...] }
        if (requests.length === 1 && Array.isArray(requests[0].params)) {
          results[requests[0].id] = response.data;
        } else {
          response.data.results.forEach((result, index) => {
            if (index < requests.length) {
              results[requests[index].id] = result;
            }
          });
        }
      } else if (Array.isArray(response.data)) {
        // Backend returns array directly
        if (requests.length === 1 && Array.isArray(requests[0].params)) {
          results[requests[0].id] = {
            predictions: response.data
          };
        } else {
          response.data.forEach((result, index) => {
            if (index < requests.length) {
              results[requests[index].id] = result;
            }
          });
        }
      } else {
        _enhancedLogger.enhancedLogger.warn('DataManager', 'batchPredictions', 'Unexpected batch predictions response format', {
          data: response.data
        });
      }
      _enhancedLogger.enhancedLogger.info('DataManager', 'batchPredictions', `Batch predictions completed: ${(0, _objectGuards.safeObjectKeys)(results).length} results`);
    } catch (error) {
      _enhancedLogger.enhancedLogger.error('DataManager', 'batchPredictions', 'Batch predictions request failed', undefined, error);

      // Mark all requests as failed
      requests.forEach(request => {
        results[request.id] = null;
      });
    }
    return results;
  }

  /**
   * Subscribe to real-time data updates
   */
  subscribe(key, callback, options = {}) {
    if (!this.subscriptions.has(key)) {
      this.subscriptions.set(key, []);
    }
    const subscription = {
      key,
      callback,
      options: {
        realtime: true,
        prefetch: false,
        priority: 'normal',
        ...options
      }
    };
    this.subscriptions.get(key).push(subscription);

    // Enable WebSocket if real-time is requested
    if (options.realtime && !this.websocket) {
      this.initializeWebSocket();
    }

    // Prefetch data if requested
    if (options.prefetch) {
      this.prefetchData(key);
    }

    // Return unsubscribe function
    return () => {
      const subs = this.subscriptions.get(key);
      if (subs) {
        const index = subs.indexOf(subscription);
        if (index > -1) {
          subs.splice(index, 1);
        }
        if (subs.length === 0) {
          this.subscriptions.delete(key);
        }
      }
    };
  }

  /**
   * Prefetch data based on predicted user behavior
   */
  async prefetchData(pattern) {
    try {
      // Analyze access patterns and prefetch likely needed data
      const predictions = this.getPrefetchPredictions(pattern);
      for (const prediction of predictions) {
        this.fetchData(prediction.endpoint, prediction.params, {
          priority: 'low',
          cache: true,
          ttl: 600000 // 10 minutes for prefetched data
        }).catch(error => {
          _enhancedLogger.enhancedLogger.debug('DataManager', 'prefetch', `Prefetch failed for ${prediction.endpoint}`, undefined, error);
        });
      }
    } catch (error) {
      _enhancedLogger.enhancedLogger.error('DataManager', 'prefetch', 'Prefetch error', undefined, error);
    }
  }

  /**
   * Optimized data fetching for sports props with smart consolidation
   */
  async fetchSportsProps(sport, propType = 'player', options = {}) {
    const {
      useCache = true,
      realtime = false,
      consolidate = true,
      statTypes,
      limit = 50,
      offset = 0
    } = options;
    try {
      // Fetch raw props data with absolute URLs
      const baseUrl = this.getBackendUrl();
      const endpoint = sport === 'MLB' ? `${baseUrl}/mlb/odds-comparison/` : `${baseUrl}/api/props/${sport}`;
      const params = {
        market_type: propType === 'player' ? 'playerprops' : 'regular',
        ...(statTypes && statTypes.length > 0 && {
          stat_types: statTypes.join(',')
        }),
        limit,
        offset
      };

      // Debug cache key generation
      const cacheKey = this.generateCacheKey(endpoint, params);
      _enhancedLogger.enhancedLogger.debug('DataManager', 'fetchSportsProps', `fetchSportsProps cache key: ${cacheKey}`, {
        params,
        statTypes
      });
      const rawData = await this.fetchData(endpoint, params, {
        cache: useCache,
        ttl: 180000,
        // 3 minutes for props data
        priority: 'high'
      });
      let props = [];
      if (Array.isArray(rawData)) {
        props = rawData;
      } else if (Array.isArray(rawData?.odds)) {
        props = rawData.odds;
      } else if (Array.isArray(rawData?.data)) {
        props = rawData.data;
      } else {
        _enhancedLogger.enhancedLogger.warn('DataManager', 'fetchSportsProps', 'Unexpected rawData format', {
          rawData
        });
      }

      // Consolidate props if requested
      if (consolidate && props.length > 0) {
        props = this.consolidateProps(props);
      }

      // Map to FeaturedProp interface, passing sport context
      const featuredProps = this.mapToFeaturedProps(props, sport);

      // Apply position-based filtering for MLB to ensure logical player-stat combinations
      const filteredProps = sport === 'MLB' ? this.filterByPlayerPosition(featuredProps) : featuredProps;
      _enhancedLogger.enhancedLogger.info('DataManager', 'positionFilter', `Position filtering: ${featuredProps.length} -> ${filteredProps.length} props`);

      // Subscribe to real-time updates if requested
      if (realtime) {
        this.subscribe(`sports:${sport}:${propType}`, updatedData => {
          // Handle real-time prop updates
          this.handlePropsUpdate(sport, propType, updatedData);
        }, {
          realtime: true
        });
      }
      return filteredProps;
    } catch (error) {
      _enhancedLogger.enhancedLogger.error('DataManager', 'fetchSportsProps', `Failed to fetch ${sport} props`, undefined, error);

      // Check if this is a connectivity issue (including axios errors)
      const isConnectivityError = error instanceof Error && (error.message.includes('Failed to fetch') || error.message.includes('Network Error') || error.message.includes('timeout') || error.message.includes('signal timed out') || error.name === 'NetworkError' || error.code === 'ERR_NETWORK');
      if (isConnectivityError) {
        _enhancedLogger.enhancedLogger.info('DataManager', 'fetchSportsProps', `Backend unavailable for ${sport} - using mock data`);

        // Return mock props when backend is unavailable
        const mockProps = [{
          id: 'mock-aaron-judge-hr',
          player: 'Aaron Judge',
          matchup: 'Yankees vs Red Sox',
          stat: 'Home Runs',
          line: 1.5,
          overOdds: 120,
          underOdds: -110,
          confidence: 85,
          sport: sport,
          gameTime: new Date().toISOString(),
          pickType: 'over'
        }, {
          id: 'mock-mike-trout-hits',
          player: 'Mike Trout',
          matchup: 'Angels vs Astros',
          stat: 'Hits',
          line: 1.5,
          overOdds: -105,
          underOdds: -115,
          confidence: 78,
          sport: sport,
          gameTime: new Date().toISOString(),
          pickType: 'over'
        }, {
          id: 'mock-mookie-betts-rbis',
          player: 'Mookie Betts',
          matchup: 'Dodgers vs Giants',
          stat: 'RBIs',
          line: 0.5,
          overOdds: 110,
          underOdds: -130,
          confidence: 82,
          sport: sport,
          gameTime: new Date().toISOString(),
          pickType: 'over'
        }];

        // Ensure mockProps match FeaturedProp interface
        return mockProps.map(p => ({
          ...p,
          dataSource: 'mock',
          validatedAt: new Date().toISOString(),
          qualityScore: 50,
          _originalData: p
        }));
      }
      throw error;
    }
  }

  /**
   * Enhanced prop analysis fetching with intelligent caching
   */
  async fetchPropAnalysis(propId, player, stat, options = {}) {
    const {
      useCache = true,
      priority = 'normal'
    } = options;
    const endpoint = '/api/prop-analysis/enhanced';
    const params = {
      propId,
      player,
      stat
    };
    return await this.fetchData(endpoint, params, {
      cache: useCache,
      ttl: 600000,
      // 10 minutes for analysis
      priority,
      compression: true // Analysis data can be large
    });
  }

  /**
   * Get comprehensive performance metrics
   */
  getMetrics() {
    const totalRequests = this.metrics.cacheHits + this.metrics.cacheMisses;
    const hitRate = totalRequests > 0 ? this.metrics.cacheHits / totalRequests * 100 : 0;
    return {
      ...this.metrics,
      cacheSize: this.cache.size,
      hitRate,
      subscriptions: Array.from(this.subscriptions.values()).reduce((sum, subs) => sum + subs.length, 0),
      pendingRequests: this.pendingRequests.size,
      enhancedMetrics: _enhancedLogger.enhancedLogger.getRequestMetrics()
    };
  }

  /**
   * Invalidate cache based on events
   */
  invalidateCache(event) {
    const keysToDelete = [];
    _enhancedLogger.enhancedLogger.info('DataManager', 'cacheInvalidation', `Processing cache invalidation event: ${event.type}`, {
      eventType: event.type,
      sport: event.sport,
      gameId: event.gameId,
      propId: event.propId,
      reason: event.reason
    });
    switch (event.type) {
      case 'sport_update':
        if (event.sport) {
          for (const key of Array.from(this.cache.keys())) {
            if (key.includes(event.sport.toLowerCase())) {
              keysToDelete.push(key);
            }
          }
        }
        break;
      case 'prop_update':
        if (event.propId) {
          for (const key of Array.from(this.cache.keys())) {
            if (key.includes(event.propId)) {
              keysToDelete.push(key);
            }
          }
        }
        break;
      case 'game_update':
        if (event.gameId) {
          for (const key of Array.from(this.cache.keys())) {
            if (key.includes(event.gameId)) {
              keysToDelete.push(key);
            }
          }
        }
        break;
      case 'manual':
        keysToDelete.push(...event.affectedKeys);
        break;
      case 'time_based':
        // Already handled by cache cleanup
        break;
    }

    // Remove invalidated entries
    keysToDelete.forEach(key => {
      this.cache.delete(key);
      _enhancedLogger.enhancedLogger.logCacheOperation('invalidate', key, {
        eventType: event.type,
        reason: event.reason
      });
    });
    _enhancedLogger.enhancedLogger.info('DataManager', 'cacheInvalidation', `Invalidated ${keysToDelete.length} cache entries`, {
      eventType: event.type,
      invalidatedKeys: keysToDelete.length,
      remainingCacheSize: this.cache.size
    });
  }

  /**
   * Warm cache with predicted data needs
   */
  async warmCache(predictions) {
    _enhancedLogger.enhancedLogger.info('DataManager', 'cacheWarming', `Starting cache warming for ${predictions.length} predictions`, {
      predictionsCount: predictions.length
    });
    const warmingPromises = predictions.map(async (prediction, index) => {
      try {
        await new Promise(resolve => setTimeout(resolve, index * 50)); // Stagger requests
        await this.fetchData(prediction.endpoint, prediction.params, {
          priority: 'low',
          cache: true,
          ttl: 600000 // 10 minutes for warmed data
        });
        _enhancedLogger.enhancedLogger.debug('DataManager', 'cacheWarming', `Successfully warmed cache for ${prediction.endpoint}`, {
          endpoint: prediction.endpoint,
          sport: prediction.sport
        });
      } catch (error) {
        _enhancedLogger.enhancedLogger.warn('DataManager', 'cacheWarming', `Failed to warm cache for ${prediction.endpoint}`, {
          endpoint: prediction.endpoint,
          sport: prediction.sport
        }, error instanceof Error ? error : new Error(String(error)));
      }
    });
    await Promise.allSettled(warmingPromises);
    _enhancedLogger.enhancedLogger.info('DataManager', 'cacheWarming', 'Cache warming completed', {
      predictionsCount: predictions.length,
      cacheSize: this.cache.size
    });
  }

  /**
   * Clear cache and reset state
   */
  clearCache() {
    this.cache.clear();
    this.pendingRequests.clear();
    _enhancedLogger.enhancedLogger.info('DataManager', 'cache', 'Cache cleared');
  }

  /**
   * Graceful shutdown
   */
  destroy() {
    if (this.websocket) {
      this.websocket.close();
      this.websocket = null;
    }
    this.clearCache();
    this.subscriptions.clear();
  }

  // Private methods

  async executeRequest(endpoint, params, options = {}) {
    const {
      retries = 0,
      compression = false
    } = options; // Disable retries for faster fallback

    let lastError;
    for (let attempt = 0; attempt <= retries; attempt++) {
      try {
        const config = {
          timeout: this.getTimeoutForPriority(options.priority),
          headers: {}
        };
        if (compression) {
          config.headers['Accept-Encoding'] = 'gzip, deflate, br';
        }
        let response;
        if (params && (0, _objectGuards.safeObjectKeys)(params).length > 0) {
          response = await _axios.default.get(endpoint, {
            params,
            ...config
          });
        } else {
          response = await _axios.default.get(endpoint, config);
        }
        this.metrics.totalRequests++;
        return response.data;
      } catch (error) {
        lastError = error;

        // Don't retry on client errors (4xx)
        if (error.response?.status >= 400 && error.response?.status < 500) {
          break;
        }

        // Exponential backoff for retries
        if (attempt < retries) {
          const delay = Math.min(1000 * Math.pow(2, attempt), 5000);
          await new Promise(resolve => setTimeout(resolve, delay));
          console.log(`[DataManager] Retrying request to ${endpoint} (attempt ${attempt + 2}/${retries + 1})`);
        }
      }
    }

    // Check if this is a connectivity issue and normalize the error message
    if (lastError) {
      const isConnectivityError = lastError.message.includes('Network Error') || lastError.message.includes('Failed to fetch') || lastError.message.includes('timeout') || lastError.code === 'ERR_NETWORK' || !lastError.response; // No response means network issue

      if (isConnectivityError) {
        // Create a normalized error that fallback logic can detect
        const normalizedError = new Error('Failed to fetch');
        normalizedError.name = 'NetworkError';
        throw normalizedError;
      }
    }
    throw lastError;
  }
  generateCacheKey(endpoint, params) {
    const paramsStr = params ? JSON.stringify(params, (0, _objectGuards.safeObjectKeys)(params).sort()) : '';
    return `${endpoint}${paramsStr}`;
  }
  getCachedData(key) {
    const entry = this.cache.get(key);
    if (!entry) return null;
    const now = Date.now();
    if (now > entry.timestamp + entry.ttl) {
      this.cache.delete(key);
      return null;
    }

    // Update access statistics
    entry.accessCount++;
    entry.lastAccess = now;
    return entry.data;
  }
  getStaleData(key) {
    const entry = this.cache.get(key);
    return entry ? entry.data : null;
  }
  setCachedData(key, data, ttl) {
    // Implement LRU eviction if cache is full
    if (this.cache.size >= this.maxCacheSize) {
      this.evictLRU();
    }
    const entry = {
      data,
      timestamp: Date.now(),
      ttl,
      key,
      accessCount: 1,
      lastAccess: Date.now()
    };
    this.cache.set(key, entry);
  }
  evictLRU() {
    let oldestEntry = null;
    let oldestTime = Date.now();
    for (const [key, entry] of Array.from(this.cache.entries())) {
      if (entry.lastAccess < oldestTime) {
        oldestTime = entry.lastAccess;
        oldestEntry = [key, entry];
      }
    }
    if (oldestEntry) {
      this.cache.delete(oldestEntry[0]);
      _enhancedLogger.enhancedLogger.debug('DataManager', 'evictLRU', `Evicted LRU cache entry: ${oldestEntry[0]}`);
    }
  }
  updateMetrics(responseTime) {
    this.metrics.avgResponseTime = this.metrics.avgResponseTime * 0.9 + responseTime * 0.1;
    this.metrics.lastUpdate = Date.now();
  }
  getTimeoutForPriority(priority) {
    switch (priority) {
      case 'high':
        return 5000;
      // 5 seconds for high priority - fail fast to use mock data
      case 'low':
        return 8000;
      // 8 seconds for low priority
      default:
        return 6000;
      // 6 seconds for normal priority
    }
  }
  consolidateProps(props) {
    const consolidatedMap = new Map();
    for (const prop of props) {
      const key = `${prop.event_id || prop.id}-${prop.stat_type}-${prop.line || prop.line_score || 0}`;
      if (prop.stat_type?.toLowerCase() === 'totals') {
        if (consolidatedMap.has(key)) {
          const existing = consolidatedMap.get(key);
          if (prop.odds_type?.toLowerCase().includes('over')) {
            existing.overOdds = prop.value || prop.odds;
          } else if (prop.odds_type?.toLowerCase().includes('under')) {
            existing.underOdds = prop.value || prop.odds;
          }
        } else {
          const consolidated = {
            ...prop
          };
          consolidated.player = prop.event_name || prop.matchup || 'Total (Game)';
          if (prop.odds_type?.toLowerCase().includes('over')) {
            consolidated.overOdds = prop.value || prop.odds;
            consolidated.underOdds = null;
          } else if (prop.odds_type?.toLowerCase().includes('under')) {
            consolidated.overOdds = null;
            consolidated.underOdds = prop.value || prop.odds;
          }
          consolidatedMap.set(key, consolidated);
        }
      } else {
        consolidatedMap.set(key, prop);
      }
    }
    return Array.from(consolidatedMap.values());
  }
  mapToFeaturedProps(props, sport) {
    const startTime = Date.now();
    const validatedProps = [];
    const errors = [];
    _enhancedLogger.enhancedLogger.debug('DataManager', 'mapToFeaturedProps', `Starting validation of ${props.length} props`, {
      sport,
      propsCount: props.length
    });
    for (let i = 0; i < props.length; i++) {
      const prop = props[i];
      try {
        // Use the enhanced validator
        const validationResult = _EnhancedDataValidator.dataValidator.validateSportsProp(prop, sport, {
          source: 'mapToFeaturedProps',
          timestamp: Date.now()
        });
        if (validationResult.isValid && validationResult.data) {
          validatedProps.push(validationResult.data);
        } else {
          // Log validation failure but continue processing
          const errorMsg = validationResult.errors.map(e => e.message).join(', ');
          errors.push(`Prop ${i}: ${errorMsg}`);
          _enhancedLogger.enhancedLogger.warn('DataManager', 'propValidation', `Prop validation failed: ${errorMsg}`, {
            prop: prop,
            sport,
            errors: validationResult.errors,
            warnings: validationResult.warnings
          });
        }
      } catch (error) {
        // Fallback to legacy mapping for compatibility
        const legacyProp = this.legacyMapProp(prop, sport);
        if (legacyProp) {
          validatedProps.push(legacyProp);
          _enhancedLogger.enhancedLogger.warn('DataManager', 'fallbackMapping', `Used legacy mapping for prop due to validation error`, {
            prop: prop,
            sport,
            error: error instanceof Error ? error.message : String(error)
          });
        }
      }
    }
    const duration = Date.now() - startTime;
    const successRate = props.length > 0 ? validatedProps.length / props.length * 100 : 0;
    _enhancedLogger.enhancedLogger.logDataValidation('mapToFeaturedProps', sport || 'Unknown', props.length, validatedProps.length, errors.length, validatedProps.length > 0 ? validatedProps.reduce((sum, p) => sum + p.qualityScore, 0) / validatedProps.length : 0, duration, {
      successRate,
      errorsCount: errors.length
    });
    return validatedProps;
  }

  /**
   * Legacy prop mapping for fallback compatibility
   */
  legacyMapProp(prop, sport) {
    try {
      const mappedProp = {
        id: prop.id || prop.event_id || `${prop.player_name}-${prop.stat_type}`,
        player: prop.player || prop.player_name || prop.event_name || 'Unknown',
        matchup: prop.matchup || prop.event_name || 'Unknown vs Unknown',
        stat: prop.stat || prop.stat_type || 'Unknown',
        line: parseFloat(prop.line || prop.line_score || 0),
        overOdds: parseFloat(prop.overOdds || prop.over_odds || prop.value || 0),
        underOdds: parseFloat(prop.underOdds || prop.under_odds || prop.value || 0),
        confidence: parseFloat(prop.confidence || 0),
        sport: prop.sport || sport || 'Unknown',
        gameTime: prop.gameTime || prop.start_time || new Date().toISOString(),
        pickType: prop.pickType || 'prop',
        espnPlayerId: prop.espnPlayerId || prop.player_id || prop.playerId || undefined,
        dataSource: 'legacy_mapping',
        validatedAt: new Date().toISOString(),
        qualityScore: 50,
        // Default quality score for legacy mapping
        _originalData: prop
      };

      // Debug logging for stat mapping
      if (prop.stat_type && prop.stat_type !== mappedProp.stat) {
        _enhancedLogger.enhancedLogger.debug('DataManager', 'statMapping', `[DataManager] Stat mapping: ${prop.stat_type} -> ${mappedProp.stat}`, {
          original: prop,
          mapped: mappedProp
        });
      }
      return mappedProp;
    } catch (error) {
      _enhancedLogger.enhancedLogger.error('DataManager', 'legacyMapping', 'Failed to map prop using legacy method', {
        prop,
        sport
      }, error instanceof Error ? error : new Error(String(error)));
      return null;
    }
  }
  getWebSocketUrl() {
    // Use canonical builder - single source of truth
    return (0, _websocketBuilder.buildWebSocketUrl)({
      role: 'frontend',
      version: 1
    });
  }
  initializeWebSocket() {
    try {
      const wsUrl = this.getWebSocketUrl();
      this.websocket = new WebSocket(wsUrl);
      _enhancedLogger.enhancedLogger.info('DataManager', 'WebSocket', `Connecting to ${wsUrl}`);
      this.websocket.onopen = () => {
        _enhancedLogger.enhancedLogger.info('DataManager', 'WebSocket', 'WebSocket connected');
        this.reconnectAttempts = 0;
      };
      this.websocket.onmessage = event => {
        try {
          const message = JSON.parse(event.data);
          this.handleWebSocketMessage(message);
        } catch (error) {
          const errObj = error instanceof Error ? error : new Error(String(error));
          _enhancedLogger.enhancedLogger.warn('DataManager', 'WebSocket', 'Message parsing error', {}, errObj);
        }
      };
      this.websocket.onclose = event => {
        _enhancedLogger.enhancedLogger.warn('DataManager', 'WebSocket', `Disconnected (code ${event.code})`);
        this.websocket = null;
        if (event.code !== 1000 && this.reconnectAttempts < this.maxReconnectAttempts) {
          const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);
          _enhancedLogger.enhancedLogger.info('DataManager', 'WebSocket', `Attempting reconnection in ${delay}ms`);
          setTimeout(() => {
            this.reconnectAttempts++;
            this.initializeWebSocket();
          }, delay);
        } else {
          _enhancedLogger.enhancedLogger.info('DataManager', 'WebSocket', 'Reconnection stopped, continuing in local mode');
        }
      };
      this.websocket.onerror = error => {
        const errObj = error instanceof Error ? error : new Error(error?.toString?.() || 'WebSocket error');
        _enhancedLogger.enhancedLogger.warn('DataManager', 'WebSocket', 'Connection issue', {}, errObj);
      };
    } catch (error) {
      const errObj = error instanceof Error ? error : new Error(String(error));
      _enhancedLogger.enhancedLogger.warn('DataManager', 'WebSocket', 'Initialization failed, continuing in local mode', {}, errObj);
    }
  }
  handleWebSocketMessage(message) {
    if (message.type === 'data_update') {
      // Invalidate relevant cache entries
      const pattern = `*${message.source}*`;
      this.invalidateCachePattern(pattern);

      // Notify subscribers
      for (const [key, subscriptions] of Array.from(this.subscriptions.entries())) {
        if (key.includes(message.source)) {
          subscriptions.forEach(sub => {
            if (sub.options.realtime) {
              sub.callback(message.data);
            }
          });
        }
      }
    }
  }
  invalidateCachePattern(pattern) {
    const keysToDelete = [];
    for (const key of Array.from(this.cache.keys())) {
      if (this.matchesPattern(key, pattern)) {
        keysToDelete.push(key);
      }
    }
    keysToDelete.forEach(key => this.cache.delete(key));
    if (keysToDelete.length > 0) {
      _enhancedLogger.enhancedLogger.info('DataManager', 'invalidatePattern', `Invalidated ${keysToDelete.length} cache entries matching pattern: ${pattern}`);
    }
  }
  matchesPattern(str, pattern) {
    const regex = new RegExp(pattern.replace(/\*/g, '.*'));
    return regex.test(str);
  }
  getPrefetchPredictions(pattern) {
    // Simple prediction logic - in reality this would be more sophisticated
    const predictions = [];
    if (pattern.includes('MLB')) {
      predictions.push({
        endpoint: '/mlb/odds-comparison/',
        params: {
          market_type: 'playerprops'
        }
      }, {
        endpoint: '/api/prop-analysis/trends',
        params: {
          sport: 'MLB'
        }
      });
    }
    return predictions;
  }
  handlePropsUpdate(sport, propType, data) {
    // Handle real-time props updates
    _enhancedLogger.enhancedLogger.info('DataManager', 'realtimeUpdate', `Real-time update for ${sport} ${propType}`, {
      data
    });

    // Invalidate related cache entries
    this.invalidateCachePattern(`*${sport.toLowerCase()}*`);
  }
  startBatchProcessor() {
    setInterval(() => {
      if (this.batchQueue.length > 0) {
        const batch = this.batchQueue.splice(0);
        this.processBatch(batch);
      }
    }, this.batchTimeout);
  }
  async processBatch(batch) {
    if (batch.length === 0) return;
    try {
      const _results = await this.fetchBatch(batch);
      _enhancedLogger.enhancedLogger.info('DataManager', 'processBatch', `Processed batch of ${batch.length} requests`);
    } catch (error) {
      _enhancedLogger.enhancedLogger.error('DataManager', 'processBatch', 'Batch processing error', undefined, error);
    }
  }
  startCacheCleanup() {
    // Clean up expired cache entries every 5 minutes
    setInterval(() => {
      const now = Date.now();
      const keysToDelete = [];
      for (const [key, entry] of Array.from(this.cache.entries())) {
        if (now > entry.timestamp + entry.ttl) {
          keysToDelete.push(key);
        }
      }
      keysToDelete.forEach(key => this.cache.delete(key));
      if (keysToDelete.length > 0) {
        _enhancedLogger.enhancedLogger.info('DataManager', 'cacheCleanup', `Cleaned up ${keysToDelete.length} expired cache entries`);
      }
    }, 300000); // 5 minutes
  }

  /**
   * Filter props based on player position and stat type compatibility
   * Ensures pitchers only see pitcher stats and position players only see batter stats
   */
  filterByPlayerPosition(props) {
    _enhancedLogger.enhancedLogger.debug('DataManager', 'positionFilterStart', `Starting position-based filtering for ${props.length} props`);

    // Define pitcher stat types
    const pitcherStatTypes = ['strikeouts', 'walks_allowed', 'hits_allowed', 'earned_runs', 'innings_pitched', 'wins', 'saves', 'whip', 'era', 'pitches_thrown', 'first_inning_runs_allowed', 'pitching_outs', 'pitcher_strikeouts', 'pitcher_walks', 'pitcher_hits_allowed'];

    // Define batter stat types
    const batterStatTypes = ['hits', 'home_runs', 'runs_batted_in', 'runs_scored', 'stolen_bases', 'total_bases', 'doubles', 'triples', 'walks', 'strikeouts_as_batter', 'batting_average', 'on_base_percentage', 'slugging_percentage', 'singles', 'extra_base_hits', 'bases_on_balls'];
    const filteredProps = props.filter(prop => {
      try {
        // Skip filtering for team totals or game props
        if (!prop.player || prop.player.toLowerCase().includes('total') || prop.player.toLowerCase().includes('game') || prop.stat?.toLowerCase() === 'totals') {
          _enhancedLogger.enhancedLogger.debug('DataManager', 'positionFilter', `Keeping team/game prop: ${prop.player} - ${prop.stat}`);
          return true;
        }
        const statType = prop.stat?.toLowerCase() || '';

        // Try to get position from original data
        const originalData = prop._originalData;
        const position = originalData?.position || originalData?.pos || '';

        // Check if we have position data
        if (!position) {
          _enhancedLogger.enhancedLogger.debug('DataManager', 'positionFilter', `No position data for ${prop.player}, keeping prop`);
          return true;
        }

        // Position "1" indicates pitcher in baseball
        const isPitcher = position === '1' || position === 1 || position === 'P';
        const isPitcherStat = pitcherStatTypes.some(type => statType.includes(type.toLowerCase()));
        const isBatterStat = batterStatTypes.some(type => statType.includes(type.toLowerCase()));
        let shouldKeep = true;
        if (isPitcher && isBatterStat) {
          _enhancedLogger.enhancedLogger.info('DataManager', 'positionFilter', `Filtering out batter stat "${statType}" for pitcher ${prop.player}`);
          shouldKeep = false;
        } else if (!isPitcher && isPitcherStat) {
          _enhancedLogger.enhancedLogger.info('DataManager', 'positionFilter', `Filtering out pitcher stat "${statType}" for position player ${prop.player} (pos: ${position})`);
          shouldKeep = false;
        } else {
          _enhancedLogger.enhancedLogger.debug('DataManager', 'positionFilter', `Keeping ${isPitcher ? 'pitcher' : 'position player'} ${prop.player} with stat "${statType}"`);
        }
        return shouldKeep;
      } catch (error) {
        _enhancedLogger.enhancedLogger.error('DataManager', 'positionFilter', `Error filtering prop for ${prop.player}`, undefined, error);
        return true; // Keep prop if there's an error
      }
    });
    _enhancedLogger.enhancedLogger.info('DataManager', 'positionFilterSummary', `Position filtering: ${props.length} → ${filteredProps.length} props (filtered out ${props.length - filteredProps.length})`);
    return filteredProps;
  }
}

// Global instance
const enhancedDataManager = exports.enhancedDataManager = new EnhancedDataManager();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,