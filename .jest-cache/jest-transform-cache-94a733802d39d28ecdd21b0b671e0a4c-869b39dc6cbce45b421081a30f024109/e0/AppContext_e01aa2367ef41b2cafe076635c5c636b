a1d9822df4b0e5ea681ffe9574da6230
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._useAppContext = exports._AppProvider = void 0;
var _react = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Global application context and provider for managing loading state, notifications, and user session.
 *
 * @module contexts/AppContext
 */

/**
 * AppContextType
 * Global app context for loading, notifications, and user session.
 * @property {boolean} loading - Global loading state
 * @property {(loading: boolean) => void} setLoading - Setter for loading
 * @property {string | null} notification - Global notification message
 * @property {(msg: string | null) => void} setNotification - Setter for notification
 * @property {any} user - User session/profile object
 * @property {(user: any) => void} setUser - Setter for user
 */

/**
 * React context for global app state.
 */
const _AppContext = /*#__PURE__*/(0, _react.createContext)(undefined);

/**
 * AppProvider component.
 * Wrap your app with this provider to enable global app state.
 * @param {object} props - React children.
 * @returns {JSX.Element} The provider component.
 */
const _AppProvider = ({
  children
}) => {
  const [loading, setLoading] = (0, _react.useState)(false);
  const [notification, setNotification] = (0, _react.useState)(null);
  const [user, setUser] = (0, _react.useState)(null);
  return (
    /*#__PURE__*/
    // Removed unused @ts-expect-error: JSX is supported in this environment
    (0, _jsxRuntime.jsx)(_AppContext.Provider, {
      value: {
        loading,
        setLoading,
        notification,
        setNotification,
        user,
        setUser
      },
      children: children
    })
  );
};

/**
 * useAppContext
 * Access the global app context in any component.
 */
exports._AppProvider = _AppProvider;
const _useAppContext = () => {
  const _ctx = (0, _react.useContext)(_AppContext);
  if (!_ctx) throw new Error('useAppContext must be used within AppProvider');
  return _ctx;
};
exports._useAppContext = _useAppContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9BcHBDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInVuZGVmaW5lZCIsIl9BcHBQcm92aWRlciIsImNoaWxkcmVuIiwibG9hZGluZyIsInNldExvYWRpbmciLCJ1c2VTdGF0ZSIsIm5vdGlmaWNhdGlvbiIsInNldE5vdGlmaWNhdGlvbiIsInVzZXIiLCJzZXRVc2VyIiwianN4IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsImV4cG9ydHMiLCJfdXNlQXBwQ29udGV4dCIsIl9jdHgiLCJ1c2VDb250ZXh0IiwiRXJyb3IiXSwic291cmNlcyI6WyJBcHBDb250ZXh0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogR2xvYmFsIGFwcGxpY2F0aW9uIGNvbnRleHQgYW5kIHByb3ZpZGVyIGZvciBtYW5hZ2luZyBsb2FkaW5nIHN0YXRlLCBub3RpZmljYXRpb25zLCBhbmQgdXNlciBzZXNzaW9uLlxyXG4gKlxyXG4gKiBAbW9kdWxlIGNvbnRleHRzL0FwcENvbnRleHRcclxuICovXHJcbmltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUsIGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5cclxuLyoqXHJcbiAqIEFwcENvbnRleHRUeXBlXHJcbiAqIEdsb2JhbCBhcHAgY29udGV4dCBmb3IgbG9hZGluZywgbm90aWZpY2F0aW9ucywgYW5kIHVzZXIgc2Vzc2lvbi5cclxuICogQHByb3BlcnR5IHtib29sZWFufSBsb2FkaW5nIC0gR2xvYmFsIGxvYWRpbmcgc3RhdGVcclxuICogQHByb3BlcnR5IHsobG9hZGluZzogYm9vbGVhbikgPT4gdm9pZH0gc2V0TG9hZGluZyAtIFNldHRlciBmb3IgbG9hZGluZ1xyXG4gKiBAcHJvcGVydHkge3N0cmluZyB8IG51bGx9IG5vdGlmaWNhdGlvbiAtIEdsb2JhbCBub3RpZmljYXRpb24gbWVzc2FnZVxyXG4gKiBAcHJvcGVydHkgeyhtc2c6IHN0cmluZyB8IG51bGwpID0+IHZvaWR9IHNldE5vdGlmaWNhdGlvbiAtIFNldHRlciBmb3Igbm90aWZpY2F0aW9uXHJcbiAqIEBwcm9wZXJ0eSB7YW55fSB1c2VyIC0gVXNlciBzZXNzaW9uL3Byb2ZpbGUgb2JqZWN0XHJcbiAqIEBwcm9wZXJ0eSB7KHVzZXI6IGFueSkgPT4gdm9pZH0gc2V0VXNlciAtIFNldHRlciBmb3IgdXNlclxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBcHBDb250ZXh0VHlwZSB7XHJcbiAgbG9hZGluZzogYm9vbGVhbjtcclxuICBzZXRMb2FkaW5nOiAobG9hZGluZzogYm9vbGVhbikgPT4gdm9pZDtcclxuICBub3RpZmljYXRpb246IHN0cmluZyB8IG51bGw7XHJcbiAgc2V0Tm90aWZpY2F0aW9uOiAobXNnOiBzdHJpbmcgfCBudWxsKSA9PiB2b2lkO1xyXG4gIHVzZXI6IHVua25vd247XHJcbiAgc2V0VXNlcjogKHVzZXI6IHVua25vd24pID0+IHZvaWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWFjdCBjb250ZXh0IGZvciBnbG9iYWwgYXBwIHN0YXRlLlxyXG4gKi9cclxuY29uc3QgX0FwcENvbnRleHQgPSBjcmVhdGVDb250ZXh0PEFwcENvbnRleHRUeXBlIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xyXG5cclxuLyoqXHJcbiAqIEFwcFByb3ZpZGVyIGNvbXBvbmVudC5cclxuICogV3JhcCB5b3VyIGFwcCB3aXRoIHRoaXMgcHJvdmlkZXIgdG8gZW5hYmxlIGdsb2JhbCBhcHAgc3RhdGUuXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyAtIFJlYWN0IGNoaWxkcmVuLlxyXG4gKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9IFRoZSBwcm92aWRlciBjb21wb25lbnQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX0FwcFByb3ZpZGVyOiBSZWFjdC5GQzx7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfT4gPSAoeyBjaGlsZHJlbiB9KSA9PiB7XHJcbiAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IFtub3RpZmljYXRpb24sIHNldE5vdGlmaWNhdGlvbl0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcclxuICBjb25zdCBbdXNlciwgc2V0VXNlcl0gPSB1c2VTdGF0ZTx1bmtub3duPihudWxsKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIC8vIFJlbW92ZWQgdW51c2VkIEB0cy1leHBlY3QtZXJyb3I6IEpTWCBpcyBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudFxyXG4gICAgPF9BcHBDb250ZXh0LlByb3ZpZGVyXHJcbiAgICAgIHZhbHVlPXt7IGxvYWRpbmcsIHNldExvYWRpbmcsIG5vdGlmaWNhdGlvbiwgc2V0Tm90aWZpY2F0aW9uLCB1c2VyLCBzZXRVc2VyIH19XHJcbiAgICA+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvX0FwcENvbnRleHQuUHJvdmlkZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiB1c2VBcHBDb250ZXh0XHJcbiAqIEFjY2VzcyB0aGUgZ2xvYmFsIGFwcCBjb250ZXh0IGluIGFueSBjb21wb25lbnQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3VzZUFwcENvbnRleHQgPSAoKSA9PiB7XHJcbiAgY29uc3QgX2N0eCA9IHVzZUNvbnRleHQoX0FwcENvbnRleHQpO1xyXG4gIGlmICghX2N0eCkgdGhyb3cgbmV3IEVycm9yKCd1c2VBcHBDb250ZXh0IG11c3QgYmUgdXNlZCB3aXRo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