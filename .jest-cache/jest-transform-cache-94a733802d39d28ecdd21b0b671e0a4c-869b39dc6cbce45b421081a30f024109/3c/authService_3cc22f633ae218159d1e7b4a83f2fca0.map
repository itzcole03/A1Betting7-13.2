{"version":3,"names":["_axios","_interopRequireDefault","require","_API_URL","AuthService","constructor","user","token","requiresPasswordChangeFlag","loadFromLocalStorage","_token","localStorage","getItem","_user","JSON","parse","axios","defaults","headers","common","saveToLocalStorage","setItem","stringify","clearLocalStorage","removeItem","isAuthenticated","getUser","isAdmin","role","requiresPasswordChange","login","email","password","_response","post","data","access_token","id","success","message","error","console","logout","Promise","resolve","changePassword","log","userId","_authService","exports"],"sources":["authService.ts"],"sourcesContent":["// frontend/src/services/AuthService.ts\r\nimport axios from 'axios';\r\n\r\nconst _API_URL = 'http://localhost:8000/api/auth';\r\n\r\nexport interface User {\r\n  id: string;\r\n  email: string;\r\n  role: string;\r\n  permissions?: string[];\r\n}\r\n\r\nexport interface PasswordChangeRequest {\r\n  userId: string;\r\n  oldPassword?: string;\r\n  newPassword?: string;\r\n}\r\n\r\nexport interface AuthResponse {\r\n  success: boolean;\r\n  user?: User;\r\n  message?: string;\r\n  requiresPasswordChange?: boolean;\r\n}\r\n\r\nclass AuthService {\r\n  private user: User | null = null;\r\n  private token: string | null = null;\r\n  private requiresPasswordChangeFlag = false;\r\n\r\n  constructor() {\r\n    this.loadFromLocalStorage();\r\n  }\r\n\r\n  private loadFromLocalStorage() {\r\n    const _token = localStorage.getItem('token');\r\n    const _user = localStorage.getItem('user');\r\n    if (_token && _user) {\r\n      this.token = _token;\r\n      this.user = JSON.parse(_user);\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${this.token}`;\r\n    }\r\n  }\r\n\r\n  private saveToLocalStorage(token: string, user: User) {\r\n    this.token = token;\r\n    this.user = user;\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  private clearLocalStorage() {\r\n    this.token = null;\r\n    this.user = null;\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    // Ensure we pick up any token that may have been set after construction\r\n    if (!this.token) this.loadFromLocalStorage();\r\n    return !!this.token;\r\n  }\r\n\r\n  getUser(): User | null {\r\n    // Lazy-load from localStorage in case tests set items after import time\r\n    if (!this.user) this.loadFromLocalStorage();\r\n    return this.user;\r\n  }\r\n\r\n  isAdmin(): boolean {\r\n    return this.user?.role === 'admin';\r\n  }\r\n\r\n  requiresPasswordChange(): boolean {\r\n    return this.requiresPasswordChangeFlag;\r\n  }\r\n\r\n  async login(email: string, password: string): Promise<AuthResponse> {\r\n    try {\r\n      const _response = await axios.post(\r\n        `${_API_URL}/login`,\r\n        {\r\n          email,\r\n          password,\r\n        },\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (_response.data.access_token) {\r\n        const _user: User = { id: '1', email, role: 'admin' };\r\n        this.saveToLocalStorage(_response.data.access_token, _user);\r\n        return { success: true, user: _user, requiresPasswordChange: false };\r\n      }\r\n      return { success: false, message: 'Invalid credentials' };\r\n    } catch (error) {\r\n      console.error('Login API error:', error);\r\n      return {\r\n        success: false,\r\n        message: (error as Error).message || 'Login failed due to API error',\r\n      };\r\n    }\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    this.clearLocalStorage();\r\n    return Promise.resolve();\r\n  }\r\n\r\n  async changePassword(data: PasswordChangeRequest): Promise<AuthResponse> {\r\n    try {\r\n      console.log(`Changing password for user ${data.userId}`);\r\n      this.requiresPasswordChangeFlag = false;\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Change password API error:', error);\r\n      return {\r\n        success: false,\r\n        message: (error as Error).message || 'Password change failed due to API error',\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport const _authService = new AuthService();\r\n"],"mappings":"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","ignoreList":[]}