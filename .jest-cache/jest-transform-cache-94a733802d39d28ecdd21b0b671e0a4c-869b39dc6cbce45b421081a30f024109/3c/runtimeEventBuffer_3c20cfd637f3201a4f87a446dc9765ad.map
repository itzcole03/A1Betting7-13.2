{"file":"C:\\Users\\bcmad\\Downloads\\A1Betting7-13.2\\frontend\\src\\debug\\runtimeEventBuffer.ts","mappings":";AAAA;;;;;;;GAOG;;AAeH,kCAWC;AAKD,8BAIC;AAKD,oCAEC;AAKD,4CAEC;AAzCD,yBAAyB;AACzB,MAAM,YAAY,GAAsB,EAAE,CAAC;AAC3C,MAAM,UAAU,GAAG,EAAE,CAAC;AAEtB;;GAEG;AACH,SAAgB,WAAW,CAAC,GAAW,EAAE,OAAgC;IACvE,YAAY,CAAC,IAAI,CAAC;QAChB,GAAG;QACH,OAAO;QACP,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;KACtB,CAAC,CAAC;IAEH,mCAAmC;IACnC,IAAI,YAAY,CAAC,MAAM,GAAG,UAAU,EAAE,CAAC;QACrC,YAAY,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,SAAS,CAAC,GAAW,EAAE,CAAC,GAAG,CAAC;IAC1C,OAAO,YAAY;SAChB,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC;SAClC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC;AAED;;GAEG;AACH,SAAgB,YAAY,CAAC,CAAC,GAAG,EAAE;IACjC,OAAO,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC;AAED;;GAEG;AACH,SAAgB,gBAAgB;IAC9B,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;AAC1B,CAAC","names":[],"sources":["C:\\Users\\bcmad\\Downloads\\A1Betting7-13.2\\frontend\\src\\debug\\runtimeEventBuffer.ts"],"sourcesContent":["/**\r\n * Runtime Event Buffer - Stores diagnostic events for error correlation\r\n * \r\n * Simple ring buffer for tracking runtime events that can be retrieved\r\n * during error handling to provide context about what led to failures.\r\n * \r\n * @module debug/runtimeEventBuffer\r\n */\r\n\r\ninterface DiagnosticEvent {\r\n  tag: string;\r\n  payload: Record<string, unknown>;\r\n  timestamp: number;\r\n}\r\n\r\n// Ring buffer for events\r\nconst EVENT_BUFFER: DiagnosticEvent[] = [];\r\nconst MAX_EVENTS = 50;\r\n\r\n/**\r\n * Record a diagnostic event\r\n */\r\nexport function recordEvent(tag: string, payload: Record<string, unknown>): void {\r\n  EVENT_BUFFER.push({\r\n    tag,\r\n    payload,\r\n    timestamp: Date.now(),\r\n  });\r\n  \r\n  // Keep only the most recent events\r\n  if (EVENT_BUFFER.length > MAX_EVENTS) {\r\n    EVENT_BUFFER.shift();\r\n  }\r\n}\r\n\r\n/**\r\n * Get recent events by tag\r\n */\r\nexport function getRecent(tag: string, n = 5): DiagnosticEvent[] {\r\n  return EVENT_BUFFER\r\n    .filter(event => event.tag === tag)\r\n    .slice(-n);\r\n}\r\n\r\n/**\r\n * Get all recent events\r\n */\r\nexport function getAllRecent(n = 10): DiagnosticEvent[] {\r\n  return EVENT_BUFFER.slice(-n);\r\n}\r\n\r\n/**\r\n * Clear the event buffer (for testing)\r\n */\r\nexport function clearEventBuffer(): void {\r\n  EVENT_BUFFER.length = 0;\r\n}"],"version":3}