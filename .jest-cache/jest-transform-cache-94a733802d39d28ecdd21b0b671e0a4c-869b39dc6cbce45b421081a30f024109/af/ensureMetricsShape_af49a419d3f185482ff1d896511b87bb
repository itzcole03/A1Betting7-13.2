cd13d5022a9602ecb77777da0442366e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureMetricsShape = ensureMetricsShape;
/**
 * Metrics normalization to prevent "Cannot read properties of undefined (reading 'total_requests')" errors
 * Provides shape normalization and legacy field mapping similar to ensureHealthShape
 * 
 * @module ensureMetricsShape
 */

// Guard to prevent multiple logging
let hasLoggedMissingFields = false;
/**
 * Safe stringify for logging
 */
const safeStringify = obj => {
  try {
    return JSON.stringify(obj, null, 2);
  } catch {
    return String(obj);
  }
};

/**
 * Safely coerce value to number with fallback
 */
const coerceToNumber = (value, fallback = 0) => {
  if (typeof value === 'number') {
    // Handle Infinity and NaN
    if (!isFinite(value)) {
      return fallback;
    }
    return value;
  }
  if (typeof value === 'boolean') {
    return value ? 1 : 0;
  }
  if (typeof value === 'string') {
    const parsed = parseFloat(value);
    if (!isNaN(parsed)) {
      return parsed;
    }
  }
  return fallback;
};

/**
 * Safely coerce value to string with fallback
 */
const coerceToString = (value, fallback = '') => {
  if (typeof value === 'string') {
    return value;
  }
  if (typeof value === 'number' || typeof value === 'boolean') {
    return String(value);
  }
  return fallback;
};

/**
 * Aggregate API endpoint stats into totals
 */
const aggregateApiStats = apiPerformance => {
  let totalRequests = 0;
  let totalErrors = 0;
  let totalLatency = 0;
  let endpointCount = 0;
  Object.values(apiPerformance).forEach(stats => {
    if (stats && typeof stats === 'object') {
      const statsObj = stats;
      totalRequests += coerceToNumber(statsObj.total_calls || statsObj.total_requests, 0);
      totalErrors += coerceToNumber(statsObj.errors || statsObj.error_requests, 0);
      totalLatency += coerceToNumber(statsObj.avg_time_ms || statsObj.avg_latency_ms, 0);
      endpointCount++;
    }
  });
  const avgLatency = endpointCount > 0 ? Math.round(totalLatency / endpointCount * 100) / 100 : 0;
  const successRequests = Math.max(0, totalRequests - totalErrors);
  return {
    total_requests: totalRequests,
    success_requests: successRequests,
    error_requests: totalErrors,
    avg_latency_ms: avgLatency
  };
};

/**
 * Ensures metrics data conforms to MetricsShape with safe defaults
 * 
 * Features:
 * - Normalizes missing nested objects to safe defaults (all zeros)
 * - Maps legacy cache_performance.* to cache.*
 * - Maps legacy api_performance.* to aggregated api.*
 * - Coerces numeric fields to numbers
 * - Adds development metadata in originFlags
 * - One-time logging for missing fields and legacy usage
 */
function ensureMetricsShape(raw) {
  const originFlags = {};

  // Type guard for raw data
  const rawObj = raw && typeof raw === 'object' ? raw : {};

  // Check for legacy cache_performance structure
  const legacyCacheObj = rawObj.cache_performance && typeof rawObj.cache_performance === 'object' ? rawObj.cache_performance : {};

  // Check for canonical cache structure
  const canonicalCacheObj = rawObj.cache && typeof rawObj.cache === 'object' ? rawObj.cache : {};

  // Check for legacy api_performance structure
  const legacyApiObj = rawObj.api_performance && typeof rawObj.api_performance === 'object' ? rawObj.api_performance : {};

  // Check for canonical api structure
  const canonicalApiObj = rawObj.api && typeof rawObj.api === 'object' ? rawObj.api : {};

  // Check for legacy system_info structure
  const legacySystemObj = rawObj.system_info && typeof rawObj.system_info === 'object' ? rawObj.system_info : {};

  // Check for canonical system_info structure  
  const canonicalSystemObj = rawObj.system && typeof rawObj.system === 'object' ? rawObj.system : {};
  const hasLegacyCache = Object.keys(legacyCacheObj).length > 0;
  const hasLegacyApi = Object.keys(legacyApiObj).length > 0;
  const hasCanonicalCache = Object.keys(canonicalCacheObj).length > 0;
  const hasCanonicalApi = Object.keys(canonicalApiObj).length > 0;
  const hasLegacySystem = Object.keys(legacySystemObj).length > 0;
  const _hasCanonicalSystem = Object.keys(canonicalSystemObj).length > 0;
  if (hasLegacyCache || hasLegacyApi || hasLegacySystem) {
    originFlags.mappedLegacy = true;
  }

  // Build system_info metrics (canonical first, then legacy fallback)
  const systemMetrics = {
    optimization_level: canonicalSystemObj.optimization_level !== undefined ? coerceToString(canonicalSystemObj.optimization_level, 'Basic') : coerceToString(legacySystemObj.optimization_level || legacySystemObj.optimizationLevel || legacySystemObj.opt_level, 'Basic'),
    caching_strategy: canonicalSystemObj.caching_strategy !== undefined ? coerceToString(canonicalSystemObj.caching_strategy, 'Memory') : coerceToString(legacySystemObj.caching_strategy || legacySystemObj.cachingStrategy, 'Memory'),
    monitoring: canonicalSystemObj.monitoring !== undefined ? coerceToString(canonicalSystemObj.monitoring, 'Standard') : coerceToString(legacySystemObj.monitoring, 'Standard')
  };

  // Build cache metrics (canonical first, then legacy fallback with multiple field name patterns)
  const cacheMetrics = {
    hits: canonicalCacheObj.hits !== undefined ? coerceToNumber(canonicalCacheObj.hits, 0) : coerceToNumber(legacyCacheObj.hits || legacyCacheObj.cache_hits, 0),
    misses: canonicalCacheObj.misses !== undefined ? coerceToNumber(canonicalCacheObj.misses, 0) : coerceToNumber(legacyCacheObj.misses || legacyCacheObj.cache_misses, 0),
    total_requests: canonicalCacheObj.total_requests !== undefined ? coerceToNumber(canonicalCacheObj.total_requests, 0) : coerceToNumber(legacyCacheObj.total_requests, 0),
    hit_rate: canonicalCacheObj.hit_rate !== undefined ? coerceToNumber(canonicalCacheObj.hit_rate, 0) : coerceToNumber(legacyCacheObj.hit_rate, 0),
    errors: canonicalCacheObj.errors !== undefined ? coerceToNumber(canonicalCacheObj.errors, 0) : coerceToNumber(legacyCacheObj.errors, 0)
  };

  // Build API metrics (canonical first, then aggregate legacy)
  let apiMetrics;
  if (hasCanonicalApi) {
    apiMetrics = {
      total_requests: coerceToNumber(canonicalApiObj.total_requests, 0),
      success_requests: coerceToNumber(canonicalApiObj.success_requests, 0),
      error_requests: coerceToNumber(canonicalApiObj.error_requests, 0),
      avg_latency_ms: coerceToNumber(canonicalApiObj.avg_latency_ms, 0)
    };
  } else if (hasLegacyApi) {
    apiMetrics = aggregateApiStats(legacyApiObj);
  } else {
    apiMetrics = {
      total_requests: 0,
      success_requests: 0,
      error_requests: 0,
      avg_latency_ms: 0
    };
  }

  // One-time logging for missing critical fields and legacy usage
  const missingFields = [];
  if (!raw) missingFields.push('entire metrics object');
  if (!hasCanonicalCache && !hasLegacyCache) missingFields.push('cache or cache_performance');
  if (!hasCanonicalApi && !hasLegacyApi) missingFields.push('api or api_performance');
  if ((missingFields.length > 0 || originFlags.mappedLegacy) && !hasLoggedMissingFields && process.env.NODE_ENV === 'development') {
    hasLoggedMissingFields = true;
    if (missingFields.length > 0) {
      // eslint-disable-next-line no-console
      console.warn('[MetricsGuard] Missing metrics fields detected:', missingFields.join(', '), '\nRaw data sample:', safeStringify(rawObj)?.substring(0, 500) + '...');
    }
    if (originFlags.mappedLegacy) {
      // eslint-disable-next-line no-console
      console.warn('[MetricsGuard] Using legacy metrics structure (cache_performance/api_performance)', 'Consider migrating to canonical structure (cache/api)');
    }
  }

  // Build normalized metrics object
  const normalized = {
    api: apiMetrics,
    cache: cacheMetrics,
    system_info: systemMetrics,
    timestamps: {
      updated_at: rawObj.updated_at ? String(rawObj.updated_at) : new Date().toISOString()
    },
    originFlags
  };
  return normalized;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJoYXNMb2dnZWRNaXNzaW5nRmllbGRzIiwic2FmZVN0cmluZ2lmeSIsIm9iaiIsIkpTT04iLCJzdHJpbmdpZnkiLCJTdHJpbmciLCJjb2VyY2VUb051bWJlciIsInZhbHVlIiwiZmFsbGJhY2siLCJpc0Zpbml0ZSIsInBhcnNlZCIsInBhcnNlRmxvYXQiLCJpc05hTiIsImNvZXJjZVRvU3RyaW5nIiwiYWdncmVnYXRlQXBpU3RhdHMiLCJhcGlQZXJmb3JtYW5jZSIsInRvdGFsUmVxdWVzdHMiLCJ0b3RhbEVycm9ycyIsInRvdGFsTGF0ZW5jeSIsImVuZHBvaW50Q291bnQiLCJPYmplY3QiLCJ2YWx1ZXMiLCJmb3JFYWNoIiwic3RhdHMiLCJzdGF0c09iaiIsInRvdGFsX2NhbGxzIiwidG90YWxfcmVxdWVzdHMiLCJlcnJvcnMiLCJlcnJvcl9yZXF1ZXN0cyIsImF2Z190aW1lX21zIiwiYXZnX2xhdGVuY3lfbXMiLCJhdmdMYXRlbmN5IiwiTWF0aCIsInJvdW5kIiwic3VjY2Vzc1JlcXVlc3RzIiwibWF4Iiwic3VjY2Vzc19yZXF1ZXN0cyIsImVuc3VyZU1ldHJpY3NTaGFwZSIsInJhdyIsIm9yaWdpbkZsYWdzIiwicmF3T2JqIiwibGVnYWN5Q2FjaGVPYmoiLCJjYWNoZV9wZXJmb3JtYW5jZSIsImNhbm9uaWNhbENhY2hlT2JqIiwiY2FjaGUiLCJsZWdhY3lBcGlPYmoiLCJhcGlfcGVyZm9ybWFuY2UiLCJjYW5vbmljYWxBcGlPYmoiLCJhcGkiLCJsZWdhY3lTeXN0ZW1PYmoiLCJzeXN0ZW1faW5mbyIsImNhbm9uaWNhbFN5c3RlbU9iaiIsInN5c3RlbSIsImhhc0xlZ2FjeUNhY2hlIiwia2V5cyIsImxlbmd0aCIsImhhc0xlZ2FjeUFwaSIsImhhc0Nhbm9uaWNhbENhY2hlIiwiaGFzQ2Fub25pY2FsQXBpIiwiaGFzTGVnYWN5U3lzdGVtIiwiX2hhc0Nhbm9uaWNhbFN5c3RlbSIsIm1hcHBlZExlZ2FjeSIsInN5c3RlbU1ldHJpY3MiLCJvcHRpbWl6YXRpb25fbGV2ZWwiLCJ1bmRlZmluZWQiLCJvcHRpbWl6YXRpb25MZXZlbCIsIm9wdF9sZXZlbCIsImNhY2hpbmdfc3RyYXRlZ3kiLCJjYWNoaW5nU3RyYXRlZ3kiLCJtb25pdG9yaW5nIiwiY2FjaGVNZXRyaWNzIiwiaGl0cyIsImNhY2hlX2hpdHMiLCJtaXNzZXMiLCJjYWNoZV9taXNzZXMiLCJoaXRfcmF0ZSIsImFwaU1ldHJpY3MiLCJtaXNzaW5nRmllbGRzIiwicHVzaCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImNvbnNvbGUiLCJ3YXJuIiwiam9pbiIsInN1YnN0cmluZyIsIm5vcm1hbGl6ZWQiLCJ0aW1lc3RhbXBzIiwidXBkYXRlZF9hdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyJdLCJzb3VyY2VzIjpbImVuc3VyZU1ldHJpY3NTaGFwZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogTWV0cmljcyBub3JtYWxpemF0aW9uIHRvIHByZXZlbnQgXCJDYW5ub3QgcmVhZCBwcm9wZXJ0aWVzIG9mIHVuZGVmaW5lZCAocmVhZGluZyAndG90YWxfcmVxdWVzdHMnKVwiIGVycm9yc1xyXG4gKiBQcm92aWRlcyBzaGFwZSBub3JtYWxpemF0aW9uIGFuZCBsZWdhY3kgZmllbGQgbWFwcGluZyBzaW1pbGFyIHRvIGVuc3VyZUhlYWx0aFNoYXBlXHJcbiAqIFxyXG4gKiBAbW9kdWxlIGVuc3VyZU1ldHJpY3NTaGFwZVxyXG4gKi9cclxuXHJcbi8vIEd1YXJkIHRvIHByZXZlbnQgbXVsdGlwbGUgbG9nZ2luZ1xyXG5sZXQgaGFzTG9nZ2VkTWlzc2luZ0ZpZWxkcyA9IGZhbHNlO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNZXRyaWNzU2hhcGUge1xyXG4gIGFwaToge1xyXG4gICAgdG90YWxfcmVxdWVzdHM6IG51bWJlcjtcclxuICAgIHN1Y2Nlc3NfcmVxdWVzdHM6IG51bWJlcjtcclxuICAgIGVycm9yX3JlcXVlc3RzOiBudW1iZXI7XHJcbiAgICBhdmdfbGF0ZW5jeV9tczogbnVtYmVyO1xyXG4gIH07XHJcbiAgY2FjaGU6IHtcclxuICAgIGhpdHM6IG51bWJlcjtcclxuICAgIG1pc3NlczogbnVtYmVyO1xyXG4gICAgdG90YWxfcmVxdWVzdHM6IG51bWJlcjtcclxuICAgIGhpdF9yYXRlOiBudW1iZXI7XHJcbiAgICBlcnJvcnM6IG51bWJlcjtcclxuICB9O1xyXG4gIHN5c3RlbV9pbmZvOiB7XHJcbiAgICBvcHRpbWl6YXRpb25fbGV2ZWw6IHN0cmluZztcclxuICAgIGNhY2hpbmdfc3RyYXRlZ3k6IHN0cmluZztcclxuICAgIG1vbml0b3Jpbmc6IHN0cmluZztcclxuICB9O1xyXG4gIHRpbWVzdGFtcHM/OiB7XHJcbiAgICB1cGRhdGVkX2F0Pzogc3RyaW5nO1xyXG4gIH07XHJcbiAgb3JpZ2luRmxhZ3M/OiB7XHJcbiAgICBtYXBwZWRMZWdhY3k/OiBib29sZWFuO1xyXG4gIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTYWZlIHN0cmluZ2lmeSBmb3IgbG9nZ2luZ1xyXG4gKi9cclxuY29uc3Qgc2FmZVN0cmluZ2lmeSA9IChvYmo6IHVua25vd24pOiBzdHJpbmcgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCBudWxsLCAyKTtcclxuICB9IGNhdGNoIHtcclxuICAgIHJldHVybiBTdHJpbmcob2JqKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogU2FmZWx5IGNvZXJjZSB2YWx1ZSB0byBudW1iZXIgd2l0aCBmYWxsYmFja1xyXG4gKi9cclxuY29uc3QgY29lcmNlVG9OdW1iZXIgPSAodmFsdWU6IHVua25vd24sIGZhbGxiYWNrOiBudW1iZXIgPSAwKTogbnVtYmVyID0+IHtcclxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgLy8gSGFuZGxlIEluZmluaXR5IGFuZCBOYU5cclxuICAgIGlmICghaXNGaW5pdGUodmFsdWUpKSB7XHJcbiAgICAgIHJldHVybiBmYWxsYmFjaztcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgPyAxIDogMDtcclxuICB9XHJcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlRmxvYXQodmFsdWUpO1xyXG4gICAgaWYgKCFpc05hTihwYXJzZWQpKSB7XHJcbiAgICAgIHJldHVybiBwYXJzZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBmYWxsYmFjaztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTYWZlbHkgY29lcmNlIHZhbHVlIHRvIHN0cmluZyB3aXRoIGZhbGxiYWNrXHJcbiAqL1xyXG5jb25zdCBjb2VyY2VUb1N0cmluZyA9ICh2YWx1ZTogdW5rbm93biwgZmFsbGJhY2s6IHN0cmluZyA9ICcnKTogc3RyaW5nID0+IHtcclxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xyXG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XHJcbiAgfVxyXG4gIHJldHVybiBmYWxsYmFjaztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBZ2dyZWdhdGUgQVBJIGVuZHBvaW50IHN0YXRzIGludG8gdG90YWxzXHJcbiAqL1xyXG5jb25zdCBhZ2dyZWdhdGVBcGlTdGF0cyA9IChhcGlQZXJmb3JtYW5jZTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pOiBNZXRyaWNzU2hhcGVbJ2FwaSddID0+IHtcclxuICBsZXQgdG90YWxSZXF1ZXN0cyA9IDA7XHJcbiAgbGV0IHRvdGFsRXJyb3JzID0gMDtcclxuICBsZXQgdG90YWxMYXRlbmN5ID0gMDtcclxuICBsZXQgZW5kcG9pbnRDb3VudCA9IDA7XHJcblxyXG4gIE9iamVjdC52YWx1ZXMoYXBpUGVyZm9ybWFuY2UpLmZvckVhY2goc3RhdHMgPT4ge1xyXG4gICAgaWYgKHN0YXRzICYmIHR5cGVvZiBzdGF0cyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgY29uc3Qgc3RhdHNPYmogPSBzdGF0cyBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcclxuICAgICAgdG90YWxSZXF1ZXN0cyArPSBjb2VyY2VUb051bWJlcihzdGF0c09iai50b3RhbF9jYWxscyB8fCBzdGF0c09iai50b3RhbF9yZXF1ZXN0cywgMCk7XHJcbiAgICAgIHRvdGFsRXJyb3JzICs9IGNvZXJjZVRvTnVtYmVyKHN0YXRzT2JqLmVycm9ycyB8fCBzdGF0c09iai5lcnJvcl9yZXF1ZXN0cywgMCk7XHJcbiAgICAgIHRvdGFsTGF0ZW5jeSArPSBjb2VyY2VUb051bWJlcihzdGF0c09iai5hdmdfdGltZV9tcyB8fCBzdGF0c09iai5hdmdfbGF0ZW5jeV9tcywgMCk7XHJcbiAgICAgIGVuZHBvaW50Q291bnQrKztcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgY29uc3QgYXZnTGF0ZW5jeSA9IGVuZHBvaW50Q291bnQgPiAwID8gTWF0aC5yb3VuZCgodG90YWxMYXRlbmN5IC8gZW5kcG9pbnRDb3VudCkgKiAxMDApIC8gMTAwIDogMDtcclxuICBjb25zdCBzdWNjZXNzUmVxdWVzdHMgPSBNYXRoLm1heCgwLCB0b3RhbFJlcXVlc3RzIC0gdG90YWxFcnJvcnMpO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgdG90YWxfcmVxdWVzdHM6IHRvdGFsUmVxdWVzdHMsXHJcbiAgICBzdWNjZXNzX3JlcXVlc3RzOiBzdWNjZXNzUmVxdWVzdHMsXHJcbiAgICBlcnJvcl9yZXF1ZXN0czogdG90YWxFcnJvcnMsXHJcbiAgICBhdmdfbGF0ZW5jeV9tczogYXZnTGF0ZW5jeSxcclxuICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVuc3VyZXMgbWV0cmljcyBkYXRhIGNvbmZvcm1zIHRvIE1ldHJpY3NTaGFwZSB3aXRoIHNhZmUgZGVmYXVsdHNcclxuICogXHJcbiAqIEZlYXR1cmVzOlxyXG4gKiAtIE5vcm1hbGl6ZXMgbWlzc2luZyBuZXN0ZWQgb2JqZWN0cyB0byBzYWZlIGRlZmF1bHRzIChhbGwgemVyb3MpXHJcbiAqIC0gTWFwcyBsZWdhY3kgY2FjaGVfcGVyZm9ybWFuY2UuKiB0byBjYWNoZS4qXHJcbiAqIC0gTWFwcyBsZWdhY3kgYXBpX3BlcmZvcm1hbmNlLiogdG8gYWdncmVnYXRlZCBhcGkuKlxyXG4gKiAtIENvZXJjZXMgbnVtZXJpYyBmaWVsZHMgdG8gbnVtYmVyc1xyXG4gKiAtIEFkZHMgZGV2ZWxvcG1lbnQgbWV0YWRhdGEgaW4gb3JpZ2luRmxhZ3NcclxuICogLSBPbmUtdGltZSBsb2dnaW5nIGZvciBtaXNzaW5nIGZpZWxkcyBhbmQgbGVnYWN5IHVzYWdlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlTWV0cmljc1NoYXBlKHJhdzogdW5rbm93bik6IE1ldHJpY3NTaGFwZSB7XHJcbiAgY29uc3Qgb3JpZ2luRmxhZ3M6IE1ldHJpY3NTaGFwZVsnb3JpZ2luRmxhZ3MnXSA9IHt9O1xyXG4gIFxyXG4gIC8vIFR5cGUgZ3VhcmQgZm9yIHJhdyBkYXRhXHJcbiAgY29uc3QgcmF3T2JqID0gcmF3ICYmIHR5cGVvZiByYXcgPT09ICdvYmplY3QnID8gcmF3IGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+IDoge307XHJcblxyXG4gIC8vIENoZWNrIGZvciBsZWdhY3kgY2FjaGVfcGVyZm9ybWFuY2Ugc3RydWN0dXJlXHJcbiAgY29uc3QgbGVnYWN5Q2FjaGVPYmogPSByYXdPYmouY2FjaGVfcGVyZm9ybWFuY2UgJiYgdHlwZW9mIHJhd09iai5jYWNoZV9wZXJmb3JtYW5jZSA9PT0gJ29iamVjdCcgXHJcbiAgICA/IHJhd09iai5jYWNoZV9wZXJmb3JtYW5jZSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiBcclxuICAgIDoge307XHJcblxyXG4gIC8vIENoZWNrIGZvciBjYW5vbmljYWwgY2FjaGUgc3RydWN0dXJlXHJcbiAgY29uc3QgY2Fub25pY2FsQ2FjaGVPYmogPSByYXdPYmouY2FjaGUgJiYgdHlwZW9mIHJhd09iai5jYWNoZSA9PT0gJ29iamVjdCdcclxuICAgID8gcmF3T2JqLmNhY2hlIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+XHJcbiAgICA6IHt9O1xyXG5cclxuICAvLyBDaGVjayBmb3IgbGVnYWN5IGFwaV9wZXJmb3JtYW5jZSBzdHJ1Y3R1cmVcclxuICBjb25zdCBsZWdhY3lBcGlPYmogPSByYXdPYmouYXBpX3BlcmZvcm1hbmNlICYmIHR5cGVvZiByYXdPYmouYXBpX3BlcmZvcm1hbmNlID09PSAnb2JqZWN0J1xyXG4gICAgPyByYXdPYmouYXBpX3BlcmZvcm1hbmNlIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+XHJcbiAgICA6IHt9O1xyXG5cclxuICAvLyBDaGVjayBmb3IgY2Fub25pY2FsIGFwaSBzdHJ1Y3R1cmVcclxuICBjb25zdCBjYW5vbmljYWxBcGlPYmogPSByYXdPYmouYXBpICYmIHR5cGVvZiByYXdPYmouYXBpID09PSAnb2JqZWN0J1xyXG4gICAgPyByYXdPYmouYXBpIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+XHJcbiAgICA6IHt9O1xyXG5cclxuICAvLyBDaGVjayBmb3IgbGVnYWN5IHN5c3RlbV9pbmZvIHN0cnVjdHVyZVxyXG4gIGNvbnN0IGxlZ2FjeVN5c3RlbU9iaiA9IHJhd09iai5zeXN0ZW1faW5mbyAmJiB0eXBlb2YgcmF3T2JqLnN5c3RlbV9pbmZvID09PSAnb2JqZWN0J1xyXG4gICAgPyByYXdPYmouc3lzdGVtX2luZm8gYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj5cclxuICAgIDoge307XHJcblxyXG4gIC8vIENoZWNrIGZvciBjYW5vbmljYWwgc3lzdGVtX2luZm8gc3RydWN0dXJlICBcclxuICBjb25zdCBjYW5vbmljYWxTeXN0ZW1PYmogPSByYXdPYmouc3lzdGVtICYmIHR5cGVvZiByYXdPYmouc3lzdGVtID09PSAnb2JqZWN0J1xyXG4gICAgPyByYXdPYmouc3lzdGVtIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+XHJcbiAgICA6IHt9O1xyXG5cclxuICBjb25zdCBoYXNMZWdhY3lDYWNoZSA9IE9iamVjdC5rZXlzKGxlZ2FjeUNhY2hlT2JqKS5sZW5ndGggPiAwO1xyXG4gIGNvbnN0IGhhc0xlZ2FjeUFwaSA9IE9iamVjdC5rZXlzKGxlZ2FjeUFwaU9iaikubGVuZ3RoID4gMDtcclxuICBjb25zdCBoYXNDYW5vbmljYWxDYWNoZSA9IE9iamVjdC5rZXlzKGNhbm9uaWNhbENhY2hlT2JqKS5sZW5ndGggPiAwO1xyXG4gIGNvbnN0IGhhc0Nhbm9uaWNhbEFwaSA9IE9iamVjdC5rZXlzKGNhbm9uaWNhbEFwaU9iaikubGVuZ3RoID4gMDtcclxuXHJcbiAgY29uc3QgaGFzTGVnYWN5U3lzdGVtID0gT2JqZWN0LmtleXMobGVnYWN5U3lzdGVtT2JqKS5sZW5ndGggPiAwO1xyXG4gIGNvbnN0IF9oYXNDYW5vbmljYWxTeXN0ZW0gPSBPYmplY3Qua2V5cyhjYW5vbmljYWxTeXN0ZW1PYmopLmxlbmd0aCA+IDA7XHJcblxyXG4gIGlmIChoYXNMZWdhY3lDYWNoZSB8fCBoYXNMZWdhY3lBcGkgfHwgaGFzTGVnYWN5U3lzdGVtKSB7XHJcbiAgICBvcmlnaW5GbGFncy5tYXBwZWRMZWdhY3kgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLy8gQnVpbGQgc3lzdGVtX2luZm8gbWV0cmljcyAoY2Fub25pY2FsIGZpcnN0LCB0aGVuIGxlZ2FjeSBmYWxsYmFjaylcclxuICBjb25zdCBzeXN0ZW1NZXRyaWNzID0ge1xyXG4gICAgb3B0aW1pemF0aW9uX2xldmVsOiBjYW5vbmljYWxTeXN0ZW1PYmoub3B0aW1pemF0aW9uX2xldmVsICE9PSB1bmRlZmluZWRcclxuICAgICAgPyBjb2VyY2VUb1N0cmluZyhjYW5vbmljYWxTeXN0ZW1PYmoub3B0aW1pemF0aW9uX2xldmVsLCAnQmFzaWMnKVxyXG4gICAgICA6IGNvZXJjZVRvU3RyaW5nKFxyXG4gICAgICAgICAgbGVnYWN5U3lzdGVtT2JqLm9wdGltaXphdGlvbl9sZXZlbCB8fCBcclxuICAgICAgICAgIGxlZ2FjeVN5c3RlbU9iai5vcHRpbWl6YXRpb25MZXZlbCB8fCBcclxuICAgICAgICAgIGxlZ2FjeVN5c3RlbU9iai5vcHRfbGV2ZWwsIFxyXG4gICAgICAgICAgJ0Jhc2ljJ1xyXG4gICAgICAgICksXHJcbiAgICBjYWNoaW5nX3N0cmF0ZWd5OiBjYW5vbmljYWxTeXN0ZW1PYmouY2FjaGluZ19zdHJhdGVneSAhPT0gdW5kZWZpbmVkXHJcbiAgICAgID8gY29lcmNlVG9TdHJpbmcoY2Fub25pY2FsU3lzdGVtT2JqLmNhY2hpbmdfc3RyYXRlZ3ksICdNZW1vcnknKVxyXG4gICAgICA6IGNvZXJjZVRvU3RyaW5nKFxyXG4gICAgICAgICAgbGVnYWN5U3lzdGVtT2JqLmNhY2hpbmdfc3RyYXRlZ3kgfHwgXHJcbiAgICAgICAgICBsZWdhY3lTeXN0ZW1PYmouY2FjaGluZ1N0cmF0ZWd5LFxyXG4gICAgICAgICAgJ01lbW9yeSdcclxuICAgICAgICApLFxyXG4gICAgbW9uaXRvcmluZzogY2Fub25pY2FsU3lzdGVtT2JqLm1vbml0b3JpbmcgIT09IHVuZGVmaW5lZFxyXG4gICAgICA/IGNvZXJjZVRvU3RyaW5nKGNhbm9uaWNhbFN5c3RlbU9iai5tb25pdG9yaW5nLCAnU3RhbmRhcmQnKVxyXG4gICAgICA6IGNvZXJjZVRvU3RyaW5nKFxyXG4gICAgICAgICAgbGVnYWN5U3lzdGVtT2JqLm1vbml0b3JpbmcsXHJcbiAgICAgICAgICAnU3RhbmRhcmQnXHJcbiAgICAgICAgKVxyXG4gIH07XHJcblxyXG4gIC8vIEJ1aWxkIGNhY2hlIG1ldHJpY3MgKGNhbm9uaWNhbCBmaXJzdCwgdGhlbiBsZWdhY3kgZmFsbGJhY2sgd2l0aCBtdWx0aXBsZSBmaWVsZCBuYW1lIHBhdHRlcm5zKVxyXG4gIGNvbnN0IGNhY2hlTWV0cmljcyA9IHtcclxuICAgIGhpdHM6IGNhbm9uaWNhbENhY2hlT2JqLmhpdHMgIT09IHVuZGVmaW5lZCBcclxuICAgICAgPyBjb2VyY2VUb051bWJlcihjYW5vbmljYWxDYWNoZU9iai5oaXRzLCAwKSBcclxuICAgICAgOiBjb2VyY2VUb051bWJlcihsZWdhY3lDYWNoZU9iai5oaXRzIHx8IGxlZ2FjeUNhY2hlT2JqLmNhY2hlX2hpdHMsIDApLFxyXG4gICAgbWlzc2VzOiBjYW5vbmljYWxDYWNoZU9iai5taXNzZXMgIT09IHVuZGVmaW5lZCBcclxuICAgICAgPyBjb2VyY2VUb051bWJlcihjYW5vbmljYWxDYWNoZU9iai5taXNzZXMsIDApIFxyXG4gICAgICA6IGNvZXJjZVRvTnVtYmVyKGxlZ2FjeUNhY2hlT2JqLm1pc3NlcyB8fCBsZWdhY3lDYWNoZU9iai5jYWNoZV9taXNzZXMsIDApLFxyXG4gICAgdG90YWxfcmVxdWVzdHM6IGNhbm9uaWNhbENhY2hlT2JqLnRvdGFsX3JlcXVlc3RzICE9PSB1bmRlZmluZWQgXHJcbiAgICAgID8gY29lcmNlVG9OdW1iZXIoY2Fub25pY2FsQ2FjaGVPYmoudG90YWxfcmVxdWVzdHMsIDApIFxyXG4gICAgICA6IGNvZXJjZVRvTnVtYmVyKGxlZ2FjeUNhY2hlT2JqLnRvdGFsX3JlcXVlc3RzLCAwKSxcclxuICAgIGhpdF9yYXRlOiBjYW5vbmljYWxDYWNoZU9iai5oaXRfcmF0ZSAhPT0gdW5kZWZpbmVkIFxyXG4gICAgICA/IGNvZXJjZVRvTnVtYmVyKGNhbm9uaWNhbENhY2hlT2JqLmhpdF9yYXRlLCAwKSBcclxuICAgICAgOiBjb2VyY2VUb051bWJlcihsZWdhY3lDYWNoZU9iai5oaXRfcmF0ZSwgMCksXHJcbiAgICBlcnJvcnM6IGNhbm9uaWNhbENhY2hlT2JqLmVycm9ycyAhPT0gdW5kZWZpbmVkIFxyXG4gICAgICA/IGNvZXJjZVRvTnVtYmVyKGNhbm9uaWNhbENhY2hlT2JqLmVycm9ycywgMCkgXHJcbiAgICAgIDogY29lcmNlVG9OdW1iZXIobGVnYWN5Q2FjaGVPYmouZXJyb3JzLCAwKVxyXG4gIH07XHJcblxyXG4gIC8vIEJ1aWxkIEFQSSBtZXRyaWNzIChjYW5vbmljYWwgZmlyc3QsIHRoZW4gYWdncmVnYXRlIGxlZ2FjeSlcclxuICBsZXQgYXBpTWV0cmljczogTWV0cmljc1NoYXBlWydhcGknXTtcclxuICBpZiAoaGFzQ2Fub25pY2FsQXBpKSB7XHJcbiAgICBhcGlNZXRyaWNzID0ge1xyXG4gICAgICB0b3RhbF9yZXF1ZXN0czogY29lcmNlVG9OdW1iZXIoY2Fub25pY2FsQXBpT2JqLnRvdGFsX3JlcXVlc3RzLCAwKSxcclxuICAgICAgc3VjY2Vzc19yZXF1ZXN0czogY29lcmNlVG9OdW1iZXIoY2Fub25pY2FsQXBpT2JqLnN1Y2Nlc3NfcmVxdWVzdHMsIDApLFxyXG4gICAgICBlcnJvcl9yZXF1ZXN0czogY29lcmNlVG9OdW1iZXIoY2Fub25pY2FsQXBpT2JqLmVycm9yX3JlcXVlc3RzLCAwKSxcclxuICAgICAgYXZnX2xhdGVuY3lfbXM6IGNvZXJjZVRvTnVtYmVyKGNhbm9uaWNhbEFwaU9iai5hdmdfbGF0ZW5jeV9tcywgMCksXHJcbiAgICB9O1xyXG4gIH0gZWxzZSBpZiAoaGFzTGVnYWN5QXBpKSB7XHJcbiAgICBhcGlNZXRyaWNzID0gYWdncmVnYXRlQXBpU3RhdHMobGVnYWN5QXBpT2JqKTtcclxuICB9IGVsc2Uge1xyXG4gICAgYXBpTWV0cmljcyA9IHtcclxuICAgICAgdG90YWxfcmVxdWVzdHM6IDAsXHJcbiAgICAgIHN1Y2Nlc3NfcmVxdWVzdHM6IDAsXHJcbiAgICAgIGVycm9yX3JlcXVlc3RzOiAwLFxyXG4gICAgICBhdmdfbGF0ZW5jeV9tczogMCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBPbmUtdGltZSBsb2dnaW5nIGZvciBtaXNzaW5nIGNyaXRpY2FsIGZpZWxkcyBhbmQgbGVnYWN5IHVzYWdlXHJcbiAgY29uc3QgbWlzc2luZ0ZpZWxkczogc3RyaW5nW10gPSBbXTtcclxuICBpZiAoIXJhdykgbWlzc2luZ0ZpZWxkcy5wdXNoKCdlbnRpcmUgbWV0cmljcyBvYmplY3QnKTtcclxuICBpZiAoIWhhc0Nhbm9uaWNhbENhY2hlICYmICFoYXNMZWdhY3lDYWNoZSkgbWlzc2luZ0ZpZWxkcy5wdXNoKCdjYWNoZSBvciBjYWNoZV9wZXJmb3JtYW5jZScpO1xyXG4gIGlmICghaGFzQ2Fub25pY2FsQXBpICYmICFoYXNMZWdhY3lBcGkpIG1pc3NpbmdGaWVsZHMucHVzaCgnYXBpIG9yIGFwaV9wZXJmb3JtYW5jZScpO1xyXG4gIFxyXG4gIGlmICgobWlzc2luZ0ZpZWxkcy5sZW5ndGggPiAwIHx8IG9yaWdpbkZsYWdzLm1hcHBlZExlZ2FjeSkgJiYgIWhhc0xvZ2dlZE1pc3NpbmdGaWVsZHMgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcclxuICAgIGhhc0xvZ2dlZE1pc3NpbmdGaWVsZHMgPSB0cnVlO1xyXG4gICAgXHJcbiAgICBpZiAobWlzc2luZ0ZpZWxkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXHJcbiAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAnW01ldHJpY3NHdWFyZF0gTWlzc2luZyBtZXRyaWNzIGZpZWxkcyBkZXRlY3RlZDonLFxyXG4gICAgICAgIG1pc3NpbmdGaWVsZHMuam9pbignLCAnKSxcclxuICAgICAgICAnXFxuUmF3IGRhdGEgc2FtcGxlOicsXHJcbiAgICAgICAgc2FmZVN0cmluZ2lmeShyYXdPYmopPy5zdWJzdHJpbmcoMCwgNTAwKSArICcuLi4nXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChvcmlnaW5GbGFncy5tYXBwZWRMZWdhY3kpIHtcclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcclxuICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICdbTWV0cmljc0d1YXJkXSBVc2luZyBsZWdhY3kgbWV0cmljcyBzdHJ1Y3R1cmUgKGNhY2hlX3BlcmZvcm1hbmNlL2FwaV9wZXJmb3JtYW5jZSknLFxyXG4gICAgICAgICdDb25zaWRlciBtaWdyYXRpbmcgdG8gY2Fub25pY2FsIHN0cnVjdHVyZSAoY2FjaGUvYXBpKSdcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEJ1aWxkIG5vcm1hbGl6ZWQgbWV0cmljcyBvYmplY3RcclxuICBjb25zdCBub3JtYWxpemVkOiBNZXRyaWNzU2hhcGUgPSB7XHJcbiAgICBhcGk6IGFwaU1ldHJpY3MsXHJcbiAgICBjYWNoZTogY2FjaGVNZXRyaWNzLFxyXG4gICAgc3lzdGVtX2luZm86IHN5c3RlbU1ldHJpY3MsXHJcbiAgICB0aW1lc3RhbXBzOiB7XHJcbiAgICAgIHVwZGF0ZWRfYXQ6IHJhd09iai51cGRhdGVkX2F0ID8gU3RyaW5nKHJhd09iai51cGRhdGVkX2F0KSA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgIH0sXHJcbiAgICBvcmlnaW5GbGFncyxcclxuICB9O1xyXG5cclxuICByZXR1cm4gbm9ybWFsaXplZDtcclxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSUEsc0JBQXNCLEdBQUcsS0FBSztBQTZCbEM7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsYUFBYSxHQUFJQyxHQUFZLElBQWE7RUFDOUMsSUFBSTtJQUNGLE9BQU9DLElBQUksQ0FBQ0MsU0FBUyxDQUFDRixHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztFQUNyQyxDQUFDLENBQUMsTUFBTTtJQUNOLE9BQU9HLE1BQU0sQ0FBQ0gsR0FBRyxDQUFDO0VBQ3BCO0FBQ0YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxNQUFNSSxjQUFjLEdBQUdBLENBQUNDLEtBQWMsRUFBRUMsUUFBZ0IsR0FBRyxDQUFDLEtBQWE7RUFDdkUsSUFBSSxPQUFPRCxLQUFLLEtBQUssUUFBUSxFQUFFO0lBQzdCO0lBQ0EsSUFBSSxDQUFDRSxRQUFRLENBQUNGLEtBQUssQ0FBQyxFQUFFO01B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