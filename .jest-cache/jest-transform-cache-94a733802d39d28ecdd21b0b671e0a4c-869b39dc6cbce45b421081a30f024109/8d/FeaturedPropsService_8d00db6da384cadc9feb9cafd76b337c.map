{"version":3,"names":["_DebugEnhancedDataManager","require","_EnhancedDataManager","_enhancedLogger","fetchBatchPredictions","props","propsForBackend","map","prop","_originalData","id","player","stat","line","overOdds","underOdds","confidence","sport","gameTime","pickType","batchRequest","endpoint","params","items","priority","results","enhancedDataManager","fetchBatch","batchResult","backendPredictions","Array","isArray","predictions","enhancedLogger","info","received","length","requested","enhancedProps","originalProp","index","backendPrediction","bp","error","warn","propId","enhancedProp","recommendation","quantum_confidence","quantumConfidence","neural_score","neuralScore","kelly_fraction","kellyFraction","expected_value","expectedValue","shap_explanation","shapExplanation","risk_assessment","riskAssessment","optimal_stake","optimalStake","enhancedCount","undefined","fetchFeaturedProps","marketType","options","useCache","realtime","statTypes","limit","offset","debug","fetchSportsProps","consolidate","count","enhancedError","debugProps","debugEnhancedDataManager","debugError","market_type","stat_types","join","data","fetchData","cache","ttl","responseData","mappedProps","mapToFeaturedProps","odds","fallbackProps","fallbackError","isConnectivityError","Error","message","includes","name","code","mockProps","matchup","Date","toISOString","fetchEnhancedPropAnalysis","fetchPropAnalysis","subscribeToPropsUpdates","callback","prefetch","subscribe","getDataManagerMetrics","getMetrics","clearPropsCache","clearCache","prefetchPropsData","patterns","pattern","prefetchData","rawData","item","it","String","player_name","away_team","home_team","event_name","stat_type","event_id","parseFloat","line_score","over_odds","value","under_odds","start_time","espnPlayerId","player_id","playerId"],"sources":["FeaturedPropsService.ts"],"sourcesContent":["/**\r\n * MLB Odds & AI Insights Mapping Logic (A1Betting7-13.2)\r\n * Enhanced with intelligent data management and real-time capabilities\r\n *\r\n * This file is responsible for fetching, mapping, and surfacing MLB odds and AI insights\r\n * in the frontend analytics table using the enhanced data manager.\r\n */\r\n\r\nimport { debugEnhancedDataManager } from '../DebugEnhancedDataManager';\r\nimport { enhancedDataManager } from '../EnhancedDataManager';\r\nimport { enhancedLogger } from '../../utils/enhancedLogger';\r\n\r\nexport interface FeaturedProp {\r\n  id: string;\r\n  player: string;\r\n  matchup: string;\r\n  stat: string;\r\n  line: number;\r\n  overOdds: number;\r\n  underOdds: number;\r\n  confidence: number;\r\n  sport: string;\r\n  gameTime: string;\r\n  pickType: string;\r\n  espnPlayerId?: string;\r\n  // Preserve original raw data for backend processing\r\n  _originalData?: Record<string, unknown>;\r\n}\r\n\r\n/**\r\n * Enhanced batch prediction using backend-side batching and intelligent caching\r\n */\r\nexport async function fetchBatchPredictions(props: FeaturedProp[]): Promise<FeaturedProp[]> {\r\n  try {\r\n    // Use original raw data for backend if available, otherwise convert props to backend format\r\n    const propsForBackend = props.map(prop => {\r\n      // If we have original data, use it (this preserves the exact format the backend expects)\r\n      if (prop._originalData) {\r\n        return prop._originalData;\r\n      }\r\n\r\n      // Fallback: convert FeaturedProp format to backend format\r\n      return {\r\n        id: prop.id,\r\n        player: prop.player,\r\n        stat: prop.stat,\r\n        line: prop.line,\r\n        overOdds: prop.overOdds,\r\n        underOdds: prop.underOdds,\r\n        confidence: prop.confidence,\r\n        sport: prop.sport,\r\n        gameTime: prop.gameTime,\r\n        pickType: prop.pickType,\r\n      };\r\n    });\r\n\r\n    // Create a single batch request for all props\r\n    const batchRequest = {\r\n      id: 'batch_predictions',\r\n      endpoint: '/api/unified/batch-predictions',\r\n      // The Unified fetchBatch expects params to be an object. Wrap array in an `items` field.\r\n      params: { items: propsForBackend } as Record<string, unknown>,\r\n      priority: 'high' as const,\r\n    };\r\n\r\n    // Process batch with intelligent caching\r\n  // Call fetchBatch with the correctly shaped params object\r\n  const results = await enhancedDataManager.fetchBatch([batchRequest]);\r\n\r\n    // Extract predictions from batch results\r\n    const batchResult = results['batch_predictions'];\r\n  let backendPredictions: unknown[] = [];\r\n\r\n    if (batchResult) {\r\n      // Handle backend response format: { predictions: [...], errors: [...] }\r\n      if (\r\n        typeof batchResult === 'object' &&\r\n        batchResult !== null &&\r\n        'predictions' in batchResult &&\r\n        Array.isArray((batchResult as Record<string, unknown>).predictions)\r\n      ) {\r\n        backendPredictions = (batchResult as Record<string, unknown>).predictions as unknown[];\r\n      } else if (Array.isArray(batchResult)) {\r\n        backendPredictions = batchResult;\r\n      } else if (typeof batchResult === 'object') {\r\n        backendPredictions = [batchResult];\r\n      }\r\n    }\r\n\r\n    enhancedLogger.info('FeaturedPropsService', 'fetchBatchPredictions', `Backend predictions received`, {\r\n      received: Array.isArray(backendPredictions) ? backendPredictions.length : 0,\r\n      requested: props.length,\r\n    });\r\n\r\n    // Transform backend predictions back to FeaturedProp format with enhanced data\r\n    const enhancedProps: FeaturedProp[] = props.map((originalProp, index) => {\r\n      const backendPrediction = backendPredictions[index];\r\n\r\n      const bp = backendPrediction as Record<string, any> | undefined;\r\n      if (!bp || bp.error) {\r\n        // If prediction failed, return original prop\r\n        enhancedLogger.warn('FeaturedPropsService', 'fetchBatchPredictions', `No prediction for prop`, { index, propId: originalProp.id });\r\n        return originalProp;\r\n      }\r\n\r\n      // Merge original prop structure with enhanced prediction data\r\n      const enhancedProp: FeaturedProp = {\r\n        ...originalProp,\r\n        // Update confidence from backend prediction\r\n  confidence: bp.confidence || originalProp.confidence,\r\n  // Add enhanced data as custom properties (will be available for enhanced analysis)\r\n  ...(bp.recommendation && { recommendation: bp.recommendation }),\r\n  ...(bp.quantum_confidence && { quantumConfidence: bp.quantum_confidence }),\r\n  ...(bp.neural_score && { neuralScore: bp.neural_score }),\r\n  ...(bp.kelly_fraction && { kellyFraction: bp.kelly_fraction }),\r\n  ...(bp.expected_value && { expectedValue: bp.expected_value }),\r\n  ...(bp.shap_explanation && { shapExplanation: bp.shap_explanation }),\r\n  ...(bp.risk_assessment && { riskAssessment: bp.risk_assessment }),\r\n  ...(bp.optimal_stake && { optimalStake: bp.optimal_stake }),\r\n      };\r\n\r\n      return enhancedProp;\r\n    });\r\n\r\n  enhancedLogger.info('FeaturedPropsService', 'fetchBatchPredictions', `Enhanced props created`, { enhancedCount: enhancedProps.length });\r\n\r\n    return enhancedProps;\r\n  } catch (error) {\r\n    enhancedLogger.error('FeaturedPropsService', 'fetchBatchPredictions', 'Batch predictions failed', undefined, error as Error);\r\n    // Return original props if batch enhancement fails\r\n    return props;\r\n  }\r\n}\r\n\r\n/**\r\n * Enhanced props fetching with intelligent caching and real-time updates\r\n */\r\nexport async function fetchFeaturedProps(\r\n  sport?: string,\r\n  marketType?: string,\r\n  options: {\r\n    useCache?: boolean;\r\n    realtime?: boolean;\r\n    priority?: 'high' | 'normal' | 'low';\r\n    statTypes?: string[]; // Add stat types filtering\r\n    limit?: number; // Add pagination support\r\n    offset?: number;\r\n  } = {}\r\n): Promise<FeaturedProp[]> {\r\n  const {\r\n    useCache = true,\r\n    realtime = false,\r\n    priority = 'high',\r\n    statTypes,\r\n    limit = 50,\r\n    offset = 0,\r\n  } = options;\r\n\r\n  try {\r\n    if (sport === 'MLB') {\r\n  enhancedLogger.info('FeaturedPropsService', 'fetchFeaturedProps', `Fetching ${sport} props with enhanced data manager`);\r\n\r\n      try {\r\n        // Try to use enhanced data manager for optimized MLB data fetching\r\n        enhancedLogger.debug('FeaturedPropsService', 'fetchFeaturedProps', 'Calling enhancedDataManager.fetchSportsProps with params', {\r\n          sport,\r\n          marketType: marketType || 'player',\r\n          statTypes,\r\n          limit,\r\n          offset,\r\n          useCache,\r\n          realtime,\r\n        });\r\n\r\n        const props = await enhancedDataManager.fetchSportsProps(sport, marketType || 'player', {\r\n          useCache, // Re-enable caching now that testing is complete\r\n          realtime,\r\n          consolidate: true, // Enable smart consolidation\r\n          statTypes, // Pass statTypes for filtering\r\n          limit, // Pass limit for pagination\r\n          offset, // Pass offset for pagination\r\n        });\r\n\r\n  enhancedLogger.info('FeaturedPropsService', 'fetchFeaturedProps', `Enhanced fetch completed: ${props.length} props`, { count: props.length });\r\n        return props;\r\n      } catch (enhancedError) {\r\n  enhancedLogger.warn('FeaturedPropsService', 'fetchFeaturedProps', 'Enhanced manager failed, trying debug manager', undefined, enhancedError as Error);\r\n\r\n        // Try debug manager as second fallback\r\n        try {\r\n          enhancedLogger.debug('FeaturedPropsService', 'fetchFeaturedProps', 'Trying debug manager...');\r\n          const debugProps = await debugEnhancedDataManager.fetchSportsProps(\r\n            sport,\r\n            marketType || 'player',\r\n            {\r\n              statTypes,\r\n              limit,\r\n              offset,\r\n            }\r\n          );\r\n          enhancedLogger.info('FeaturedPropsService', 'fetchFeaturedProps', `Debug manager succeeded: ${debugProps.length} props`, { count: debugProps.length });\r\n          return debugProps;\r\n        } catch (debugError) {\r\n          enhancedLogger.warn('FeaturedPropsService', 'fetchFeaturedProps', 'Debug manager also failed, falling back to direct API', undefined, debugError as Error);\r\n        }\r\n\r\n        // Fallback to direct API call with absolute URL\r\n        const endpoint = `http://localhost:8000/mlb/odds-comparison/`;\r\n        const params = {\r\n          market_type: marketType === 'player' ? 'playerprops' : 'regular',\r\n          ...(statTypes && statTypes.length > 0 && { stat_types: statTypes.join(',') }),\r\n          limit,\r\n          offset,\r\n        };\r\n\r\n        const data = await enhancedDataManager.fetchData(endpoint, params, {\r\n          cache: useCache,\r\n          ttl: 300000, // 5 minutes\r\n          priority,\r\n        });\r\n\r\n        // Map to FeaturedProp interface\r\n  const responseData = data as unknown;\r\n  const mappedProps = mapToFeaturedProps(((responseData as Record<string, unknown>)?.odds as unknown[]) || [], sport);\r\n  enhancedLogger.info('FeaturedPropsService', 'fetchFeaturedProps', `Fallback fetch completed: ${mappedProps.length} props`, { count: mappedProps.length });\r\n        return mappedProps;\r\n      }\r\n    } else {\r\n      // Fallback for other sports using enhanced data manager with absolute URL\r\n      const endpoint = `http://localhost:8000/api/props/${sport || 'general'}`;\r\n      const params = {\r\n        market_type: marketType === 'player' ? 'playerprops' : 'regular',\r\n      };\r\n\r\n      const data = await enhancedDataManager.fetchData(endpoint, params, {\r\n        cache: useCache,\r\n        ttl: 300000, // 5 minutes\r\n        priority,\r\n      });\r\n\r\n      // Map to FeaturedProp interface\r\n      return mapToFeaturedProps(Array.isArray(data) ? data : [], sport);\r\n    }\r\n  } catch (error) {\r\n  enhancedLogger.error('FeaturedPropsService', 'fetchFeaturedProps', `Failed to fetch ${sport || 'general'} props`, undefined, error as Error);\r\n\r\n    // Try to get cached data as fallback\r\n    if (useCache) {\r\n      try {\r\n        const fallbackProps = await enhancedDataManager.fetchSportsProps(\r\n          sport || 'general',\r\n          marketType || 'player',\r\n          { useCache: true, realtime: false }\r\n        );\r\n\r\n  enhancedLogger.warn('FeaturedPropsService', 'fetchFeaturedProps', `Using fallback cached data: ${fallbackProps.length} props`);\r\n        return fallbackProps;\r\n      } catch (fallbackError) {\r\n  enhancedLogger.error('FeaturedPropsService', 'fetchFeaturedProps', 'Fallback also failed', undefined, fallbackError as Error);\r\n      }\r\n    }\r\n\r\n    // Check if this is a connectivity issue (including axios errors)\r\n    const isConnectivityError =\r\n      error instanceof Error &&\r\n      (error.message.includes('Failed to fetch') ||\r\n        error.message.includes('Network Error') ||\r\n        error.message.includes('timeout') ||\r\n        error.message.includes('signal timed out') ||\r\n        error.name === 'NetworkError' ||\r\n  ((error as unknown) as Record<string, unknown>).code === 'ERR_NETWORK');\r\n\r\n    if (isConnectivityError) {\r\n  enhancedLogger.warn('FeaturedPropsService', 'fetchFeaturedProps', `Backend unavailable for ${sport} - using mock data`);\r\n\r\n      // Return mock data when backend is unavailable\r\n      const mockProps: FeaturedProp[] = [\r\n        {\r\n          id: 'mock-aaron-judge-hr',\r\n          player: 'Aaron Judge',\r\n          matchup: 'Yankees vs Red Sox',\r\n          stat: 'Home Runs',\r\n          line: 1.5,\r\n          overOdds: 120,\r\n          underOdds: -110,\r\n          confidence: 85,\r\n          sport: sport || 'MLB',\r\n          gameTime: new Date().toISOString(),\r\n          pickType: 'over',\r\n        },\r\n        {\r\n          id: 'mock-mike-trout-hits',\r\n          player: 'Mike Trout',\r\n          matchup: 'Angels vs Astros',\r\n          stat: 'Hits',\r\n          line: 1.5,\r\n          overOdds: -105,\r\n          underOdds: -115,\r\n          confidence: 78,\r\n          sport: sport || 'MLB',\r\n          gameTime: new Date().toISOString(),\r\n          pickType: 'over',\r\n        },\r\n        {\r\n          id: 'mock-mookie-betts-rbis',\r\n          player: 'Mookie Betts',\r\n          matchup: 'Dodgers vs Giants',\r\n          stat: 'RBIs',\r\n          line: 0.5,\r\n          overOdds: 110,\r\n          underOdds: -130,\r\n          confidence: 82,\r\n          sport: sport || 'MLB',\r\n          gameTime: new Date().toISOString(),\r\n          pickType: 'over',\r\n        },\r\n      ];\r\n\r\n      return mockProps;\r\n    }\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Enhanced prop analysis fetching with intelligent caching\r\n */\r\nexport async function fetchEnhancedPropAnalysis(\r\n  propId: string,\r\n  player: string,\r\n  stat: string,\r\n  options: {\r\n    useCache?: boolean;\r\n    priority?: 'high' | 'normal' | 'low';\r\n  } = {}\r\n): Promise<unknown> {\r\n  const { useCache = true, priority = 'normal' } = options;\r\n\r\n  try {\r\n    return await enhancedDataManager.fetchPropAnalysis(propId, player, stat, {\r\n      useCache,\r\n      priority,\r\n    });\r\n  } catch (error) {\r\n    enhancedLogger.error('FeaturedPropsService', 'fetchEnhancedPropAnalysis', `Enhanced analysis failed for ${player} ${stat}`, undefined, error as Error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Subscribe to real-time prop updates\r\n */\r\nexport function subscribeToPropsUpdates(\r\n  sport: string,\r\n  callback: (props: FeaturedProp[]) => void,\r\n  options: {\r\n    marketType?: string;\r\n    prefetch?: boolean;\r\n  } = {}\r\n): () => void {\r\n  const { marketType = 'player', prefetch = true } = options;\r\n\r\n  return enhancedDataManager.subscribe(\r\n    `sports:${sport}:${marketType}`,\r\n    data => {\r\n      // Transform real-time data to FeaturedProp format\r\n      const props = mapToFeaturedProps(Array.isArray(data) ? data : [data], sport);\r\n      callback(props);\r\n    },\r\n    {\r\n      realtime: true,\r\n      prefetch,\r\n      priority: 'high',\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Get data manager performance metrics\r\n */\r\nexport function getDataManagerMetrics() {\r\n  return enhancedDataManager.getMetrics();\r\n}\r\n\r\n/**\r\n * Clear all cached data\r\n */\r\nexport function clearPropsCache(): void {\r\n  enhancedDataManager.clearCache();\r\n}\r\n\r\n/**\r\n * Prefetch likely needed data based on user patterns\r\n */\r\nexport async function prefetchPropsData(sport: string, patterns: string[] = []): Promise<void> {\r\n  for (const pattern of patterns) {\r\n    await enhancedDataManager.prefetchData(`${sport}:${pattern}`);\r\n  }\r\n}\r\n\r\n// Helper function to map raw data to FeaturedProp interface\r\nfunction mapToFeaturedProps(rawData: unknown[], sport?: string): FeaturedProp[] {\r\n  return rawData.map(item => {\r\n    const it = (item as Record<string, unknown>) || {};\r\n    // Handle MLB odds data structure\r\n    const player = String(it.player ?? it.player_name ?? it.away_team ?? it.home_team ?? 'Unknown');\r\n    const matchup = String(\r\n      it.matchup ?? it.event_name ?? `${String(it.away_team ?? 'Team A')} vs ${String(it.home_team ?? 'Team B')}`\r\n    );\r\n    const stat = String(it.stat ?? it.stat_type ?? it.market_type ?? 'Unknown');\r\n\r\n    const id = String(it.id ?? it.event_id ?? `${player}-${stat}`);\r\n\r\n    return {\r\n      id,\r\n      player,\r\n      matchup,\r\n      stat,\r\n      line: parseFloat(String(it.line ?? it.line_score ?? 0)),\r\n      overOdds: parseFloat(String(it.overOdds ?? it.over_odds ?? it.value ?? 0)),\r\n      underOdds: parseFloat(String(it.underOdds ?? it.under_odds ?? it.value ?? 0)),\r\n      confidence: parseFloat(String(it.confidence ?? 75)), // Default confidence for real games\r\n      sport: String(sport ?? it.sport ?? 'MLB'), // Use passed sport parameter first\r\n      gameTime: String(it.gameTime ?? it.start_time ?? new Date().toISOString()),\r\n      pickType: String(it.pickType ?? stat ?? 'prop'),\r\n      // Important: This is the player_id field from the MLB API that powers the headshot URLs\r\n      // The headshots are loaded from: https://midfield.mlbstatic.com/v1/people/{player_id}/spots/120\r\n      espnPlayerId:\r\n        typeof (it.espnPlayerId ?? it.player_id ?? it.playerId) === 'string'\r\n          ? ((it.espnPlayerId ?? it.player_id ?? it.playerId) as string)\r\n          : undefined,\r\n      // Preserve original raw data for backend processing\r\n      _originalData: it as Record<string, unknown>,\r\n    };\r\n  });\r\n}\r\n"],"mappings":"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","ignoreList":[]}