{"version":3,"names":["mockEnv","exports","VITE_WS_URL","undefined","DEV","setMockEnv","env","jest","process","NODE_ENV","getOrPersistClientId","storageKey","passedClientId","clientId","storedClientId","window","localStorage","getItem","global","initialFromStorage","Math","random","toString","substr","setItem","console","log","passedIn","finalClientId","resolveWebSocketBase","baseUrl","includes","warn","replace","protocol","host","port","buildWebSocketUrl","options","providedClientId","role","version","providedBaseUrl","url","URL","searchParams","set","String","result","error","stack","Error","params","URLSearchParams","fallbackUrl","validateWebSocketUrl"],"sources":["websocketBuilder.mock.ts"],"sourcesContent":["/**\r\n * Mock websocket builder for Jest tests\r\n */\r\n\r\ninterface WebSocketUrlOptions {\r\n  clientId?: string;\r\n  role?: string;\r\n  version?: number;\r\n  baseUrl?: string;\r\n}\r\n\r\n// Mock environment for testing\r\nlet mockEnv = {\r\n  VITE_WS_URL: undefined as string | undefined,\r\n  DEV: true\r\n};\r\n\r\n// Test helper to set mock environment\r\nexport function setMockEnv(env: Partial<typeof mockEnv>) {\r\n  mockEnv = { ...mockEnv, ...env };\r\n  // Ensure DEV is always true in test environment\r\n  if (typeof jest !== 'undefined' || process.env.NODE_ENV === 'test') {\r\n    mockEnv.DEV = true;\r\n  }\r\n}\r\n\r\n// Export mockEnv for testing\r\nexport { mockEnv };\r\n\r\nexport function getOrPersistClientId(storageKey = 'ws_client_id', passedClientId?: string): string {\r\n  let clientId = passedClientId;\r\n  \r\n  // Try to get from storage first - check both window and global\r\n  let storedClientId: string | null = null;\r\n  try {\r\n    if (typeof window !== 'undefined' && window.localStorage) {\r\n      storedClientId = window.localStorage.getItem(storageKey);\r\n    } else if (typeof global !== 'undefined' && global.localStorage) {\r\n      storedClientId = global.localStorage.getItem(storageKey);\r\n    }\r\n  } catch {\r\n    // Storage access failed, continue without it\r\n  }\r\n  \r\n  const initialFromStorage = !!storedClientId;\r\n  \r\n  if (!clientId && storedClientId) {\r\n    clientId = storedClientId;\r\n  }\r\n  \r\n  // Generate new one if none available\r\n  if (!clientId) {\r\n    clientId = `client_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n  \r\n  // Always persist to storage\r\n  try {\r\n    if (typeof window !== 'undefined' && window.localStorage) {\r\n      window.localStorage.setItem(storageKey, clientId);\r\n    } else if (typeof global !== 'undefined' && global.localStorage) {\r\n      global.localStorage.setItem(storageKey, clientId);\r\n    }\r\n  } catch {\r\n    // Storage access failed, continue without persistence\r\n  }\r\n  \r\n  // Dev-only diagnostic log\r\n  if (mockEnv.DEV) {\r\n    // eslint-disable-next-line no-console\r\n    console.log('[ClientIdDiag]', {\r\n      initialFromStorage,\r\n      passedIn: !!passedClientId,\r\n      finalClientId: clientId\r\n    });\r\n  }\r\n  \r\n  return clientId;\r\n}\r\n\r\nexport function resolveWebSocketBase(): string {\r\n  let baseUrl = mockEnv.VITE_WS_URL;\r\n  \r\n  // Check for legacy path in environment and sanitize\r\n  if (baseUrl && baseUrl.includes('client_/')) {\r\n    // eslint-disable-next-line no-console\r\n    console.warn('[EnvDiag][LegacyInEnv] Legacy WebSocket path detected in environment, sanitizing:', baseUrl);\r\n    baseUrl = baseUrl.replace(/\\/ws\\/client_.*$/, '').replace(/\\/client_\\/ws.*$/, '');\r\n  }\r\n  \r\n  // Default fallback\r\n  if (!baseUrl) {\r\n    const protocol = 'ws:';\r\n    const host = 'localhost';\r\n    const port = '8000';\r\n    baseUrl = `${protocol}//${host}:${port}`;\r\n  }\r\n  \r\n  return baseUrl;\r\n}\r\n\r\nexport function buildWebSocketUrl(options: WebSocketUrlOptions = {}): string {\r\n  const {\r\n    clientId: providedClientId,\r\n    role = 'frontend',\r\n    version = 1,\r\n    baseUrl: providedBaseUrl\r\n  } = options;\r\n  \r\n  // Resolve base URL\r\n  const baseUrl = providedBaseUrl || resolveWebSocketBase();\r\n  \r\n  // Get or generate client ID\r\n  const clientId = getOrPersistClientId('ws_client_id', providedClientId);\r\n  \r\n  try {\r\n    // Use URL constructor for robust path building\r\n    const url = new URL('/ws/client', baseUrl);\r\n    url.searchParams.set('client_id', clientId);\r\n    url.searchParams.set('version', String(version));\r\n    url.searchParams.set('role', role);\r\n    \r\n    const result = url.toString();\r\n    \r\n    // Defensive assertion - dev only\r\n    if (mockEnv.DEV) {\r\n      if (result.includes('client_/ws')) {\r\n        // eslint-disable-next-line no-console\r\n        console.error('[WSBuildDiag][LegacyDetected]', { \r\n          url: result, \r\n          stack: new Error().stack \r\n        });\r\n        throw new Error('Legacy websocket path constructed after migration');\r\n      }\r\n      \r\n      // eslint-disable-next-line no-console\r\n      console.log('[WSBuildDiag] Built canonical WebSocket URL:', result);\r\n    }\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    // Fallback with defensive assertion\r\n    const params = new URLSearchParams();\r\n    params.set('client_id', clientId);\r\n    params.set('version', String(version));\r\n    params.set('role', role);\r\n    \r\n    const fallbackUrl = `${baseUrl}/ws/client?${params.toString()}`;\r\n    \r\n    // Defensive assertion on fallback too\r\n    if (mockEnv.DEV && fallbackUrl.includes('client_/ws')) {\r\n      // eslint-disable-next-line no-console\r\n      console.error('[WSBuildDiag][LegacyDetected] Even fallback created legacy path!', { \r\n        url: fallbackUrl, \r\n        error,\r\n        stack: new Error().stack \r\n      });\r\n      throw new Error('Legacy websocket path constructed in fallback after migration');\r\n    }\r\n    \r\n    if (mockEnv.DEV) {\r\n      // eslint-disable-next-line no-console\r\n      console.warn('[WSBuildDiag] URL constructor failed, using fallback:', fallbackUrl, error);\r\n    }\r\n    \r\n    return fallbackUrl;\r\n  }\r\n}\r\n\r\nexport function validateWebSocketUrl(url: string): boolean {\r\n  return !url.includes('client_/ws');\r\n}"],"mappings":"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","ignoreList":[]}