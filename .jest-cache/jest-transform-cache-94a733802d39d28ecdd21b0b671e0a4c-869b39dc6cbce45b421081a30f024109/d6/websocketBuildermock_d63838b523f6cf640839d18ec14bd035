4f8725a78c9c8a102e3275fdbd527af5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildWebSocketUrl = buildWebSocketUrl;
exports.getOrPersistClientId = getOrPersistClientId;
exports.mockEnv = void 0;
exports.resolveWebSocketBase = resolveWebSocketBase;
exports.setMockEnv = setMockEnv;
exports.validateWebSocketUrl = validateWebSocketUrl;
/**
 * Mock websocket builder for Jest tests
 */

// Mock environment for testing
let mockEnv = exports.mockEnv = {
  VITE_WS_URL: undefined,
  DEV: true
};

// Test helper to set mock environment
function setMockEnv(env) {
  exports.mockEnv = mockEnv = {
    ...mockEnv,
    ...env
  };
  // Ensure DEV is always true in test environment
  if (typeof jest !== 'undefined' || process.env.NODE_ENV === 'test') {
    mockEnv.DEV = true;
  }
}

// Export mockEnv for testing

function getOrPersistClientId(storageKey = 'ws_client_id', passedClientId) {
  let clientId = passedClientId;

  // Try to get from storage first - check both window and global
  let storedClientId = null;
  try {
    if (typeof window !== 'undefined' && window.localStorage) {
      storedClientId = window.localStorage.getItem(storageKey);
    } else if (typeof global !== 'undefined' && global.localStorage) {
      storedClientId = global.localStorage.getItem(storageKey);
    }
  } catch {
    // Storage access failed, continue without it
  }
  const initialFromStorage = !!storedClientId;
  if (!clientId && storedClientId) {
    clientId = storedClientId;
  }

  // Generate new one if none available
  if (!clientId) {
    clientId = `client_${Math.random().toString(36).substr(2, 9)}`;
  }

  // Always persist to storage
  try {
    if (typeof window !== 'undefined' && window.localStorage) {
      window.localStorage.setItem(storageKey, clientId);
    } else if (typeof global !== 'undefined' && global.localStorage) {
      global.localStorage.setItem(storageKey, clientId);
    }
  } catch {
    // Storage access failed, continue without persistence
  }

  // Dev-only diagnostic log
  if (mockEnv.DEV) {
    // eslint-disable-next-line no-console
    console.log('[ClientIdDiag]', {
      initialFromStorage,
      passedIn: !!passedClientId,
      finalClientId: clientId
    });
  }
  return clientId;
}
function resolveWebSocketBase() {
  let baseUrl = mockEnv.VITE_WS_URL;

  // Check for legacy path in environment and sanitize
  if (baseUrl && baseUrl.includes('client_/')) {
    // eslint-disable-next-line no-console
    console.warn('[EnvDiag][LegacyInEnv] Legacy WebSocket path detected in environment, sanitizing:', baseUrl);
    baseUrl = baseUrl.replace(/\/ws\/client_.*$/, '').replace(/\/client_\/ws.*$/, '');
  }

  // Default fallback
  if (!baseUrl) {
    const protocol = 'ws:';
    const host = 'localhost';
    const port = '8000';
    baseUrl = `${protocol}//${host}:${port}`;
  }
  return baseUrl;
}
function buildWebSocketUrl(options = {}) {
  const {
    clientId: providedClientId,
    role = 'frontend',
    version = 1,
    baseUrl: providedBaseUrl
  } = options;

  // Resolve base URL
  const baseUrl = providedBaseUrl || resolveWebSocketBase();

  // Get or generate client ID
  const clientId = getOrPersistClientId('ws_client_id', providedClientId);
  try {
    // Use URL constructor for robust path building
    const url = new URL('/ws/client', baseUrl);
    url.searchParams.set('client_id', clientId);
    url.searchParams.set('version', String(version));
    url.searchParams.set('role', role);
    const result = url.toString();

    // Defensive assertion - dev only
    if (mockEnv.DEV) {
      if (result.includes('client_/ws')) {
        // eslint-disable-next-line no-console
        console.error('[WSBuildDiag][LegacyDetected]', {
          url: result,
          stack: new Error().stack
        });
        throw new Error('Legacy websocket path constructed after migration');
      }

      // eslint-disable-next-line no-console
      console.log('[WSBuildDiag] Built canonical WebSocket URL:', result);
    }
    return result;
  } catch (error) {
    // Fallback with defensive assertion
    const params = new URLSearchParams();
    params.set('client_id', clientId);
    params.set('version', String(version));
    params.set('role', role);
    const fallbackUrl = `${baseUrl}/ws/client?${params.toString()}`;

    // Defensive assertion on fallback too
    if (mockEnv.DEV && fallbackUrl.includes('client_/ws')) {
      // eslint-disable-next-line no-console
      console.error('[WSBuildDiag][LegacyDetected] Even fallback created legacy path!', {
        url: fallbackUrl,
        error,
        stack: new Error().stack
      });
      throw new Error('Legacy websocket path constructed in fallback after migration');
    }
    if (mockEnv.DEV) {
      // eslint-disable-next-line no-console
      console.warn('[WSBuildDiag] URL constructor failed, using fallback:', fallbackUrl, error);
    }
    return fallbackUrl;
  }
}
function validateWebSocketUrl(url) {
  return !url.includes('client_/ws');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,