22b50cdbf99b53524dea84e721500162
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _axios = _interopRequireDefault(require("axios"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const ApiHealthIndicator = () => {
  const [status, setStatus] = (0, _react.useState)('checking');
  (0, _react.useEffect)(() => {
    _axios.default.get('/api/v2/health').then(() => setStatus('ok')).catch(() => setStatus('down'));
  }, []);
  let color = 'gray';
  let text = 'Checking...';
  if (status === 'ok') {
    color = 'green';
    text = 'API Online';
  } else if (status === 'down') {
    color = 'red';
    text = 'API Down';
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
    "data-testid": "api-health-indicator",
    className: `inline-flex items-center px-2 py-1 rounded text-xs font-semibold bg-${color}-100 text-${color}-700`,
    title: "Backend API health",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
      className: `w-2 h-2 rounded-full bg-${color}-500 mr-2 inline-block`
    }), text]
  });
};
var _default = exports.default = ApiHealthIndicator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfYXhpb3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJBcGlIZWFsdGhJbmRpY2F0b3IiLCJzdGF0dXMiLCJzZXRTdGF0dXMiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsImF4aW9zIiwidGhlbiIsImNhdGNoIiwiY29sb3IiLCJ0ZXh0IiwianN4cyIsImNsYXNzTmFtZSIsInRpdGxlIiwiY2hpbGRyZW4iLCJqc3giLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJBcGlIZWFsdGhJbmRpY2F0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcblxyXG5jb25zdCBBcGlIZWFsdGhJbmRpY2F0b3IgPSAoKSA9PiB7XHJcbiAgY29uc3QgW3N0YXR1cywgc2V0U3RhdHVzXSA9IHVzZVN0YXRlPCdjaGVja2luZycgfCAnb2snIHwgJ2Rvd24nPignY2hlY2tpbmcnKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGF4aW9zXHJcbiAgICAgIC5nZXQoJy9hcGkvdjIvaGVhbHRoJylcclxuICAgICAgLnRoZW4oKCkgPT4gc2V0U3RhdHVzKCdvaycpKVxyXG4gICAgICAuY2F0Y2goKCkgPT4gc2V0U3RhdHVzKCdkb3duJykpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgbGV0IGNvbG9yID0gJ2dyYXknO1xyXG4gIGxldCB0ZXh0ID0gJ0NoZWNraW5nLi4uJztcclxuICBpZiAoc3RhdHVzID09PSAnb2snKSB7XHJcbiAgICBjb2xvciA9ICdncmVlbic7XHJcbiAgICB0ZXh0ID0gJ0FQSSBPbmxpbmUnO1xyXG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSAnZG93bicpIHtcclxuICAgIGNvbG9yID0gJ3JlZCc7XHJcbiAgICB0ZXh0ID0gJ0FQSSBEb3duJztcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8c3BhblxyXG4gICAgICBkYXRhLXRlc3RpZD0nYXBpLWhlYWx0aC1pbmRpY2F0b3InXHJcbiAgICAgIGNsYXNzTmFtZT17YGlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBweC0yIHB5LTEgcm91bmRlZCB0ZXh0LXhzIGZvbnQtc2VtaWJvbGQgYmctJHtjb2xvcn0tMTAwIHRleHQtJHtjb2xvcn0tNzAwYH1cclxuICAgICAgdGl0bGU9J0JhY2tlbmQgQVBJIGhlYWx0aCdcclxuICAgID5cclxuICAgICAgPHNwYW4gY2xhc3NOYW1lPXtgdy0yIGgtMiByb3VuZGVkLWZ1bGwgYmctJHtjb2xvcn0tNTAwIG1yLTIgaW5saW5lLWJsb2NrYH0+PC9zcGFuPlxyXG4gICAgICB7dGV4dH1cclxuICAgIDwvc3Bhbj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXBpSGVhbHRoSW5kaWNhdG9yO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFBMEIsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBQUEsU0FBQUQsd0JBQUFLLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFQLHVCQUFBLFlBQUFBLENBQUFL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