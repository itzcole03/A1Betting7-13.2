3626d23f849b23da38bbb8685fd12412
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _UnifiedDataService = require("./unified/UnifiedDataService");
var _enhancedLogger = require("../utils/enhancedLogger");
var _DataPipelineStabilityMonitor;
class DataPipelineStabilityMonitor {
  constructor() {
    this.metrics = new Map();
    this.isMonitoring = false;
    this.monitoringInterval = null;
    this.DEFAULT_THRESHOLDS = {
      maxResponseTime: 5000,
      // 5 seconds
      maxErrorRate: 0.1,
      // 10%
      minSuccessRate: 0.9,
      // 90%
      minCacheHitRate: 0.7 // 70%
    };
  }
  static getInstance() {
    if (!DataPipelineStabilityMonitor.instance) {
      DataPipelineStabilityMonitor.instance = new DataPipelineStabilityMonitor();
    }
    return DataPipelineStabilityMonitor.instance;
  }
  async startMonitoring(intervalMs = 60000) {
    if (this.isMonitoring) {
      _enhancedLogger.enhancedLogger.warn('DataPipelineStabilityMonitor', 'startMonitoring', 'Data pipeline monitoring is already running');
      return;
    }
    this.isMonitoring = true;
    _enhancedLogger.enhancedLogger.info('DataPipelineStabilityMonitor', 'startMonitoring', 'Starting data pipeline stability monitoring...');

    // Initial health check
    await this.performHealthChecks();

    // Set up periodic monitoring
    this.monitoringInterval = setInterval(async () => {
      try {
        await this.performHealthChecks();
      } catch (error) {
        _enhancedLogger.enhancedLogger.error('DataPipelineStabilityMonitor', 'monitorInterval', 'Error during health check', undefined, error);
      }
    }, intervalMs);
  }
  stopMonitoring() {
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      this.monitoringInterval = null;
    }
    this.isMonitoring = false;
    _enhancedLogger.enhancedLogger.info('DataPipelineStabilityMonitor', 'stopMonitoring', 'Data pipeline monitoring stopped');
  }
  async performHealthChecks() {
    const services = [{
      name: 'UnifiedDataService',
      service: _UnifiedDataService.UnifiedDataService.getInstance()
    }];
    const healthCheckPromises = services.map(({
      name,
      service
    }) => this.checkServiceHealth(name, service));
    await Promise.allSettled(healthCheckPromises);
    this.analyzeAndAlert();
  }
  async checkServiceHealth(serviceName, service) {
    const startTime = Date.now();
    let result;
    try {
      // Perform a lightweight health check based on service type
      if (serviceName === 'UnifiedDataService') {
        result = await this.healthCheckUnifiedDataService(service);
      } else {
        result = {
          success: false,
          responseTime: 0,
          error: 'Unknown service'
        };
      }
    } catch (error) {
      result = {
        success: false,
        responseTime: Date.now() - startTime,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
    this.updateMetrics(serviceName, result);
  }
  async healthCheckUnifiedDataService(service) {
    const startTime = Date.now();
    try {
      // Test basic functionality that was fixed in the constructor
      const testCacheKey = 'health-check-test';
      const testData = {
        test: true,
        timestamp: Date.now()
      };

      // Test cache operations (this validates the constructor fix)
      const svc = service;
      if (typeof svc.cacheData !== 'function' || typeof svc.getCachedData !== 'function') {
        throw new Error('UnifiedDataService does not expose required cache methods');
      }
      await svc.cacheData(testCacheKey, testData, 1000);
      const cachedData = await svc.getCachedData(testCacheKey);
      const cachedObj = cachedData;
      if (!cachedObj || cachedObj['test'] !== true) {
        throw new Error('Cache operations failed');
      }
      return {
        success: true,
        responseTime: Date.now() - startTime
      };
    } catch (error) {
      return {
        success: false,
        responseTime: Date.now() - startTime,
        error: error instanceof Error ? error.message : 'Health check failed'
      };
    }
  }
  updateMetrics(serviceName, result) {
    const existing = this.metrics.get(serviceName);
    const now = new Date();
    if (!existing) {
      this.metrics.set(serviceName, {
        serviceName,
        responseTime: result.responseTime,
        errorRate: result.success ? 0 : 1,
        successRate: result.success ? 1 : 0,
        cacheHitRate: 0.8,
        // Default assumption
        lastHealthCheck: now,
        status: this.determineHealthStatus(result.responseTime, result.success ? 0 : 1, result.success ? 1 : 0),
        errors: result.error ? [result.error] : []
      });
      return;
    }

    // Calculate rolling averages (simple weighted average)
    const weight = 0.2; // 20% weight for new data
    existing.responseTime = existing.responseTime * (1 - weight) + result.responseTime * weight;
    existing.errorRate = existing.errorRate * (1 - weight) + (result.success ? 0 : 1) * weight;
    existing.successRate = existing.successRate * (1 - weight) + (result.success ? 1 : 0) * weight;
    existing.lastHealthCheck = now;
    existing.status = this.determineHealthStatus(existing.responseTime, existing.errorRate, existing.successRate);
    if (result.error) {
      existing.errors.push(result.error);
      // Keep only last 10 errors
      if (existing.errors.length > 10) {
        existing.errors = existing.errors.slice(-10);
      }
    }
  }
  determineHealthStatus(responseTime, errorRate, successRate) {
    const thresholds = this.DEFAULT_THRESHOLDS;
    if (errorRate > thresholds.maxErrorRate || successRate < thresholds.minSuccessRate) {
      return 'unhealthy';
    }
    if (responseTime > thresholds.maxResponseTime) {
      return 'degraded';
    }
    return 'healthy';
  }
  analyzeAndAlert() {
    const unhealthyServices = [];
    const degradedServices = [];
    this.metrics.forEach((metrics, serviceName) => {
      if (metrics.status === 'unhealthy') {
        unhealthyServices.push(serviceName);
      } else if (metrics.status === 'degraded') {
        degradedServices.push(serviceName);
      }
    });
    if (unhealthyServices.length > 0) {
      _enhancedLogger.enhancedLogger.error('DataPipelineStabilityMonitor', 'analyzeAndAlert', `🚨 CRITICAL: Unhealthy services detected: ${unhealthyServices.join(', ')}`);
      this.sendAlert('critical', `Unhealthy services: ${unhealthyServices.join(', ')}`);
    }
    if (degradedServices.length > 0) {
      _enhancedLogger.enhancedLogger.warn('DataPipelineStabilityMonitor', 'analyzeAndAlert', `⚠️ WARNING: Degraded services detected: ${degradedServices.join(', ')}`);
      this.sendAlert('warning', `Degraded services: ${degradedServices.join(', ')}`);
    }
    if (unhealthyServices.length === 0 && degradedServices.length === 0) {
      _enhancedLogger.enhancedLogger.info('DataPipelineStabilityMonitor', 'analyzeAndAlert', '✅ All data pipeline services are healthy');
    }
  }
  sendAlert(level, message) {
    // In a real implementation, this would integrate with alerting systems
    const timestamp = new Date().toISOString();
    const alertMessage = `[${level.toUpperCase()}] ${timestamp}: ${message}`;
    if (level === 'critical') {
      _enhancedLogger.enhancedLogger.error('DataPipelineStabilityMonitor', 'sendAlert', alertMessage);
    } else {
      _enhancedLogger.enhancedLogger.warn('DataPipelineStabilityMonitor', 'sendAlert', alertMessage);
    }

    // Store alert for dashboard display
    if (typeof window !== 'undefined' && window.localStorage) {
      const alerts = JSON.parse(localStorage.getItem('pipeline-alerts') || '[]');
      alerts.push({
        level,
        message,
        timestamp
      });

      // Keep only last 50 alerts
      if (alerts.length > 50) {
        alerts.splice(0, alerts.length - 50);
      }
      localStorage.setItem('pipeline-alerts', JSON.stringify(alerts));
    }
  }
  getHealthReport() {
    const report = {};
    this.metrics.forEach((metrics, serviceName) => {
      report[serviceName] = {
        ...metrics
      };
    });
    return report;
  }
  getOverallHealthStatus() {
    const statuses = Array.from(this.metrics.values()).map(m => m.status);
    if (statuses.includes('unhealthy')) {
      return 'unhealthy';
    }
    if (statuses.includes('degraded')) {
      return 'degraded';
    }
    return 'healthy';
  }
  isMonitoringActive() {
    return this.isMonitoring;
  }

  // Method to validate UnifiedDataService constructor fix specifically
  async validateUnifiedDataServiceFix() {
    try {
      const service = _UnifiedDataService.UnifiedDataService.getInstance();

      // Test that the service was properly initialized with the registry
      if (!service) {
        _enhancedLogger.enhancedLogger.error('DataPipelineStabilityMonitor', 'validateUnifiedDataServiceFix', 'UnifiedDataService instance not available');
        return false;
      }

      // Test cache operations that previously failed due to constructor issues
      const testKey = 'constructor-fix-validation';
      const testData = {
        validated: true,
        timestamp: Date.now()
      };
      await service.cacheData(testKey, testData, 5000);
      const retrieved = await service.getCachedData(testKey);
      if (!retrieved || retrieved['validated'] !== true) {
        _enhancedLogger.enhancedLogger.error('DataPipelineStabilityMonitor', 'validateUnifiedDataServiceFix', 'UnifiedDataService cache operations failed - constructor fix may not be working');
        return false;
      }
      _enhancedLogger.enhancedLogger.info('DataPipelineStabilityMonitor', 'validateUnifiedDataServiceFix', '✅ UnifiedDataService constructor fix validated successfully');
      return true;
    } catch (error) {
      _enhancedLogger.enhancedLogger.error('DataPipelineStabilityMonitor', 'validateUnifiedDataServiceFix', '❌ UnifiedDataService constructor fix validation failed', undefined, error);
      return false;
    }
  }
}
_DataPipelineStabilityMonitor = DataPipelineStabilityMonitor;
DataPipelineStabilityMonitor.instance = void 0;
var _default = exports.default = DataPipelineStabilityMonitor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,