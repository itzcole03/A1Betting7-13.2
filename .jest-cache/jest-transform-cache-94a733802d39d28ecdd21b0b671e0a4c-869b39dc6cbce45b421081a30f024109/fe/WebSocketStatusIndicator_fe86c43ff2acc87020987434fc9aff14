6c304d0ef58eef4a25006c074b5bbe6b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WebSocketStatusIndicator = void 0;
var _react = _interopRequireWildcard(require("react"));
var _WebSocketContext2 = require("../contexts/WebSocketContext");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const statusMap = {
  connecting: 'Connecting...',
  connected: 'Connected',
  disconnected: 'Disconnected',
  reconnecting: 'Reconnecting...'
};
const WebSocketStatusIndicator = () => {
  const ctx = (0, _react.useContext)(_WebSocketContext2._WebSocketContext);
  const status = ctx?.status || 'disconnected';
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    "data-testid": "websocket-status-indicator",
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "fixed top-2 right-2 z-50 px-3 py-1 rounded bg-slate-800 text-white text-xs shadow",
      "data-testid": `websocket-status-${statusMap[status].replace(/\s+/g, '-').toLowerCase()}`,
      children: ["WebSocket: ", statusMap[status]]
    })
  });
};
exports.WebSocketStatusIndicator = WebSocketStatusIndicator;
var _default = exports.default = WebSocketStatusIndicator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfV2ViU29ja2V0Q29udGV4dDIiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInN0YXR1c01hcCIsImNvbm5lY3RpbmciLCJjb25uZWN0ZWQiLCJkaXNjb25uZWN0ZWQiLCJyZWNvbm5lY3RpbmciLCJXZWJTb2NrZXRTdGF0dXNJbmRpY2F0b3IiLCJjdHgiLCJ1c2VDb250ZXh0IiwiX1dlYlNvY2tldENvbnRleHQiLCJzdGF0dXMiLCJqc3giLCJjaGlsZHJlbiIsImpzeHMiLCJjbGFzc05hbWUiLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJleHBvcnRzIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJXZWJTb2NrZXRTdGF0dXNJbmRpY2F0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge1xyXG4gIF9XZWJTb2NrZXRDb250ZXh0LFxyXG4gIFdlYlNvY2tldENvbnRleHRUeXBlLFxyXG4gIFdlYlNvY2tldFN0YXR1cyxcclxufSBmcm9tICcuLi9jb250ZXh0cy9XZWJTb2NrZXRDb250ZXh0JztcclxuXHJcbmNvbnN0IHN0YXR1c01hcDogUmVjb3JkPFdlYlNvY2tldFN0YXR1cywgc3RyaW5nPiA9IHtcclxuICBjb25uZWN0aW5nOiAnQ29ubmVjdGluZy4uLicsXHJcbiAgY29ubmVjdGVkOiAnQ29ubmVjdGVkJyxcclxuICBkaXNjb25uZWN0ZWQ6ICdEaXNjb25uZWN0ZWQnLFxyXG4gIHJlY29ubmVjdGluZzogJ1JlY29ubmVjdGluZy4uLicsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgV2ViU29ja2V0U3RhdHVzSW5kaWNhdG9yOiBSZWFjdC5GQyA9ICgpID0+IHtcclxuICBjb25zdCBjdHggPSB1c2VDb250ZXh0KF9XZWJTb2NrZXRDb250ZXh0KSBhcyBXZWJTb2NrZXRDb250ZXh0VHlwZSB8IHVuZGVmaW5lZDtcclxuICBjb25zdCBzdGF0dXM6IFdlYlNvY2tldFN0YXR1cyA9IGN0eD8uc3RhdHVzIHx8ICdkaXNjb25uZWN0ZWQnO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBkYXRhLXRlc3RpZD1cIndlYnNvY2tldC1zdGF0dXMtaW5kaWNhdG9yXCI+XHJcbiAgICAgIDxkaXZcclxuICAgICAgICBjbGFzc05hbWU9J2ZpeGVkIHRvcC0yIHJpZ2h0LTIgei01MCBweC0zIHB5LTEgcm91bmRlZCBiZy1zbGF0ZS04MDAgdGV4dC13aGl0ZSB0ZXh0LXhzIHNoYWRvdydcclxuICAgICAgICBkYXRhLXRlc3RpZD17YHdlYnNvY2tldC1zdGF0dXMtJHtzdGF0dXNNYXBbc3RhdHVzXS5yZXBsYWNlKC9cXHMrL2csICctJykudG9Mb3dlckNhc2UoKX1gfVxyXG4gICAgICA+XHJcbiAgICAgICAgV2ViU29ja2V0OiB7c3RhdHVzTWFwW3N0YXR1c119XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFdlYlNvY2tldFN0YXR1c0luZGljYXRvcjtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxrQkFBQSxHQUFBRCxPQUFBO0FBSXNDLElBQUFFLFdBQUEsR0FBQUYsT0FBQTtBQUFBLFNBQUFELHdCQUFBSSxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBTix1QkFBQSxZQUFBQSxDQUFBSSxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGdCQUFBUCxDQUFBLElBQUFELENBQUEsZ0JBQUFDLENBQUEsT0FBQWEsY0FBQSxDQUFBQyxJQUFBLENBQUFmLENBQUEsRUFBQUMsQ0FBQSxPQUFBTSxDQUFBLElBQUFELENBQUEsR0FBQVUsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQWxCLENBQUEsRUFBQUMsQ0FBQSxPQUFBTSxDQUFBLENBQUFLLEdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxHQUFBLElBQUFQLENBQUEsQ0FBQUUsQ0FBQSxFQUFBUCxDQUFBLEVBQUFNLENBQUEsSUFBQUMsQ0FBQSxDQUFBUCxDQUFBLElBQUFELENBQUEsQ0FBQUMsQ0FBQSxXQUFBTyxDQUFBLEtBQUFSLENBQUEsRUFBQUMsQ0FBQTtBQUV0QyxNQUFNa0IsU0FBMEMsR0FBRztFQUNqREMsVUFBVSxFQUFFLGVBQWU7RUFDM0JDLFNBQVMsRUFBRSxXQUFXO0VBQ3RCQyxZQUFZLEVBQUUsY0FBYztFQUM1QkMsWUFBWSxFQUFFO0FBQ2hCLENBQUM7QUFFTSxNQUFNQyx3QkFBa0MsR0FBR0EsQ0FBQSxLQUFNO0VBQ3RELE1BQU1DLEdBQUcsR0FBRyxJQUFBQyxpQkFBVSxFQUFDQyxvQ0FBaUIsQ0FBcUM7RUFDN0UsTUFBTUMsTUFBdUIsR0FBR0gsR0FBRyxFQUFFRyxNQUFNLElBQUksY0FBYztFQUU3RCxvQkFDRSxJQUFBN0IsV0FBQSxDQUFBOEIsR0FBQTtJQUFLLGVBQVksNEJBQTRCO0lBQUFDLFFBQUEsZUFDM0MsSUFBQS9CLFdBQUEsQ0FBQWdDLElBQUE7TUFDRUMsU0FBUyxFQUFDLG1GQUFtRjtNQUM3RixlQUFhLG9CQUFvQmIsU0FBUyxDQUFDUyxNQUFNLENBQUMsQ0FBQ0ssT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUMsRUFBRztNQUFBSixRQUFBLEdBQ3pGLGFBQ1ksRUFBQ1gsU0FBUyxDQUFDUyxNQUFNLENBQUM7SUFBQSxDQUMxQjtFQUFDLENBQ0gsQ0FBQztBQUVWLENBQUM7QUFBQ08sT0FBQSxDQUFBWCx3QkFBQSxHQUFBQSx3QkFBQTtBQUFBLElBQUFZLFFBQUEsR0FBQUQsT0FBQSxDQUFBekIsT0FBQSxHQUVhYyx3QkFBd0IiLCJpZ25vcmVMaXN0IjpbXX0=