import React, { useState, useMemo } from 'react';
import { Search, Heart, ChevronDown, ToggleLeft, ToggleRight, Filter, ArrowUpDown, TrendingUp, Star, Clock, DollarSign, Target, BarChart3 } from 'lucide-react';
import CheatsheetView from './CheatsheetView';

// Mock data structure matching the screenshot
interface Player {
  id: string;
  name: string;
  team: string;
  position: string;
  image?: string;
}

interface PropData {
  id: string;
  player: Player;
  prop: string;
  l10Avg: number;
  l5Avg: number;
  odds: number;
  streak: number;
  matchup: string;
  pfRating: number;
  teamColor: string;
  stats: {
    2024: number;
    2025: number;
    h2h: number;
    l5: number;
    l10: number;
    l20: number;
  };
  marketOdds: Array<{
    sportsbook: string;
    odds: number;
    isHighest?: boolean;
    isLowest?: boolean;
  }>;
  isFavorited: boolean;
  confidence: number;
  projectedValue: number;
  recentForm: string;
  injuryStatus?: string;
  weatherImpact?: string;
  lastUpdate: string;
}

interface PropFinderDashboardProps {
  data?: PropData[];
  loading?: boolean;
}

const PropFinderDashboard: React.FC<PropFinderDashboardProps> = ({ 
  data = [], 
  loading = false 
}) => {
  const [selectedTab, setSelectedTab] = useState<'over' | 'under'>('over');
  const [selectedPlayer, setSelectedPlayer] = useState('');
  const [selectedCategories, setSelectedCategories] = useState(17);
  const [selectedGames, setSelectedGames] = useState(1);
  const [showAllLines, setShowAllLines] = useState(false);
  const [sortBy, setSortBy] = useState<string>('pfRating');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
  const [activeView, setActiveView] = useState<'table' | 'cheatsheets'>('table');
  const [selectedSport, setSelectedSport] = useState('MLB');

  // Mock data for demonstration - matches Dansby Swanson from screenshot
  const mockData: PropData[] = useMemo(() => [
    {
      id: '1',
      player: {
        id: 'swanson-d',
        name: 'Dansby Swanson',
        team: 'CHC',
        position: 'SS',
      },
      prop: 'o0.5 Hits',
      l10Avg: 1.1,
      l5Avg: 0.6,
      odds: -180,
      streak: 1,
      matchup: 'vs RHP',
      pfRating: 82,
      teamColor: '#0E3386', // Cubs blue
      stats: {
        2024: 63,
        2025: 67,
        h2h: 63,
        l5: 60,
        l10: 80,
        l20: 65
      },
      marketOdds: [
        { sportsbook: 'FanDuel', odds: -180, isHighest: false },
        { sportsbook: 'DraftKings', odds: -175, isHighest: true },
        { sportsbook: 'BetMGM', odds: -185, isLowest: true },
      ],
      isFavorited: false,
      confidence: 82,
      projectedValue: 0.65,
      recentForm: 'W-L-W-W-L',
      injuryStatus: 'Healthy',
      lastUpdate: '2 mins ago'
    },
    {
      id: '2',
      player: {
        id: 'swanson-d',
        name: 'Dansby Swanson',
        team: 'CHC',
        position: 'SS',
      },
      prop: 'o0.5 Singles',
      l10Avg: 0.8,
      l5Avg: 0.2,
      odds: 100,
      streak: 0,
      matchup: 'vs RHP',
      pfRating: 72,
      teamColor: '#0E3386',
      stats: {
        2024: 46,
        2025: 53,
        h2h: 50,
        l5: 20,
        l10: 50,
        l20: 40
      },
      marketOdds: [
        { sportsbook: 'FanDuel', odds: 100, isHighest: true },
        { sportsbook: 'DraftKings', odds: 95, isLowest: true },
      ],
      isFavorited: false,
      confidence: 72,
      projectedValue: 0.45,
      recentForm: 'L-L-W-L-L',
      injuryStatus: 'Healthy',
      lastUpdate: '3 mins ago'
    },
    {
      id: '3',
      player: {
        id: 'swanson-d',
        name: 'Dansby Swanson',
        team: 'CHC',
        position: 'SS',
      },
      prop: 'o1.5 Total Bases',
      l10Avg: 1.6,
      l5Avg: 1.0,
      odds: 160,
      streak: 1,
      matchup: 'vs RHP',
      pfRating: 68,
      teamColor: '#0E3386',
      stats: {
        2024: 36,
        2025: 38,
        h2h: 38,
        l5: 40,
        l10: 50,
        l20: 35
      },
      marketOdds: [
        { sportsbook: 'FanDuel', odds: 160, isHighest: false },
        { sportsbook: 'BetMGM', odds: 155, isLowest: true },
        { sportsbook: 'Caesars', odds: 165, isHighest: true },
      ],
      isFavorited: false,
      confidence: 68,
      projectedValue: 0.38,
      recentForm: 'W-W-L-W-L',
      injuryStatus: 'Healthy',
      lastUpdate: '1 min ago'
    },
    {
      id: '4',
      player: {
        id: 'swanson-d',
        name: 'Dansby Swanson',
        team: 'CHC',
        position: 'SS',
      },
      prop: 'o0.5 Stolen Bases',
      l10Avg: 0.2,
      l5Avg: 0.0,
      odds: 1000,
      streak: 0,
      matchup: 'vs RHP',
      pfRating: 64,
      teamColor: '#0E3386',
      stats: {
        2024: 12,
        2025: 7,
        h2h: 6,
        l5: 0,
        l10: 20,
        l20: 10
      },
      marketOdds: [
        { sportsbook: 'FanDuel', odds: 1000, isLowest: false },
        { sportsbook: 'DraftKings', odds: 950, isLowest: true },
      ],
      isFavorited: false,
      confidence: 64,
      projectedValue: 0.05,
      recentForm: 'L-L-L-L-L',
      injuryStatus: 'Healthy',
      lastUpdate: '4 mins ago'
    },
    {
      id: '5',
      player: {
        id: 'swanson-d',
        name: 'Dansby Swanson',
        team: 'CHC',
        position: 'SS',
      },
      prop: 'o0.5 Home Runs',
      l10Avg: 0.1,
      l5Avg: 0.0,
      odds: 800,
      streak: 0,
      matchup: 'vs RHP',
      pfRating: 51,
      teamColor: '#0E3386',
      stats: {
        2024: 11,
        2025: 15,
        h2h: 13,
        l5: 0,
        l10: 10,
        l20: 10
      },
      marketOdds: [
        { sportsbook: 'FanDuel', odds: 800, isHighest: false },
        { sportsbook: 'BetMGM', odds: 750, isLowest: true },
        { sportsbook: 'ESPN BET', odds: 825, isHighest: true },
      ],
      isFavorited: false,
      confidence: 51,
      projectedValue: 0.12,
      recentForm: 'L-L-L-W-L',
      injuryStatus: 'Healthy',
      lastUpdate: '2 mins ago'
    },
    {
      id: '6',
      player: {
        id: 'swanson-d',
        name: 'Dansby Swanson',
        team: 'CHC',
        position: 'SS',
      },
      prop: 'o1.5 RBIs',
      l10Avg: 0.3,
      l5Avg: 0.4,
      odds: 600,
      streak: 1,
      matchup: 'vs RHP',
      pfRating: 60,
      teamColor: '#0E3386',
      stats: {
        2024: 9,
        2025: 11,
        h2h: 0,
        l5: 20,
        l10: 10,
        l20: 15
      },
      marketOdds: [
        { sportsbook: 'FanDuel', odds: 600, isHighest: false },
        { sportsbook: 'DraftKings', odds: 575, isLowest: true },
        { sportsbook: 'Fanatics', odds: 625, isHighest: true },
      ],
      isFavorited: false,
      confidence: 60,
      projectedValue: 0.18,
      recentForm: 'W-L-W-L-W',
      injuryStatus: 'Healthy',
      lastUpdate: '1 min ago'
    }
  ], []);

  const currentData = data.length > 0 ? data : mockData;

  const getPercentageColor = (percentage: number) => {
    if (percentage >= 60) return 'bg-green-600 text-white';
    if (percentage >= 40) return 'bg-yellow-600 text-white';
    return 'bg-red-600 text-white';
  };

  const formatOdds = (odds: number) => {
    return odds > 0 ? `+${odds}` : `${odds}`;
  };

  const getRatingColor = (rating: number) => {
    if (rating >= 80) return 'text-green-400 border-green-400';
    if (rating >= 70) return 'text-yellow-400 border-yellow-400';
    if (rating >= 60) return 'text-orange-400 border-orange-400';
    return 'text-red-400 border-red-400';
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-900 text-white p-4">
        <div className="animate-pulse">Loading dashboard...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      {/* PropFinder-style Header with Live Updates */}
      <div className="bg-gradient-to-r from-blue-900 via-purple-900 to-blue-900 border-b border-gray-700">
        <div className="max-w-7xl mx-auto px-4 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                  <span className="text-white font-bold text-sm">PF</span>
                </div>
                <div>
                  <h1 className="text-xl font-bold text-white">PropFinder Clone</h1>
                  <div className="text-xs text-blue-200">Real-time prop analysis</div>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                <span className="text-sm text-green-400">Live</span>
              </div>
              <div className="text-sm text-gray-300">
                Last update: {currentData[0]?.lastUpdate || 'Just now'}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation Controls */}
      <div className="bg-gray-800 border-b border-gray-700">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            {/* Left side - Over/Under tabs and View tabs */}
            <div className="flex items-center space-x-4">
              <div className="flex bg-gray-700 rounded-lg p-1">
                <button
                  onClick={() => setSelectedTab('over')}
                  className={`px-4 py-2 rounded-md font-medium transition-colors ${
                    selectedTab === 'over'
                      ? 'bg-purple-600 text-white'
                      : 'text-gray-300 hover:text-white'
                  }`}
                >
                  OVER
                </button>
                <button
                  onClick={() => setSelectedTab('under')}
                  className={`px-4 py-2 rounded-md font-medium transition-colors ${
                    selectedTab === 'under'
                      ? 'bg-purple-600 text-white'
                      : 'text-gray-300 hover:text-white'
                  }`}
                >
                  UNDER
                </button>
              </div>

              {/* View Toggle */}
              <div className="flex bg-gray-700 rounded-lg p-1">
                <button
                  onClick={() => setActiveView('table')}
                  className={`px-4 py-2 rounded-md font-medium transition-colors flex items-center space-x-2 ${
                    activeView === 'table'
                      ? 'bg-blue-600 text-white'
                      : 'text-gray-300 hover:text-white'
                  }`}
                >
                  <BarChart3 className="w-4 h-4" />
                  <span>TABLE</span>
                </button>
                <button
                  onClick={() => setActiveView('cheatsheets')}
                  className={`px-4 py-2 rounded-md font-medium transition-colors flex items-center space-x-2 ${
                    activeView === 'cheatsheets'
                      ? 'bg-blue-600 text-white'
                      : 'text-gray-300 hover:text-white'
                  }`}
                >
                  <Star className="w-4 h-4" />
                  <span>CHEATSHEETS</span>
                </button>
              </div>

              {/* Search Player Dropdown */}
              <div className="relative">
                <div className="flex items-center space-x-2 bg-gray-700 rounded-lg px-3 py-2 min-w-[200px]">
                  <Search className="w-4 h-4 text-gray-400" />
                  <select
                    value={selectedPlayer}
                    onChange={(e) => setSelectedPlayer(e.target.value)}
                    className="bg-transparent text-white border-none outline-none flex-1"
                  >
                    <option value="">Search Player</option>
                    <option value="swanson-d">Dansby Swanson</option>
                    {/* Add more players */}
                  </select>
                  <ChevronDown className="w-4 h-4 text-gray-400" />
                </div>
              </div>

              {/* Categories Dropdown */}
              <div className="relative">
                <div className="flex items-center space-x-2 bg-gray-700 rounded-lg px-3 py-2">
                  <span className="text-gray-300">Categories</span>
                  <select
                    value={selectedCategories}
                    onChange={(e) => setSelectedCategories(parseInt(e.target.value))}
                    className="bg-transparent text-white border-none outline-none"
                  >
                    <option value={17}>17 selected</option>
                    <option value={10}>10 selected</option>
                    <option value={25}>25 selected</option>
                  </select>
                  <ChevronDown className="w-4 h-4 text-gray-400" />
                </div>
              </div>

              {/* Games Dropdown */}
              <div className="relative">
                <div className="flex items-center space-x-2 bg-gray-700 rounded-lg px-3 py-2">
                  <span className="text-gray-300">Games</span>
                  <select
                    value={selectedGames}
                    onChange={(e) => setSelectedGames(parseInt(e.target.value))}
                    className="bg-transparent text-white border-none outline-none"
                  >
                    <option value={1}>1 selected</option>
                    <option value={5}>5 selected</option>
                    <option value={10}>10 selected</option>
                  </select>
                  <ChevronDown className="w-4 h-4 text-gray-400" />
                </div>
              </div>
            </div>

            {/* Right side - Show All Lines toggle */}
            <div className="flex items-center space-x-3">
              <span className="text-gray-300">Show All Lines:</span>
              <button
                onClick={() => setShowAllLines(!showAllLines)}
                className="flex items-center"
              >
                {showAllLines ? (
                  <ToggleRight className="w-6 h-6 text-blue-500" />
                ) : (
                  <ToggleLeft className="w-6 h-6 text-gray-500" />
                )}
              </button>
              <span className="text-sm text-gray-400">6/14</span>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content - Conditional Rendering */}
      <div className="max-w-7xl mx-auto px-4 py-6">
        {activeView === 'cheatsheets' ? (
          <CheatsheetView data={[]} selectedSport={selectedSport} />
        ) : (
          <div>
            {/* Table View */}
            <div className="bg-gray-800 rounded-lg overflow-hidden border border-gray-700">
          {/* Table Header */}
          <div className="grid grid-cols-12 gap-4 px-4 py-3 bg-gray-750 border-b border-gray-700 text-sm font-medium text-gray-300">
            <div className="col-span-1"></div> {/* Heart icon column */}
            <div className="col-span-1">PF Rating</div>
            <div className="col-span-1">Team</div>
            <div className="col-span-1">Pos</div>
            <div className="col-span-2">Player</div>
            <div className="col-span-1">Prop</div>
            <div className="col-span-1">L10 Avg</div>
            <div className="col-span-1">L5 Avg</div>
            <div className="col-span-1">Odds</div>
            <div className="col-span-1">Streak</div>
            <div className="col-span-1">Matchup</div>
            <div className="col-span-1">2024</div>
            <div className="col-span-1">2025</div>
            <div className="col-span-1">H2H</div>
            <div className="col-span-1">L5</div>
            <div className="col-span-1">L10</div>
            <div className="col-span-1">L20</div>
          </div>

          {/* Table Body */}
          <div className="divide-y divide-gray-700">
            {currentData.map((item) => (
              <div
                key={item.id}
                className="grid grid-cols-12 gap-4 px-4 py-3 hover:bg-gray-750 transition-colors items-center"
              >
                {/* Heart Icon */}
                <div className="col-span-1 flex justify-center">
                  <Heart
                    className={`w-5 h-5 cursor-pointer transition-colors ${
                      item.isFavorited ? 'fill-red-500 text-red-500' : 'text-gray-400 hover:text-red-400'
                    }`}
                  />
                </div>

                {/* PF Rating with Confidence */}
                <div className="col-span-1 flex flex-col items-center">
                  <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center text-xs font-bold ${getRatingColor(item.pfRating)}`}>
                    {item.pfRating}
                  </div>
                  <div className="text-xs text-gray-400 mt-1">
                    {item.confidence}% conf
                  </div>
                </div>

                {/* Team */}
                <div className="col-span-1 text-center font-semibold" style={{ color: item.teamColor }}>
                  {item.player.team}
                </div>

                {/* Position */}
                <div className="col-span-1 text-center text-gray-300">
                  {item.player.position}
                </div>

                {/* Player */}
                <div className="col-span-2">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-gray-600 rounded-full flex items-center justify-center">
                      <span className="text-xs font-bold">
                        {item.player.name.split(' ').map(n => n[0]).join('')}
                      </span>
                    </div>
                    <span className="font-medium">{item.player.name}</span>
                    <span className="text-xs text-blue-400">RHB</span>
                  </div>
                </div>

                {/* Prop */}
                <div className="col-span-1 text-center font-medium">
                  {item.prop}
                </div>

                {/* L10 Avg */}
                <div className="col-span-1 text-center">
                  <span className={item.l10Avg >= 1 ? 'text-green-400' : 'text-red-400'}>
                    {item.l10Avg.toFixed(1)}
                  </span>
                </div>

                {/* L5 Avg */}
                <div className="col-span-1 text-center">
                  <span className={item.l5Avg >= 0.5 ? 'text-green-400' : 'text-red-400'}>
                    {item.l5Avg.toFixed(1)}
                  </span>
                </div>

                {/* Odds with Multiple Sportsbooks */}
                <div className="col-span-1 text-center">
                  <div className="bg-gray-700 px-2 py-1 rounded text-sm">
                    <div className="text-white font-semibold">{formatOdds(item.odds)}</div>
                    <div className="text-xs text-gray-400 mb-1">
                      {item.marketOdds.length} books
                    </div>
                    <div className="flex items-center justify-center space-x-1">
                      {item.marketOdds.slice(0, 3).map((book, idx) => (
                        <div key={idx} className={`text-xs px-1 py-0.5 rounded ${
                          book.isHighest ? 'bg-green-600 text-white' : 
                          book.isLowest ? 'bg-red-600 text-white' : 
                          'bg-gray-600 text-gray-300'
                        }`}>
                          {book.sportsbook.substring(0, 2)}
                        </div>
                      ))}
                      <ChevronDown className="w-3 h-3 text-gray-400" />
                    </div>
                  </div>
                </div>

                {/* Streak */}
                <div className="col-span-1 text-center">
                  {item.streak}
                </div>

                {/* Matchup with Recent Form */}
                <div className="col-span-1 text-center">
                  <div className="bg-yellow-600 text-black px-2 py-1 rounded text-xs font-semibold">
                    0.238 BA
                  </div>
                  <div className="text-xs text-gray-400 mt-1">vs RHP</div>
                  <div className="text-xs text-blue-400 mt-1">
                    Form: {item.recentForm}
                  </div>
                </div>

                {/* Stats Columns */}
                <div className="col-span-1 text-center">
                  <div className={`px-2 py-1 rounded text-xs font-semibold ${getPercentageColor(item.stats[2024])}`}>
                    {item.stats[2024]}%
                  </div>
                  <div className="text-xs text-gray-400 mt-1">94/149</div>
                </div>

                <div className="col-span-1 text-center">
                  <div className={`px-2 py-1 rounded text-xs font-semibold ${getPercentageColor(item.stats[2025])}`}>
                    {item.stats[2025]}%
                  </div>
                  <div className="text-xs text-gray-400 mt-1">81/121</div>
                </div>

                <div className="col-span-1 text-center">
                  <div className={`px-2 py-1 rounded text-xs font-semibold ${getPercentageColor(item.stats.h2h)}`}>
                    {item.stats.h2h}%
                  </div>
                  <div className="text-xs text-gray-400 mt-1">20/32</div>
                </div>

                <div className="col-span-1 text-center">
                  <div className={`px-2 py-1 rounded text-xs font-semibold ${getPercentageColor(item.stats.l5)}`}>
                    {item.stats.l5}%
                  </div>
                  <div className="text-xs text-gray-400 mt-1">3/5</div>
                </div>

                <div className="col-span-1 text-center">
                  <div className={`px-2 py-1 rounded text-xs font-semibold ${getPercentageColor(item.stats.l10)}`}>
                    {item.stats.l10}%
                  </div>
                  <div className="text-xs text-gray-400 mt-1">8/10</div>
                </div>

                <div className="col-span-1 text-center">
                  <div className={`px-2 py-1 rounded text-xs font-semibold ${getPercentageColor(item.stats.l20)}`}>
                    {item.stats.l20}%
                  </div>
                  <div className="text-xs text-gray-400 mt-1">13/20</div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Enhanced Footer with PropFinder-style Stats */}
        <div className="mt-6 bg-gray-800 rounded-lg p-4 border border-gray-700">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-6">
              <div className="text-sm">
                <span className="text-gray-400">Total Props:</span>
                <span className="ml-2 font-semibold text-white">{currentData.length}</span>
              </div>
              <div className="text-sm">
                <span className="text-gray-400">High Confidence:</span>
                <span className="ml-2 font-semibold text-green-400">
                  {currentData.filter(item => item.confidence >= 70).length}
                </span>
              </div>
              <div className="text-sm">
                <span className="text-gray-400">Avg PF Rating:</span>
                <span className="ml-2 font-semibold text-blue-400">
                  {Math.round(currentData.reduce((sum, item) => sum + item.pfRating, 0) / currentData.length)}
                </span>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <div className="text-sm">
                <span className="text-gray-400">Sportsbooks:</span>
                <span className="ml-2 font-semibold text-purple-400">
                  {new Set(currentData.flatMap(item => item.marketOdds.map(book => book.sportsbook))).size}
                </span>
              </div>
              <div className="text-xs text-gray-500">
                Powered by PropFinder Clone • Data updates every 30s
              </div>
            </div>
          </div>
        </div>
        )}
      </div>
    </div>
  );
};

export default PropFinderDashboard;